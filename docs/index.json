{
  "blog/fantasy-rogoulike-video1.html": {
    "href": "blog/fantasy-rogoulike-video1.html",
    "title": "基于Fantasy的roguelike项目预览视频01 | blog | Fantasy.Net API Reference",
    "keywords": "roguelike项目预览视频01 C# 服务器框架Fantasy ☢ 开发交流群 656091376 ▷ 视频观看：https://www.bilibili.com/video/BV1Yu4y117b2 上线级登录注册实现： 采用鉴权服务器验证（短连接）、根据用户Id或名字指定一个服务器生成一个Token发送给客户端。 客户端通过Token连接登录到指定的服务器进行登录。ToKen采用JWT的RSA加密、几乎没有破解的可能、能有效的保证服务器的安全性和一致性。 分开鉴权和游戏服务器的关系、比如鉴权是其他平台开发的、如PHP、JAVA等、这些服务器生成Token就可以了。 鉴权是独立的跟其他服务器没有任何关系、就很容易做成多个区或服的鉴权登录服务器、单独部署到一个服务器中、不需要跟随游戏服务器。 鉴权服务器是最容易攻击的、现在如果被攻击了、可以随时在启动一个鉴权就可以了、完全不影响游戏服务器的逻辑。 无缝大地图实现： 使用9宫格根据人物坐标每隔一定时间计算所在格子的位置来渲染周围9个格子的地图。 具体算法:Mathf.RoundToInt(position.x / self.CellSize.x)。 周围地图都使用对象池来进行缓存、避免重复创建。 地图传送实现 分为CopyDispatcher、CopyManage、Copy三部分组成。 当执行传送时会首先去CopyDispatcher服务器申请一个副本、CopyDispatcher会找到当前负载（人数最少）服务器。 请求CopyManage服务器创建一个新的副本、CopyDispatcher把这个服务器添加到定时检测任务、查看这个副本是否过期、如果过期会减少负载。 Copy必须有超时时间、如果时间不够可以通过CopyDispatcher来进行续约，通过copySceneRouteId执行传送逻辑传送到目标副本中。 传送成功后客户端会收到H_G2C_TransferStart消息、客户端执行切换地图的相关逻辑。"
  },
  "case/index.html": {
    "href": "case/index.html",
    "title": "行业典型案例 | case | Fantasy.Net API Reference",
    "keywords": "行业典型案例页面建设中..."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Fantasy 手册 | Fantasy.Net API Reference",
    "keywords": "Fantasy高性能服务器框架 Fantasy服务器框架源于ETServer框架，但Fantasy极为简洁，性能更强，基于Fantasy开发的服务端程序，可用于游戏服务器，物联网服务器，应用程序服务器等。 Fantasy框架易于学习易于使用，只需要在服务端引用Fantasy.Net即可。 目前提供了Unity前端应用参考，前端主要添加Packages中的Fantasy.Unity，也可以按需要添加Fantasy.FairyGUI,Fantasy.HybridCLR。后续计划增加Fantasy Go版本，和Unreal前端应用参考。 Quick Start ▷ Hello Fantasy项目及视频课程 Hello Fantasy是一个.Net的分布式服务器框架Fantasy中自带的一个简单实践demo项目，旨在帮助开发者应用Fantasy框架构建网络游戏或网络通信项目时，快速导入框架package，实现基本的服务端部署，也能快速通过简单的代码了解基本的消息通信。它提供了一组工具和组件，用于处理游戏世界中的各种实体、逻辑和交互。 课程学习地址： https://www.taikr.com/course/1455 也可以在b站免费学习，待上传更新地址... Fantasy项目结构示意图 结构图贡献者： https://github.com/wuguanyang 交流与讨论： 学习交流网站： https://www.taikr.com 讨论QQ群 : Fantasy服务器开发交流群 656091376"
  },
  "docs/practice/config.html": {
    "href": "docs/practice/config.html",
    "title": "配置文件 | config | Fantasy.Net API Reference",
    "keywords": "配置文件页面建设中..."
  },
  "docs/practice/ecs.html": {
    "href": "docs/practice/ecs.html",
    "title": "ECS实战 | ECS | Fantasy.Net API Reference",
    "keywords": "ECS实战页面建设中..."
  },
  "docs/practice/mongodb.html": {
    "href": "docs/practice/mongodb.html",
    "title": "数据库mongodb | mongodb | Fantasy.Net API Reference",
    "keywords": "数据库mongodb页面建设中..."
  },
  "docs/practice/multi.html": {
    "href": "docs/practice/multi.html",
    "title": "多服与地图传送 | multiserver | Fantasy.Net API Reference",
    "keywords": "多服与地图传送页面建设中..."
  },
  "docs/practice/protocol.html": {
    "href": "docs/practice/protocol.html",
    "title": "消息协议 | protocol | Fantasy.Net API Reference",
    "keywords": "消息协议页面建设中..."
  },
  "docs/practice/scene.html": {
    "href": "docs/practice/scene.html",
    "title": "Scene使用 | scene | Fantasy.Net API Reference",
    "keywords": "Scene使用页面建设中..."
  },
  "docs/start/baseprotocol.html": {
    "href": "docs/start/baseprotocol.html",
    "title": "基本消息协议 | baseprotocol | Fantasy.Net API Reference",
    "keywords": "基本消息协议页面建设中..."
  },
  "docs/start/gatelogic.html": {
    "href": "docs/start/gatelogic.html",
    "title": "gate基本逻辑 | gatelogic | Fantasy.Net API Reference",
    "keywords": "gate基本逻辑页面建设中..."
  },
  "docs/start/import.html": {
    "href": "docs/start/import.html",
    "title": "前后端导入package | import | Fantasy.Net API Reference",
    "keywords": "前后端导入package页面建设中..."
  },
  "docs/start/maplogic.html": {
    "href": "docs/start/maplogic.html",
    "title": "map基本逻辑 | maplogic | Fantasy.Net API Reference",
    "keywords": "map基本逻辑页面建设中..."
  },
  "docs/start/move.html": {
    "href": "docs/start/move.html",
    "title": "基本移动同步 | movesync | Fantasy.Net API Reference",
    "keywords": "基本移动同步页面建设中..."
  },
  "docs/start/quickstart.html": {
    "href": "docs/start/quickstart.html",
    "title": "Start Fantasy | quickstart | Fantasy.Net API Reference",
    "keywords": "Start Fantasy页面建设中..."
  },
  "docs/start/realmlogic.html": {
    "href": "docs/start/realmlogic.html",
    "title": "realm基本逻辑 | realmlogic | Fantasy.Net API Reference",
    "keywords": "realm基本逻辑页面建设中..."
  },
  "docs/start/sws.html": {
    "href": "docs/start/sws.html",
    "title": "server/world/scene | sws | Fantasy.Net API Reference",
    "keywords": "server/world/scene页面建设中..."
  },
  "download/index.html": {
    "href": "download/index.html",
    "title": "框架下载 | download | Fantasy.Net API Reference",
    "keywords": "框架下载页面建设中..."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": ""
  },
  "packages/index.html": {
    "href": "packages/index.html",
    "title": "框架程序包 | packages | Fantasy.Net API Reference",
    "keywords": "框架程序包页面建设中..."
  },
  "reference/Fantasy.AClientNetwork.html": {
    "href": "reference/Fantasy.AClientNetwork.html",
    "title": "AClientNetwork 类 | Fantasy.Net API Reference",
    "keywords": "AClientNetwork 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象客户端网络基类。 public abstract class AClientNetwork : ANetwork, IDisposable 继承 object ANetwork AClientNetwork 实现 IDisposable Derived KCPClientNetwork TCPClientNetwork 继承成员 ANetwork.Pack ANetwork.Send(uint, uint, long, long, object) ANetwork.Send(uint, uint, long, long, MemoryStream) ANetwork.RemoveChannel(uint) ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AClientNetwork(Scene, NetworkType, NetworkProtocolType, NetworkTarget) 初始化抽象客户端网络基类的新实例。 protected AClientNetwork(Scene scene, NetworkType networkType, NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 scene Scene 场景对象。 networkType NetworkType 网络类型。 networkProtocolType NetworkProtocolType 网络协议类型。 networkTarget NetworkTarget 网络目标类型。 属性 ChannelId 获取或设置通道ID。 public uint ChannelId { get; protected set; } 属性值 uint 方法 Connect(IPEndPoint, Action, Action, Action, int) 连接到远程终端。 public abstract uint Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint 远程终端的 IPEndPoint。 onConnectComplete Action 连接成功时的回调。 onConnectFail Action 连接失败时的回调。 onConnectDisconnect Action 连接断开时的回调。 connectTimeout int 连接超时时间（毫秒）。 返回 uint 通道ID。 Dispose() 释放网络资源。 public override void Dispose() 事件 OnChangeChannelId 在通道ID更改时触发的事件。 public abstract event Action<uint> OnChangeChannelId 事件类型 Action<uint> OnConnectComplete 在连接完成时触发的事件。 public abstract event Action OnConnectComplete 事件类型 Action OnConnectDisconnect 在连接断开时触发的事件。 public abstract event Action OnConnectDisconnect 事件类型 Action OnConnectFail 在连接失败时触发的事件。 public abstract event Action OnConnectFail 事件类型 Action OnDispose 在网络连接释放时触发的事件。 public abstract event Action OnDispose 事件类型 Action OnReceiveMemoryStream 在接收到内存流时触发的事件。 public abstract event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.ANetwork.html": {
    "href": "reference/Fantasy.ANetwork.html",
    "title": "ANetwork 类 | Fantasy.Net API Reference",
    "keywords": "ANetwork 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象网络基类。 public abstract class ANetwork : IDisposable 继承 object ANetwork 实现 IDisposable Derived AClientNetwork KCPServerNetwork TCPServerNetwork 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ANetwork(Scene, NetworkType, NetworkProtocolType, NetworkTarget) 初始化抽象网络基类的新实例。 protected ANetwork(Scene scene, NetworkType networkType, NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 scene Scene 场景对象。 networkType NetworkType 网络类型。 networkProtocolType NetworkProtocolType 网络协议类型。 networkTarget NetworkTarget 网络目标类型。 字段 Pack 打包消息的委托。 protected readonly Func<uint, long, long, MemoryStream, object, MemoryStream> Pack 字段值 Func<uint, long, long, MemoryStream, object, MemoryStream> 属性 Id 获取网络的唯一ID。 public long Id { get; protected set; } 属性值 long IsDisposed 获取或设置网络是否已被释放。 public bool IsDisposed { get; protected set; } 属性值 bool NetworkMessageScheduler 获取或设置网络消息调度器。 public ANetworkMessageScheduler NetworkMessageScheduler { get; protected set; } 属性值 ANetworkMessageScheduler NetworkProtocolType 获取网络协议类型。 public NetworkProtocolType NetworkProtocolType { get; } 属性值 NetworkProtocolType NetworkTarget 获取网络目标类型。 public NetworkTarget NetworkTarget { get; } 属性值 NetworkTarget NetworkType 获取网络类型。 public NetworkType NetworkType { get; } 属性值 NetworkType Scene 获取场景对象。 public Scene Scene { get; protected set; } 属性值 Scene 方法 Dispose() 释放资源。 public virtual void Dispose() RemoveChannel(uint) 移除通道。 public abstract void RemoveChannel(uint channelId) 参数 channelId uint 通道 ID。 Send(uint, uint, long, long, MemoryStream) 发送消息。 public abstract void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型与操作码。 routeId long 路由 ID。 memoryStream MemoryStream 内存流，用于消息数据。 Send(uint, uint, long, long, object) 发送消息。 public abstract void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型与操作码。 routeId long 路由 ID。 message object 消息对象。"
  },
  "reference/Fantasy.ANetworkChannel.html": {
    "href": "reference/Fantasy.ANetworkChannel.html",
    "title": "ANetworkChannel 类 | Fantasy.Net API Reference",
    "keywords": "ANetworkChannel 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象的网络通道基类。 public abstract class ANetworkChannel 继承 object ANetworkChannel Derived KCPServerNetworkChannel TCPServerNetworkChannel 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ANetworkChannel(Scene, uint, long) 初始化抽象网络通道基类的新实例。 protected ANetworkChannel(Scene scene, uint id, long networkId) 参数 scene Scene 通道所属的场景。 id uint 通道的唯一标识 ID。 networkId long 通道所属的网络 ID。 属性 Id 获取通道的唯一标识 ID。 public uint Id { get; } 属性值 uint IsDisposed 获取通道是否已经被释放。 public bool IsDisposed { get; protected set; } 属性值 bool NetworkId 获取通道所属的网络 ID。 public long NetworkId { get; } 属性值 long PacketParser 获取通道的数据包解析器。 public APacketParser PacketParser { get; protected set; } 属性值 APacketParser RemoteEndPoint 获取通道的远程终端点。 public EndPoint RemoteEndPoint { get; protected set; } 属性值 EndPoint Scene 获取或设置通道所属的场景。 public Scene Scene { get; protected set; } 属性值 Scene 方法 Dispose() 释放通道资源。 public virtual void Dispose() 事件 OnDispose 当通道被释放时触发的事件。 public abstract event Action OnDispose 事件类型 Action OnReceiveMemoryStream 当通道接收到内存流数据包时触发的事件。 public abstract event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.ANetworkMessageScheduler.html": {
    "href": "reference/Fantasy.ANetworkMessageScheduler.html",
    "title": "ANetworkMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "ANetworkMessageScheduler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象网络消息调度器基类，用于处理网络消息的调度和处理逻辑。 public abstract class ANetworkMessageScheduler 继承 object ANetworkMessageScheduler Derived ClientMessageScheduler InnerMessageScheduler OuterMessageScheduler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ANetworkMessageScheduler() protected ANetworkMessageScheduler() 方法 Handler(Session, Type, APackInfo) 处理外部网络消息的抽象方法。 protected abstract FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session 会话对象。 messageType Type 消息类型。 packInfo APackInfo 消息包信息。 返回 FTask 异步任务。 InnerHandler(Session, uint, long, uint, long, Type, object) 处理内部网络消息的抽象方法。 protected abstract FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session 会话对象。 rpcId uint RPC标识。 routeId long 路由标识。 protocolCode uint 协议代码。 routeTypeCode long 路由类型代码。 messageType Type 消息类型。 message object 要处理的消息对象。 返回 FTask 异步任务。 InnerScheduler(Session, uint, long, uint, long, object) 内部调度网络消息的方法。 public FTask InnerScheduler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, object message) 参数 session Session 会话对象。 rpcId uint RPC标识。 routeId long 路由标识。 protocolCode uint 协议代码。 routeTypeCode long 路由类型代码。 message object 要处理的消息对象。 返回 FTask 异步任务。 Scheduler(Session, APackInfo) 调度网络消息的方法。 public FTask Scheduler(Session session, APackInfo packInfo) 参数 session Session 会话对象。 packInfo APackInfo 消息包信息。 返回 FTask 异步任务。"
  },
  "reference/Fantasy.APackInfo.html": {
    "href": "reference/Fantasy.APackInfo.html",
    "title": "APackInfo 类 | Fantasy.Net API Reference",
    "keywords": "APackInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象的数据包信息基类，用于存储解析得到的数据包信息。 public abstract class APackInfo : IDisposable 继承 object APackInfo 实现 IDisposable Derived InnerPackInfo OuterPackInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 APackInfo() protected APackInfo() 字段 IsDisposed 获取一个值，表示是否已经被释放。 public bool IsDisposed 字段值 bool MemoryOwner 内存块的所有者，用于存储数据包的内存数据。 public IMemoryOwner<byte> MemoryOwner 字段值 IMemoryOwner<byte> MessagePacketLength 数据包消息体的长度。 public int MessagePacketLength 字段值 int ProtocolCode 数据包的协议编号。 public uint ProtocolCode 字段值 uint RouteId 数据包的路由 ID。 public long RouteId 字段值 long RouteTypeCode 数据包的路由类型编码。 public long RouteTypeCode 字段值 long RpcId 数据包的 RPC ID。 public uint RpcId 字段值 uint 方法 CreateMemoryStream() 创建用于写入数据包消息体的内存流。 public abstract MemoryStream CreateMemoryStream() 返回 MemoryStream 创建的内存流。 Deserialize(Type) 根据指定类型反序列化消息体。 public abstract object Deserialize(Type messageType) 参数 messageType Type 要反序列化成的类型。 返回 object 反序列化得到的消息体。 Dispose() 释放资源，包括内存块等。 public virtual void Dispose() Rent<T>() 从对象池中获取一个类型为 T 的未释放实例。 public static T Rent<T>() where T : APackInfo 返回 T 获取的未释放实例。 类型参数 T 要获取的实例类型，必须是 APackInfo 的子类。"
  },
  "reference/Fantasy.APacketParser.html": {
    "href": "reference/Fantasy.APacketParser.html",
    "title": "APacketParser 类 | Fantasy.Net API Reference",
    "keywords": "APacketParser 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象的包解析器基类，用于解析网络通信数据包。 public abstract class APacketParser : IDisposable 继承 object APacketParser 实现 IDisposable Derived InnerPacketParser OuterPacketParser 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 APacketParser() protected APacketParser() 字段 MemoryPool 内存池，用于分配内存块。 protected MemoryPool<byte> MemoryPool 字段值 MemoryPool<byte> 属性 IsDisposed 获取一个值，表示是否已经被释放。 protected bool IsDisposed { get; } 属性值 bool 方法 CreatePacketParser(NetworkTarget) 根据网络目标创建相应的包解析器实例。 public static APacketParser CreatePacketParser(NetworkTarget networkTarget) 参数 networkTarget NetworkTarget 网络目标，指示是内部网络通信还是外部网络通信。 返回 APacketParser 创建的包解析器实例。 Dispose() 释放资源，包括内存池等。 public virtual void Dispose() UnPack(CircularBuffer, out APackInfo) 从循环缓冲区解析数据包。 public abstract bool UnPack(CircularBuffer buffer, out APackInfo packInfo) 参数 buffer CircularBuffer 循环缓冲区。 packInfo APackInfo 解析得到的数据包信息。 返回 bool 如果成功解析数据包，则返回 true；否则返回 false。 UnPack(IMemoryOwner<byte>, out APackInfo) 从内存块解析数据包。 public abstract bool UnPack(IMemoryOwner<byte> memoryOwner, out APackInfo packInfo) 参数 memoryOwner IMemoryOwner<byte> 内存块的所有者。 packInfo APackInfo 解析得到的数据包信息。 返回 bool 如果成功解析数据包，则返回 true；否则返回 false。"
  },
  "reference/Fantasy.AProto.html": {
    "href": "reference/Fantasy.AProto.html",
    "title": "AProto 类 | Fantasy.Net API Reference",
    "keywords": "AProto 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供 ProtoBuf 序列化和反序列化支持的抽象基类。 public abstract class AProto 继承 object AProto Derived I_AddressableAdd_Request I_AddressableAdd_Response I_AddressableGet_Request I_AddressableGet_Response I_AddressableLock_Request I_AddressableLock_Response I_AddressableRemove_Request I_AddressableRemove_Response I_AddressableUnLock_Request I_AddressableUnLock_Response LinkEntity_Request LinkEntity_Response PingRequest PingResponse Response RouteResponse 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AProto() protected AProto() 方法 AfterDeserialization() 在反序列化完成后执行的操作，可以在子类中重写以完成初始化。 public virtual void AfterDeserialization() EndInit() 在 AfterDeserialization() 中调用，用于完成子类的初始化操作。 protected virtual void EndInit()"
  },
  "reference/Fantasy.Addressable-2.html": {
    "href": "reference/Fantasy.Addressable-2.html",
    "title": "Addressable<TEntity, TMessage> 类 | Fantasy.Net API Reference",
    "keywords": "Addressable<TEntity, TMessage> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型可寻址路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址路由消息类型的路由。 public abstract class Addressable<TEntity, TMessage> : IRouteMessageHandler where TEntity : Entity where TMessage : IAddressableRouteMessage 类型参数 TEntity 实体类型。 TMessage 可寻址路由消息类型。 继承 object Addressable<TEntity, TMessage> 实现 IRouteMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Addressable() protected Addressable() 方法 Handle(Session, Entity, uint, object) 处理可寻址路由消息。 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session 会话。 entity Entity 实体。 rpcId uint RPC标识。 routeMessage object 可寻址路由消息。 返回 FTask Run(TEntity, TMessage) 运行处理可寻址路由消息。 protected abstract FTask Run(TEntity entity, TMessage message) 参数 entity TEntity 实体。 message TMessage 可寻址路由消息。 返回 FTask Type() 获取消息类型。 public Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.AddressableHelper.html": {
    "href": "reference/Fantasy.AddressableHelper.html",
    "title": "AddressableHelper 类 | Fantasy.Net API Reference",
    "keywords": "AddressableHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供操作地址映射的辅助方法。 public static class AddressableHelper 继承 object AddressableHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 AddAddressable(Scene, long, long, bool) 添加地址映射并返回操作结果。 public static FTask AddAddressable(Scene scene, long addressableId, long routeId, bool isLock = true) 参数 scene Scene 场景实例。 addressableId long 地址映射的唯一标识。 routeId long 路由 ID。 isLock bool 是否锁定。 返回 FTask GetAddressableRouteId(Scene, long) 获取地址映射的路由 ID。 public static FTask<long> GetAddressableRouteId(Scene scene, long addressableId) 参数 scene Scene 场景实例。 addressableId long 地址映射的唯一标识。 返回 FTask<long> 地址映射的路由 ID。 LockAddressable(Scene, long) 锁定指定地址映射。 public static FTask LockAddressable(Scene scene, long addressableId) 参数 scene Scene 场景实例。 addressableId long 地址映射的唯一标识。 返回 FTask RemoveAddressable(Scene, long) 移除指定地址映射。 public static FTask RemoveAddressable(Scene scene, long addressableId) 参数 scene Scene 场景实例。 addressableId long 地址映射的唯一标识。 返回 FTask RemoveAddressable(Server, long) 移除指定地址映射。 public static FTask RemoveAddressable(Server server, long addressableId) 参数 server Server 内部网络Server，可通过Scene.Server获得 addressableId long 地址映射的唯一标识 返回 FTask UnLockAddressable(Scene, long, long, string) 解锁指定地址映射。 public static FTask UnLockAddressable(Scene scene, long addressableId, long routeId, string source) 参数 scene Scene 场景实例。 addressableId long 地址映射的唯一标识。 routeId long 路由 ID。 source string 解锁来源。 返回 FTask"
  },
  "reference/Fantasy.AddressableManageComponent.html": {
    "href": "reference/Fantasy.AddressableManageComponent.html",
    "title": "AddressableManageComponent 类 | Fantasy.Net API Reference",
    "keywords": "AddressableManageComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 地址映射管理组件，用于管理地址映射和锁定。 public sealed class AddressableManageComponent : Entity, IDisposable 继承 object Entity AddressableManageComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Dispose() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableManageComponent() public AddressableManageComponent() 方法 Add(long, long, bool) 添加地址映射。 public FTask Add(long addressableId, long routeId, bool isLock) 参数 addressableId long 地址映射的唯一标识。 routeId long 路由 ID。 isLock bool 是否进行锁定。 返回 FTask Get(long) 获取地址映射的路由 ID。 public FTask<long> Get(long addressableId) 参数 addressableId long 地址映射的唯一标识。 返回 FTask<long> 地址映射的路由 ID。 Lock(long) 锁定地址映射。 public FTask Lock(long addressableId) 参数 addressableId long 地址映射的唯一标识。 返回 FTask Remove(long) 移除地址映射。 public FTask Remove(long addressableId) 参数 addressableId long 地址映射的唯一标识。 返回 FTask UnLock(long, long, string) 解锁地址映射。 public void UnLock(long addressableId, long routeId, string source) 参数 addressableId long 地址映射的唯一标识。 routeId long 新的路由 ID。 source string 解锁来源。"
  },
  "reference/Fantasy.AddressableMessageComponent.html": {
    "href": "reference/Fantasy.AddressableMessageComponent.html",
    "title": "AddressableMessageComponent 类 | Fantasy.Net API Reference",
    "keywords": "AddressableMessageComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可寻址消息组件、挂载了这个组件可以接收Addressable消息 public sealed class AddressableMessageComponent : Entity, IDisposable 继承 object Entity AddressableMessageComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableMessageComponent() public AddressableMessageComponent() 字段 AddressableId 可寻址消息组件的唯一标识。 public long AddressableId 字段值 long 方法 Dispose() 释放资源并解除地址映射。 public override void Dispose() Lock() 锁定可寻址消息组件。 public FTask Lock() 返回 FTask Register(bool) 注册可寻址消息组件。 public FTask Register(bool isLock = true) 参数 isLock bool 是否进行锁定。 返回 FTask UnLock(string) 解锁可寻址消息组件。 public FTask UnLock(string source) 参数 source string 解锁来源。 返回 FTask"
  },
  "reference/Fantasy.AddressableRPC-3.html": {
    "href": "reference/Fantasy.AddressableRPC-3.html",
    "title": "AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 类 | Fantasy.Net API Reference",
    "keywords": "AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型可寻址RPC路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址RPC路由请求类型的路由。 public abstract class AddressableRPC<TEntity, TRouteRequest, TRouteResponse> : IRouteMessageHandler where TEntity : Entity where TRouteRequest : IAddressableRouteRequest where TRouteResponse : IAddressableRouteResponse 类型参数 TEntity 实体类型。 TRouteRequest 可寻址RPC路由请求类型。 TRouteResponse 可寻址RPC路由响应类型。 继承 object AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 实现 IRouteMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableRPC() protected AddressableRPC() 方法 Handle(Session, Entity, uint, object) 处理可寻址RPC路由请求。 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session 会话。 entity Entity 实体。 rpcId uint RPC标识。 routeMessage object 可寻址RPC路由请求。 返回 FTask Run(TEntity, TRouteRequest, TRouteResponse, Action) 运行处理可寻址RPC路由请求。 protected abstract FTask Run(TEntity entity, TRouteRequest request, TRouteResponse response, Action reply) 参数 entity TEntity 实体。 request TRouteRequest 可寻址RPC路由请求。 response TRouteResponse 可寻址RPC路由响应。 reply Action 回复操作。 返回 FTask Type() 获取消息类型。 public Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.AddressableRouteComponent.html": {
    "href": "reference/Fantasy.AddressableRouteComponent.html",
    "title": "AddressableRouteComponent 类 | Fantasy.Net API Reference",
    "keywords": "AddressableRouteComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可寻址路由消息组件，挂载了这个组件可以接收和发送 Addressable 消息。 public sealed class AddressableRouteComponent : Entity, IDisposable 继承 object Entity AddressableRouteComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableRouteComponent() public AddressableRouteComponent() 字段 AddressableRouteMessageLock 用于管理 Addressable 路由消息的锁队列。 public static readonly CoroutineLockQueueType AddressableRouteMessageLock 字段值 CoroutineLockQueueType 属性 AddressableId 可寻址路由消息组件的地址映射 ID，只可在类内部设置，外部只可读取 public long AddressableId { get; } 属性值 long 方法 Call(IAddressableRouteMessage) 调用可寻址路由消息并等待响应。 public FTask<IResponse> Call(IAddressableRouteMessage request) 参数 request IAddressableRouteMessage 可寻址路由请求。 返回 FTask<IResponse> Call(long, Type, MemoryStream) 调用可寻址路由消息并等待响应。 public FTask<IResponse> Call(long routeTypeOpCode, Type requestType, MemoryStream request) 参数 routeTypeOpCode long 路由类型操作码。 requestType Type 请求类型。 request MemoryStream 请求数据。 返回 FTask<IResponse> Dispose() 释放资源并重置路由和地址映射。 public override void Dispose() Send(IAddressableRouteMessage) 发送可寻址路由消息。 public void Send(IAddressableRouteMessage message) 参数 message IAddressableRouteMessage 可寻址路由消息。 Send(long, Type, MemoryStream) 发送可寻址路由消息。 public void Send(long routeTypeOpCode, Type requestType, MemoryStream message) 参数 routeTypeOpCode long 路由类型操作码。 requestType Type 请求类型。 message MemoryStream 消息数据。 SetAddressableId(long) 设置可寻址路由消息组件的地址映射 ID。 public void SetAddressableId(long addressableId) 参数 addressableId long 地址映射 ID。"
  },
  "reference/Fantasy.AppDefine.html": {
    "href": "reference/Fantasy.AppDefine.html",
    "title": "AppDefine 类 | Fantasy.Net API Reference",
    "keywords": "AppDefine 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 控制台程序定义类型 public static class AppDefine 继承 object AppDefine 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 InnerNetwork 内部网络通讯协议类型 public static NetworkProtocolType InnerNetwork 字段值 NetworkProtocolType Options 命令行选项 public static CommandLineOptions Options 字段值 CommandLineOptions 属性 AppId App程序Id public static uint AppId { get; } 属性值 uint"
  },
  "reference/Fantasy.Application.html": {
    "href": "reference/Fantasy.Application.html",
    "title": "Application 类 | Fantasy.Net API Reference",
    "keywords": "Application 类 命名空间 Fantasy 程序集 Fantasy.Net.dll Fantasy 应用程序入口类型 public static class Application 继承 object Application 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Close() 关闭 Fantasy 应用程序，释放 SingletonSystem 中的实例和已加载的程序集。 public static void Close() Initialize() 执行 Fantasy 应用程序的初始化操作。 public static void Initialize() 异常 Exception 当命令行格式异常时抛出。 NotSupportedException 不支持的 AppType 类型异常。 Start() 启动 Fantasy 应用程序。 在发布模式下，只会启动一个指定的 Server。您可以创建一个专门的 Server 来管理其他 Server 的启动。 public static FTask Start() 返回 FTask FTask"
  },
  "reference/Fantasy.AssemblyInfo.html": {
    "href": "reference/Fantasy.AssemblyInfo.html",
    "title": "AssemblyInfo 类 | Fantasy.Net API Reference",
    "keywords": "AssemblyInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll AssemblyInfo提供有关程序集和类型的信息 public sealed class AssemblyInfo 继承 object AssemblyInfo 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AssemblyInfo() 构造函数 public AssemblyInfo() AssemblyInfo(Assembly) 构造函数、可以传递程序集 public AssemblyInfo(Assembly assembly) 参数 assembly Assembly 字段 AssemblyTypeGroupList 程序集类型分组集合，获取一个分组列表，将接口类型映射到实现这些接口的类型。 public readonly OneToManyList<Type, Type> AssemblyTypeGroupList 字段值 OneToManyList<Type, Type> AssemblyTypeList 程序集类型集合，获取一个列表，包含从程序集加载的所有类型。 public readonly List<Type> AssemblyTypeList 字段值 List<Type> 属性 Assembly 获取或设置与此程序集相关联的 Assembly 实例。 public Assembly Assembly { get; } 属性值 Assembly 方法 Load(Assembly) 从指定的程序集加载类型信息并进行分类。 public void Load(Assembly assembly) 参数 assembly Assembly 要加载信息的程序集。 Unload() 卸载程序集的类型信息。 public void Unload()"
  },
  "reference/Fantasy.AssemblyManager.html": {
    "href": "reference/Fantasy.AssemblyManager.html",
    "title": "AssemblyManager 类 | Fantasy.Net API Reference",
    "keywords": "AssemblyManager 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 管理程序集加载和卸载的帮助类。 public static class AssemblyManager 继承 object AssemblyManager 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Dispose() 释放资源，卸载所有加载的程序集。 public static void Dispose() ForEach() 获取所有已加载程序集中的所有类型。 public static IEnumerable<Type> ForEach() 返回 IEnumerable<Type> 所有已加载程序集中的类型。 ForEach(int) 获取指定程序集中的所有类型。 public static IEnumerable<Type> ForEach(int assemblyName) 参数 assemblyName int 程序集名称。 返回 IEnumerable<Type> 指定程序集中的类型。 ForEach(int, Type) 获取指定程序集中实现指定类型的所有类型。 public static IEnumerable<Type> ForEach(int assemblyName, Type findType) 参数 assemblyName int 程序集名称。 findType Type 要查找的基类或接口类型。 返回 IEnumerable<Type> 指定程序集中实现指定类型的类型。 ForEach(Type) 获取所有已加载程序集中实现指定类型的所有类型。 public static IEnumerable<Type> ForEach(Type findType) 参数 findType Type 要查找的基类或接口类型。 返回 IEnumerable<Type> 所有已加载程序集中实现指定类型的类型。 ForEachAssemblyName() 获取所有已加载程序集的名称。 public static IEnumerable<int> ForEachAssemblyName() 返回 IEnumerable<int> 所有已加载程序集的名称。 GetAssembly(int) 获取指定程序集的实例。 public static Assembly GetAssembly(int assemblyName) 参数 assemblyName int 程序集名称。 返回 Assembly 指定程序集的实例，如果未加载则返回 null。 Initialize() 初始化 AssemblyManager，加载当前程序集。 public static void Initialize() Load(int, Assembly) 加载指定的程序集。有MaxValue判断 public static void Load(int assemblyName, Assembly assembly) 参数 assemblyName int 程序集名称。 assembly Assembly 要加载的程序集。 异常 NotSupportedException 当程序集名称为 MaxValue 时，抛出异常。 LoadAssembly(int, Assembly) 加载指定的程序集，并触发相应的事件。 无MaxValue判断。 public static void LoadAssembly(int assemblyName, Assembly assembly) 参数 assemblyName int 程序集名称。 assembly Assembly 要加载的程序集。 事件 OnLoadAssemblyEvent 当程序集加载时触发的事件。 public static event Action<int> OnLoadAssemblyEvent 事件类型 Action<int> OnReLoadAssemblyEvent 当重新加载程序集时触发的事件。 public static event Action<int> OnReLoadAssemblyEvent 事件类型 Action<int> OnUnLoadAssemblyEvent 当程序集卸载时触发的事件。 public static event Action<int> OnUnLoadAssemblyEvent 事件类型 Action<int>"
  },
  "reference/Fantasy.AsyncEventSystem-1.html": {
    "href": "reference/Fantasy.AsyncEventSystem-1.html",
    "title": "AsyncEventSystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "AsyncEventSystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 异步事件系统的抽象基类。 public abstract class AsyncEventSystem<T> : IAsyncEvent 类型参数 T 事件的类型。 继承 object AsyncEventSystem<T> 实现 IAsyncEvent 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AsyncEventSystem() protected AsyncEventSystem() 方法 EventType() 获取事件的类型。 public Type EventType() 返回 Type 事件的类型。 Handler(T) 异步处理事件的方法。 public abstract FTask Handler(T self) 参数 self T 事件的实例。 返回 FTask 表示异步操作的任务。 InvokeAsync(object) 异步调用事件处理方法。 public FTask InvokeAsync(object self) 参数 self object 事件的实例。 返回 FTask 表示异步操作的任务。"
  },
  "reference/Fantasy.AsyncFTaskCompletedMethodBuilder.html": {
    "href": "reference/Fantasy.AsyncFTaskCompletedMethodBuilder.html",
    "title": "AsyncFTaskCompletedMethodBuilder 结构 | Fantasy.Net API Reference",
    "keywords": "AsyncFTaskCompletedMethodBuilder 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于构建已完成的异步任务方法的构建器。 public struct AsyncFTaskCompletedMethodBuilder 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 属性 Task 获取表示已完成的异步任务。 public FTaskCompleted Task { get; } 属性值 FTaskCompleted 方法 AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 在任务完成时异步等待操作完成，并在操作完成时继续异步执行。 public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine 参数 awaiter TAwaiter 等待操作的awaiter实例的引用。 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TAwaiter 等待操作的awaiter类型。 TStateMachine 异步状态机的类型。 AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 在任务完成时异步等待操作完成（不安全），并在操作完成时继续异步执行。 public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine 参数 awaiter TAwaiter 等待操作的awaiter实例的引用。 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TAwaiter 等待操作的awaiter类型。 TStateMachine 异步状态机的类型。 Create() 创建一个新的已完成的异步任务构建器。 public static AsyncFTaskCompletedMethodBuilder Create() 返回 AsyncFTaskCompletedMethodBuilder 已完成的异步任务构建器。 SetException(Exception) 将已完成的异步任务标记为发生异常。 public void SetException(Exception exception) 参数 exception Exception 表示任务失败的异常信息。 SetResult() 将已完成的异步任务标记为已完成。 public void SetResult() SetStateMachine(IAsyncStateMachine) 设置异步状态机的状态。 public void SetStateMachine(IAsyncStateMachine stateMachine) 参数 stateMachine IAsyncStateMachine 异步状态机实例。 Start<TStateMachine>(ref TStateMachine) 启动异步状态机以开始执行已完成的异步任务。 public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine 参数 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TStateMachine 异步状态机的类型。"
  },
  "reference/Fantasy.AsyncFTaskMethodBuilder-1.html": {
    "href": "reference/Fantasy.AsyncFTaskMethodBuilder-1.html",
    "title": "AsyncFTaskMethodBuilder<T> 结构 | Fantasy.Net API Reference",
    "keywords": "AsyncFTaskMethodBuilder<T> 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示用于构建泛型异步任务方法的构建器。 public readonly struct AsyncFTaskMethodBuilder<T> 类型参数 T 异步任务的结果类型。 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 属性 Task 获取由该构建器创建的泛型异步任务。 public FTask<T> Task { get; } 属性值 FTask<T> 方法 AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 在任务完成时异步等待操作完成，并在操作完成时继续异步执行。 public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine 参数 awaiter TAwaiter 等待操作的awaiter实例的引用。 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TAwaiter 等待操作的awaiter类型。 TStateMachine 异步状态机的类型。 AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 在任务完成时异步等待操作完成（不安全），并在操作完成时继续异步执行。 public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine 参数 awaiter TAwaiter 等待操作的awaiter实例的引用。 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TAwaiter 等待操作的awaiter类型。 TStateMachine 异步状态机的类型。 Create() 创建一个新的泛型异步任务构建器。 public static AsyncFTaskMethodBuilder<T> Create() 返回 AsyncFTaskMethodBuilder<T> 泛型异步任务构建器。 SetException(Exception) 将异步任务标记为已完成，但带有异常信息。 public void SetException(Exception exception) 参数 exception Exception 表示任务失败的异常信息。 SetResult(T) 将泛型异步任务标记为已完成，并设置结果值。 public void SetResult(T value) 参数 value T 泛型异步任务的结果值。 SetStateMachine(IAsyncStateMachine) 设置异步状态机的状态。 public void SetStateMachine(IAsyncStateMachine stateMachine) 参数 stateMachine IAsyncStateMachine 异步状态机实例。 Start<TStateMachine>(ref TStateMachine) 启动异步状态机以开始执行泛型异步任务。 public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine 参数 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TStateMachine 异步状态机的类型。"
  },
  "reference/Fantasy.AsyncFTaskMethodBuilder.html": {
    "href": "reference/Fantasy.AsyncFTaskMethodBuilder.html",
    "title": "AsyncFTaskMethodBuilder 结构 | Fantasy.Net API Reference",
    "keywords": "AsyncFTaskMethodBuilder 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于异步任务方法的构建器。 public readonly struct AsyncFTaskMethodBuilder 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 属性 Task 获取由该构建器创建的异步任务。 public FTask Task { get; } 属性值 FTask 方法 AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 在任务完成时异步等待操作完成，并在操作完成时继续异步执行。 public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine 参数 awaiter TAwaiter 等待操作的awaiter实例的引用。 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TAwaiter 等待操作的awaiter类型。 TStateMachine 异步状态机的类型。 AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine) 在任务完成时异步等待操作完成（不安全），并在操作完成时继续异步执行。 public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine 参数 awaiter TAwaiter 等待操作的awaiter实例的引用。 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TAwaiter 等待操作的awaiter类型。 TStateMachine 异步状态机的类型。 Create() 创建一个新的异步任务构建器。 public static AsyncFTaskMethodBuilder Create() 返回 AsyncFTaskMethodBuilder 异步任务构建器。 SetException(Exception) 将异步任务标记为已完成，但带有异常信息。 public void SetException(Exception exception) 参数 exception Exception 表示任务失败的异常信息。 SetResult() 将异步任务标记为已完成。 public void SetResult() SetStateMachine(IAsyncStateMachine) 设置异步状态机的状态。 public void SetStateMachine(IAsyncStateMachine stateMachine) 参数 stateMachine IAsyncStateMachine 异步状态机实例。 Start<TStateMachine>(ref TStateMachine) 启动异步状态机以开始执行异步任务。 public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine 参数 stateMachine TStateMachine 异步状态机实例的引用。 类型参数 TStateMachine 异步状态机的类型。"
  },
  "reference/Fantasy.AwakeSystem-1.html": {
    "href": "reference/Fantasy.AwakeSystem-1.html",
    "title": "AwakeSystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "AwakeSystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示用于实现实体唤醒逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的唤醒操作。 public abstract class AwakeSystem<T> : IAwakeSystem, IEntitiesSystem where T : Entity 类型参数 T 需要处理唤醒逻辑的实体类型。 继承 object AwakeSystem<T> 实现 IAwakeSystem IEntitiesSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AwakeSystem() protected AwakeSystem() 方法 Awake(T) 在实体唤醒时执行的逻辑。子类应实现此方法以处理特定实体类型的唤醒操作。 protected abstract void Awake(T self) 参数 self T 正在唤醒的实体。 EntitiesType() 获取需要处理唤醒逻辑的实体类型。 public Type EntitiesType() 返回 Type 实体类型。 Invoke(Entity) 调用实体的唤醒逻辑。在实体唤醒时，会调用此方法来执行相应的唤醒操作。 public void Invoke(Entity self) 参数 self Entity 正在唤醒的实体。"
  },
  "reference/Fantasy.ByteHelper.html": {
    "href": "reference/Fantasy.ByteHelper.html",
    "title": "ByteHelper 类 | Fantasy.Net API Reference",
    "keywords": "ByteHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供字节操作辅助方法的静态类。 public static class ByteHelper 继承 object ByteHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 MergeBytes(byte[], byte[]) 合并两个字节数组。 public static byte[] MergeBytes(byte[] bytes, byte[] otherBytes) 参数 bytes byte[] 第一个字节数组 otherBytes byte[] 第二个字节数组 返回 byte[] 合并后的字节数组 ReadInt32(FileStream) 从指定的文件流中读取一个 32 位整数。 public static int ReadInt32(FileStream stream) 参数 stream FileStream 返回 int ReadInt32(MemoryStream) 从指定的内存流中读取一个 32 位整数。 public static int ReadInt32(MemoryStream stream) 参数 stream MemoryStream 返回 int ReadInt64(FileStream) 从指定的文件流中读取一个 64 位整数。 public static long ReadInt64(FileStream stream) 参数 stream FileStream 返回 long ReadInt64(MemoryStream) 从指定的内存流中读取一个 64 位整数。 public static long ReadInt64(MemoryStream stream) 参数 stream MemoryStream 返回 long ToHex(byte) 将字节转换为十六进制字符串表示。 public static string ToHex(this byte b) 参数 b byte 返回 string ToHex(byte[]) 将字节数组转换为十六进制字符串表示。 public static string ToHex(this byte[] bytes) 参数 bytes byte[] 返回 string ToHex(byte[], int, int) 将字节数组的指定范围按十六进制格式转换为字符串表示。 public static string ToHex(this byte[] bytes, int offset, int count) 参数 bytes byte[] offset int count int 返回 string ToHex(byte[], string) 将字节数组按指定格式转换为十六进制字符串表示。 public static string ToHex(this byte[] bytes, string format) 参数 bytes byte[] format string 返回 string ToReadableSpeed(long) 将字节数转换为可读的速度表示。 public static string ToReadableSpeed(this long byteCount) 参数 byteCount long 字节数 返回 string 可读的速度表示 ToReadableSpeed(ulong) 将字节数转换为可读的速度表示。 public static string ToReadableSpeed(this ulong byteCount) 参数 byteCount ulong 字节数 返回 string 可读的速度表示 ToStr(byte[]) 将字节数组转换为默认编码的字符串表示。 public static string ToStr(this byte[] bytes) 参数 bytes byte[] 返回 string ToStr(byte[], int, int) 将字节数组的指定范围按默认编码转换为字符串表示。 public static string ToStr(this byte[] bytes, int index, int count) 参数 bytes byte[] index int count int 返回 string Utf8ToStr(byte[]) 将字节数组转换为 UTF-8 编码的字符串表示。 public static string Utf8ToStr(this byte[] bytes) 参数 bytes byte[] 返回 string Utf8ToStr(byte[], int, int) 将字节数组的指定范围按 UTF-8 编码转换为字符串表示。 public static string Utf8ToStr(this byte[] bytes, int index, int count) 参数 bytes byte[] index int count int 返回 string WriteTo(byte[], int, byte) 将字节写入字节数组的指定偏移位置。 public static void WriteTo(this byte[] bytes, int offset, byte num) 参数 bytes byte[] offset int num byte WriteTo(byte[], int, short) 将有符号短整数写入字节数组的指定偏移位置。 public static void WriteTo(this byte[] bytes, int offset, short num) 参数 bytes byte[] offset int num short WriteTo(byte[], int, int) 将有符号整数写入字节数组的指定偏移位置。 public static void WriteTo(this byte[] bytes, int offset, int num) 参数 bytes byte[] offset int num int WriteTo(byte[], int, ushort) 将无符号短整数写入字节数组的指定偏移位置。 public static void WriteTo(this byte[] bytes, int offset, ushort num) 参数 bytes byte[] offset int num ushort WriteTo(byte[], int, uint) 将无符号整数写入字节数组的指定偏移位置。 public static void WriteTo(this byte[] bytes, int offset, uint num) 参数 bytes byte[] offset int num uint"
  },
  "reference/Fantasy.CircularBuffer.html": {
    "href": "reference/Fantasy.CircularBuffer.html",
    "title": "CircularBuffer 类 | Fantasy.Net API Reference",
    "keywords": "CircularBuffer 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 自增式缓存类，继承自 Stream 和 IDisposable 接口。 环形缓存具有自动扩充的特性，但不会收缩，适用于操作不过大的 IO 流。 public sealed class CircularBuffer : Stream, IAsyncDisposable, IDisposable 继承 object MarshalByRefObject Stream CircularBuffer 实现 IAsyncDisposable IDisposable 继承成员 Stream.Null Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.Close() Stream.DisposeAsync() Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.Read(Span<byte>) Stream.ReadByte() Stream.ReadExactly(Span<byte>) Stream.ReadExactly(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.Write(ReadOnlySpan<byte>) Stream.WriteByte(byte) Stream.Synchronized(Stream) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CircularBuffer() public CircularBuffer() 字段 ChunkSize 环形缓存块的默认大小 public const int ChunkSize = 8192 字段值 int 属性 CanRead 获取一个值，指示流是否支持读取操作。 public override bool CanRead { get; } 属性值 bool CanSeek 获取一个值，指示流是否支持寻找操作。 public override bool CanSeek { get; } 属性值 bool CanWrite 获取一个值，指示流是否支持写入操作。 public override bool CanWrite { get; } 属性值 bool First 获取环形缓存的第一个块 public byte[] First { get; } 属性值 byte[] FirstIndex 获取或设置环形缓存的第一个索引位置 public int FirstIndex { get; set; } 属性值 int Last 获取环形缓存的最后一个块 public byte[] Last { get; } 属性值 byte[] LastIndex 获取或设置环形缓存的最后一个索引位置 public int LastIndex { get; set; } 属性值 int Length 获取环形缓存的总长度 public override long Length { get; } 属性值 long Position 获取或设置流中的位置。 public override long Position { get; set; } 属性值 long 方法 AddLast() 向环形缓存中添加一个新的块 public void AddLast() Dispose() 释放 CustomStream 使用的所有资源。 public void Dispose() Flush() 刷新流（在此实现中引发未实现异常）。 public override void Flush() Read(byte[], int, int) 从自定义流中读取数据到指定的缓冲区。 public override int Read(byte[] buffer, int offset, int count) 参数 buffer byte[] 目标缓冲区，用于存储读取的数据。 offset int 目标缓冲区中的起始偏移量。 count int 要读取的字节数。 返回 int 实际读取的字节数。 Read(Stream, int) 从流中读取指定数量的数据到缓存。 public void Read(Stream stream, int count) 参数 stream Stream 源数据流。 count int 要读取的字节数。 Read(Memory<byte>, int) 从缓存中读取指定数量的数据到内存。 public void Read(Memory<byte> memory, int count) 参数 memory Memory<byte> 目标内存。 count int 要读取的字节数。 RemoveFirst() 从环形缓存中移除第一个块 public void RemoveFirst() Seek(long, SeekOrigin) 在流中寻找特定位置（在此实现中引发未实现异常）。 public override long Seek(long offset, SeekOrigin origin) 参数 offset long origin SeekOrigin 返回 long SetLength(long) 设置流的长度（在此实现中引发未实现异常）。 public override void SetLength(long value) 参数 value long Write(byte[]) 将数据从给定的字节数组写入流中。 public void Write(byte[] buffer) 参数 buffer byte[] 包含要写入的数据的字节数组。 Write(byte[], int, int) 将数据从给定的字节数组写入流中。 public override void Write(byte[] buffer, int offset, int count) 参数 buffer byte[] 包含要写入的数据的字节数组。 offset int 开始写入的缓冲区中的索引。 count int 要写入的字节数。 Write(Stream) 将数据从给定的流写入流中。 public void Write(Stream stream) 参数 stream Stream 包含要写入的数据的流。"
  },
  "reference/Fantasy.ClientMessageScheduler.html": {
    "href": "reference/Fantasy.ClientMessageScheduler.html",
    "title": "ClientMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "ClientMessageScheduler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供了一个用于客户端网络消息调度和处理的抽象基类。 public sealed class ClientMessageScheduler : ANetworkMessageScheduler 继承 object ANetworkMessageScheduler ClientMessageScheduler 继承成员 ANetworkMessageScheduler.Scheduler(Session, APackInfo) ANetworkMessageScheduler.InnerScheduler(Session, uint, long, uint, long, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ClientMessageScheduler() public ClientMessageScheduler() 方法 Handler(Session, Type, APackInfo) 处理客户端外部消息的方法。 protected override FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session 客户端会话。 messageType Type 消息类型。 packInfo APackInfo 消息包信息。 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) 处理客户端内部消息的方法。 protected override FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session 客户端会话。 rpcId uint 远程过程调用ID。 routeId long 路由ID。 protocolCode uint 协议编码。 routeTypeCode long 路由类型编码。 messageType Type 消息类型。 message object 消息实例。 返回 FTask"
  },
  "reference/Fantasy.ClientNetworkComponent.html": {
    "href": "reference/Fantasy.ClientNetworkComponent.html",
    "title": "ClientNetworkComponent 类 | Fantasy.Net API Reference",
    "keywords": "ClientNetworkComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 客户端Network网络组件。 public sealed class ClientNetworkComponent : Entity, IDisposable 继承 object Entity ClientNetworkComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ClientNetworkComponent() public ClientNetworkComponent() 属性 Session 获取与客户端网络关联的会话。 public Session Session { get; } 属性值 Session 方法 Connect(IPEndPoint, Action, Action, Action, int) 连接到指定的远程终端。 public void Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint 远程终端的IP地址和端口。 onConnectComplete Action 连接成功时的回调。 onConnectFail Action 连接失败时的回调。 onConnectDisconnect Action 连接断开时的回调。 connectTimeout int 连接超时时间（毫秒）。 Dispose() 释放客户端网络组件及关联的资源。 public override void Dispose() Initialize(NetworkProtocolType, NetworkTarget) 初始化客户端网络组件。 public void Initialize(NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 networkProtocolType NetworkProtocolType 网络协议类型。 networkTarget NetworkTarget 网络目标。"
  },
  "reference/Fantasy.CommandLineOptions.html": {
    "href": "reference/Fantasy.CommandLineOptions.html",
    "title": "CommandLineOptions 类 | Fantasy.Net API Reference",
    "keywords": "CommandLineOptions 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 命令行选项类，用于解析命令行参数。 public class CommandLineOptions 继承 object CommandLineOptions 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CommandLineOptions() public CommandLineOptions() 属性 AppId 进程Id，获取或设置进程的唯一标识符。 public uint AppId { get; set; } 属性值 uint AppType App类型，获取或设置应用程序的类型。 Game - 游戏服务器App Robot - 机器人（暂未支持该功能） public string AppType { get; set; } 属性值 string InnerNetwork 服务器内部网络协议 TCP - 服务器内部之间通讯使用TCP协议 KCP - 服务器内部之间通讯使用KCP协议 public string InnerNetwork { get; set; } 属性值 string Mode 服务器运行模式，获取或设置服务器的运行模式。 Develop - 开发模式（所有Server都在一个进程中） Release - 发布模式（每个Server都在独立的进程中） public string Mode { get; set; } 属性值 string"
  },
  "reference/Fantasy.ConcurrentOneToManyList-2.html": {
    "href": "reference/Fantasy.ConcurrentOneToManyList-2.html",
    "title": "ConcurrentOneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyList<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 并发的一对多列表，用于维护具有相同键的多个值的关联关系。 public class ConcurrentOneToManyList<TKey, TValue> : ConcurrentDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey 关键字的类型，不能为空。 TValue 值的类型。 继承 object ConcurrentDictionary<TKey, List<TValue>> ConcurrentOneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable Derived ConcurrentOneToManyListPool<TKey, TValue> 继承成员 ConcurrentDictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(KeyValuePair<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryUpdate(TKey, List<TValue>, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.Clear() ConcurrentDictionary<TKey, List<TValue>>.ToArray() ConcurrentDictionary<TKey, List<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, Func<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, List<TValue>>, Func<TKey, List<TValue>, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, Func<TKey, List<TValue>>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, List<TValue>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.this[TKey] ConcurrentDictionary<TKey, List<TValue>>.Comparer ConcurrentDictionary<TKey, List<TValue>>.Count ConcurrentDictionary<TKey, List<TValue>>.IsEmpty ConcurrentDictionary<TKey, List<TValue>>.Keys ConcurrentDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyList() 初始化 ConcurrentOneToManyList<TKey, TValue> 类的新实例。 public ConcurrentOneToManyList() ConcurrentOneToManyList(int) 设置最大缓存数量 public ConcurrentOneToManyList(int recyclingLimit) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValue) 向指定键的列表中添加一个值。 public void Add(TKey key, TValue value) 参数 key TKey 要添加值的键。 value TValue 要添加的值。 Clear() 清空当前类的数据，包括从基类继承的数据以及自定义的数据队列。 protected void Clear() Contains(TKey, TValue) 判断指定键的列表是否包含指定值。 public bool Contains(TKey key, TValue value) 参数 key TKey 要搜索的键。 value TValue 要搜索的值。 返回 bool 如果列表包含值，则为 true；否则为 false。 First(TKey) 获取指定键的列表中的第一个值。 public TValue First(TKey key) 参数 key TKey 要获取第一个值的键。 返回 TValue 指定键的列表中的第一个值，如果不存在则为默认值。 RemoveKey(TKey) 从字典中移除指定键以及其关联的列表。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 RemoveValue(TKey, TValue) 从指定键的列表中移除一个值。 public void RemoveValue(TKey key, TValue value) 参数 key TKey 要移除值的键。 value TValue 要移除的值。"
  },
  "reference/Fantasy.ConcurrentOneToManyListPool-2.html": {
    "href": "reference/Fantasy.ConcurrentOneToManyListPool-2.html",
    "title": "ConcurrentOneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyListPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 并发的一对多列表池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 public class ConcurrentOneToManyListPool<TKey, TValue> : ConcurrentOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey 关键字的类型，不能为空。 TValue 值的类型。 继承 object ConcurrentDictionary<TKey, List<TValue>> ConcurrentOneToManyList<TKey, TValue> ConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable IDisposable 继承成员 ConcurrentOneToManyList<TKey, TValue>.Contains(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.Add(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.First(TKey) ConcurrentOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.RemoveKey(TKey) ConcurrentOneToManyList<TKey, TValue>.Clear() ConcurrentDictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(KeyValuePair<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryUpdate(TKey, List<TValue>, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.Clear() ConcurrentDictionary<TKey, List<TValue>>.ToArray() ConcurrentDictionary<TKey, List<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, Func<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, List<TValue>>, Func<TKey, List<TValue>, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, Func<TKey, List<TValue>>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, List<TValue>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.this[TKey] ConcurrentDictionary<TKey, List<TValue>>.Comparer ConcurrentDictionary<TKey, List<TValue>>.Count ConcurrentDictionary<TKey, List<TValue>>.IsEmpty ConcurrentDictionary<TKey, List<TValue>>.Keys ConcurrentDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyListPool() public ConcurrentOneToManyListPool() 方法 Create() 创建一个 ConcurrentOneToManyListPool<TKey, TValue> 的实例。 public static ConcurrentOneToManyListPool<TKey, TValue> Create() 返回 ConcurrentOneToManyListPool<TKey, TValue> 创建的实例。 Dispose() 释放实例占用的资源。 public void Dispose()"
  },
  "reference/Fantasy.ConcurrentOneToManyQueue-2.html": {
    "href": "reference/Fantasy.ConcurrentOneToManyQueue-2.html",
    "title": "ConcurrentOneToManyQueue<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyQueue<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个并发的一对多队列，用于维护具有相同键的多个值的关联关系。 public class ConcurrentOneToManyQueue<TKey, TValue> : ConcurrentDictionary<TKey, Queue<TValue>>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey 关键字的类型，不能为空。 TValue 值的类型。 继承 object ConcurrentDictionary<TKey, Queue<TValue>> ConcurrentOneToManyQueue<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable Derived ConcurrentOneToManyQueuePool<TKey, TValue> 继承成员 ConcurrentDictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(KeyValuePair<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryUpdate(TKey, Queue<TValue>, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.ToArray() ConcurrentDictionary<TKey, Queue<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Func<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, Func<TKey, Queue<TValue>, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Func<TKey, Queue<TValue>>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Queue<TValue>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.this[TKey] ConcurrentDictionary<TKey, Queue<TValue>>.Comparer ConcurrentDictionary<TKey, Queue<TValue>>.Count ConcurrentDictionary<TKey, Queue<TValue>>.IsEmpty ConcurrentDictionary<TKey, Queue<TValue>>.Keys ConcurrentDictionary<TKey, Queue<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyQueue(int) 设置最大缓存数量 public ConcurrentOneToManyQueue(int recyclingLimit = 0) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Clear() 清空当前类的数据，包括从基类继承的键值对字典中的数据以及自定义的队列池。 protected void Clear() Contains(TKey, TValue) 判断指定键的队列是否包含指定值。 public bool Contains(TKey key, TValue value) 参数 key TKey 要搜索的键。 value TValue 要搜索的值。 返回 bool 如果队列包含值，则为 true；否则为 false。 Dequeue(TKey) 从指定键的队列中出队并返回一个值。 public TValue Dequeue(TKey key) 参数 key TKey 要出队的键。 返回 TValue 出队的值，如果队列为空则为默认值。 Enqueue(TKey, TValue) 向指定键的队列中添加一个值。 public void Enqueue(TKey key, TValue value) 参数 key TKey 要添加值的键。 value TValue 要添加的值。 RemoveKey(TKey) 从字典中移除指定键以及其关联的队列。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 TryDequeue(TKey, out TValue) 尝试从指定键的队列中出队一个值。 public bool TryDequeue(TKey key, out TValue value) 参数 key TKey 要出队的键。 value TValue 出队的值，如果队列为空则为默认值。 返回 bool 如果成功出队，则为 true；否则为 false。"
  },
  "reference/Fantasy.ConcurrentOneToManyQueuePool-2.html": {
    "href": "reference/Fantasy.ConcurrentOneToManyQueuePool-2.html",
    "title": "ConcurrentOneToManyQueuePool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyQueuePool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个并发的一对多队列池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 public class ConcurrentOneToManyQueuePool<TKey, TValue> : ConcurrentOneToManyQueue<TKey, TValue>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey 关键字的类型，不能为空。 TValue 值的类型。 继承 object ConcurrentDictionary<TKey, Queue<TValue>> ConcurrentOneToManyQueue<TKey, TValue> ConcurrentOneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable IDisposable 继承成员 ConcurrentOneToManyQueue<TKey, TValue>.Contains(TKey, TValue) ConcurrentOneToManyQueue<TKey, TValue>.Enqueue(TKey, TValue) ConcurrentOneToManyQueue<TKey, TValue>.Dequeue(TKey) ConcurrentOneToManyQueue<TKey, TValue>.TryDequeue(TKey, out TValue) ConcurrentOneToManyQueue<TKey, TValue>.RemoveKey(TKey) ConcurrentOneToManyQueue<TKey, TValue>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(KeyValuePair<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryUpdate(TKey, Queue<TValue>, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.ToArray() ConcurrentDictionary<TKey, Queue<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Func<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, Func<TKey, Queue<TValue>, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Func<TKey, Queue<TValue>>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Queue<TValue>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.this[TKey] ConcurrentDictionary<TKey, Queue<TValue>>.Comparer ConcurrentDictionary<TKey, Queue<TValue>>.Count ConcurrentDictionary<TKey, Queue<TValue>>.IsEmpty ConcurrentDictionary<TKey, Queue<TValue>>.Keys ConcurrentDictionary<TKey, Queue<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyQueuePool() public ConcurrentOneToManyQueuePool() 方法 Create() 创建并返回一个 ConcurrentOneToManyQueuePool<TKey, TValue> 的实例。 public static ConcurrentOneToManyQueuePool<TKey, TValue> Create() 返回 ConcurrentOneToManyQueuePool<TKey, TValue> 创建的实例。 Dispose() 释放当前实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.ConcurrentPool-1.html": {
    "href": "reference/Fantasy.ConcurrentPool-1.html",
    "title": "ConcurrentPool<T> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentPool<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 线程安全的静态通用对象池。 public static class ConcurrentPool<T> 类型参数 T 要存储在对象池中的对象类型。 继承 object ConcurrentPool<T> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 属性 Count 获取对象池中的对象数量。 public static int Count { get; } 属性值 int 方法 Rent() 从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。 public static T Rent() 返回 T 获取的对象实例。 Rent(Func<T>) 从对象池中获取一个对象实例。如果池为空，则使用提供的生成器函数创建一个新的对象。 public static T Rent(Func<T> generator) 参数 generator Func<T> 用于生成新对象的函数。 返回 T 获取的对象实例。 Return(T) 将对象实例返回到对象池中。 public static void Return(T t) 参数 t T 要返回的对象实例。 Return(T, Action<T>) 将对象实例返回到对象池中，并使用提供的重置函数对对象进行重置操作。 public static void Return(T t, Action<T> reset) 参数 t T 要返回的对象实例。 reset Action<T> 用于重置对象的函数。"
  },
  "reference/Fantasy.ConfigTableManage.html": {
    "href": "reference/Fantasy.ConfigTableManage.html",
    "title": "ConfigTableManage 类 | Fantasy.Net API Reference",
    "keywords": "ConfigTableManage 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 配置表管理器 public static class ConfigTableManage 继承 object ConfigTableManage 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 AllMachineConfig 针对不同类型的配置表提供的委托，用于获取全部机器配置信息列表 public static Func<List<MachineConfigInfo>> AllMachineConfig 字段值 Func<List<MachineConfigInfo>> AllSceneConfig 针对不同类型的配置表提供的委托，用于获取全部场景配置信息列表 public static Func<List<SceneConfigInfo>> AllSceneConfig 字段值 Func<List<SceneConfigInfo>> AllServerConfig 针对不同类型的配置表提供的委托，用于获取全部服务器配置信息列表 public static Func<List<ServerConfigInfo>> AllServerConfig 字段值 Func<List<ServerConfigInfo>> MachineConfig 针对不同类型的配置表提供的委托，用于获取单个机器配置信息 public static Func<uint, MachineConfigInfo> MachineConfig 字段值 Func<uint, MachineConfigInfo> SceneConfig 针对不同类型的配置表提供的委托，用于获取单个场景配置信息 public static Func<uint, SceneConfigInfo> SceneConfig 字段值 Func<uint, SceneConfigInfo> ServerConfig 针对不同类型的配置表提供的委托，用于获取单个服务器配置信息 public static Func<uint, ServerConfigInfo> ServerConfig 字段值 Func<uint, ServerConfigInfo> WorldConfigInfo 针对不同类型的配置表提供的委托，用于获取单个世界配置信息 public static Func<uint, WorldConfigInfo> WorldConfigInfo 字段值 Func<uint, WorldConfigInfo> 方法 Load<T>() 加载配置表数据 public static T Load<T>() where T : AProto 返回 T 配置表数据 类型参数 T 配置表类型"
  },
  "reference/Fantasy.ConnectEntityHandler.html": {
    "href": "reference/Fantasy.ConnectEntityHandler.html",
    "title": "ConnectEntityHandler 类 | Fantasy.Net API Reference",
    "keywords": "ConnectEntityHandler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll public sealed class ConnectEntityHandler : RouteRPC<Entity, LinkEntity_Request, LinkEntity_Response>, IRouteMessageHandler 继承 object RouteRPC<Entity, LinkEntity_Request, LinkEntity_Response> ConnectEntityHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Entity, LinkEntity_Request, LinkEntity_Response>.Type() RouteRPC<Entity, LinkEntity_Request, LinkEntity_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ConnectEntityHandler() public ConnectEntityHandler() 方法 Run(Entity, LinkEntity_Request, LinkEntity_Response, Action) 运行路由消息处理逻辑。 protected override FTask Run(Entity entity, LinkEntity_Request request, LinkEntity_Response response, Action reply) 参数 entity Entity 实体对象。 request LinkEntity_Request 请求路由消息。 response LinkEntity_Response 响应路由消息。 reply Action 发送响应的方法。 返回 FTask 异步任务。"
  },
  "reference/Fantasy.Core.ACustomExport.CustomExportType.html": {
    "href": "reference/Fantasy.Core.ACustomExport.CustomExportType.html",
    "title": "ACustomExport.CustomExportType 枚举 | Fantasy.Net API Reference",
    "keywords": "ACustomExport.CustomExportType 枚举 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll protected enum ACustomExport.CustomExportType 扩展方法 JsonHelper.ToJson<T>(T) 字段 Client = 0 Server = 1"
  },
  "reference/Fantasy.Core.ACustomExport.html": {
    "href": "reference/Fantasy.Core.ACustomExport.html",
    "title": "ACustomExport 类 | Fantasy.Net API Reference",
    "keywords": "ACustomExport 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public abstract class ACustomExport : ICustomExport 继承 object ACustomExport 实现 ICustomExport Derived SceneTypeConfigToEnum 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ACustomExport() protected ACustomExport() 方法 Run() public abstract void Run() Write(string, string, CustomExportType) protected void Write(string fileName, string fileContent, ACustomExport.CustomExportType customExportType) 参数 fileName string fileContent string customExportType ACustomExport.CustomExportType"
  },
  "reference/Fantasy.Core.ConfigTableManage.html": {
    "href": "reference/Fantasy.Core.ConfigTableManage.html",
    "title": "ConfigTableManage 类 | Fantasy.Net API Reference",
    "keywords": "ConfigTableManage 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public static class ConfigTableManage 继承 object ConfigTableManage 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 AllMachineConfig public static Func<List<MachineConfigInfo>> AllMachineConfig 字段值 Func<List<MachineConfigInfo>> AllSceneConfig public static Func<List<SceneConfigInfo>> AllSceneConfig 字段值 Func<List<SceneConfigInfo>> AllServerConfig public static Func<List<ServerConfigInfo>> AllServerConfig 字段值 Func<List<ServerConfigInfo>> MachineConfig public static Func<uint, MachineConfigInfo> MachineConfig 字段值 Func<uint, MachineConfigInfo> SceneConfig public static Func<uint, SceneConfigInfo> SceneConfig 字段值 Func<uint, SceneConfigInfo> ServerConfig public static Func<uint, ServerConfigInfo> ServerConfig 字段值 Func<uint, ServerConfigInfo> WorldConfigInfo public static Func<uint, WorldConfigInfo> WorldConfigInfo 字段值 Func<uint, WorldConfigInfo> 方法 Load<T>() public static T Load<T>() where T : AProto 返回 T 类型参数 T"
  },
  "reference/Fantasy.Core.CoreErrorCode.html": {
    "href": "reference/Fantasy.Core.CoreErrorCode.html",
    "title": "CoreErrorCode 类 | Fantasy.Net API Reference",
    "keywords": "CoreErrorCode 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public class CoreErrorCode 继承 object CoreErrorCode 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoreErrorCode() public CoreErrorCode() 字段 ErrNotFoundRoute public const uint ErrNotFoundRoute = 100000003 字段值 uint ErrRouteTimeout public const uint ErrRouteTimeout = 100000004 字段值 uint ErrRpcFail public const uint ErrRpcFail = 100000002 字段值 uint Error_NotFindEntity public const uint Error_NotFindEntity = 100000008 字段值 uint Error_Transfer public const uint Error_Transfer = 100000009 字段值 uint"
  },
  "reference/Fantasy.Core.CoroutineLockQueue.html": {
    "href": "reference/Fantasy.Core.CoroutineLockQueue.html",
    "title": "CoroutineLockQueue 类 | Fantasy.Net API Reference",
    "keywords": "CoroutineLockQueue 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class CoroutineLockQueue : IDisposable 继承 object CoroutineLockQueue 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoroutineLockQueue() public CoroutineLockQueue() 属性 CoroutineLockQueueType public CoroutineLockQueueType CoroutineLockQueueType { get; } 属性值 CoroutineLockQueueType Key public long Key { get; } 属性值 long 方法 Create(long, int, CoroutineLockQueueType) public static CoroutineLockQueue Create(long key, int time, CoroutineLockQueueType coroutineLockQueueType) 参数 key long time int coroutineLockQueueType CoroutineLockQueueType 返回 CoroutineLockQueue Dispose() public void Dispose() Lock(string, int) public FTask<WaitCoroutineLock> Lock(string tag, int time) 参数 tag string time int 返回 FTask<WaitCoroutineLock> Release() public void Release()"
  },
  "reference/Fantasy.Core.CoroutineLockQueueType.html": {
    "href": "reference/Fantasy.Core.CoroutineLockQueueType.html",
    "title": "CoroutineLockQueueType 类 | Fantasy.Net API Reference",
    "keywords": "CoroutineLockQueueType 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class CoroutineLockQueueType 继承 object CoroutineLockQueueType 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoroutineLockQueueType(string) public CoroutineLockQueueType(string name) 参数 name string 字段 Name public readonly string Name 字段值 string 方法 Lock(long, string, int) public FTask<WaitCoroutineLock> Lock(long key, string tag = null, int time = 10000) 参数 key long tag string time int 返回 FTask<WaitCoroutineLock> Remove(long) public void Remove(long key) 参数 key long"
  },
  "reference/Fantasy.Core.CoroutineLockTimeout.html": {
    "href": "reference/Fantasy.Core.CoroutineLockTimeout.html",
    "title": "CoroutineLockTimeout 结构 | Fantasy.Net API Reference",
    "keywords": "CoroutineLockTimeout 结构 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public struct CoroutineLockTimeout 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 字段 LockId public long LockId 字段值 long WaitCoroutineLock public WaitCoroutineLock WaitCoroutineLock 字段值 WaitCoroutineLock"
  },
  "reference/Fantasy.Core.DataBase.IDateBase.html": {
    "href": "reference/Fantasy.Core.DataBase.IDateBase.html",
    "title": "IDateBase 接口 | Fantasy.Net API Reference",
    "keywords": "IDateBase 接口 命名空间 Fantasy.Core.DataBase 程序集 Fantasy.Net.dll public interface IDateBase 扩展方法 JsonHelper.ToJson<T>(T) 字段 DataBaseLock public static readonly CoroutineLockQueueType DataBaseLock 字段值 CoroutineLockQueueType 方法 Count<T>(Expression<Func<T, bool>>, string) FTask<long> Count<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Count<T>(string) FTask<long> Count<T>(string collection = null) where T : Entity 参数 collection string 返回 FTask<long> 类型参数 T CreateDB(Type) FTask CreateDB(Type type) 参数 type Type 返回 FTask CreateDB<T>() FTask CreateDB<T>() where T : Entity 返回 FTask 类型参数 T CreateIndex<T>(params object[]) FTask CreateIndex<T>(params object[] keys) where T : Entity 参数 keys object[] 返回 FTask 类型参数 T CreateIndex<T>(string, params object[]) FTask CreateIndex<T>(string collection, params object[] keys) where T : Entity 参数 collection string keys object[] 返回 FTask 类型参数 T Exist<T>(Expression<Func<T, bool>>, string) FTask<bool> Exist<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<bool> 类型参数 T Exist<T>(string) FTask<bool> Exist<T>(string collection = null) where T : Entity 参数 collection string 返回 FTask<bool> 类型参数 T First<T>(Expression<Func<T, bool>>, string) FTask<T?> First<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<T> 类型参数 T First<T>(string, string[], string) FTask<T> First<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string cols string[] collection string 返回 FTask<T> 类型参数 T Initialize(string, string) IDateBase Initialize(string connectionString, string dbName) 参数 connectionString string dbName string 返回 IDateBase InsertBatch<T>(IEnumerable<T>, string) FTask InsertBatch<T>(IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 list IEnumerable<T> collection string 返回 FTask 类型参数 T InsertBatch<T>(object, IEnumerable<T>, string) FTask InsertBatch<T>(object transactionSession, IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 transactionSession object list IEnumerable<T> collection string 返回 FTask 类型参数 T Insert<T>(T, string) FTask Insert<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T collection string 返回 FTask 类型参数 T Query(long, List<string>, List<Entity>) FTask Query(long id, List<string> collectionNames, List<Entity> result) 参数 id long collectionNames List<string> result List<Entity> 返回 FTask QueryByPageOrderBy<T>(Expression<Func<T, bool>>, int, int, Expression<Func<T, object>>, bool, string) FTask<List<T>> QueryByPageOrderBy<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int orderByExpression Expression<Func<T, object>> isAsc bool collection string 返回 FTask<List<T>> 类型参数 T QueryByPage<T>(Expression<Func<T, bool>>, int, int, string) FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int collection string 返回 FTask<List<T>> 类型参数 T QueryByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int cols string[] collection string 返回 FTask<List<T>> 类型参数 T QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string) FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int collection string 返回 FTask<(int count, List<T> dates)> 类型参数 T QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int cols string[] collection string 返回 FTask<(int count, List<T> dates)> 类型参数 T QueryJson<T>(long, string, string) FTask<List<T>> QueryJson<T>(long taskId, string json, string collection = null) where T : Entity 参数 taskId long json string collection string 返回 FTask<List<T>> 类型参数 T QueryJson<T>(string, string) FTask<List<T>> QueryJson<T>(string json, string collection = null) where T : Entity 参数 json string collection string 返回 FTask<List<T>> 类型参数 T QueryJson<T>(string, string[], string) FTask<List<T>> QueryJson<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string cols string[] collection string 返回 FTask<List<T>> 类型参数 T QueryNotLock<T>(long, string) FTask<T> QueryNotLock<T>(long id, string collection = null) where T : Entity 参数 id long collection string 返回 FTask<T> 类型参数 T QueryOrderBy<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, bool, string) FTask<List<T>> QueryOrderBy<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> orderByExpression Expression<Func<T, object>> isAsc bool collection string 返回 FTask<List<T>> 类型参数 T Query<T>(long, string) FTask<T> Query<T>(long id, string collection = null) where T : Entity 参数 id long collection string 返回 FTask<T> 类型参数 T Query<T>(Expression<Func<T, bool>>, string) FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<List<T>> 类型参数 T Query<T>(Expression<Func<T, bool>>, string[], string) FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string[] cols, string collection = null) where T : class 参数 filter Expression<Func<T, bool>> cols string[] collection string 返回 FTask<List<T>> 类型参数 T Remove<T>(long, Expression<Func<T, bool>>, string) FTask<long> Remove<T>(long id, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Remove<T>(long, object, Expression<Func<T, bool>>, string) FTask<long> Remove<T>(long id, object transactionSession, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long transactionSession object filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Remove<T>(long, string) FTask<long> Remove<T>(long id, string collection = null) where T : Entity, new() 参数 id long collection string 返回 FTask<long> 类型参数 T Remove<T>(object, long, string) FTask<long> Remove<T>(object transactionSession, long id, string collection = null) where T : Entity, new() 参数 transactionSession object id long collection string 返回 FTask<long> 类型参数 T Save(long, List<Entity>) FTask Save(long id, List<Entity> entities) 参数 id long entities List<Entity> 返回 FTask Save<T>(object, T, string) FTask Save<T>(object transactionSession, T entity, string collection = null) where T : Entity 参数 transactionSession object entity T collection string 返回 FTask 类型参数 T Save<T>(T, string) FTask Save<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T collection string 返回 FTask 类型参数 T Sum<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, string) FTask<long> Sum<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> sumExpression, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> sumExpression Expression<Func<T, object>> collection string 返回 FTask<long> 类型参数 T"
  },
  "reference/Fantasy.Core.DataBase.MongoDataBase.html": {
    "href": "reference/Fantasy.Core.DataBase.MongoDataBase.html",
    "title": "MongoDataBase 类 | Fantasy.Net API Reference",
    "keywords": "MongoDataBase 类 命名空间 Fantasy.Core.DataBase 程序集 Fantasy.Net.dll public sealed class MongoDataBase : IDateBase 继承 object MongoDataBase 实现 IDateBase 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MongoDataBase() public MongoDataBase() 方法 Count<T>(Expression<Func<T, bool>>, string) public FTask<long> Count<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Count<T>(string) public FTask<long> Count<T>(string collection = null) where T : Entity 参数 collection string 返回 FTask<long> 类型参数 T CreateDB(Type) public FTask CreateDB(Type type) 参数 type Type 返回 FTask CreateDB<T>() public FTask CreateDB<T>() where T : Entity 返回 FTask 类型参数 T CreateIndex<T>(params object[]) public FTask CreateIndex<T>(params object[] keys) where T : Entity 参数 keys object[] 返回 FTask 类型参数 T CreateIndex<T>(string, params object[]) public FTask CreateIndex<T>(string collection, params object[] keys) where T : Entity 参数 collection string keys object[] 返回 FTask 类型参数 T Exist<T>(Expression<Func<T, bool>>, string) public FTask<bool> Exist<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<bool> 类型参数 T Exist<T>(string) public FTask<bool> Exist<T>(string collection = null) where T : Entity 参数 collection string 返回 FTask<bool> 类型参数 T First<T>(Expression<Func<T, bool>>, string) public FTask<T?> First<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<T> 类型参数 T First<T>(string, string[], string) public FTask<T> First<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string cols string[] collection string 返回 FTask<T> 类型参数 T Initialize(string, string) public IDateBase Initialize(string connectionString, string dbName) 参数 connectionString string dbName string 返回 IDateBase InsertBatch<T>(IEnumerable<T>, string) public FTask InsertBatch<T>(IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 list IEnumerable<T> collection string 返回 FTask 类型参数 T InsertBatch<T>(object, IEnumerable<T>, string) public FTask InsertBatch<T>(object transactionSession, IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 transactionSession object list IEnumerable<T> collection string 返回 FTask 类型参数 T Insert<T>(T, string) public FTask Insert<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T collection string 返回 FTask 类型参数 T Query(long, List<string>, List<Entity>) public FTask Query(long id, List<string> collectionNames, List<Entity> result) 参数 id long collectionNames List<string> result List<Entity> 返回 FTask QueryByPageOrderBy<T>(Expression<Func<T, bool>>, int, int, Expression<Func<T, object>>, bool, string) public FTask<List<T>> QueryByPageOrderBy<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int orderByExpression Expression<Func<T, object>> isAsc bool collection string 返回 FTask<List<T>> 类型参数 T QueryByPage<T>(Expression<Func<T, bool>>, int, int, string) public FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int collection string 返回 FTask<List<T>> 类型参数 T QueryByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) public FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int cols string[] collection string 返回 FTask<List<T>> 类型参数 T QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string) public FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int collection string 返回 FTask<(int count, List<T> dates)> 类型参数 T QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) public FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int cols string[] collection string 返回 FTask<(int count, List<T> dates)> 类型参数 T QueryJson<T>(long, string, string) public FTask<List<T>> QueryJson<T>(long taskId, string json, string collection = null) where T : Entity 参数 taskId long json string collection string 返回 FTask<List<T>> 类型参数 T QueryJson<T>(string, string) public FTask<List<T>> QueryJson<T>(string json, string collection = null) where T : Entity 参数 json string collection string 返回 FTask<List<T>> 类型参数 T QueryJson<T>(string, string[], string) public FTask<List<T>> QueryJson<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string cols string[] collection string 返回 FTask<List<T>> 类型参数 T QueryNotLock<T>(long, string) public FTask<T> QueryNotLock<T>(long id, string collection = null) where T : Entity 参数 id long collection string 返回 FTask<T> 类型参数 T QueryOrderBy<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, bool, string) public FTask<List<T>> QueryOrderBy<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> orderByExpression Expression<Func<T, object>> isAsc bool collection string 返回 FTask<List<T>> 类型参数 T Query<T>(long, string) public FTask<T> Query<T>(long id, string collection = null) where T : Entity 参数 id long collection string 返回 FTask<T> 类型参数 T Query<T>(Expression<Func<T, bool>>, string) public FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<List<T>> 类型参数 T Query<T>(Expression<Func<T, bool>>, string[], string) public FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string[] cols, string collection = null) where T : class 参数 filter Expression<Func<T, bool>> cols string[] collection string 返回 FTask<List<T>> 类型参数 T Remove<T>(long, Expression<Func<T, bool>>, string) public FTask<long> Remove<T>(long id, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Remove<T>(long, object, Expression<Func<T, bool>>, string) public FTask<long> Remove<T>(long id, object transactionSession, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long transactionSession object filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Remove<T>(long, string) public FTask<long> Remove<T>(long id, string collection = null) where T : Entity, new() 参数 id long collection string 返回 FTask<long> 类型参数 T Remove<T>(object, long, string) public FTask<long> Remove<T>(object transactionSession, long id, string collection = null) where T : Entity, new() 参数 transactionSession object id long collection string 返回 FTask<long> 类型参数 T Save(long, List<Entity>) public FTask Save(long id, List<Entity> entities) 参数 id long entities List<Entity> 返回 FTask Save<T>(object, T, string) public FTask Save<T>(object transactionSession, T entity, string collection = null) where T : Entity 参数 transactionSession object entity T collection string 返回 FTask 类型参数 T Save<T>(T, string) public FTask Save<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T collection string 返回 FTask 类型参数 T Sum<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, string) public FTask<long> Sum<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> sumExpression, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> sumExpression Expression<Func<T, object>> collection string 返回 FTask<long> 类型参数 T"
  },
  "reference/Fantasy.Core.DataBase.World.html": {
    "href": "reference/Fantasy.Core.DataBase.World.html",
    "title": "World 类 | Fantasy.Net API Reference",
    "keywords": "World 类 命名空间 Fantasy.Core.DataBase 程序集 Fantasy.Net.dll public sealed class World 继承 object World 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 World(WorldConfigInfo) public World(WorldConfigInfo worldConfigInfo) 参数 worldConfigInfo WorldConfigInfo 属性 Config public WorldConfigInfo Config { get; } 属性值 WorldConfigInfo DateBase public IDateBase DateBase { get; } 属性值 IDateBase Id public uint Id { get; } 属性值 uint 方法 Create(uint) public static World Create(uint id) 参数 id uint 返回 World"
  },
  "reference/Fantasy.Core.DataBase.WorldConfigInfo.html": {
    "href": "reference/Fantasy.Core.DataBase.WorldConfigInfo.html",
    "title": "WorldConfigInfo 类 | Fantasy.Net API Reference",
    "keywords": "WorldConfigInfo 类 命名空间 Fantasy.Core.DataBase 程序集 Fantasy.Net.dll public class WorldConfigInfo 继承 object WorldConfigInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 WorldConfigInfo() public WorldConfigInfo() 属性 DbConnection public string DbConnection { get; set; } 属性值 string DbName public string DbName { get; set; } 属性值 string DbType public string DbType { get; set; } 属性值 string Id public uint Id { get; set; } 属性值 uint WorldName public string WorldName { get; set; } 属性值 string"
  },
  "reference/Fantasy.Core.DataBase.html": {
    "href": "reference/Fantasy.Core.DataBase.html",
    "title": "Fantasy.Core.DataBase 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.Core.DataBase 命名空间 类 MongoDataBase World WorldConfigInfo 接口 IDateBase"
  },
  "reference/Fantasy.Core.Define.html": {
    "href": "reference/Fantasy.Core.Define.html",
    "title": "Define 类 | Fantasy.Net API Reference",
    "keywords": "Define 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public static class Define 继承 object Define 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 ClientCustomExportDirectory public static string ClientCustomExportDirectory 字段值 string ColTypeSet public static readonly HashSet<string> ColTypeSet 字段值 HashSet<string> CustomExportAssembly public static string CustomExportAssembly 字段值 string ExcelClientBinaryDirectory public static string ExcelClientBinaryDirectory 字段值 string ExcelClientFileDirectory public static string ExcelClientFileDirectory 字段值 string ExcelClientJsonDirectory public static string ExcelClientJsonDirectory 字段值 string ExcelProgramPath public static string ExcelProgramPath 字段值 string ExcelServerBinaryDirectory public static string ExcelServerBinaryDirectory 字段值 string ExcelServerFileDirectory public static string ExcelServerFileDirectory 字段值 string ExcelServerJsonDirectory public static string ExcelServerJsonDirectory 字段值 string ExcelTemplatePath public static string ExcelTemplatePath 字段值 string ExcelVersionFile public static string ExcelVersionFile 字段值 string ProtoBufClientDirectory public static string ProtoBufClientDirectory 字段值 string ProtoBufDirectory public static string ProtoBufDirectory 字段值 string ProtoBufServerDirectory public static string ProtoBufServerDirectory 字段值 string ProtoBufTemplatePath public static string ProtoBufTemplatePath 字段值 string ServerCustomExportDirectory public static string ServerCustomExportDirectory 字段值 string SessionIdleCheckerInterval public static int SessionIdleCheckerInterval 字段值 int SessionIdleCheckerTimeout public static int SessionIdleCheckerTimeout 字段值 int SplitChars public static readonly char[] SplitChars 字段值 char[] 属性 ExcelTemplate public static string ExcelTemplate { get; } 属性值 string"
  },
  "reference/Fantasy.Core.DynamicAssembly.html": {
    "href": "reference/Fantasy.Core.DynamicAssembly.html",
    "title": "DynamicAssembly 类 | Fantasy.Net API Reference",
    "keywords": "DynamicAssembly 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public static class DynamicAssembly 继承 object DynamicAssembly 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 CreateInstance(Type) public static AProto CreateInstance(Type configType) 参数 configType Type 返回 AProto GetDynamicInfo(Assembly, string) public static DynamicConfigDataType GetDynamicInfo(Assembly dynamicAssembly, string tableName) 参数 dynamicAssembly Assembly tableName string 返回 DynamicConfigDataType Load(string) public static Assembly Load(string path) 参数 path string 返回 Assembly"
  },
  "reference/Fantasy.Core.DynamicConfigDataType.html": {
    "href": "reference/Fantasy.Core.DynamicConfigDataType.html",
    "title": "DynamicConfigDataType 类 | Fantasy.Net API Reference",
    "keywords": "DynamicConfigDataType 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public class DynamicConfigDataType 继承 object DynamicConfigDataType 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DynamicConfigDataType() public DynamicConfigDataType() 字段 ConfigData public AProto ConfigData 字段值 AProto ConfigDataType public Type ConfigDataType 字段值 Type ConfigType public Type ConfigType 字段值 Type Json public StringBuilder Json 字段值 StringBuilder Method public MethodInfo Method 字段值 MethodInfo Obj public object Obj 字段值 object"
  },
  "reference/Fantasy.Core.ExcelExporter.html": {
    "href": "reference/Fantasy.Core.ExcelExporter.html",
    "title": "ExcelExporter 类 | Fantasy.Net API Reference",
    "keywords": "ExcelExporter 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class ExcelExporter 继承 object ExcelExporter 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ExcelExporter(ExportType) public ExcelExporter(ExportType exportType) 参数 exportType ExportType 方法 LoadExcel(string, bool) public ExcelWorksheet LoadExcel(string name, bool isAddToDic) 参数 name string isAddToDic bool 返回 ExcelWorksheet"
  },
  "reference/Fantasy.Core.ExcelTable.html": {
    "href": "reference/Fantasy.Core.ExcelTable.html",
    "title": "ExcelTable 类 | Fantasy.Net API Reference",
    "keywords": "ExcelTable 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class ExcelTable 继承 object ExcelTable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ExcelTable(string) public ExcelTable(string name) 参数 name string 字段 ClientColInfos public readonly SortedDictionary<string, List<int>> ClientColInfos 字段值 SortedDictionary<string, List<int>> Name public readonly string Name 字段值 string ServerColInfos public readonly SortedDictionary<string, List<int>> ServerColInfos 字段值 SortedDictionary<string, List<int>>"
  },
  "reference/Fantasy.Core.ExportInfo.html": {
    "href": "reference/Fantasy.Core.ExportInfo.html",
    "title": "ExportInfo 类 | Fantasy.Net API Reference",
    "keywords": "ExportInfo 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public class ExportInfo 继承 object ExportInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ExportInfo() public ExportInfo() 字段 FileInfo public FileInfo FileInfo 字段值 FileInfo Name public string Name 字段值 string"
  },
  "reference/Fantasy.Core.ExportType.html": {
    "href": "reference/Fantasy.Core.ExportType.html",
    "title": "ExportType 枚举 | Fantasy.Net API Reference",
    "keywords": "ExportType 枚举 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public enum ExportType 扩展方法 JsonHelper.ToJson<T>(T) 字段 AllExcel = 3 AllExcelIncrement = 2 Max = 4 None = 0 ProtoBuf = 1"
  },
  "reference/Fantasy.Core.Exporter.html": {
    "href": "reference/Fantasy.Core.Exporter.html",
    "title": "Exporter 类 | Fantasy.Net API Reference",
    "keywords": "Exporter 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class Exporter 继承 object Exporter 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Exporter() public Exporter() 方法 LogError(Exception) public static void LogError(Exception e) 参数 e Exception LogError(string) public static void LogError(string msg) 参数 msg string LogInfo(string) public static void LogInfo(string msg) 参数 msg string Start() public void Start()"
  },
  "reference/Fantasy.Core.FantasySettingsHelper.html": {
    "href": "reference/Fantasy.Core.FantasySettingsHelper.html",
    "title": "FantasySettingsHelper 类 | Fantasy.Net API Reference",
    "keywords": "FantasySettingsHelper 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public static class FantasySettingsHelper 继承 object FantasySettingsHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Initialize() public static void Initialize()"
  },
  "reference/Fantasy.Core.IConfigTable.html": {
    "href": "reference/Fantasy.Core.IConfigTable.html",
    "title": "IConfigTable 接口 | Fantasy.Net API Reference",
    "keywords": "IConfigTable 接口 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public interface IConfigTable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.ICustomExport.html": {
    "href": "reference/Fantasy.Core.ICustomExport.html",
    "title": "ICustomExport 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomExport 接口 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public interface ICustomExport 扩展方法 JsonHelper.ToJson<T>(T) 方法 Run() void Run()"
  },
  "reference/Fantasy.Core.IntDictionaryConfig.html": {
    "href": "reference/Fantasy.Core.IntDictionaryConfig.html",
    "title": "IntDictionaryConfig 类 | Fantasy.Net API Reference",
    "keywords": "IntDictionaryConfig 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public class IntDictionaryConfig 继承 object IntDictionaryConfig 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 IntDictionaryConfig() public IntDictionaryConfig() 字段 Dic public Dictionary<int, int> Dic 字段值 Dictionary<int, int> 属性 this[int] public int this[int key] { get; } 参数 key int 属性值 int 方法 TryGetValue(int, out int) public bool TryGetValue(int key, out int value) 参数 key int value int 返回 bool"
  },
  "reference/Fantasy.Core.Network.AClientNetwork.html": {
    "href": "reference/Fantasy.Core.Network.AClientNetwork.html",
    "title": "AClientNetwork 类 | Fantasy.Net API Reference",
    "keywords": "AClientNetwork 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class AClientNetwork : ANetwork, IDisposable 继承 object ANetwork AClientNetwork 实现 IDisposable Derived KCPClientNetwork TCPClientNetwork 继承成员 ANetwork.Pack ANetwork.Send(uint, uint, long, long, object) ANetwork.Send(uint, uint, long, long, MemoryStream) ANetwork.RemoveChannel(uint) ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AClientNetwork(Scene, NetworkType, NetworkProtocolType, NetworkTarget) protected AClientNetwork(Scene scene, NetworkType networkType, NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 scene Scene networkType NetworkType networkProtocolType NetworkProtocolType networkTarget NetworkTarget 属性 ChannelId public uint ChannelId { get; protected set; } 属性值 uint 方法 Connect(IPEndPoint, Action, Action, Action, int) public abstract uint Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint onConnectComplete Action onConnectFail Action onConnectDisconnect Action connectTimeout int 返回 uint Dispose() public override void Dispose() 事件 OnChangeChannelId public abstract event Action<uint> OnChangeChannelId 事件类型 Action<uint> OnConnectComplete public abstract event Action OnConnectComplete 事件类型 Action OnConnectDisconnect public abstract event Action OnConnectDisconnect 事件类型 Action OnConnectFail public abstract event Action OnConnectFail 事件类型 Action OnDispose public abstract event Action OnDispose 事件类型 Action OnReceiveMemoryStream public abstract event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.Core.Network.ANetwork.html": {
    "href": "reference/Fantasy.Core.Network.ANetwork.html",
    "title": "ANetwork 类 | Fantasy.Net API Reference",
    "keywords": "ANetwork 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class ANetwork : IDisposable 继承 object ANetwork 实现 IDisposable Derived AClientNetwork KCPServerNetwork TCPServerNetwork 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ANetwork(Scene, NetworkType, NetworkProtocolType, NetworkTarget) protected ANetwork(Scene scene, NetworkType networkType, NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 scene Scene networkType NetworkType networkProtocolType NetworkProtocolType networkTarget NetworkTarget 字段 Pack protected readonly Func<uint, long, long, MemoryStream, object, MemoryStream> Pack 字段值 Func<uint, long, long, MemoryStream, object, MemoryStream> 属性 Id public long Id { get; protected set; } 属性值 long IsDisposed public bool IsDisposed { get; protected set; } 属性值 bool NetworkMessageScheduler public ANetworkMessageScheduler NetworkMessageScheduler { get; protected set; } 属性值 ANetworkMessageScheduler NetworkProtocolType public NetworkProtocolType NetworkProtocolType { get; } 属性值 NetworkProtocolType NetworkTarget public NetworkTarget NetworkTarget { get; } 属性值 NetworkTarget NetworkType public NetworkType NetworkType { get; } 属性值 NetworkType Scene public Scene Scene { get; protected set; } 属性值 Scene 方法 Dispose() public virtual void Dispose() RemoveChannel(uint) public abstract void RemoveChannel(uint channelId) 参数 channelId uint Send(uint, uint, long, long, MemoryStream) public abstract void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long memoryStream MemoryStream Send(uint, uint, long, long, object) public abstract void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long message object"
  },
  "reference/Fantasy.Core.Network.ANetworkChannel.html": {
    "href": "reference/Fantasy.Core.Network.ANetworkChannel.html",
    "title": "ANetworkChannel 类 | Fantasy.Net API Reference",
    "keywords": "ANetworkChannel 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class ANetworkChannel 继承 object ANetworkChannel Derived KCPServerNetworkChannel TCPServerNetworkChannel 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ANetworkChannel(Scene, uint, long) protected ANetworkChannel(Scene scene, uint id, long networkId) 参数 scene Scene id uint networkId long 属性 Id public uint Id { get; } 属性值 uint IsDisposed public bool IsDisposed { get; protected set; } 属性值 bool NetworkId public long NetworkId { get; } 属性值 long PacketParser public APacketParser PacketParser { get; protected set; } 属性值 APacketParser RemoteEndPoint public EndPoint RemoteEndPoint { get; protected set; } 属性值 EndPoint Scene public Scene Scene { get; protected set; } 属性值 Scene 方法 Dispose() public virtual void Dispose() 事件 OnDispose public abstract event Action OnDispose 事件类型 Action OnReceiveMemoryStream public abstract event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.Core.Network.ANetworkMessageScheduler.html": {
    "href": "reference/Fantasy.Core.Network.ANetworkMessageScheduler.html",
    "title": "ANetworkMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "ANetworkMessageScheduler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class ANetworkMessageScheduler 继承 object ANetworkMessageScheduler Derived ClientMessageScheduler InnerMessageScheduler OuterMessageScheduler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ANetworkMessageScheduler() protected ANetworkMessageScheduler() 字段 DisposePackInfo protected bool DisposePackInfo 字段值 bool 方法 Handler(Session, Type, APackInfo) protected abstract FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session messageType Type packInfo APackInfo 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) protected abstract FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session rpcId uint routeId long protocolCode uint routeTypeCode long messageType Type message object 返回 FTask InnerScheduler(Session, uint, long, uint, long, object) public FTask InnerScheduler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, object message) 参数 session Session rpcId uint routeId long protocolCode uint routeTypeCode long message object 返回 FTask Scheduler(Session, APackInfo) public FTask Scheduler(Session session, APackInfo packInfo) 参数 session Session packInfo APackInfo 返回 FTask"
  },
  "reference/Fantasy.Core.Network.APackInfo.html": {
    "href": "reference/Fantasy.Core.Network.APackInfo.html",
    "title": "APackInfo 类 | Fantasy.Net API Reference",
    "keywords": "APackInfo 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class APackInfo : IDisposable 继承 object APackInfo 实现 IDisposable Derived InnerPackInfo OuterPackInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 APackInfo() protected APackInfo() 字段 IsDisposed public bool IsDisposed 字段值 bool MemoryOwner public IMemoryOwner<byte> MemoryOwner 字段值 IMemoryOwner<byte> MessagePacketLength public int MessagePacketLength 字段值 int ProtocolCode public uint ProtocolCode 字段值 uint RouteId public long RouteId 字段值 long RouteTypeCode public long RouteTypeCode 字段值 long RpcId public uint RpcId 字段值 uint 方法 CreateMemoryStream() public abstract MemoryStream CreateMemoryStream() 返回 MemoryStream Deserialize(Type) public abstract object Deserialize(Type messageType) 参数 messageType Type 返回 object Dispose() public virtual void Dispose() Rent<T>() public static T Rent<T>() where T : APackInfo 返回 T 类型参数 T"
  },
  "reference/Fantasy.Core.Network.APacketParser.html": {
    "href": "reference/Fantasy.Core.Network.APacketParser.html",
    "title": "APacketParser 类 | Fantasy.Net API Reference",
    "keywords": "APacketParser 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class APacketParser : IDisposable 继承 object APacketParser 实现 IDisposable Derived InnerPacketParser OuterPacketParser 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 APacketParser() protected APacketParser() 字段 MemoryPool protected MemoryPool<byte> MemoryPool 字段值 MemoryPool<byte> 属性 IsDisposed protected bool IsDisposed { get; } 属性值 bool 方法 CreatePacketParser(NetworkTarget) public static APacketParser CreatePacketParser(NetworkTarget networkTarget) 参数 networkTarget NetworkTarget 返回 APacketParser Dispose() public virtual void Dispose() UnPack(CircularBuffer, out APackInfo) public abstract bool UnPack(CircularBuffer buffer, out APackInfo packInfo) 参数 buffer CircularBuffer packInfo APackInfo 返回 bool UnPack(IMemoryOwner<byte>, out APackInfo) public abstract bool UnPack(IMemoryOwner<byte> memoryOwner, out APackInfo packInfo) 参数 memoryOwner IMemoryOwner<byte> packInfo APackInfo 返回 bool"
  },
  "reference/Fantasy.Core.Network.Addressable-2.html": {
    "href": "reference/Fantasy.Core.Network.Addressable-2.html",
    "title": "Addressable<TEntity, TMessage> 类 | Fantasy.Net API Reference",
    "keywords": "Addressable<TEntity, TMessage> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class Addressable<TEntity, TMessage> : IRouteMessageHandler where TEntity : Entity where TMessage : IAddressableRouteMessage 类型参数 TEntity TMessage 继承 object Addressable<TEntity, TMessage> 实现 IRouteMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Addressable() protected Addressable() 方法 Handle(Session, Entity, uint, object) public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session entity Entity rpcId uint routeMessage object 返回 FTask Run(TEntity, TMessage) protected abstract FTask Run(TEntity entity, TMessage message) 参数 entity TEntity message TMessage 返回 FTask Type() public Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.AddressableHelper.html": {
    "href": "reference/Fantasy.Core.Network.AddressableHelper.html",
    "title": "AddressableHelper 类 | Fantasy.Net API Reference",
    "keywords": "AddressableHelper 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public static class AddressableHelper 继承 object AddressableHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 AddAddressable(Scene, long, long, bool) public static FTask AddAddressable(Scene scene, long addressableId, long routeId, bool isLock = true) 参数 scene Scene addressableId long routeId long isLock bool 返回 FTask GetAddressableRouteId(Scene, long) public static FTask<long> GetAddressableRouteId(Scene scene, long addressableId) 参数 scene Scene addressableId long 返回 FTask<long> LockAddressable(Scene, long) public static FTask LockAddressable(Scene scene, long addressableId) 参数 scene Scene addressableId long 返回 FTask RemoveAddressable(Scene, long) public static FTask RemoveAddressable(Scene scene, long addressableId) 参数 scene Scene addressableId long 返回 FTask UnLockAddressable(Scene, long, long, string) public static FTask UnLockAddressable(Scene scene, long addressableId, long routeId, string source) 参数 scene Scene addressableId long routeId long source string 返回 FTask"
  },
  "reference/Fantasy.Core.Network.AddressableManageComponent.html": {
    "href": "reference/Fantasy.Core.Network.AddressableManageComponent.html",
    "title": "AddressableManageComponent 类 | Fantasy.Net API Reference",
    "keywords": "AddressableManageComponent 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class AddressableManageComponent : Entity, IDisposable 继承 object Entity AddressableManageComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Dispose() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableManageComponent() public AddressableManageComponent() 方法 Add(long, long, bool) public FTask Add(long addressableId, long routeId, bool isLock) 参数 addressableId long routeId long isLock bool 返回 FTask Get(long) public FTask<long> Get(long addressableId) 参数 addressableId long 返回 FTask<long> Lock(long) public FTask Lock(long addressableId) 参数 addressableId long 返回 FTask Remove(long) public FTask Remove(long addressableId) 参数 addressableId long 返回 FTask UnLock(long, long, string) public void UnLock(long addressableId, long routeId, string source) 参数 addressableId long routeId long source string"
  },
  "reference/Fantasy.Core.Network.AddressableMessageComponent.html": {
    "href": "reference/Fantasy.Core.Network.AddressableMessageComponent.html",
    "title": "AddressableMessageComponent 类 | Fantasy.Net API Reference",
    "keywords": "AddressableMessageComponent 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class AddressableMessageComponent : Entity, IDisposable 继承 object Entity AddressableMessageComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableMessageComponent() public AddressableMessageComponent() 字段 AddressableId public long AddressableId 字段值 long 方法 Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() Lock() public FTask Lock() 返回 FTask Register(bool) public FTask Register(bool isLock = true) 参数 isLock bool 返回 FTask UnLock(string) public FTask UnLock(string source) 参数 source string 返回 FTask"
  },
  "reference/Fantasy.Core.Network.AddressableRPC-3.html": {
    "href": "reference/Fantasy.Core.Network.AddressableRPC-3.html",
    "title": "AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 类 | Fantasy.Net API Reference",
    "keywords": "AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class AddressableRPC<TEntity, TRouteRequest, TRouteResponse> : IRouteMessageHandler where TEntity : Entity where TRouteRequest : IAddressableRouteRequest where TRouteResponse : IAddressableRouteResponse 类型参数 TEntity TRouteRequest TRouteResponse 继承 object AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 实现 IRouteMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableRPC() protected AddressableRPC() 方法 Handle(Session, Entity, uint, object) public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session entity Entity rpcId uint routeMessage object 返回 FTask Run(TEntity, TRouteRequest, TRouteResponse, Action) protected abstract FTask Run(TEntity entity, TRouteRequest request, TRouteResponse response, Action reply) 参数 entity TEntity request TRouteRequest response TRouteResponse reply Action 返回 FTask Type() public Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.AddressableRouteComponent.html": {
    "href": "reference/Fantasy.Core.Network.AddressableRouteComponent.html",
    "title": "AddressableRouteComponent 类 | Fantasy.Net API Reference",
    "keywords": "AddressableRouteComponent 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class AddressableRouteComponent : Entity, IDisposable 继承 object Entity AddressableRouteComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AddressableRouteComponent() public AddressableRouteComponent() 字段 AddressableRouteMessageLock public static readonly CoroutineLockQueueType AddressableRouteMessageLock 字段值 CoroutineLockQueueType 属性 AddressableId public long AddressableId { get; } 属性值 long 方法 Call(IAddressableRouteMessage) public FTask<IResponse> Call(IAddressableRouteMessage request) 参数 request IAddressableRouteMessage 返回 FTask<IResponse> Call(long, Type, MemoryStream) public FTask<IResponse> Call(long routeTypeOpCode, Type requestType, MemoryStream request) 参数 routeTypeOpCode long requestType Type request MemoryStream 返回 FTask<IResponse> Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() Send(IAddressableRouteMessage) public void Send(IAddressableRouteMessage message) 参数 message IAddressableRouteMessage Send(long, Type, MemoryStream) public void Send(long routeTypeOpCode, Type requestType, MemoryStream message) 参数 routeTypeOpCode long requestType Type message MemoryStream SetAddressableId(long) public void SetAddressableId(long addressableId) 参数 addressableId long"
  },
  "reference/Fantasy.Core.Network.ClientMessageScheduler.html": {
    "href": "reference/Fantasy.Core.Network.ClientMessageScheduler.html",
    "title": "ClientMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "ClientMessageScheduler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class ClientMessageScheduler : ANetworkMessageScheduler 继承 object ANetworkMessageScheduler ClientMessageScheduler 继承成员 ANetworkMessageScheduler.Scheduler(Session, APackInfo) ANetworkMessageScheduler.InnerScheduler(Session, uint, long, uint, long, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ClientMessageScheduler() public ClientMessageScheduler() 方法 Handler(Session, Type, APackInfo) protected override FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session messageType Type packInfo APackInfo 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) protected override FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session rpcId uint routeId long protocolCode uint routeTypeCode long messageType Type message object 返回 FTask"
  },
  "reference/Fantasy.Core.Network.ClientNetworkComponent.html": {
    "href": "reference/Fantasy.Core.Network.ClientNetworkComponent.html",
    "title": "ClientNetworkComponent 类 | Fantasy.Net API Reference",
    "keywords": "ClientNetworkComponent 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class ClientNetworkComponent : Entity, IDisposable 继承 object Entity ClientNetworkComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ClientNetworkComponent() public ClientNetworkComponent() 属性 Session public Session Session { get; } 属性值 Session 方法 Connect(IPEndPoint, Action, Action, Action, int) public void Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint onConnectComplete Action onConnectFail Action onConnectDisconnect Action connectTimeout int Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() Initialize(NetworkProtocolType, NetworkTarget) public void Initialize(NetworkProtocolType networkProtocolType, NetworkTarget networkTarget) 参数 networkProtocolType NetworkProtocolType networkTarget NetworkTarget"
  },
  "reference/Fantasy.Core.Network.CoreRouteType.html": {
    "href": "reference/Fantasy.Core.Network.CoreRouteType.html",
    "title": "CoreRouteType 类 | Fantasy.Net API Reference",
    "keywords": "CoreRouteType 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public class CoreRouteType 继承 object CoreRouteType 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoreRouteType() public CoreRouteType() 字段 Addressable public const long Addressable = 3 字段值 long BsonRoute public const long BsonRoute = 2 字段值 long CustomRouteType public const long CustomRouteType = 1000 字段值 long Route public const long Route = 1 字段值 long"
  },
  "reference/Fantasy.Core.Network.HandlerInfo-1.html": {
    "href": "reference/Fantasy.Core.Network.HandlerInfo-1.html",
    "title": "HandlerInfo<T> 类 | Fantasy.Net API Reference",
    "keywords": "HandlerInfo<T> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class HandlerInfo<T> 类型参数 T 继承 object HandlerInfo<T> 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 HandlerInfo() public HandlerInfo() 字段 Obj public T Obj 字段值 T Type public Type Type 字段值 Type"
  },
  "reference/Fantasy.Core.Network.IAddressableRouteMessage.html": {
    "href": "reference/Fantasy.Core.Network.IAddressableRouteMessage.html",
    "title": "IAddressableRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IAddressableRouteMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IAddressableRouteMessage : IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IAddressableRouteRequest.html": {
    "href": "reference/Fantasy.Core.Network.IAddressableRouteRequest.html",
    "title": "IAddressableRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IAddressableRouteRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IAddressableRouteRequest : IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IAddressableRouteResponse.html": {
    "href": "reference/Fantasy.Core.Network.IAddressableRouteResponse.html",
    "title": "IAddressableRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IAddressableRouteResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IAddressableRouteResponse : IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonAddressableRouteMessage.html": {
    "href": "reference/Fantasy.Core.Network.IBsonAddressableRouteMessage.html",
    "title": "IBsonAddressableRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonAddressableRouteMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonAddressableRouteMessage : IBsonMessage, IAddressableRouteMessage, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonAddressableRouteRequest.html": {
    "href": "reference/Fantasy.Core.Network.IBsonAddressableRouteRequest.html",
    "title": "IBsonAddressableRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonAddressableRouteRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonAddressableRouteRequest : IBsonRouteMessage, IBsonMessage, IAddressableRouteRequest, IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonAddressableRouteResponse.html": {
    "href": "reference/Fantasy.Core.Network.IBsonAddressableRouteResponse.html",
    "title": "IBsonAddressableRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonAddressableRouteResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonAddressableRouteResponse : IBsonResponse, IBsonMessage, IAddressableRouteResponse, IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonMessage.html": {
    "href": "reference/Fantasy.Core.Network.IBsonMessage.html",
    "title": "IBsonMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonMessage : IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonRequest.html": {
    "href": "reference/Fantasy.Core.Network.IBsonRequest.html",
    "title": "IBsonRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonRequest : IBsonMessage, IRequest, IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonResponse.html": {
    "href": "reference/Fantasy.Core.Network.IBsonResponse.html",
    "title": "IBsonResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonResponse : IBsonMessage, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonRouteMessage.html": {
    "href": "reference/Fantasy.Core.Network.IBsonRouteMessage.html",
    "title": "IBsonRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRouteMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonRouteMessage : IBsonMessage, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonRouteRequest.html": {
    "href": "reference/Fantasy.Core.Network.IBsonRouteRequest.html",
    "title": "IBsonRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRouteRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonRouteRequest : IBsonRouteMessage, IBsonMessage, IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IBsonRouteResponse.html": {
    "href": "reference/Fantasy.Core.Network.IBsonRouteResponse.html",
    "title": "IBsonRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRouteResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IBsonRouteResponse : IBsonResponse, IBsonMessage, IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.ICustomRouteMessage.html": {
    "href": "reference/Fantasy.Core.Network.ICustomRouteMessage.html",
    "title": "ICustomRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomRouteMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface ICustomRouteMessage : IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.ICustomRouteRequest.html": {
    "href": "reference/Fantasy.Core.Network.ICustomRouteRequest.html",
    "title": "ICustomRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomRouteRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface ICustomRouteRequest : IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.ICustomRouteResponse.html": {
    "href": "reference/Fantasy.Core.Network.ICustomRouteResponse.html",
    "title": "ICustomRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomRouteResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface ICustomRouteResponse : IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IMessage.html": {
    "href": "reference/Fantasy.Core.Network.IMessage.html",
    "title": "IMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IMessage 扩展方法 JsonHelper.ToJson<T>(T) 方法 OpCode() uint OpCode() 返回 uint"
  },
  "reference/Fantasy.Core.Network.IMessageHandler.html": {
    "href": "reference/Fantasy.Core.Network.IMessageHandler.html",
    "title": "IMessageHandler 接口 | Fantasy.Net API Reference",
    "keywords": "IMessageHandler 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IMessageHandler 扩展方法 JsonHelper.ToJson<T>(T) 方法 Handle(Session, uint, uint, object) FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 session Session rpcId uint messageTypeCode uint message object 返回 FTask Type() Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.INetworkUpdate.html": {
    "href": "reference/Fantasy.Core.Network.INetworkUpdate.html",
    "title": "INetworkUpdate 接口 | Fantasy.Net API Reference",
    "keywords": "INetworkUpdate 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface INetworkUpdate 扩展方法 JsonHelper.ToJson<T>(T) 方法 Update() void Update()"
  },
  "reference/Fantasy.Core.Network.IRequest.html": {
    "href": "reference/Fantasy.Core.Network.IRequest.html",
    "title": "IRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IRequest : IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IResponse.html": {
    "href": "reference/Fantasy.Core.Network.IResponse.html",
    "title": "IResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IResponse : IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 ErrorCode uint ErrorCode { get; set; } 属性值 uint"
  },
  "reference/Fantasy.Core.Network.IRouteMessage.html": {
    "href": "reference/Fantasy.Core.Network.IRouteMessage.html",
    "title": "IRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteMessage 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IRouteMessage : IRequest, IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T) 方法 RouteTypeOpCode() long RouteTypeOpCode() 返回 long"
  },
  "reference/Fantasy.Core.Network.IRouteMessageHandler.html": {
    "href": "reference/Fantasy.Core.Network.IRouteMessageHandler.html",
    "title": "IRouteMessageHandler 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteMessageHandler 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T) 方法 Handle(Session, Entity, uint, object) FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session entity Entity rpcId uint routeMessage object 返回 FTask Type() Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.IRouteRequest.html": {
    "href": "reference/Fantasy.Core.Network.IRouteRequest.html",
    "title": "IRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteRequest 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IRouteRequest : IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.IRouteResponse.html": {
    "href": "reference/Fantasy.Core.Network.IRouteResponse.html",
    "title": "IRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteResponse 接口 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public interface IRouteResponse : IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.I_AddressableAddHandler.html": {
    "href": "reference/Fantasy.Core.Network.I_AddressableAddHandler.html",
    "title": "I_AddressableAddHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableAddHandler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class I_AddressableAddHandler : RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response> I_AddressableAddHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Type() RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableAddHandler() public I_AddressableAddHandler() 方法 Run(Scene, I_AddressableAdd_Request, I_AddressableAdd_Response, Action) protected override FTask Run(Scene scene, I_AddressableAdd_Request request, I_AddressableAdd_Response response, Action reply) 参数 scene Scene request I_AddressableAdd_Request response I_AddressableAdd_Response reply Action 返回 FTask"
  },
  "reference/Fantasy.Core.Network.I_AddressableGetHandler.html": {
    "href": "reference/Fantasy.Core.Network.I_AddressableGetHandler.html",
    "title": "I_AddressableGetHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableGetHandler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class I_AddressableGetHandler : RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response> I_AddressableGetHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Type() RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableGetHandler() public I_AddressableGetHandler() 方法 Run(Scene, I_AddressableGet_Request, I_AddressableGet_Response, Action) protected override FTask Run(Scene scene, I_AddressableGet_Request request, I_AddressableGet_Response response, Action reply) 参数 scene Scene request I_AddressableGet_Request response I_AddressableGet_Response reply Action 返回 FTask"
  },
  "reference/Fantasy.Core.Network.I_AddressableLockHandler.html": {
    "href": "reference/Fantasy.Core.Network.I_AddressableLockHandler.html",
    "title": "I_AddressableLockHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableLockHandler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class I_AddressableLockHandler : RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response> I_AddressableLockHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Type() RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableLockHandler() public I_AddressableLockHandler() 方法 Run(Scene, I_AddressableLock_Request, I_AddressableLock_Response, Action) protected override FTask Run(Scene scene, I_AddressableLock_Request request, I_AddressableLock_Response response, Action reply) 参数 scene Scene request I_AddressableLock_Request response I_AddressableLock_Response reply Action 返回 FTask"
  },
  "reference/Fantasy.Core.Network.I_AddressableRemoveHandler.html": {
    "href": "reference/Fantasy.Core.Network.I_AddressableRemoveHandler.html",
    "title": "I_AddressableRemoveHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableRemoveHandler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class I_AddressableRemoveHandler : RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response> I_AddressableRemoveHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Type() RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableRemoveHandler() public I_AddressableRemoveHandler() 方法 Run(Scene, I_AddressableRemove_Request, I_AddressableRemove_Response, Action) protected override FTask Run(Scene scene, I_AddressableRemove_Request request, I_AddressableRemove_Response response, Action reply) 参数 scene Scene request I_AddressableRemove_Request response I_AddressableRemove_Response reply Action 返回 FTask"
  },
  "reference/Fantasy.Core.Network.I_AddressableUnLockHandler.html": {
    "href": "reference/Fantasy.Core.Network.I_AddressableUnLockHandler.html",
    "title": "I_AddressableUnLockHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableUnLockHandler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class I_AddressableUnLockHandler : RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response> I_AddressableUnLockHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Type() RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableUnLockHandler() public I_AddressableUnLockHandler() 方法 Run(Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response, Action) protected override FTask Run(Scene scene, I_AddressableUnLock_Request request, I_AddressableUnLock_Response response, Action reply) 参数 scene Scene request I_AddressableUnLock_Request response I_AddressableUnLock_Response reply Action 返回 FTask"
  },
  "reference/Fantasy.Core.Network.InnerMessageScheduler.html": {
    "href": "reference/Fantasy.Core.Network.InnerMessageScheduler.html",
    "title": "InnerMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "InnerMessageScheduler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class InnerMessageScheduler : ANetworkMessageScheduler 继承 object ANetworkMessageScheduler InnerMessageScheduler 继承成员 ANetworkMessageScheduler.Scheduler(Session, APackInfo) ANetworkMessageScheduler.InnerScheduler(Session, uint, long, uint, long, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 InnerMessageScheduler() public InnerMessageScheduler() 方法 Handler(Session, Type, APackInfo) protected override FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session messageType Type packInfo APackInfo 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) protected override FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session rpcId uint routeId long protocolCode uint routeTypeCode long messageType Type message object 返回 FTask"
  },
  "reference/Fantasy.Core.Network.InnerPackInfo.html": {
    "href": "reference/Fantasy.Core.Network.InnerPackInfo.html",
    "title": "InnerPackInfo 类 | Fantasy.Net API Reference",
    "keywords": "InnerPackInfo 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class InnerPackInfo : APackInfo, IDisposable 继承 object APackInfo InnerPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.ProtocolCode APackInfo.RouteTypeCode APackInfo.MessagePacketLength APackInfo.MemoryOwner APackInfo.IsDisposed APackInfo.Rent<T>() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 InnerPackInfo() public InnerPackInfo() 方法 Create(IMemoryOwner<byte>) public static InnerPackInfo Create(IMemoryOwner<byte> memoryOwner) 参数 memoryOwner IMemoryOwner<byte> 返回 InnerPackInfo CreateMemoryStream() public override MemoryStream CreateMemoryStream() 返回 MemoryStream Deserialize(Type) public override object Deserialize(Type messageType) 参数 messageType Type 返回 object Dispose() public override void Dispose()"
  },
  "reference/Fantasy.Core.Network.InnerPacketParser.html": {
    "href": "reference/Fantasy.Core.Network.InnerPacketParser.html",
    "title": "InnerPacketParser 类 | Fantasy.Net API Reference",
    "keywords": "InnerPacketParser 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class InnerPacketParser : APacketParser, IDisposable 继承 object APacketParser InnerPacketParser 实现 IDisposable 继承成员 APacketParser.CreatePacketParser(NetworkTarget) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 InnerPacketParser() public InnerPacketParser() 方法 Dispose() public override void Dispose() Pack(uint, long, MemoryStream) public static MemoryStream Pack(uint rpcId, long routeId, MemoryStream memoryStream) 参数 rpcId uint routeId long memoryStream MemoryStream 返回 MemoryStream Pack(uint, long, object) public static MemoryStream Pack(uint rpcId, long routeId, object message) 参数 rpcId uint routeId long message object 返回 MemoryStream UnPack(CircularBuffer, out APackInfo) public override bool UnPack(CircularBuffer buffer, out APackInfo packInfo) 参数 buffer CircularBuffer packInfo APackInfo 返回 bool UnPack(IMemoryOwner<byte>, out APackInfo) public override bool UnPack(IMemoryOwner<byte> memoryOwner, out APackInfo packInfo) 参数 memoryOwner IMemoryOwner<byte> packInfo APackInfo 返回 bool"
  },
  "reference/Fantasy.Core.Network.KCPClientNetwork.html": {
    "href": "reference/Fantasy.Core.Network.KCPClientNetwork.html",
    "title": "KCPClientNetwork 类 | Fantasy.Net API Reference",
    "keywords": "KCPClientNetwork 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class KCPClientNetwork : AClientNetwork, IDisposable, INetworkUpdate 继承 object ANetwork AClientNetwork KCPClientNetwork 实现 IDisposable INetworkUpdate 继承成员 AClientNetwork.ChannelId ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPClientNetwork(Scene, NetworkTarget) public KCPClientNetwork(Scene scene, NetworkTarget networkTarget) 参数 scene Scene networkTarget NetworkTarget 方法 Connect(IPEndPoint, Action, Action, Action, int) public override uint Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint onConnectComplete Action onConnectFail Action onConnectDisconnect Action connectTimeout int 返回 uint Dispose() public override void Dispose() RemoveChannel(uint) public override void RemoveChannel(uint channelId) 参数 channelId uint Send(uint, uint, long, long, MemoryStream) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long entityId, MemoryStream memoryStream) 参数 channelId uint rpcId uint routeTypeOpCode long entityId long memoryStream MemoryStream Send(uint, uint, long, long, object) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long entityId, object message) 参数 channelId uint rpcId uint routeTypeOpCode long entityId long message object Update() public void Update() 事件 OnChangeChannelId public override event Action<uint> OnChangeChannelId 事件类型 Action<uint> OnConnectComplete public override event Action OnConnectComplete 事件类型 Action OnConnectDisconnect public override event Action OnConnectDisconnect 事件类型 Action OnConnectFail public override event Action OnConnectFail 事件类型 Action OnDispose public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.Core.Network.KCPServerNetwork.html": {
    "href": "reference/Fantasy.Core.Network.KCPServerNetwork.html",
    "title": "KCPServerNetwork 类 | Fantasy.Net API Reference",
    "keywords": "KCPServerNetwork 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public class KCPServerNetwork : ANetwork, IDisposable, INetworkUpdate 继承 object ANetwork KCPServerNetwork 实现 IDisposable INetworkUpdate 继承成员 ANetwork.Pack ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPServerNetwork(Scene, NetworkTarget, IPEndPoint) public KCPServerNetwork(Scene scene, NetworkTarget networkTarget, IPEndPoint address) 参数 scene Scene networkTarget NetworkTarget address IPEndPoint 方法 Dispose() public override void Dispose() RemoveChannel(uint) public override void RemoveChannel(uint channelId) 参数 channelId uint Send(uint, uint, long, long, MemoryStream) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long memoryStream MemoryStream Send(uint, uint, long, long, object) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long message object Update() public void Update()"
  },
  "reference/Fantasy.Core.Network.KCPServerNetworkChannel.html": {
    "href": "reference/Fantasy.Core.Network.KCPServerNetworkChannel.html",
    "title": "KCPServerNetworkChannel 类 | Fantasy.Net API Reference",
    "keywords": "KCPServerNetworkChannel 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class KCPServerNetworkChannel : ANetworkChannel 继承 object ANetworkChannel KCPServerNetworkChannel 继承成员 ANetworkChannel.Id ANetworkChannel.Scene ANetworkChannel.NetworkId ANetworkChannel.IsDisposed ANetworkChannel.RemoteEndPoint ANetworkChannel.PacketParser object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPServerNetworkChannel(Scene, uint, long, EndPoint, Socket, uint) public KCPServerNetworkChannel(Scene scene, uint id, long networkId, EndPoint remoteEndPoint, Socket socket, uint createTime) 参数 scene Scene id uint networkId long remoteEndPoint EndPoint socket Socket createTime uint 字段 CreateTime public readonly uint CreateTime 字段值 uint 属性 Kcp public Kcp Kcp { get; } 属性值 Kcp 方法 Connect(Kcp, Action<uint, uint>, int, NetworkTarget, ANetworkMessageScheduler) public void Connect(Kcp kcp, Action<uint, uint> addToUpdate, int maxSndWnd, NetworkTarget networkTarget, ANetworkMessageScheduler networkMessageScheduler) 参数 kcp Kcp addToUpdate Action<uint, uint> maxSndWnd int networkTarget NetworkTarget networkMessageScheduler ANetworkMessageScheduler Dispose() public override void Dispose() Output(byte[], int) public void Output(byte[] bytes, int count) 参数 bytes byte[] count int Receive() public void Receive() Send(MemoryStream) public void Send(MemoryStream memoryStream) 参数 memoryStream MemoryStream 事件 OnDispose public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.Core.Network.KCPSettings.html": {
    "href": "reference/Fantasy.Core.Network.KCPSettings.html",
    "title": "KCPSettings 类 | Fantasy.Net API Reference",
    "keywords": "KCPSettings 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public class KCPSettings 继承 object KCPSettings 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPSettings() public KCPSettings() 属性 MaxSendWindowSize public int MaxSendWindowSize { get; } 属性值 int Mtu public uint Mtu { get; } 属性值 uint ReceiveWindowSize public uint ReceiveWindowSize { get; } 属性值 uint SendWindowSize public uint SendWindowSize { get; } 属性值 uint 方法 Create(NetworkTarget) public static KCPSettings Create(NetworkTarget networkTarget) 参数 networkTarget NetworkTarget 返回 KCPSettings"
  },
  "reference/Fantasy.Core.Network.KcpHeader.html": {
    "href": "reference/Fantasy.Core.Network.KcpHeader.html",
    "title": "KcpHeader 枚举 | Fantasy.Net API Reference",
    "keywords": "KcpHeader 枚举 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public enum KcpHeader : byte 扩展方法 JsonHelper.ToJson<T>(T) 字段 ConfirmConnection = 3 Disconnect = 7 None = 0 ReceiveData = 6 RepeatChannelId = 4 RequestConnection = 1 WaitConfirmConnection = 2"
  },
  "reference/Fantasy.Core.Network.Message-1.html": {
    "href": "reference/Fantasy.Core.Network.Message-1.html",
    "title": "Message<T> 类 | Fantasy.Net API Reference",
    "keywords": "Message<T> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class Message<T> : IMessageHandler 类型参数 T 继承 object Message<T> 实现 IMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Message() protected Message() 方法 Handle(Session, uint, uint, object) public FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 session Session rpcId uint messageTypeCode uint message object 返回 FTask Run(Session, T) protected abstract FTask Run(Session session, T message) 参数 session Session message T 返回 FTask Type() public Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.MessageCacheInfo.html": {
    "href": "reference/Fantasy.Core.Network.MessageCacheInfo.html",
    "title": "MessageCacheInfo 结构 | Fantasy.Net API Reference",
    "keywords": "MessageCacheInfo 结构 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public struct MessageCacheInfo 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 字段 MemoryStream public MemoryStream MemoryStream 字段值 MemoryStream Message public object Message 字段值 object RouteId public long RouteId 字段值 long RouteTypeOpCode public long RouteTypeOpCode 字段值 long RpcId public uint RpcId 字段值 uint"
  },
  "reference/Fantasy.Core.Network.MessageDispatcherSystem.html": {
    "href": "reference/Fantasy.Core.Network.MessageDispatcherSystem.html",
    "title": "MessageDispatcherSystem 类 | Fantasy.Net API Reference",
    "keywords": "MessageDispatcherSystem 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class MessageDispatcherSystem : Singleton<MessageDispatcherSystem>, ISingleton, IDisposable 继承 object Singleton<MessageDispatcherSystem> MessageDispatcherSystem 实现 ISingleton IDisposable 继承成员 Singleton<MessageDispatcherSystem>.Initialize() Singleton<MessageDispatcherSystem>.Dispose() Singleton<MessageDispatcherSystem>.IsDisposed Singleton<MessageDispatcherSystem>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MessageDispatcherSystem() public MessageDispatcherSystem() 方法 CreateResponse(IRequest, uint) public IResponse CreateResponse(IRequest iRequest, uint error) 参数 iRequest IRequest error uint 返回 IResponse CreateResponse(IRouteRequest, uint) public IRouteResponse CreateResponse(IRouteRequest iRouteRequest, uint error) 参数 iRouteRequest IRouteRequest error uint 返回 IRouteResponse CreateResponse(Type, uint) public IResponse CreateResponse(Type requestType, uint error) 参数 requestType Type error uint 返回 IResponse CreateRouteResponse() public IRouteResponse CreateRouteResponse() 返回 IRouteResponse FailResponse(Session, IRouteRequest, uint, uint) public void FailResponse(Session session, IRouteRequest iRouteRequest, uint error, uint rpcId) 参数 session Session iRouteRequest IRouteRequest error uint rpcId uint GetOpCode(Type) public uint GetOpCode(Type type) 参数 type Type 返回 uint GetOpCodeType(uint) public Type GetOpCodeType(uint code) 参数 code uint 返回 Type MessageHandler(Session, Type, object, uint, uint) public void MessageHandler(Session session, Type type, object message, uint rpcId, uint protocolCode) 参数 session Session type Type message object rpcId uint protocolCode uint OnLoad(int) protected override void OnLoad(int assemblyName) 参数 assemblyName int OnUnLoad(int) protected override void OnUnLoad(int assemblyName) 参数 assemblyName int RouteMessageHandler(Session, Type, Entity, object, uint) public FTask RouteMessageHandler(Session session, Type type, Entity entity, object message, uint rpcId) 参数 session Session type Type entity Entity message object rpcId uint 返回 FTask"
  },
  "reference/Fantasy.Core.Network.MessageHelper.NetworkMessageUpdate.html": {
    "href": "reference/Fantasy.Core.Network.MessageHelper.NetworkMessageUpdate.html",
    "title": "MessageHelper.NetworkMessageUpdate 结构 | Fantasy.Net API Reference",
    "keywords": "MessageHelper.NetworkMessageUpdate 结构 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public struct MessageHelper.NetworkMessageUpdate 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.Core.Network.MessageHelper.html": {
    "href": "reference/Fantasy.Core.Network.MessageHelper.html",
    "title": "MessageHelper 类 | Fantasy.Net API Reference",
    "keywords": "MessageHelper 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public static class MessageHelper 继承 object MessageHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 RequestCallback public static readonly SortedDictionary<uint, MessageSender> RequestCallback 字段值 SortedDictionary<uint, MessageSender> Timeout public const long Timeout = 40000 字段值 long TimeoutRouteMessageSenders public static readonly Dictionary<uint, MessageSender> TimeoutRouteMessageSenders 字段值 Dictionary<uint, MessageSender> 方法 CallAddressable(Scene, long, IRouteMessage) public static FTask<IResponse> CallAddressable(Scene scene, long addressableId, IRouteMessage request) 参数 scene Scene addressableId long request IRouteMessage 返回 FTask<IResponse> CallInnerRoute(Scene, long, IRouteMessage) public static FTask<IResponse> CallInnerRoute(Scene scene, long entityId, IRouteMessage request) 参数 scene Scene entityId long request IRouteMessage 返回 FTask<IResponse> CallInnerRoute(Scene, long, long, Type, MemoryStream) public static FTask<IResponse> CallInnerRoute(Scene scene, long entityId, long routeTypeOpCode, Type requestType, MemoryStream request) 参数 scene Scene entityId long routeTypeOpCode long requestType Type request MemoryStream 返回 FTask<IResponse> CallInnerServer(Scene, uint, IRequest) public static FTask<IResponse> CallInnerServer(Scene scene, uint targetServerId, IRequest request) 参数 scene Scene targetServerId uint request IRequest 返回 FTask<IResponse> ResponseHandler(uint, IResponse) public static void ResponseHandler(uint rpcId, IResponse response) 参数 rpcId uint response IResponse SendAddressable(Scene, long, IRouteMessage) public static void SendAddressable(Scene scene, long addressableId, IRouteMessage message) 参数 scene Scene addressableId long message IRouteMessage SendInnerRoute(Scene, ICollection<long>, IRouteMessage) public static void SendInnerRoute(Scene scene, ICollection<long> routeIdCollection, IRouteMessage message) 参数 scene Scene routeIdCollection ICollection<long> message IRouteMessage SendInnerRoute(Scene, long, IRouteMessage) public static void SendInnerRoute(Scene scene, long entityId, IRouteMessage message) 参数 scene Scene entityId long message IRouteMessage SendInnerRoute(Scene, long, long, MemoryStream) public static void SendInnerRoute(Scene scene, long entityId, long routeTypeOpCode, MemoryStream message) 参数 scene Scene entityId long routeTypeOpCode long message MemoryStream SendInnerServer(Scene, uint, IMessage) public static void SendInnerServer(Scene scene, uint routeId, IMessage message) 参数 scene Scene routeId uint message IMessage"
  },
  "reference/Fantasy.Core.Network.MessageRPC-2.html": {
    "href": "reference/Fantasy.Core.Network.MessageRPC-2.html",
    "title": "MessageRPC<TRequest, TResponse> 类 | Fantasy.Net API Reference",
    "keywords": "MessageRPC<TRequest, TResponse> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class MessageRPC<TRequest, TResponse> : IMessageHandler where TRequest : IRequest where TResponse : IResponse 类型参数 TRequest TResponse 继承 object MessageRPC<TRequest, TResponse> 实现 IMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MessageRPC() protected MessageRPC() 方法 Handle(Session, uint, uint, object) public FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 session Session rpcId uint messageTypeCode uint message object 返回 FTask Run(Session, TRequest, TResponse, Action) protected abstract FTask Run(Session session, TRequest request, TResponse response, Action reply) 参数 session Session request TRequest response TResponse reply Action 返回 FTask Type() public Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.MessageSender.html": {
    "href": "reference/Fantasy.Core.Network.MessageSender.html",
    "title": "MessageSender 类 | Fantasy.Net API Reference",
    "keywords": "MessageSender 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class MessageSender : IDisposable 继承 object MessageSender 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MessageSender() public MessageSender() 属性 CreateTime public long CreateTime { get; } 属性值 long MessageType public Type MessageType { get; } 属性值 Type Request public IMessage Request { get; } 属性值 IMessage RouteId public long RouteId { get; } 属性值 long RpcId public uint RpcId { get; } 属性值 uint Tcs public FTask<IResponse> Tcs { get; } 属性值 FTask<IResponse> 方法 Create(uint, IRequest, FTask<IResponse>) public static MessageSender Create(uint rpcId, IRequest request, FTask<IResponse> tcs) 参数 rpcId uint request IRequest tcs FTask<IResponse> 返回 MessageSender Create(uint, long, IRouteMessage, FTask<IResponse>) public static MessageSender Create(uint rpcId, long routeId, IRouteMessage request, FTask<IResponse> tcs) 参数 rpcId uint routeId long request IRouteMessage tcs FTask<IResponse> 返回 MessageSender Create(uint, Type, FTask<IResponse>) public static MessageSender Create(uint rpcId, Type requestType, FTask<IResponse> tcs) 参数 rpcId uint requestType Type tcs FTask<IResponse> 返回 MessageSender Dispose() public void Dispose()"
  },
  "reference/Fantasy.Core.Network.NetAction.html": {
    "href": "reference/Fantasy.Core.Network.NetAction.html",
    "title": "NetAction 结构 | Fantasy.Net API Reference",
    "keywords": "NetAction 结构 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public struct NetAction : IDisposable 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 NetAction(long, uint, uint, long, long, NetActionType, MemoryStream) public NetAction(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long entityId, NetActionType netActionType, MemoryStream memoryStream) 参数 networkId long channelId uint rpcId uint routeTypeOpCode long entityId long netActionType NetActionType memoryStream MemoryStream NetAction(long, uint, uint, long, long, NetActionType, object) public NetAction(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long entityId, NetActionType netActionType, object obj) 参数 networkId long channelId uint rpcId uint routeTypeOpCode long entityId long netActionType NetActionType obj object 字段 ChannelId public uint ChannelId 字段值 uint EntityId public long EntityId 字段值 long MemoryStream public MemoryStream MemoryStream 字段值 MemoryStream NetActionType public NetActionType NetActionType 字段值 NetActionType NetworkId public long NetworkId 字段值 long Obj public object Obj 字段值 object RouteTypeOpCode public long RouteTypeOpCode 字段值 long RpcId public uint RpcId 字段值 uint 方法 Dispose() public void Dispose()"
  },
  "reference/Fantasy.Core.Network.NetActionType.html": {
    "href": "reference/Fantasy.Core.Network.NetActionType.html",
    "title": "NetActionType 枚举 | Fantasy.Net API Reference",
    "keywords": "NetActionType 枚举 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public enum NetActionType 扩展方法 JsonHelper.ToJson<T>(T) 字段 None = 0 RemoveChannel = 3 Send = 1 SendMemoryStream = 2"
  },
  "reference/Fantasy.Core.Network.NetworkProtocolType.html": {
    "href": "reference/Fantasy.Core.Network.NetworkProtocolType.html",
    "title": "NetworkProtocolType 枚举 | Fantasy.Net API Reference",
    "keywords": "NetworkProtocolType 枚举 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public enum NetworkProtocolType 扩展方法 JsonHelper.ToJson<T>(T) 字段 KCP = 1 None = 0 TCP = 2"
  },
  "reference/Fantasy.Core.Network.NetworkTarget.html": {
    "href": "reference/Fantasy.Core.Network.NetworkTarget.html",
    "title": "NetworkTarget 枚举 | Fantasy.Net API Reference",
    "keywords": "NetworkTarget 枚举 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public enum NetworkTarget 扩展方法 JsonHelper.ToJson<T>(T) 字段 Inner = 2 None = 0 Outer = 1"
  },
  "reference/Fantasy.Core.Network.NetworkThread.html": {
    "href": "reference/Fantasy.Core.Network.NetworkThread.html",
    "title": "NetworkThread 类 | Fantasy.Net API Reference",
    "keywords": "NetworkThread 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class NetworkThread : Singleton<NetworkThread>, ISingleton, IDisposable 继承 object Singleton<NetworkThread> NetworkThread 实现 ISingleton IDisposable 继承成员 Singleton<NetworkThread>.IsDisposed Singleton<NetworkThread>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 NetworkThread() public NetworkThread() 字段 SynchronizationContext public ThreadSynchronizationContext SynchronizationContext 字段值 ThreadSynchronizationContext 属性 ManagedThreadId public int ManagedThreadId { get; } 属性值 int 方法 AddNetwork(ANetwork) public void AddNetwork(ANetwork aNetwork) 参数 aNetwork ANetwork Dispose() public override void Dispose() Initialize() public override Task Initialize() 返回 Task RemoveChannel(long, uint) public void RemoveChannel(long networkId, uint channelId) 参数 networkId long channelId uint RemoveNetwork(long) public void RemoveNetwork(long networkId) 参数 networkId long Send(long, uint, uint, long, long, object) public void Send(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long entityId, object message) 参数 networkId long channelId uint rpcId uint routeTypeOpCode long entityId long message object SendStream(long, uint, uint, long, long, MemoryStream) public void SendStream(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 networkId long channelId uint rpcId uint routeTypeOpCode long routeId long memoryStream MemoryStream"
  },
  "reference/Fantasy.Core.Network.NetworkType.html": {
    "href": "reference/Fantasy.Core.Network.NetworkType.html",
    "title": "NetworkType 枚举 | Fantasy.Net API Reference",
    "keywords": "NetworkType 枚举 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public enum NetworkType 扩展方法 JsonHelper.ToJson<T>(T) 字段 Client = 1 None = 0 Server = 2"
  },
  "reference/Fantasy.Core.Network.OnNetworkMessageUpdateCheckTimeout.html": {
    "href": "reference/Fantasy.Core.Network.OnNetworkMessageUpdateCheckTimeout.html",
    "title": "OnNetworkMessageUpdateCheckTimeout 类 | Fantasy.Net API Reference",
    "keywords": "OnNetworkMessageUpdateCheckTimeout 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class OnNetworkMessageUpdateCheckTimeout : TimerHandler<MessageHelper.NetworkMessageUpdate>, IEvent 继承 object EventSystem<MessageHelper.NetworkMessageUpdate> TimerHandler<MessageHelper.NetworkMessageUpdate> OnNetworkMessageUpdateCheckTimeout 实现 IEvent 继承成员 EventSystem<MessageHelper.NetworkMessageUpdate>.EventType() EventSystem<MessageHelper.NetworkMessageUpdate>.Invoke(object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OnNetworkMessageUpdateCheckTimeout() public OnNetworkMessageUpdateCheckTimeout() 方法 Handler(NetworkMessageUpdate) 同步处理事件的方法。 public override void Handler(MessageHelper.NetworkMessageUpdate self) 参数 self MessageHelper.NetworkMessageUpdate 事件的实例。"
  },
  "reference/Fantasy.Core.Network.Opcode.html": {
    "href": "reference/Fantasy.Core.Network.Opcode.html",
    "title": "Opcode 类 | Fantasy.Net API Reference",
    "keywords": "Opcode 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public static class Opcode 继承 object Opcode 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 AddressableAddRequest public const uint AddressableAddRequest = 220000001 字段值 uint AddressableAddResponse public const uint AddressableAddResponse = 260000001 字段值 uint AddressableGetRequest public const uint AddressableGetRequest = 220000002 字段值 uint AddressableGetResponse public const uint AddressableGetResponse = 260000002 字段值 uint AddressableLockRequest public const uint AddressableLockRequest = 220000004 字段值 uint AddressableLockResponse public const uint AddressableLockResponse = 260000004 字段值 uint AddressableRemoveRequest public const uint AddressableRemoveRequest = 220000003 字段值 uint AddressableRemoveResponse public const uint AddressableRemoveResponse = 260000003 字段值 uint AddressableUnLockRequest public const uint AddressableUnLockRequest = 220000005 字段值 uint AddressableUnLockResponse public const uint AddressableUnLockResponse = 260000005 字段值 uint DefaultResponse public const uint DefaultResponse = 3 字段值 uint DefaultRouteResponse public const uint DefaultRouteResponse = 260000006 字段值 uint InnerBsonMessage public const uint InnerBsonMessage = 140000000 字段值 uint InnerBsonRequest public const uint InnerBsonRequest = 150000000 字段值 uint InnerBsonResponse public const uint InnerBsonResponse = 180000000 字段值 uint InnerBsonRouteMessage public const uint InnerBsonRouteMessage = 230000000 字段值 uint InnerBsonRouteRequest public const uint InnerBsonRouteRequest = 240000000 字段值 uint InnerBsonRouteResponse public const uint InnerBsonRouteResponse = 270000000 字段值 uint InnerMessage public const uint InnerMessage = 120000000 字段值 uint InnerRequest public const uint InnerRequest = 130000000 字段值 uint InnerResponse public const uint InnerResponse = 170000000 字段值 uint InnerRouteMessage public const uint InnerRouteMessage = 210000000 字段值 uint InnerRouteRequest public const uint InnerRouteRequest = 220000000 字段值 uint InnerRouteResponse public const uint InnerRouteResponse = 260000000 字段值 uint OuterMessage public const uint OuterMessage = 100000000 字段值 uint OuterRequest public const uint OuterRequest = 110000000 字段值 uint OuterResponse public const uint OuterResponse = 160000000 字段值 uint OuterRouteMessage public const uint OuterRouteMessage = 190000000 字段值 uint OuterRouteRequest public const uint OuterRouteRequest = 200000000 字段值 uint OuterRouteResponse public const uint OuterRouteResponse = 250000000 字段值 uint PingRequest public const uint PingRequest = 1 字段值 uint PingResponse public const uint PingResponse = 2 字段值 uint"
  },
  "reference/Fantasy.Core.Network.OuterMessageScheduler.html": {
    "href": "reference/Fantasy.Core.Network.OuterMessageScheduler.html",
    "title": "OuterMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "OuterMessageScheduler 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class OuterMessageScheduler : ANetworkMessageScheduler 继承 object ANetworkMessageScheduler OuterMessageScheduler 继承成员 ANetworkMessageScheduler.Scheduler(Session, APackInfo) ANetworkMessageScheduler.InnerScheduler(Session, uint, long, uint, long, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OuterMessageScheduler() public OuterMessageScheduler() 方法 Handler(Session, Type, APackInfo) protected override FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session messageType Type packInfo APackInfo 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) protected override FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session rpcId uint routeId long protocolCode uint routeTypeCode long messageType Type message object 返回 FTask"
  },
  "reference/Fantasy.Core.Network.OuterPackInfo.html": {
    "href": "reference/Fantasy.Core.Network.OuterPackInfo.html",
    "title": "OuterPackInfo 类 | Fantasy.Net API Reference",
    "keywords": "OuterPackInfo 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class OuterPackInfo : APackInfo, IDisposable 继承 object APackInfo OuterPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.ProtocolCode APackInfo.RouteTypeCode APackInfo.MessagePacketLength APackInfo.MemoryOwner APackInfo.IsDisposed APackInfo.Rent<T>() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OuterPackInfo() public OuterPackInfo() 方法 Create(IMemoryOwner<byte>) public static OuterPackInfo Create(IMemoryOwner<byte> memoryOwner) 参数 memoryOwner IMemoryOwner<byte> 返回 OuterPackInfo CreateMemoryStream() public override MemoryStream CreateMemoryStream() 返回 MemoryStream Deserialize(Type) public override object Deserialize(Type messageType) 参数 messageType Type 返回 object Dispose() public override void Dispose()"
  },
  "reference/Fantasy.Core.Network.OuterPacketParser.html": {
    "href": "reference/Fantasy.Core.Network.OuterPacketParser.html",
    "title": "OuterPacketParser 类 | Fantasy.Net API Reference",
    "keywords": "OuterPacketParser 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class OuterPacketParser : APacketParser, IDisposable 继承 object APacketParser OuterPacketParser 实现 IDisposable 继承成员 APacketParser.CreatePacketParser(NetworkTarget) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OuterPacketParser() public OuterPacketParser() 方法 Dispose() public override void Dispose() Pack(uint, long, MemoryStream) public static MemoryStream Pack(uint rpcId, long routeTypeOpCode, MemoryStream memoryStream) 参数 rpcId uint routeTypeOpCode long memoryStream MemoryStream 返回 MemoryStream Pack(uint, long, object) public static MemoryStream Pack(uint rpcId, long routeTypeOpCode, object message) 参数 rpcId uint routeTypeOpCode long message object 返回 MemoryStream UnPack(CircularBuffer, out APackInfo) public override bool UnPack(CircularBuffer buffer, out APackInfo packInfo) 参数 buffer CircularBuffer packInfo APackInfo 返回 bool UnPack(IMemoryOwner<byte>, out APackInfo) public override bool UnPack(IMemoryOwner<byte> memoryOwner, out APackInfo packInfo) 参数 memoryOwner IMemoryOwner<byte> packInfo APackInfo 返回 bool"
  },
  "reference/Fantasy.Core.Network.Packet.html": {
    "href": "reference/Fantasy.Core.Network.Packet.html",
    "title": "Packet 结构 | Fantasy.Net API Reference",
    "keywords": "Packet 结构 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public struct Packet 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 字段 InnerPacketHeadLength public const int InnerPacketHeadLength = 20 字段值 int InnerPacketMaxLength public const int InnerPacketMaxLength = 1048580 字段值 int InnerPacketRouteRouteIdLocation public const int InnerPacketRouteRouteIdLocation = 12 字段值 int InnerPacketRpcIdLocation public const int InnerPacketRpcIdLocation = 8 字段值 int OuterPacketHeadLength public const int OuterPacketHeadLength = 20 字段值 int OuterPacketMaxLength public const int OuterPacketMaxLength = 1048580 字段值 int OuterPacketRouteTypeOpCodeLocation public const int OuterPacketRouteTypeOpCodeLocation = 12 字段值 int OuterPacketRpcIdLocation public const int OuterPacketRpcIdLocation = 8 字段值 int PacketBodyMaxLength public const int PacketBodyMaxLength = 1048560 字段值 int PacketLength public const int PacketLength = 4 字段值 int PacketRouteIdLength public const int PacketRouteIdLength = 8 字段值 int ProtocolCodeLength public const int ProtocolCodeLength = 4 字段值 int RouteTypeOpCodeLength public const int RouteTypeOpCodeLength = 8 字段值 int RpcIdLength public const int RpcIdLength = 4 字段值 int"
  },
  "reference/Fantasy.Core.Network.Route-2.html": {
    "href": "reference/Fantasy.Core.Network.Route-2.html",
    "title": "Route<TEntity, TMessage> 类 | Fantasy.Net API Reference",
    "keywords": "Route<TEntity, TMessage> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class Route<TEntity, TMessage> : IRouteMessageHandler where TEntity : Entity where TMessage : IRouteMessage 类型参数 TEntity TMessage 继承 object Route<TEntity, TMessage> 实现 IRouteMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Route() protected Route() 方法 Handle(Session, Entity, uint, object) public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session entity Entity rpcId uint routeMessage object 返回 FTask Run(TEntity, TMessage) protected abstract FTask Run(TEntity entity, TMessage message) 参数 entity TEntity message TMessage 返回 FTask Type() public Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.RouteComponent.html": {
    "href": "reference/Fantasy.Core.Network.RouteComponent.html",
    "title": "RouteComponent 类 | Fantasy.Net API Reference",
    "keywords": "RouteComponent 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class RouteComponent : Entity, IDisposable 继承 object Entity RouteComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteComponent() public RouteComponent() 字段 RouteAddress public readonly Dictionary<long, long> RouteAddress 字段值 Dictionary<long, long> 方法 AddAddress(long, long) public void AddAddress(long routeType, long routeId) 参数 routeType long routeId long Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() GetRouteId(long) public long GetRouteId(long routeType) 参数 routeType long 返回 long RemoveAddress(long) public void RemoveAddress(long routeType) 参数 routeType long TryGetRouteId(long, out long) public bool TryGetRouteId(long routeType, out long routeId) 参数 routeType long routeId long 返回 bool"
  },
  "reference/Fantasy.Core.Network.RouteRPC-3.html": {
    "href": "reference/Fantasy.Core.Network.RouteRPC-3.html",
    "title": "RouteRPC<TEntity, TRouteRequest, TRouteResponse> 类 | Fantasy.Net API Reference",
    "keywords": "RouteRPC<TEntity, TRouteRequest, TRouteResponse> 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public abstract class RouteRPC<TEntity, TRouteRequest, TRouteResponse> : IRouteMessageHandler where TEntity : Entity where TRouteRequest : IRouteRequest where TRouteResponse : IRouteResponse 类型参数 TEntity TRouteRequest TRouteResponse 继承 object RouteRPC<TEntity, TRouteRequest, TRouteResponse> 实现 IRouteMessageHandler Derived I_AddressableAddHandler I_AddressableGetHandler I_AddressableLockHandler I_AddressableRemoveHandler I_AddressableUnLockHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteRPC() protected RouteRPC() 方法 Handle(Session, Entity, uint, object) public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session entity Entity rpcId uint routeMessage object 返回 FTask Run(TEntity, TRouteRequest, TRouteResponse, Action) protected abstract FTask Run(TEntity entity, TRouteRequest request, TRouteResponse response, Action reply) 参数 entity TEntity request TRouteRequest response TRouteResponse reply Action 返回 FTask Type() public Type Type() 返回 Type"
  },
  "reference/Fantasy.Core.Network.ScanException.html": {
    "href": "reference/Fantasy.Core.Network.ScanException.html",
    "title": "ScanException 类 | Fantasy.Net API Reference",
    "keywords": "ScanException 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public class ScanException : Exception, ISerializable 继承 object Exception ScanException 实现 ISerializable 继承成员 Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ScanException() public ScanException() ScanException(string) public ScanException(string msg) 参数 msg string"
  },
  "reference/Fantasy.Core.Network.ServerInnerSession.html": {
    "href": "reference/Fantasy.Core.Network.ServerInnerSession.html",
    "title": "ServerInnerSession 类 | Fantasy.Net API Reference",
    "keywords": "ServerInnerSession 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class ServerInnerSession : Session, INotSupportedPool, ISupportedMultiEntity, IDisposable 继承 object Entity Session ServerInnerSession 实现 INotSupportedPool ISupportedMultiEntity IDisposable 继承成员 Session.Sessions Session.RequestCallback Session.Create(ANetworkMessageScheduler, ANetworkChannel, NetworkTarget) Session.Create(AClientNetwork) Session.Create(ANetwork) Session.CreateServerInner(Scene) Session.TryGet(long, out Session) Session.Dispose() Session.NetworkId Session.ChannelId Session.LastReceiveTime Session.NetworkMessageScheduler Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ServerInnerSession() public ServerInnerSession() 方法 Call(IRequest, long) public override FTask<IResponse> Call(IRequest request, long routeId = 0) 参数 request IRequest routeId long 返回 FTask<IResponse> Send(IRouteMessage, uint, long) public override void Send(IRouteMessage routeMessage, uint rpcId = 0, long routeId = 0) 参数 routeMessage IRouteMessage rpcId uint routeId long Send(MemoryStream, uint, long, long) public override void Send(MemoryStream memoryStream, uint rpcId = 0, long routeTypeOpCode = 0, long routeId = 0) 参数 memoryStream MemoryStream rpcId uint routeTypeOpCode long routeId long Send(object, uint, long) public override void Send(object message, uint rpcId = 0, long routeId = 0) 参数 message object rpcId uint routeId long"
  },
  "reference/Fantasy.Core.Network.ServerNetworkComponent.html": {
    "href": "reference/Fantasy.Core.Network.ServerNetworkComponent.html",
    "title": "ServerNetworkComponent 类 | Fantasy.Net API Reference",
    "keywords": "ServerNetworkComponent 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class ServerNetworkComponent : Entity, IDisposable, INotSupportedPool 继承 object Entity ServerNetworkComponent 实现 IDisposable INotSupportedPool 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ServerNetworkComponent() public ServerNetworkComponent() 属性 Network public ANetwork Network { get; } 属性值 ANetwork 方法 Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() Initialize(NetworkProtocolType, NetworkTarget, IPEndPoint) public void Initialize(NetworkProtocolType networkProtocolType, NetworkTarget networkTarget, IPEndPoint address) 参数 networkProtocolType NetworkProtocolType networkTarget NetworkTarget address IPEndPoint"
  },
  "reference/Fantasy.Core.Network.Session.html": {
    "href": "reference/Fantasy.Core.Network.Session.html",
    "title": "Session 类 | Fantasy.Net API Reference",
    "keywords": "Session 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public class Session : Entity, INotSupportedPool, ISupportedMultiEntity, IDisposable 继承 object Entity Session 实现 INotSupportedPool ISupportedMultiEntity IDisposable Derived ServerInnerSession 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.Create<T>(long, uint, bool) Entity.Create<T>(long, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Session() public Session() 字段 RequestCallback public readonly Dictionary<long, FTask<IResponse>> RequestCallback 字段值 Dictionary<long, FTask<IResponse>> Sessions public static readonly Dictionary<long, Session> Sessions 字段值 Dictionary<long, Session> 属性 ChannelId public uint ChannelId { get; } 属性值 uint LastReceiveTime public long LastReceiveTime { get; } 属性值 long NetworkId public long NetworkId { get; } 属性值 long NetworkMessageScheduler public ANetworkMessageScheduler NetworkMessageScheduler { get; } 属性值 ANetworkMessageScheduler 方法 Call(IRequest, long) public virtual FTask<IResponse> Call(IRequest request, long routeId = 0) 参数 request IRequest routeId long 返回 FTask<IResponse> Create(AClientNetwork) public static Session Create(AClientNetwork network) 参数 network AClientNetwork 返回 Session Create(ANetwork) public static ServerInnerSession Create(ANetwork network) 参数 network ANetwork 返回 ServerInnerSession Create(ANetworkMessageScheduler, ANetworkChannel, NetworkTarget) public static void Create(ANetworkMessageScheduler networkMessageScheduler, ANetworkChannel channel, NetworkTarget networkTarget) 参数 networkMessageScheduler ANetworkMessageScheduler channel ANetworkChannel networkTarget NetworkTarget CreateServerInner(Scene) public static ServerInnerSession CreateServerInner(Scene scene) 参数 scene Scene 返回 ServerInnerSession Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() Send(IRouteMessage, uint, long) public virtual void Send(IRouteMessage routeMessage, uint rpcId = 0, long routeId = 0) 参数 routeMessage IRouteMessage rpcId uint routeId long Send(MemoryStream, uint, long, long) public virtual void Send(MemoryStream memoryStream, uint rpcId = 0, long routeTypeOpCode = 0, long routeId = 0) 参数 memoryStream MemoryStream rpcId uint routeTypeOpCode long routeId long Send(object, uint, long) public virtual void Send(object message, uint rpcId = 0, long routeId = 0) 参数 message object rpcId uint routeId long TryGet(long, out Session) public static bool TryGet(long id, out Session session) 参数 id long session Session 返回 bool"
  },
  "reference/Fantasy.Core.Network.SocketExtensions.html": {
    "href": "reference/Fantasy.Core.Network.SocketExtensions.html",
    "title": "SocketExtensions 类 | Fantasy.Net API Reference",
    "keywords": "SocketExtensions 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public static class SocketExtensions 继承 object SocketExtensions 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 SetReceiveBufferToOSLimit(Socket, int, int) public static void SetReceiveBufferToOSLimit(this Socket socket, int stepSize = 1024, int attempts = 100000) 参数 socket Socket stepSize int attempts int SetSendBufferToOSLimit(Socket, int, int) public static void SetSendBufferToOSLimit(this Socket socket, int stepSize = 1024, int attempts = 100000) 参数 socket Socket stepSize int attempts int SetSocketBufferToOsLimit(Socket) public static void SetSocketBufferToOsLimit(this Socket socket) 参数 socket Socket"
  },
  "reference/Fantasy.Core.Network.TCPClientNetwork.html": {
    "href": "reference/Fantasy.Core.Network.TCPClientNetwork.html",
    "title": "TCPClientNetwork 类 | Fantasy.Net API Reference",
    "keywords": "TCPClientNetwork 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class TCPClientNetwork : AClientNetwork, IDisposable 继承 object ANetwork AClientNetwork TCPClientNetwork 实现 IDisposable 继承成员 AClientNetwork.ChannelId ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TCPClientNetwork(Scene, NetworkTarget) public TCPClientNetwork(Scene scene, NetworkTarget networkTarget) 参数 scene Scene networkTarget NetworkTarget 方法 Connect(IPEndPoint, Action, Action, Action, int) public override uint Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint onConnectComplete Action onConnectFail Action onConnectDisconnect Action connectTimeout int 返回 uint Dispose() public override void Dispose() RemoveChannel(uint) public override void RemoveChannel(uint channelId) 参数 channelId uint Send(uint, uint, long, long, MemoryStream) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long memoryStream MemoryStream Send(uint, uint, long, long, object) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long message object 事件 OnChangeChannelId public override event Action<uint> OnChangeChannelId 事件类型 Action<uint> OnConnectComplete public override event Action OnConnectComplete 事件类型 Action OnConnectDisconnect public override event Action OnConnectDisconnect 事件类型 Action OnConnectFail public override event Action OnConnectFail 事件类型 Action OnDispose public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.Core.Network.TCPServerNetwork.html": {
    "href": "reference/Fantasy.Core.Network.TCPServerNetwork.html",
    "title": "TCPServerNetwork 类 | Fantasy.Net API Reference",
    "keywords": "TCPServerNetwork 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class TCPServerNetwork : ANetwork, IDisposable 继承 object ANetwork TCPServerNetwork 实现 IDisposable 继承成员 ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TCPServerNetwork(Scene, NetworkTarget, IPEndPoint) public TCPServerNetwork(Scene scene, NetworkTarget networkTarget, IPEndPoint address) 参数 scene Scene networkTarget NetworkTarget address IPEndPoint 方法 Dispose() public override void Dispose() RemoveChannel(uint) public override void RemoveChannel(uint channelId) 参数 channelId uint Send(uint, uint, long, long, MemoryStream) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long memoryStream MemoryStream Send(uint, uint, long, long, object) public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint rpcId uint routeTypeOpCode long routeId long message object"
  },
  "reference/Fantasy.Core.Network.TCPServerNetworkChannel.html": {
    "href": "reference/Fantasy.Core.Network.TCPServerNetworkChannel.html",
    "title": "TCPServerNetworkChannel 类 | Fantasy.Net API Reference",
    "keywords": "TCPServerNetworkChannel 类 命名空间 Fantasy.Core.Network 程序集 Fantasy.Net.dll public sealed class TCPServerNetworkChannel : ANetworkChannel 继承 object ANetworkChannel TCPServerNetworkChannel 继承成员 ANetworkChannel.Id ANetworkChannel.Scene ANetworkChannel.NetworkId ANetworkChannel.IsDisposed ANetworkChannel.RemoteEndPoint ANetworkChannel.PacketParser object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TCPServerNetworkChannel(uint, Socket, ANetwork) public TCPServerNetworkChannel(uint id, Socket socket, ANetwork network) 参数 id uint socket Socket network ANetwork 方法 Dispose() public override void Dispose() Receive() public void Receive() Send(MemoryStream) public void Send(MemoryStream memoryStream) 参数 memoryStream MemoryStream 事件 OnDispose public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.Core.Network.html": {
    "href": "reference/Fantasy.Core.Network.html",
    "title": "Fantasy.Core.Network 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.Core.Network 命名空间 类 AClientNetwork ANetwork ANetworkChannel ANetworkMessageScheduler APackInfo APacketParser AddressableHelper AddressableManageComponent AddressableMessageComponent AddressableRPC<TEntity, TRouteRequest, TRouteResponse> AddressableRouteComponent Addressable<TEntity, TMessage> ClientMessageScheduler ClientNetworkComponent CoreRouteType HandlerInfo<T> I_AddressableAddHandler I_AddressableGetHandler I_AddressableLockHandler I_AddressableRemoveHandler I_AddressableUnLockHandler InnerMessageScheduler InnerPackInfo InnerPacketParser KCPClientNetwork KCPServerNetwork KCPServerNetworkChannel KCPSettings MessageDispatcherSystem MessageHelper MessageRPC<TRequest, TResponse> MessageSender Message<T> NetworkThread OnNetworkMessageUpdateCheckTimeout Opcode OuterMessageScheduler OuterPackInfo OuterPacketParser RouteComponent RouteRPC<TEntity, TRouteRequest, TRouteResponse> Route<TEntity, TMessage> ScanException ServerInnerSession ServerNetworkComponent Session SocketExtensions TCPClientNetwork TCPServerNetwork TCPServerNetworkChannel 结构 MessageCacheInfo MessageHelper.NetworkMessageUpdate NetAction Packet 接口 IAddressableRouteMessage IAddressableRouteRequest IAddressableRouteResponse IBsonAddressableRouteMessage IBsonAddressableRouteRequest IBsonAddressableRouteResponse IBsonMessage IBsonRequest IBsonResponse IBsonRouteMessage IBsonRouteRequest IBsonRouteResponse ICustomRouteMessage ICustomRouteRequest ICustomRouteResponse IMessage IMessageHandler INetworkUpdate IRequest IResponse IRouteMessage IRouteMessageHandler IRouteRequest IRouteResponse 枚举 KcpHeader NetActionType NetworkProtocolType NetworkTarget NetworkType"
  },
  "reference/Fantasy.Core.OnCoroutineLockTimeout.html": {
    "href": "reference/Fantasy.Core.OnCoroutineLockTimeout.html",
    "title": "OnCoroutineLockTimeout 类 | Fantasy.Net API Reference",
    "keywords": "OnCoroutineLockTimeout 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class OnCoroutineLockTimeout : EventSystem<CoroutineLockTimeout>, IEvent 继承 object EventSystem<CoroutineLockTimeout> OnCoroutineLockTimeout 实现 IEvent 继承成员 EventSystem<CoroutineLockTimeout>.EventType() EventSystem<CoroutineLockTimeout>.Invoke(object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OnCoroutineLockTimeout() public OnCoroutineLockTimeout() 方法 Handler(CoroutineLockTimeout) 同步处理事件的方法。 public override void Handler(CoroutineLockTimeout self) 参数 self CoroutineLockTimeout 事件的实例。"
  },
  "reference/Fantasy.Core.OpcodeInfo.html": {
    "href": "reference/Fantasy.Core.OpcodeInfo.html",
    "title": "OpcodeInfo 类 | Fantasy.Net API Reference",
    "keywords": "OpcodeInfo 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class OpcodeInfo 继承 object OpcodeInfo 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OpcodeInfo() public OpcodeInfo() 字段 Code public uint Code 字段值 uint Name public string Name 字段值 string"
  },
  "reference/Fantasy.Core.ProtoBufExporter.html": {
    "href": "reference/Fantasy.Core.ProtoBufExporter.html",
    "title": "ProtoBufExporter 类 | Fantasy.Net API Reference",
    "keywords": "ProtoBufExporter 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class ProtoBufExporter 继承 object ProtoBufExporter 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ProtoBufExporter() public ProtoBufExporter()"
  },
  "reference/Fantasy.Core.ProtoBufOpCodeType.html": {
    "href": "reference/Fantasy.Core.ProtoBufOpCodeType.html",
    "title": "ProtoBufOpCodeType 枚举 | Fantasy.Net API Reference",
    "keywords": "ProtoBufOpCodeType 枚举 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public enum ProtoBufOpCodeType 扩展方法 JsonHelper.ToJson<T>(T) 字段 Inner = 2 InnerBson = 3 None = 0 Outer = 1"
  },
  "reference/Fantasy.Core.SessionIdleCheckerComponent.html": {
    "href": "reference/Fantasy.Core.SessionIdleCheckerComponent.html",
    "title": "SessionIdleCheckerComponent 类 | Fantasy.Net API Reference",
    "keywords": "SessionIdleCheckerComponent 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public class SessionIdleCheckerComponent : Entity, IDisposable 继承 object Entity SessionIdleCheckerComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.Create<T>(long, uint, bool) Entity.Create<T>(long, long, bool) Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SessionIdleCheckerComponent() public SessionIdleCheckerComponent() 方法 Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public override void Dispose() Start(int, int) public void Start(int interval, int timeOut) 参数 interval int timeOut int Stop() public void Stop()"
  },
  "reference/Fantasy.Core.StringDictionaryConfig.html": {
    "href": "reference/Fantasy.Core.StringDictionaryConfig.html",
    "title": "StringDictionaryConfig 类 | Fantasy.Net API Reference",
    "keywords": "StringDictionaryConfig 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class StringDictionaryConfig 继承 object StringDictionaryConfig 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StringDictionaryConfig() public StringDictionaryConfig() 字段 Dic public Dictionary<int, string> Dic 字段值 Dictionary<int, string> 属性 this[int] public string this[int key] { get; } 参数 key int 属性值 string 方法 TryGetValue(int, out string) public bool TryGetValue(int key, out string value) 参数 key int value string 返回 bool"
  },
  "reference/Fantasy.Core.WaitCoroutineLock.html": {
    "href": "reference/Fantasy.Core.WaitCoroutineLock.html",
    "title": "WaitCoroutineLock 类 | Fantasy.Net API Reference",
    "keywords": "WaitCoroutineLock 类 命名空间 Fantasy.Core 程序集 Fantasy.Net.dll public sealed class WaitCoroutineLock : IDisposable 继承 object WaitCoroutineLock 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 WaitCoroutineLock() public WaitCoroutineLock() 属性 CoroutineLockQueue public CoroutineLockQueue CoroutineLockQueue { get; } 属性值 CoroutineLockQueue IsDisposed public bool IsDisposed { get; } 属性值 bool LockId public long LockId { get; } 属性值 long Tag public string Tag { get; } 属性值 string Tcs public FTask<WaitCoroutineLock> Tcs { get; } 属性值 FTask<WaitCoroutineLock> 方法 Create(CoroutineLockQueue, string, int) public static WaitCoroutineLock Create(CoroutineLockQueue coroutineLockQueue, string tag, int timeOut) 参数 coroutineLockQueue CoroutineLockQueue tag string timeOut int 返回 WaitCoroutineLock Dispose() public void Dispose() SetResult() public void SetResult()"
  },
  "reference/Fantasy.Core.html": {
    "href": "reference/Fantasy.Core.html",
    "title": "Fantasy.Core 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.Core 命名空间 类 ACustomExport ConfigTableManage CoreErrorCode CoroutineLockQueue CoroutineLockQueueType Define DynamicAssembly DynamicConfigDataType ExcelExporter ExcelTable ExportInfo Exporter FantasySettingsHelper IntDictionaryConfig OnCoroutineLockTimeout OpcodeInfo ProtoBufExporter SessionIdleCheckerComponent StringDictionaryConfig WaitCoroutineLock 结构 CoroutineLockTimeout 接口 IConfigTable ICustomExport 枚举 ACustomExport.CustomExportType ExportType ProtoBufOpCodeType"
  },
  "reference/Fantasy.CoreErrorCode.html": {
    "href": "reference/Fantasy.CoreErrorCode.html",
    "title": "CoreErrorCode 类 | Fantasy.Net API Reference",
    "keywords": "CoreErrorCode 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义 Fantasy 框架中的核心错误代码。 public class CoreErrorCode 继承 object CoreErrorCode 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoreErrorCode() public CoreErrorCode() 字段 ErrNotFoundRoute 表示未找到 Route 消息的错误代码。 public const uint ErrNotFoundRoute = 100000003 字段值 uint ErrRouteTimeout 表示发送 Route 消息超时的错误代码。 public const uint ErrRouteTimeout = 100000004 字段值 uint ErrRpcFail 表示 Rpc 消息发送失败的错误代码。 public const uint ErrRpcFail = 100000002 字段值 uint Error_NotFindEntity 表示未找到实体的错误代码。 public const uint Error_NotFindEntity = 100000008 字段值 uint Error_Transfer 表示传送过程中发生错误的错误代码。 public const uint Error_Transfer = 100000009 字段值 uint"
  },
  "reference/Fantasy.CoreRouteType.html": {
    "href": "reference/Fantasy.CoreRouteType.html",
    "title": "CoreRouteType 类 | Fantasy.Net API Reference",
    "keywords": "CoreRouteType 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供了一组框架内置的核心路由类型。 public class CoreRouteType 继承 object CoreRouteType 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoreRouteType() public CoreRouteType() 字段 Addressable 基础Addressable协议、框架内置千万不要删除 public const long Addressable = 3 字段值 long BsonRoute 基础BsonRoute协议、框架内置千万不要删除 public const long BsonRoute = 2 字段值 long CustomRouteType 自定义RouteType、框架内置千万不要删除 public const long CustomRouteType = 1000 字段值 long Route 基础Route协议、框架内置千万不要删除 public const long Route = 1 字段值 long"
  },
  "reference/Fantasy.CoroutineLockQueue.html": {
    "href": "reference/Fantasy.CoroutineLockQueue.html",
    "title": "CoroutineLockQueue 类 | Fantasy.Net API Reference",
    "keywords": "CoroutineLockQueue 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 协程锁队列，用于协程等待和释放锁的管理。 public sealed class CoroutineLockQueue : IDisposable 继承 object CoroutineLockQueue 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoroutineLockQueue() public CoroutineLockQueue() 属性 CoroutineLockQueueType 获取协程锁队列的类型。 public CoroutineLockQueueType CoroutineLockQueueType { get; } 属性值 CoroutineLockQueueType Key 获取锁队列的键。 public long Key { get; } 属性值 long 方法 Create(long, int, CoroutineLockQueueType) 创建一个协程锁队列实例。 public static CoroutineLockQueue Create(long key, int time, CoroutineLockQueueType coroutineLockQueueType) 参数 key long 锁队列的键。 time int 等待时间。 coroutineLockQueueType CoroutineLockQueueType 协程锁队列的类型。 返回 CoroutineLockQueue 创建的协程锁队列实例。 Dispose() 释放协程锁队列实例。 public void Dispose() Lock(string, int) 请求协程锁,获取等待协程锁的任务。 public FTask<WaitCoroutineLock> Lock(string tag, int time) 参数 tag string 锁标识。 time int 等待时间。 返回 FTask<WaitCoroutineLock> 等待协程锁的任务。 Release() 释放协程锁。 public void Release()"
  },
  "reference/Fantasy.CoroutineLockQueueType.html": {
    "href": "reference/Fantasy.CoroutineLockQueueType.html",
    "title": "CoroutineLockQueueType 类 | Fantasy.Net API Reference",
    "keywords": "CoroutineLockQueueType 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 指定键的协程锁队列类型，用于管理不同类型的协程锁队列。 public sealed class CoroutineLockQueueType 继承 object CoroutineLockQueueType 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CoroutineLockQueueType(string) 初始化协程锁队列类型的实例。 public CoroutineLockQueueType(string name) 参数 name string 协程锁队列类型的名称。 字段 Name 获取协程锁队列类型的名称。 public readonly string Name 字段值 string 方法 Lock(long, string, int) 请求协程锁，获取指定键的协程锁。 public FTask<WaitCoroutineLock> Lock(long key, string tag = null, int time = 30000) 参数 key long 协程锁队列的键。 tag string 锁标识。 time int 等待时间。 返回 FTask<WaitCoroutineLock> 等待协程锁的任务。 Remove(long) 从协程锁队列类型中移除指定键的协程锁队列。 public void Remove(long key) 参数 key long 要移除的协程锁队列的键。"
  },
  "reference/Fantasy.CoroutineLockTimeout.html": {
    "href": "reference/Fantasy.CoroutineLockTimeout.html",
    "title": "CoroutineLockTimeout 结构 | Fantasy.Net API Reference",
    "keywords": "CoroutineLockTimeout 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 等待协程锁超时的数据结构 public struct CoroutineLockTimeout 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 字段 LockId 协程锁的唯一标识 public long LockId 字段值 long WaitCoroutineLock 等待的协程锁对象 public WaitCoroutineLock WaitCoroutineLock 字段值 WaitCoroutineLock"
  },
  "reference/Fantasy.CryptHelper.html": {
    "href": "reference/Fantasy.CryptHelper.html",
    "title": "CryptHelper 类 | Fantasy.Net API Reference",
    "keywords": "CryptHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供加密和解密相关的辅助方法。 public static class CryptHelper 继承 object CryptHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 AesDecrypt(byte[]) 使用 AES 算法对字节数组进行解密。 public static byte[] AesDecrypt(byte[] toEncryptArray) 参数 toEncryptArray byte[] 要解密的字节数组。 返回 byte[] 解密后的字节数组。 AesDecryptReturnStream(byte[]) 使用 AES 算法对字节数组进行解密，返回一个内存流。 public static MemoryStream AesDecryptReturnStream(byte[] toEncryptArray) 参数 toEncryptArray byte[] 要解密的字节数组。 返回 MemoryStream 解密后的内存流。 AesEncrypt(byte[]) 使用 AES 算法对字节数组进行加密。 public static byte[] AesEncrypt(byte[] toEncryptArray) 参数 toEncryptArray byte[] 要加密的字节数组。 返回 byte[] 加密后的字节数组。 CreateKey(string) 创建一个新的加密密钥 public static string CreateKey(string keyStr) 参数 keyStr string 一个长度为16的字符串、如果超过只会截取前16位 返回 string 返回的是一个十六进制的字符串、每个用,分割的、每个都是一个byte"
  },
  "reference/Fantasy.CustomExport.SceneTypeConfigToEnum.html": {
    "href": "reference/Fantasy.CustomExport.SceneTypeConfigToEnum.html",
    "title": "SceneTypeConfigToEnum 类 | Fantasy.Net API Reference",
    "keywords": "SceneTypeConfigToEnum 类 命名空间 Fantasy.CustomExport 程序集 Fantasy.Net.dll public sealed class SceneTypeConfigToEnum : ACustomExport, ICustomExport 继承 object ACustomExport SceneTypeConfigToEnum 实现 ICustomExport 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SceneTypeConfigToEnum() public SceneTypeConfigToEnum() 方法 Run() public override void Run()"
  },
  "reference/Fantasy.CustomExport.html": {
    "href": "reference/Fantasy.CustomExport.html",
    "title": "Fantasy.CustomExport 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.CustomExport 命名空间 类 SceneTypeConfigToEnum"
  },
  "reference/Fantasy.DataStructure.CircularBuffer.html": {
    "href": "reference/Fantasy.DataStructure.CircularBuffer.html",
    "title": "CircularBuffer 类 | Fantasy.Net API Reference",
    "keywords": "CircularBuffer 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class CircularBuffer : Stream, IAsyncDisposable, IDisposable 继承 object MarshalByRefObject Stream CircularBuffer 实现 IAsyncDisposable IDisposable 继承成员 Stream.Null Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.Close() Stream.DisposeAsync() Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.Read(Span<byte>) Stream.ReadByte() Stream.ReadExactly(Span<byte>) Stream.ReadExactly(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.Write(ReadOnlySpan<byte>) Stream.WriteByte(byte) Stream.Synchronized(Stream) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 CircularBuffer() public CircularBuffer() 字段 ChunkSize public const int ChunkSize = 8192 字段值 int 属性 CanRead public override bool CanRead { get; } 属性值 bool CanSeek public override bool CanSeek { get; } 属性值 bool CanWrite public override bool CanWrite { get; } 属性值 bool First public byte[] First { get; } 属性值 byte[] FirstIndex public int FirstIndex { get; set; } 属性值 int Last public byte[] Last { get; } 属性值 byte[] LastIndex public int LastIndex { get; set; } 属性值 int Length public override long Length { get; } 属性值 long Position public override long Position { get; set; } 属性值 long 方法 AddLast() public void AddLast() Dispose() public void Dispose() Flush() public override void Flush() Read(byte[], int, int) public override int Read(byte[] buffer, int offset, int count) 参数 buffer byte[] offset int count int 返回 int Read(Stream, int) public void Read(Stream stream, int count) 参数 stream Stream count int Read(Memory<byte>, int) public void Read(Memory<byte> memory, int count) 参数 memory Memory<byte> count int RemoveFirst() public void RemoveFirst() Seek(long, SeekOrigin) public override long Seek(long offset, SeekOrigin origin) 参数 offset long origin SeekOrigin 返回 long SetLength(long) public override void SetLength(long value) 参数 value long Write(byte[]) public void Write(byte[] buffer) 参数 buffer byte[] Write(byte[], int, int) public override void Write(byte[] buffer, int offset, int count) 参数 buffer byte[] offset int count int Write(Stream) public void Write(Stream stream) 参数 stream Stream"
  },
  "reference/Fantasy.DataStructure.ConcurrentOneToManyList-2.html": {
    "href": "reference/Fantasy.DataStructure.ConcurrentOneToManyList-2.html",
    "title": "ConcurrentOneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyList<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class ConcurrentOneToManyList<TKey, TValue> : ConcurrentDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey TValue 继承 object ConcurrentDictionary<TKey, List<TValue>> ConcurrentOneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable Derived ConcurrentOneToManyListPool<TKey, TValue> 继承成员 ConcurrentDictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(KeyValuePair<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryUpdate(TKey, List<TValue>, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.Clear() ConcurrentDictionary<TKey, List<TValue>>.ToArray() ConcurrentDictionary<TKey, List<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, Func<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, List<TValue>>, Func<TKey, List<TValue>, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, Func<TKey, List<TValue>>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, List<TValue>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.this[TKey] ConcurrentDictionary<TKey, List<TValue>>.Comparer ConcurrentDictionary<TKey, List<TValue>>.Count ConcurrentDictionary<TKey, List<TValue>>.IsEmpty ConcurrentDictionary<TKey, List<TValue>>.Keys ConcurrentDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyList() public ConcurrentOneToManyList() ConcurrentOneToManyList(int) public ConcurrentOneToManyList(int recyclingLimit) 参数 recyclingLimit int 方法 Add(TKey, TValue) public void Add(TKey key, TValue value) 参数 key TKey value TValue Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool First(TKey) public TValue First(TKey key) 参数 key TKey 返回 TValue RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey RemoveValue(TKey, TValue) public void RemoveValue(TKey key, TValue value) 参数 key TKey value TValue"
  },
  "reference/Fantasy.DataStructure.ConcurrentOneToManyListPool-2.html": {
    "href": "reference/Fantasy.DataStructure.ConcurrentOneToManyListPool-2.html",
    "title": "ConcurrentOneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyListPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class ConcurrentOneToManyListPool<TKey, TValue> : ConcurrentOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object ConcurrentDictionary<TKey, List<TValue>> ConcurrentOneToManyList<TKey, TValue> ConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable IDisposable 继承成员 ConcurrentOneToManyList<TKey, TValue>.Contains(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.Add(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.First(TKey) ConcurrentOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) ConcurrentOneToManyList<TKey, TValue>.RemoveKey(TKey) ConcurrentOneToManyList<TKey, TValue>.Clear() ConcurrentDictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryRemove(KeyValuePair<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.TryUpdate(TKey, List<TValue>, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.Clear() ConcurrentDictionary<TKey, List<TValue>>.ToArray() ConcurrentDictionary<TKey, List<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, Func<TKey, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.GetOrAdd(TKey, List<TValue>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, List<TValue>>, Func<TKey, List<TValue>, TArg, List<TValue>>, TArg) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, Func<TKey, List<TValue>>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.AddOrUpdate(TKey, List<TValue>, Func<TKey, List<TValue>, List<TValue>>) ConcurrentDictionary<TKey, List<TValue>>.this[TKey] ConcurrentDictionary<TKey, List<TValue>>.Comparer ConcurrentDictionary<TKey, List<TValue>>.Count ConcurrentDictionary<TKey, List<TValue>>.IsEmpty ConcurrentDictionary<TKey, List<TValue>>.Keys ConcurrentDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyListPool() public ConcurrentOneToManyListPool() 方法 Create() public static ConcurrentOneToManyListPool<TKey, TValue> Create() 返回 ConcurrentOneToManyListPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.ConcurrentOneToManyQueue-2.html": {
    "href": "reference/Fantasy.DataStructure.ConcurrentOneToManyQueue-2.html",
    "title": "ConcurrentOneToManyQueue<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyQueue<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class ConcurrentOneToManyQueue<TKey, TValue> : ConcurrentDictionary<TKey, Queue<TValue>>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey TValue 继承 object ConcurrentDictionary<TKey, Queue<TValue>> ConcurrentOneToManyQueue<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable Derived ConcurrentOneToManyQueuePool<TKey, TValue> 继承成员 ConcurrentDictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(KeyValuePair<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryUpdate(TKey, Queue<TValue>, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.ToArray() ConcurrentDictionary<TKey, Queue<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Func<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, Func<TKey, Queue<TValue>, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Func<TKey, Queue<TValue>>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Queue<TValue>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.this[TKey] ConcurrentDictionary<TKey, Queue<TValue>>.Comparer ConcurrentDictionary<TKey, Queue<TValue>>.Count ConcurrentDictionary<TKey, Queue<TValue>>.IsEmpty ConcurrentDictionary<TKey, Queue<TValue>>.Keys ConcurrentDictionary<TKey, Queue<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyQueue(int) public ConcurrentOneToManyQueue(int recyclingLimit = 0) 参数 recyclingLimit int 方法 Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool Dequeue(TKey) public TValue Dequeue(TKey key) 参数 key TKey 返回 TValue Enqueue(TKey, TValue) public void Enqueue(TKey key, TValue value) 参数 key TKey value TValue RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey TryDequeue(TKey, out TValue) public bool TryDequeue(TKey key, out TValue value) 参数 key TKey value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.ConcurrentOneToManyQueuePool-2.html": {
    "href": "reference/Fantasy.DataStructure.ConcurrentOneToManyQueuePool-2.html",
    "title": "ConcurrentOneToManyQueuePool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "ConcurrentOneToManyQueuePool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class ConcurrentOneToManyQueuePool<TKey, TValue> : ConcurrentOneToManyQueue<TKey, TValue>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object ConcurrentDictionary<TKey, Queue<TValue>> ConcurrentOneToManyQueue<TKey, TValue> ConcurrentOneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable IDisposable 继承成员 ConcurrentOneToManyQueue<TKey, TValue>.Contains(TKey, TValue) ConcurrentOneToManyQueue<TKey, TValue>.Enqueue(TKey, TValue) ConcurrentOneToManyQueue<TKey, TValue>.Dequeue(TKey) ConcurrentOneToManyQueue<TKey, TValue>.TryDequeue(TKey, out TValue) ConcurrentOneToManyQueue<TKey, TValue>.RemoveKey(TKey) ConcurrentOneToManyQueue<TKey, TValue>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.ContainsKey(TKey) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryRemove(KeyValuePair<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.TryUpdate(TKey, Queue<TValue>, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.Clear() ConcurrentDictionary<TKey, Queue<TValue>>.ToArray() ConcurrentDictionary<TKey, Queue<TValue>>.GetEnumerator() ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Func<TKey, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.GetOrAdd(TKey, Queue<TValue>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, Queue<TValue>>, Func<TKey, Queue<TValue>, TArg, Queue<TValue>>, TArg) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Func<TKey, Queue<TValue>>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.AddOrUpdate(TKey, Queue<TValue>, Func<TKey, Queue<TValue>, Queue<TValue>>) ConcurrentDictionary<TKey, Queue<TValue>>.this[TKey] ConcurrentDictionary<TKey, Queue<TValue>>.Comparer ConcurrentDictionary<TKey, Queue<TValue>>.Count ConcurrentDictionary<TKey, Queue<TValue>>.IsEmpty ConcurrentDictionary<TKey, Queue<TValue>>.Keys ConcurrentDictionary<TKey, Queue<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ConcurrentOneToManyQueuePool() public ConcurrentOneToManyQueuePool() 方法 Create() public static ConcurrentOneToManyQueuePool<TKey, TValue> Create() 返回 ConcurrentOneToManyQueuePool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.DictionaryExtensions.html": {
    "href": "reference/Fantasy.DataStructure.DictionaryExtensions.html",
    "title": "DictionaryExtensions 类 | Fantasy.Net API Reference",
    "keywords": "DictionaryExtensions 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public static class DictionaryExtensions 继承 object DictionaryExtensions 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) public static bool TryRemove<T, TV>(this IDictionary<T, TV> self, T key, out TV value) 参数 self IDictionary<T, TV> key T value TV 返回 bool 类型参数 T TV"
  },
  "reference/Fantasy.DataStructure.DictionaryPool-2.html": {
    "href": "reference/Fantasy.DataStructure.DictionaryPool-2.html",
    "title": "DictionaryPool<TM, TN> 类 | Fantasy.Net API Reference",
    "keywords": "DictionaryPool<TM, TN> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class DictionaryPool<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IDictionary, ICollection, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TM : notnull 类型参数 TM TN 继承 object Dictionary<TM, TN> DictionaryPool<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IDictionary ICollection IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values Dictionary<TM, TN>.this[TM] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 DictionaryPool() public DictionaryPool() 方法 Create() public static DictionaryPool<TM, TN> Create() 返回 DictionaryPool<TM, TN> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.DoubleMapDictionary-2.html": {
    "href": "reference/Fantasy.DataStructure.DoubleMapDictionary-2.html",
    "title": "DoubleMapDictionary<TK, TV> 类 | Fantasy.Net API Reference",
    "keywords": "DoubleMapDictionary<TK, TV> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class DoubleMapDictionary<TK, TV> where TK : notnull where TV : notnull 类型参数 TK TV 继承 object DoubleMapDictionary<TK, TV> Derived DoubleMapDictionaryPool<TKey, TValue> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DoubleMapDictionary() public DoubleMapDictionary() DoubleMapDictionary(int) public DoubleMapDictionary(int capacity) 参数 capacity int 属性 Keys public List<TK> Keys { get; } 属性值 List<TK> Values public List<TV> Values { get; } 属性值 List<TV> 方法 Add(TK, TV) public void Add(TK key, TV value) 参数 key TK value TV Clear() public void Clear() Contains(TK, TV) public bool Contains(TK key, TV value) 参数 key TK value TV 返回 bool ContainsKey(TK) public bool ContainsKey(TK key) 参数 key TK 返回 bool ContainsValue(TV) public bool ContainsValue(TV value) 参数 value TV 返回 bool ForEach(Action<TK, TV>) public void ForEach(Action<TK, TV> action) 参数 action Action<TK, TV> GetKeyByValue(TV) public TK GetKeyByValue(TV value) 参数 value TV 返回 TK GetValueByKey(TK) public TV GetValueByKey(TK key) 参数 key TK 返回 TV RemoveByKey(TK) public void RemoveByKey(TK key) 参数 key TK RemoveByValue(TV) public void RemoveByValue(TV value) 参数 value TV TryGetKeyByValue(TV, out TK) public bool TryGetKeyByValue(TV value, out TK key) 参数 value TV key TK 返回 bool TryGetValueByKey(TK, out TV) public bool TryGetValueByKey(TK key, out TV value) 参数 key TK value TV 返回 bool"
  },
  "reference/Fantasy.DataStructure.DoubleMapDictionaryPool-2.html": {
    "href": "reference/Fantasy.DataStructure.DoubleMapDictionaryPool-2.html",
    "title": "DoubleMapDictionaryPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "DoubleMapDictionaryPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class DoubleMapDictionaryPool<TKey, TValue> : DoubleMapDictionary<TKey, TValue>, IDisposable where TKey : notnull where TValue : notnull 类型参数 TKey TValue 继承 object DoubleMapDictionary<TKey, TValue> DoubleMapDictionaryPool<TKey, TValue> 实现 IDisposable 继承成员 DoubleMapDictionary<TKey, TValue>.ForEach(Action<TKey, TValue>) DoubleMapDictionary<TKey, TValue>.Add(TKey, TValue) DoubleMapDictionary<TKey, TValue>.GetValueByKey(TKey) DoubleMapDictionary<TKey, TValue>.TryGetValueByKey(TKey, out TValue) DoubleMapDictionary<TKey, TValue>.GetKeyByValue(TValue) DoubleMapDictionary<TKey, TValue>.TryGetKeyByValue(TValue, out TKey) DoubleMapDictionary<TKey, TValue>.RemoveByKey(TKey) DoubleMapDictionary<TKey, TValue>.RemoveByValue(TValue) DoubleMapDictionary<TKey, TValue>.Clear() DoubleMapDictionary<TKey, TValue>.ContainsKey(TKey) DoubleMapDictionary<TKey, TValue>.ContainsValue(TValue) DoubleMapDictionary<TKey, TValue>.Contains(TKey, TValue) DoubleMapDictionary<TKey, TValue>.Keys DoubleMapDictionary<TKey, TValue>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DoubleMapDictionaryPool() public DoubleMapDictionaryPool() 方法 Create() public static DoubleMapDictionaryPool<TKey, TValue> Create() 返回 DoubleMapDictionaryPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.EntityDictionary-2.html": {
    "href": "reference/Fantasy.DataStructure.EntityDictionary-2.html",
    "title": "EntityDictionary<TM, TN> 类 | Fantasy.Net API Reference",
    "keywords": "EntityDictionary<TM, TN> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class EntityDictionary<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IDictionary, ICollection, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TM : notnull where TN : IDisposable 类型参数 TM TN 继承 object Dictionary<TM, TN> EntityDictionary<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IDictionary ICollection IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values Dictionary<TM, TN>.this[TM] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 EntityDictionary() public EntityDictionary() 方法 Clear() public void Clear() ClearNotDispose() public void ClearNotDispose() Create() public static EntityDictionary<TM, TN> Create() 返回 EntityDictionary<TM, TN> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.EntityList-1.html": {
    "href": "reference/Fantasy.DataStructure.EntityList-1.html",
    "title": "EntityList<T> 类 | Fantasy.Net API Reference",
    "keywords": "EntityList<T> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class EntityList<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDisposable where T : IDisposable 类型参数 T 继承 object List<T> EntityList<T> 实现 IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDisposable 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>) 构造函数 EntityList() public EntityList() 方法 Clear() public void Clear() ClearNotDispose() public void ClearNotDispose() Create() public static EntityList<T> Create() 返回 EntityList<T> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.HashSetBasePool-1.html": {
    "href": "reference/Fantasy.DataStructure.HashSetBasePool-1.html",
    "title": "HashSetBasePool<T> 类 | Fantasy.Net API Reference",
    "keywords": "HashSetBasePool<T> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class HashSetBasePool<T> : IDisposable 类型参数 T 继承 object HashSetBasePool<T> 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 HashSetBasePool() public HashSetBasePool() 字段 Set public HashSet<T> Set 字段值 HashSet<T> 方法 Create() public static HashSetBasePool<T> Create() 返回 HashSetBasePool<T> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.HashSetPool-1.html": {
    "href": "reference/Fantasy.DataStructure.HashSetPool-1.html",
    "title": "HashSetPool<T> 类 | Fantasy.Net API Reference",
    "keywords": "HashSetPool<T> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class HashSetPool<T> : HashSet<T>, ISet<T>, ICollection<T>, IReadOnlySet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable 类型参数 T 继承 object HashSet<T> HashSetPool<T> 实现 ISet<T> ICollection<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 HashSet<T>.Clear() HashSet<T>.Contains(T) HashSet<T>.Remove(T) HashSet<T>.GetEnumerator() HashSet<T>.GetObjectData(SerializationInfo, StreamingContext) HashSet<T>.OnDeserialization(object) HashSet<T>.Add(T) HashSet<T>.TryGetValue(T, out T) HashSet<T>.UnionWith(IEnumerable<T>) HashSet<T>.IntersectWith(IEnumerable<T>) HashSet<T>.ExceptWith(IEnumerable<T>) HashSet<T>.SymmetricExceptWith(IEnumerable<T>) HashSet<T>.IsSubsetOf(IEnumerable<T>) HashSet<T>.IsProperSubsetOf(IEnumerable<T>) HashSet<T>.IsSupersetOf(IEnumerable<T>) HashSet<T>.IsProperSupersetOf(IEnumerable<T>) HashSet<T>.Overlaps(IEnumerable<T>) HashSet<T>.SetEquals(IEnumerable<T>) HashSet<T>.CopyTo(T[]) HashSet<T>.CopyTo(T[], int) HashSet<T>.CopyTo(T[], int, int) HashSet<T>.RemoveWhere(Predicate<T>) HashSet<T>.EnsureCapacity(int) HashSet<T>.TrimExcess() HashSet<T>.CreateSetComparer() HashSet<T>.Count HashSet<T>.Comparer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 HashSetPool() public HashSetPool() 方法 Create() public static HashSetPool<T> Create() 返回 HashSetPool<T> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.ListPool-1.html": {
    "href": "reference/Fantasy.DataStructure.ListPool-1.html",
    "title": "ListPool<T> 类 | Fantasy.Net API Reference",
    "keywords": "ListPool<T> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class ListPool<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDisposable 类型参数 T 继承 object List<T> ListPool<T> 实现 IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDisposable 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>) 构造函数 ListPool() public ListPool() 方法 Create(List<T>) public static ListPool<T> Create(List<T> args) 参数 args List<T> 返回 ListPool<T> Create(params T[]) public static ListPool<T> Create(params T[] args) 参数 args T[] 返回 ListPool<T> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.OneToManyDictionary-3.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyDictionary-3.html",
    "title": "OneToManyDictionary<TKey, TValueKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyDictionary<TKey, TValueKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyDictionary<TKey, TValueKey, TValue> : Dictionary<TKey, Dictionary<TValueKey, TValue>>, IDictionary<TKey, Dictionary<TValueKey, TValue>>, ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull where TValueKey : notnull 类型参数 TKey TValueKey TValue 继承 object Dictionary<TKey, Dictionary<TValueKey, TValue>> OneToManyDictionary<TKey, TValueKey, TValue> 实现 IDictionary<TKey, Dictionary<TValueKey, TValue>> ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyDictionaryPool<TKey, TValueKey, TValue> 继承成员 Dictionary<TKey, Dictionary<TValueKey, TValue>>.Add(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsValue(Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetEnumerator() Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Dictionary<TValueKey, TValue>>.OnDeserialization(object) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryGetValue(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryAdd(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess() Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Comparer Dictionary<TKey, Dictionary<TValueKey, TValue>>.Count Dictionary<TKey, Dictionary<TValueKey, TValue>>.Keys Dictionary<TKey, Dictionary<TValueKey, TValue>>.Values Dictionary<TKey, Dictionary<TValueKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyDictionary() public OneToManyDictionary() OneToManyDictionary(int) public OneToManyDictionary(int recyclingLimit = 0) 参数 recyclingLimit int 方法 Add(TKey, TValueKey, TValue) public void Add(TKey key, TValueKey valueKey, TValue value) 参数 key TKey valueKey TValueKey value TValue Clear() public void Clear() Contains(TKey, TValueKey) public bool Contains(TKey key, TValueKey valueKey) 参数 key TKey valueKey TValueKey 返回 bool First(TKey) public TValue First(TKey key) 参数 key TKey 返回 TValue Remove(TKey, TValueKey) public bool Remove(TKey key, TValueKey valueKey) 参数 key TKey valueKey TValueKey 返回 bool Remove(TKey, TValueKey, out TValue) public bool Remove(TKey key, TValueKey valueKey, out TValue value) 参数 key TKey valueKey TValueKey value TValue 返回 bool RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey TryGetValue(TKey, TValueKey, out TValue) public bool TryGetValue(TKey key, TValueKey valueKey, out TValue value) 参数 key TKey valueKey TValueKey value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.OneToManyDictionaryPool-3.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyDictionaryPool-3.html",
    "title": "OneToManyDictionaryPool<TKey, TValueKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyDictionaryPool<TKey, TValueKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyDictionaryPool<TKey, TValueKey, TValue> : OneToManyDictionary<TKey, TValueKey, TValue>, IDictionary<TKey, Dictionary<TValueKey, TValue>>, ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull where TValueKey : notnull 类型参数 TKey TValueKey TValue 继承 object Dictionary<TKey, Dictionary<TValueKey, TValue>> OneToManyDictionary<TKey, TValueKey, TValue> OneToManyDictionaryPool<TKey, TValueKey, TValue> 实现 IDictionary<TKey, Dictionary<TValueKey, TValue>> ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyDictionary<TKey, TValueKey, TValue>.Contains(TKey, TValueKey) OneToManyDictionary<TKey, TValueKey, TValue>.TryGetValue(TKey, TValueKey, out TValue) OneToManyDictionary<TKey, TValueKey, TValue>.First(TKey) OneToManyDictionary<TKey, TValueKey, TValue>.Add(TKey, TValueKey, TValue) OneToManyDictionary<TKey, TValueKey, TValue>.Remove(TKey, TValueKey) OneToManyDictionary<TKey, TValueKey, TValue>.Remove(TKey, TValueKey, out TValue) OneToManyDictionary<TKey, TValueKey, TValue>.RemoveKey(TKey) OneToManyDictionary<TKey, TValueKey, TValue>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.Add(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsValue(Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetEnumerator() Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Dictionary<TValueKey, TValue>>.OnDeserialization(object) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryGetValue(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryAdd(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess() Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Comparer Dictionary<TKey, Dictionary<TValueKey, TValue>>.Count Dictionary<TKey, Dictionary<TValueKey, TValue>>.Keys Dictionary<TKey, Dictionary<TValueKey, TValue>>.Values Dictionary<TKey, Dictionary<TValueKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyDictionaryPool() public OneToManyDictionaryPool() 方法 Create() public static OneToManyDictionaryPool<TKey, TValueKey, TValue> Create() 返回 OneToManyDictionaryPool<TKey, TValueKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.OneToManyHashSet-2.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyHashSet-2.html",
    "title": "OneToManyHashSet<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyHashSet<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyHashSet<TKey, TValue> : Dictionary<TKey, HashSet<TValue>>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull 类型参数 TKey TValue 继承 object Dictionary<TKey, HashSet<TValue>> OneToManyHashSet<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyHashSetPool<TKey, TValue> 继承成员 Dictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Clear() Dictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) Dictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.GetEnumerator() Dictionary<TKey, HashSet<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, HashSet<TValue>>.OnDeserialization(object) Dictionary<TKey, HashSet<TValue>>.Remove(TKey) Dictionary<TKey, HashSet<TValue>>.Remove(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryAdd(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.EnsureCapacity(int) Dictionary<TKey, HashSet<TValue>>.TrimExcess() Dictionary<TKey, HashSet<TValue>>.TrimExcess(int) Dictionary<TKey, HashSet<TValue>>.Comparer Dictionary<TKey, HashSet<TValue>>.Count Dictionary<TKey, HashSet<TValue>>.Keys Dictionary<TKey, HashSet<TValue>>.Values Dictionary<TKey, HashSet<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyHashSet() public OneToManyHashSet() OneToManyHashSet(int) public OneToManyHashSet(int recyclingLimit) 参数 recyclingLimit int 方法 Add(TKey, TValue) public void Add(TKey key, TValue value) 参数 key TKey value TValue Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool GetValue(TKey) public HashSet<TValue> GetValue(TKey key) 参数 key TKey 返回 HashSet<TValue> RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey RemoveValue(TKey, TValue) public void RemoveValue(TKey key, TValue value) 参数 key TKey value TValue"
  },
  "reference/Fantasy.DataStructure.OneToManyHashSetPool-2.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyHashSetPool-2.html",
    "title": "OneToManyHashSetPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyHashSetPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyHashSetPool<TKey, TValue> : OneToManyHashSet<TKey, TValue>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object Dictionary<TKey, HashSet<TValue>> OneToManyHashSet<TKey, TValue> OneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyHashSet<TKey, TValue>.Contains(TKey, TValue) OneToManyHashSet<TKey, TValue>.Add(TKey, TValue) OneToManyHashSet<TKey, TValue>.RemoveValue(TKey, TValue) OneToManyHashSet<TKey, TValue>.RemoveKey(TKey) OneToManyHashSet<TKey, TValue>.GetValue(TKey) OneToManyHashSet<TKey, TValue>.Clear() Dictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Clear() Dictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) Dictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.GetEnumerator() Dictionary<TKey, HashSet<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, HashSet<TValue>>.OnDeserialization(object) Dictionary<TKey, HashSet<TValue>>.Remove(TKey) Dictionary<TKey, HashSet<TValue>>.Remove(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryAdd(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.EnsureCapacity(int) Dictionary<TKey, HashSet<TValue>>.TrimExcess() Dictionary<TKey, HashSet<TValue>>.TrimExcess(int) Dictionary<TKey, HashSet<TValue>>.Comparer Dictionary<TKey, HashSet<TValue>>.Count Dictionary<TKey, HashSet<TValue>>.Keys Dictionary<TKey, HashSet<TValue>>.Values Dictionary<TKey, HashSet<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyHashSetPool() public OneToManyHashSetPool() 方法 Create() public static OneToManyHashSetPool<TKey, TValue> Create() 返回 OneToManyHashSetPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.OneToManyList-2.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyList-2.html",
    "title": "OneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyList<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyList<TKey, TValue> : Dictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull 类型参数 TKey TValue 继承 object Dictionary<TKey, List<TValue>> OneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyListPool<TKey, TValue> 继承成员 Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values Dictionary<TKey, List<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyList() public OneToManyList() OneToManyList(int) public OneToManyList(int recyclingLimit) 参数 recyclingLimit int 方法 Add(TKey, TValue) public void Add(TKey key, TValue value) 参数 key TKey value TValue Clear() public void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool First(TKey) public TValue First(TKey key) 参数 key TKey 返回 TValue GetValues(TKey) public List<TValue> GetValues(TKey key) 参数 key TKey 返回 List<TValue> RemoveByKey(TKey) public bool RemoveByKey(TKey key) 参数 key TKey 返回 bool RemoveValue(TKey, TValue) public bool RemoveValue(TKey key, TValue value) 参数 key TKey value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.OneToManyListPool-2.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyListPool-2.html",
    "title": "OneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyListPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyListPool<TKey, TValue> : OneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object Dictionary<TKey, List<TValue>> OneToManyList<TKey, TValue> OneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyList<TKey, TValue>.Contains(TKey, TValue) OneToManyList<TKey, TValue>.Add(TKey, TValue) OneToManyList<TKey, TValue>.First(TKey) OneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) OneToManyList<TKey, TValue>.RemoveByKey(TKey) OneToManyList<TKey, TValue>.GetValues(TKey) OneToManyList<TKey, TValue>.Clear() Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values Dictionary<TKey, List<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyListPool() public OneToManyListPool() 方法 Create() public static OneToManyListPool<TKey, TValue> Create() 返回 OneToManyListPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.OneToManyQueue-2.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyQueue-2.html",
    "title": "OneToManyQueue<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyQueue<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyQueue<TKey, TValue> : Dictionary<TKey, Queue<TValue>>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull 类型参数 TKey TValue 继承 object Dictionary<TKey, Queue<TValue>> OneToManyQueue<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyQueuePool<TKey, TValue> 继承成员 Dictionary<TKey, Queue<TValue>>.Add(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Clear() Dictionary<TKey, Queue<TValue>>.ContainsKey(TKey) Dictionary<TKey, Queue<TValue>>.ContainsValue(Queue<TValue>) Dictionary<TKey, Queue<TValue>>.GetEnumerator() Dictionary<TKey, Queue<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Queue<TValue>>.OnDeserialization(object) Dictionary<TKey, Queue<TValue>>.Remove(TKey) Dictionary<TKey, Queue<TValue>>.Remove(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.EnsureCapacity(int) Dictionary<TKey, Queue<TValue>>.TrimExcess() Dictionary<TKey, Queue<TValue>>.TrimExcess(int) Dictionary<TKey, Queue<TValue>>.Comparer Dictionary<TKey, Queue<TValue>>.Count Dictionary<TKey, Queue<TValue>>.Keys Dictionary<TKey, Queue<TValue>>.Values Dictionary<TKey, Queue<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyQueue(int) public OneToManyQueue(int recyclingLimit = 0) 参数 recyclingLimit int 方法 Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool Dequeue(TKey) public TValue Dequeue(TKey key) 参数 key TKey 返回 TValue Enqueue(TKey, TValue) public void Enqueue(TKey key, TValue value) 参数 key TKey value TValue RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey TryDequeue(TKey, out TValue) public bool TryDequeue(TKey key, out TValue value) 参数 key TKey value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.OneToManyQueuePool-2.html": {
    "href": "reference/Fantasy.DataStructure.OneToManyQueuePool-2.html",
    "title": "OneToManyQueuePool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyQueuePool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManyQueuePool<TKey, TValue> : OneToManyQueue<TKey, TValue>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object Dictionary<TKey, Queue<TValue>> OneToManyQueue<TKey, TValue> OneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyQueue<TKey, TValue>.Contains(TKey, TValue) OneToManyQueue<TKey, TValue>.Enqueue(TKey, TValue) OneToManyQueue<TKey, TValue>.Dequeue(TKey) OneToManyQueue<TKey, TValue>.TryDequeue(TKey, out TValue) OneToManyQueue<TKey, TValue>.RemoveKey(TKey) OneToManyQueue<TKey, TValue>.Clear() Dictionary<TKey, Queue<TValue>>.Add(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Clear() Dictionary<TKey, Queue<TValue>>.ContainsKey(TKey) Dictionary<TKey, Queue<TValue>>.ContainsValue(Queue<TValue>) Dictionary<TKey, Queue<TValue>>.GetEnumerator() Dictionary<TKey, Queue<TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, Queue<TValue>>.OnDeserialization(object) Dictionary<TKey, Queue<TValue>>.Remove(TKey) Dictionary<TKey, Queue<TValue>>.Remove(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.EnsureCapacity(int) Dictionary<TKey, Queue<TValue>>.TrimExcess() Dictionary<TKey, Queue<TValue>>.TrimExcess(int) Dictionary<TKey, Queue<TValue>>.Comparer Dictionary<TKey, Queue<TValue>>.Count Dictionary<TKey, Queue<TValue>>.Keys Dictionary<TKey, Queue<TValue>>.Values Dictionary<TKey, Queue<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyQueuePool() public OneToManyQueuePool() 方法 Create() public static OneToManyQueuePool<TKey, TValue> Create() 返回 OneToManyQueuePool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.OneToManySortedDictionary-3.html": {
    "href": "reference/Fantasy.DataStructure.OneToManySortedDictionary-3.html",
    "title": "OneToManySortedDictionary<TKey, TSortedKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManySortedDictionary<TKey, TSortedKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManySortedDictionary<TKey, TSortedKey, TValue> : Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull where TSortedKey : notnull 类型参数 TKey TSortedKey TValue 继承 object Dictionary<TKey, SortedDictionary<TSortedKey, TValue>> OneToManySortedDictionary<TKey, TSortedKey, TValue> 实现 IDictionary<TKey, SortedDictionary<TSortedKey, TValue>> ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 继承成员 Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Add(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsValue(SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetEnumerator() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.OnDeserialization(object) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryAdd(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Comparer Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Count Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Keys Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Values Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManySortedDictionary() protected OneToManySortedDictionary() OneToManySortedDictionary(int) public OneToManySortedDictionary(int recyclingLimit) 参数 recyclingLimit int 方法 Add(TKey, TSortedKey, TValue) public void Add(TKey key, TSortedKey sortedKey, TValue value) 参数 key TKey sortedKey TSortedKey value TValue Clear() protected void Clear() Contains(TKey) public bool Contains(TKey key) 参数 key TKey 返回 bool Contains(TKey, TSortedKey) public bool Contains(TKey key, TSortedKey sortedKey) 参数 key TKey sortedKey TSortedKey 返回 bool RemoveKey(TKey) public bool RemoveKey(TKey key) 参数 key TKey 返回 bool RemoveSortedKey(TKey, TSortedKey) public bool RemoveSortedKey(TKey key, TSortedKey sortedKey) 参数 key TKey sortedKey TSortedKey 返回 bool TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) public bool TryGetValue(TKey key, out SortedDictionary<TSortedKey, TValue> dic) 参数 key TKey dic SortedDictionary<TSortedKey, TValue> 返回 bool TryGetValueBySortedKey(TKey, TSortedKey, out TValue) public bool TryGetValueBySortedKey(TKey key, TSortedKey sortedKey, out TValue value) 参数 key TKey sortedKey TSortedKey value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.OneToManySortedDictionaryPool-3.html": {
    "href": "reference/Fantasy.DataStructure.OneToManySortedDictionaryPool-3.html",
    "title": "OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> : OneToManySortedDictionary<TKey, TSortedKey, TValue>, IDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull where TSortedKey : notnull 类型参数 TKey TSortedKey TValue 继承 object Dictionary<TKey, SortedDictionary<TSortedKey, TValue>> OneToManySortedDictionary<TKey, TSortedKey, TValue> OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 实现 IDictionary<TKey, SortedDictionary<TSortedKey, TValue>> ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManySortedDictionary<TKey, TSortedKey, TValue>.Contains(TKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Contains(TKey, TSortedKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) OneToManySortedDictionary<TKey, TSortedKey, TValue>.TryGetValueBySortedKey(TKey, TSortedKey, out TValue) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Add(TKey, TSortedKey, TValue) OneToManySortedDictionary<TKey, TSortedKey, TValue>.RemoveSortedKey(TKey, TSortedKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.RemoveKey(TKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Add(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsValue(SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetEnumerator() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.OnDeserialization(object) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryAdd(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Comparer Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Count Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Keys Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Values Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManySortedDictionaryPool() public OneToManySortedDictionaryPool() 方法 Create() public static OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> Create() 返回 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.ReuseDictionary-2.html": {
    "href": "reference/Fantasy.DataStructure.ReuseDictionary-2.html",
    "title": "ReuseDictionary<TM, TN> 类 | Fantasy.Net API Reference",
    "keywords": "ReuseDictionary<TM, TN> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class ReuseDictionary<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IDictionary, ICollection, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TM : notnull 类型参数 TM TN 继承 object Dictionary<TM, TN> ReuseDictionary<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IDictionary ICollection IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values Dictionary<TM, TN>.this[TM] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ReuseDictionary() public ReuseDictionary() 方法 Create() public static ReuseDictionary<TM, TN> Create() 返回 ReuseDictionary<TM, TN> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.ReuseList-1.html": {
    "href": "reference/Fantasy.DataStructure.ReuseList-1.html",
    "title": "ReuseList<T> 类 | Fantasy.Net API Reference",
    "keywords": "ReuseList<T> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public sealed class ReuseList<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDisposable 类型参数 T 继承 object List<T> ReuseList<T> 实现 IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDisposable 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>) 构造函数 ReuseList() public ReuseList() 方法 Create() public static ReuseList<T> Create() 返回 ReuseList<T> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.SkipTable-1.html": {
    "href": "reference/Fantasy.DataStructure.SkipTable-1.html",
    "title": "SkipTable<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTable<TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SkipTable<TValue> : SkipTableBase<TValue>, IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 TValue 继承 object SkipTableBase<TValue> SkipTable<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 SkipTableBase<TValue>.MaxLayer SkipTableBase<TValue>.TopHeader SkipTableBase<TValue>.BottomHeader SkipTableBase<TValue>.Random SkipTableBase<TValue>.Node SkipTableBase<TValue>.AntiFindStack SkipTableBase<TValue>.GetRanking(long) SkipTableBase<TValue>.GetAntiRanking(long) SkipTableBase<TValue>.TryGetValueByKey(long, out TValue) SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>) SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.GetLastValue() SkipTableBase<TValue>.Remove(long) SkipTableBase<TValue>.GetEnumerator() SkipTableBase<TValue>.Count SkipTableBase<TValue>.this[long] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTable(int) public SkipTable(int maxLayer = 8) 参数 maxLayer int 方法 Add(long, long, long, TValue) public override void Add(long sortKey, long viceKey, long key, TValue value) 参数 sortKey long viceKey long key long value TValue Remove(long, long, long, out TValue) public override bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 sortKey long viceKey long key long value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.SkipTableBase-1.html": {
    "href": "reference/Fantasy.DataStructure.SkipTableBase-1.html",
    "title": "SkipTableBase<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTableBase<TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public abstract class SkipTableBase<TValue> : IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 TValue 继承 object SkipTableBase<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable Derived SkipTableDesc<TValue> SkipTable<TValue> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTableBase(int) protected SkipTableBase(int maxLayer = 8) 参数 maxLayer int 字段 AntiFindStack protected readonly Stack<SkipTableNode<TValue>> AntiFindStack 字段值 Stack<SkipTableNode<TValue>> BottomHeader public SkipTableNode<TValue> BottomHeader 字段值 SkipTableNode<TValue> MaxLayer public readonly int MaxLayer 字段值 int Node protected readonly Dictionary<long, SkipTableNode<TValue>> Node 字段值 Dictionary<long, SkipTableNode<TValue>> Random protected readonly Random Random 字段值 Random TopHeader public readonly SkipTableNode<TValue> TopHeader 字段值 SkipTableNode<TValue> 属性 Count public int Count { get; } 属性值 int this[long] public TValue this[long key] { get; } 参数 key long 属性值 TValue 方法 Add(long, long, long, TValue) public abstract void Add(long sortKey, long viceKey, long key, TValue value) 参数 sortKey long viceKey long key long value TValue AntiFind(int, int, ListPool<SkipTableNode<TValue>>) public void AntiFind(int start, int end, ListPool<SkipTableNode<TValue>> list) 参数 start int end int list ListPool<SkipTableNode<TValue>> Find(int, int, ListPool<SkipTableNode<TValue>>) public void Find(int start, int end, ListPool<SkipTableNode<TValue>> list) 参数 start int end int list ListPool<SkipTableNode<TValue>> GetAntiRanking(long) public int GetAntiRanking(long key) 参数 key long 返回 int GetEnumerator() public IEnumerator<SkipTableNode<TValue>> GetEnumerator() 返回 IEnumerator<SkipTableNode<TValue>> GetLastValue() public TValue GetLastValue() 返回 TValue GetRanking(long) public int GetRanking(long key) 参数 key long 返回 int Remove(long) public bool Remove(long key) 参数 key long 返回 bool Remove(long, long, long, out TValue) public abstract bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 sortKey long viceKey long key long value TValue 返回 bool TryGetNodeByKey(long, out SkipTableNode<TValue>) public bool TryGetNodeByKey(long key, out SkipTableNode<TValue> node) 参数 key long node SkipTableNode<TValue> 返回 bool TryGetValueByKey(long, out TValue) public bool TryGetValueByKey(long key, out TValue value) 参数 key long value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.SkipTableDesc-1.html": {
    "href": "reference/Fantasy.DataStructure.SkipTableDesc-1.html",
    "title": "SkipTableDesc<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTableDesc<TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SkipTableDesc<TValue> : SkipTableBase<TValue>, IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 TValue 继承 object SkipTableBase<TValue> SkipTableDesc<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 SkipTableBase<TValue>.MaxLayer SkipTableBase<TValue>.TopHeader SkipTableBase<TValue>.BottomHeader SkipTableBase<TValue>.Random SkipTableBase<TValue>.Node SkipTableBase<TValue>.AntiFindStack SkipTableBase<TValue>.GetRanking(long) SkipTableBase<TValue>.GetAntiRanking(long) SkipTableBase<TValue>.TryGetValueByKey(long, out TValue) SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>) SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.GetLastValue() SkipTableBase<TValue>.Remove(long) SkipTableBase<TValue>.GetEnumerator() SkipTableBase<TValue>.Count SkipTableBase<TValue>.this[long] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTableDesc(int) public SkipTableDesc(int maxLayer = 8) 参数 maxLayer int 方法 Add(long, long, long, TValue) public override void Add(long sortKey, long viceKey, long key, TValue value) 参数 sortKey long viceKey long key long value TValue Remove(long, long, long, out TValue) public override bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 sortKey long viceKey long key long value TValue 返回 bool"
  },
  "reference/Fantasy.DataStructure.SkipTableNode-1.html": {
    "href": "reference/Fantasy.DataStructure.SkipTableNode-1.html",
    "title": "SkipTableNode<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTableNode<TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SkipTableNode<TValue> 类型参数 TValue 继承 object SkipTableNode<TValue> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTableNode(long, long, long, TValue, int, SkipTableNode<TValue>, SkipTableNode<TValue>, SkipTableNode<TValue>) public SkipTableNode(long sortKey, long viceKey, long key, TValue value, int index, SkipTableNode<TValue> l, SkipTableNode<TValue> r, SkipTableNode<TValue> d) 参数 sortKey long viceKey long key long value TValue index int l SkipTableNode<TValue> r SkipTableNode<TValue> d SkipTableNode<TValue> 字段 Down public SkipTableNode<TValue> Down 字段值 SkipTableNode<TValue> Index public int Index 字段值 int Key public long Key 字段值 long Left public SkipTableNode<TValue> Left 字段值 SkipTableNode<TValue> Right public SkipTableNode<TValue> Right 字段值 SkipTableNode<TValue> SortKey public long SortKey 字段值 long Value public TValue Value 字段值 TValue ViceKey public long ViceKey 字段值 long"
  },
  "reference/Fantasy.DataStructure.SortedConcurrentOneToManyList-2.html": {
    "href": "reference/Fantasy.DataStructure.SortedConcurrentOneToManyList-2.html",
    "title": "SortedConcurrentOneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedConcurrentOneToManyList<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SortedConcurrentOneToManyList<TKey, TValue> : SortedDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey TValue 继承 object SortedDictionary<TKey, List<TValue>> SortedConcurrentOneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable Derived SortedConcurrentOneToManyListPool<TKey, TValue> 继承成员 SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedConcurrentOneToManyList() public SortedConcurrentOneToManyList() SortedConcurrentOneToManyList(int) public SortedConcurrentOneToManyList(int recyclingLimit = 0) 参数 recyclingLimit int 方法 Add(TKey, TValue) public void Add(TKey key, TValue value) 参数 key TKey value TValue Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool First(TKey) public TValue First(TKey key) 参数 key TKey 返回 TValue RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey RemoveValue(TKey, TValue) public void RemoveValue(TKey key, TValue value) 参数 key TKey value TValue"
  },
  "reference/Fantasy.DataStructure.SortedConcurrentOneToManyListPool-2.html": {
    "href": "reference/Fantasy.DataStructure.SortedConcurrentOneToManyListPool-2.html",
    "title": "SortedConcurrentOneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedConcurrentOneToManyListPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SortedConcurrentOneToManyListPool<TKey, TValue> : SortedConcurrentOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object SortedDictionary<TKey, List<TValue>> SortedConcurrentOneToManyList<TKey, TValue> SortedConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable IDisposable 继承成员 SortedConcurrentOneToManyList<TKey, TValue>.Contains(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.Add(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.First(TKey) SortedConcurrentOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.RemoveKey(TKey) SortedConcurrentOneToManyList<TKey, TValue>.Clear() SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedConcurrentOneToManyListPool() public SortedConcurrentOneToManyListPool() 方法 Create() public static SortedConcurrentOneToManyListPool<TKey, TValue> Create() 返回 SortedConcurrentOneToManyListPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.SortedOneToManyHashSet-2.html": {
    "href": "reference/Fantasy.DataStructure.SortedOneToManyHashSet-2.html",
    "title": "SortedOneToManyHashSet<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyHashSet<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SortedOneToManyHashSet<TKey, TValue> : SortedDictionary<TKey, HashSet<TValue>>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey TValue 继承 object SortedDictionary<TKey, HashSet<TValue>> SortedOneToManyHashSet<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable Derived SortedOneToManyHashSetPool<TKey, TValue> 继承成员 SortedDictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Clear() SortedDictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.CopyTo(KeyValuePair<TKey, HashSet<TValue>>[], int) SortedDictionary<TKey, HashSet<TValue>>.GetEnumerator() SortedDictionary<TKey, HashSet<TValue>>.Remove(TKey) SortedDictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.this[TKey] SortedDictionary<TKey, HashSet<TValue>>.Count SortedDictionary<TKey, HashSet<TValue>>.Comparer SortedDictionary<TKey, HashSet<TValue>>.Keys SortedDictionary<TKey, HashSet<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyHashSet() public SortedOneToManyHashSet() SortedOneToManyHashSet(int) public SortedOneToManyHashSet(int recyclingLimit) 参数 recyclingLimit int 方法 Add(TKey, TValue) public void Add(TKey key, TValue value) 参数 key TKey value TValue Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey RemoveValue(TKey, TValue) public void RemoveValue(TKey key, TValue value) 参数 key TKey value TValue"
  },
  "reference/Fantasy.DataStructure.SortedOneToManyHashSetPool-2.html": {
    "href": "reference/Fantasy.DataStructure.SortedOneToManyHashSetPool-2.html",
    "title": "SortedOneToManyHashSetPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyHashSetPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SortedOneToManyHashSetPool<TKey, TValue> : SortedOneToManyHashSet<TKey, TValue>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object SortedDictionary<TKey, HashSet<TValue>> SortedOneToManyHashSet<TKey, TValue> SortedOneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable IDisposable 继承成员 SortedOneToManyHashSet<TKey, TValue>.Contains(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.Add(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.RemoveValue(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.RemoveKey(TKey) SortedOneToManyHashSet<TKey, TValue>.Clear() SortedDictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Clear() SortedDictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.CopyTo(KeyValuePair<TKey, HashSet<TValue>>[], int) SortedDictionary<TKey, HashSet<TValue>>.GetEnumerator() SortedDictionary<TKey, HashSet<TValue>>.Remove(TKey) SortedDictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.this[TKey] SortedDictionary<TKey, HashSet<TValue>>.Count SortedDictionary<TKey, HashSet<TValue>>.Comparer SortedDictionary<TKey, HashSet<TValue>>.Keys SortedDictionary<TKey, HashSet<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyHashSetPool() public SortedOneToManyHashSetPool() 方法 Create() public static SortedOneToManyHashSetPool<TKey, TValue> Create() 返回 SortedOneToManyHashSetPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.SortedOneToManyList-2.html": {
    "href": "reference/Fantasy.DataStructure.SortedOneToManyList-2.html",
    "title": "SortedOneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyList<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SortedOneToManyList<TKey, TValue> : SortedDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey TValue 继承 object SortedDictionary<TKey, List<TValue>> SortedOneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable Derived SortedOneToManyListPool<TKey, TValue> 继承成员 SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyList() public SortedOneToManyList() SortedOneToManyList(int) public SortedOneToManyList(int recyclingLimit = 0) 参数 recyclingLimit int 方法 Add(TKey, TValue) public void Add(TKey key, TValue value) 参数 key TKey value TValue Clear() protected void Clear() Contains(TKey, TValue) public bool Contains(TKey key, TValue value) 参数 key TKey value TValue 返回 bool First(TKey) public TValue First(TKey key) 参数 key TKey 返回 TValue RemoveKey(TKey) public void RemoveKey(TKey key) 参数 key TKey RemoveValue(TKey, TValue) public void RemoveValue(TKey key, TValue value) 参数 key TKey value TValue"
  },
  "reference/Fantasy.DataStructure.SortedOneToManyListPool-2.html": {
    "href": "reference/Fantasy.DataStructure.SortedOneToManyListPool-2.html",
    "title": "SortedOneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyListPool<TKey, TValue> 类 命名空间 Fantasy.DataStructure 程序集 Fantasy.Net.dll public class SortedOneToManyListPool<TKey, TValue> : SortedOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey TValue 继承 object SortedDictionary<TKey, List<TValue>> SortedOneToManyList<TKey, TValue> SortedOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable IDisposable 继承成员 SortedOneToManyList<TKey, TValue>.Contains(TKey, TValue) SortedOneToManyList<TKey, TValue>.Add(TKey, TValue) SortedOneToManyList<TKey, TValue>.First(TKey) SortedOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) SortedOneToManyList<TKey, TValue>.RemoveKey(TKey) SortedOneToManyList<TKey, TValue>.Clear() SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyListPool() public SortedOneToManyListPool() 方法 Create() public static SortedOneToManyListPool<TKey, TValue> Create() 返回 SortedOneToManyListPool<TKey, TValue> Dispose() public void Dispose()"
  },
  "reference/Fantasy.DataStructure.html": {
    "href": "reference/Fantasy.DataStructure.html",
    "title": "Fantasy.DataStructure 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.DataStructure 命名空间 类 CircularBuffer ConcurrentOneToManyListPool<TKey, TValue> ConcurrentOneToManyList<TKey, TValue> ConcurrentOneToManyQueuePool<TKey, TValue> ConcurrentOneToManyQueue<TKey, TValue> DictionaryExtensions DictionaryPool<TM, TN> DoubleMapDictionaryPool<TKey, TValue> DoubleMapDictionary<TK, TV> EntityDictionary<TM, TN> EntityList<T> HashSetBasePool<T> HashSetPool<T> ListPool<T> OneToManyDictionaryPool<TKey, TValueKey, TValue> OneToManyDictionary<TKey, TValueKey, TValue> OneToManyHashSetPool<TKey, TValue> OneToManyHashSet<TKey, TValue> OneToManyListPool<TKey, TValue> OneToManyList<TKey, TValue> OneToManyQueuePool<TKey, TValue> OneToManyQueue<TKey, TValue> OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> OneToManySortedDictionary<TKey, TSortedKey, TValue> ReuseDictionary<TM, TN> ReuseList<T> SkipTableBase<TValue> SkipTableDesc<TValue> SkipTableNode<TValue> SkipTable<TValue> SortedConcurrentOneToManyListPool<TKey, TValue> SortedConcurrentOneToManyList<TKey, TValue> SortedOneToManyHashSetPool<TKey, TValue> SortedOneToManyHashSet<TKey, TValue> SortedOneToManyListPool<TKey, TValue> SortedOneToManyList<TKey, TValue>"
  },
  "reference/Fantasy.Define.html": {
    "href": "reference/Fantasy.Define.html",
    "title": "Define 类 | Fantasy.Net API Reference",
    "keywords": "Define 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义包含 Fantasy 系统设置的静态类。 public static class Define 继承 object Define 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 ExcelServerBinaryDirectory Excel服务器二进制数据文件夹 public static string ExcelServerBinaryDirectory 字段值 string SessionIdleCheckerInterval 会话空闲检查间隔。 public static int SessionIdleCheckerInterval 字段值 int SessionIdleCheckerTimeout 会话空闲检查超时时间。 public static int SessionIdleCheckerTimeout 字段值 int"
  },
  "reference/Fantasy.DeserializeSystem-1.html": {
    "href": "reference/Fantasy.DeserializeSystem-1.html",
    "title": "DeserializeSystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "DeserializeSystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个用于反序列化特定类型实体的系统抽象类，扩展自 IDeserializeSystem。 public abstract class DeserializeSystem<T> : IDeserializeSystem, IEntitiesSystem where T : Entity 类型参数 T 要反序列化的 Entity 类型。 继承 object DeserializeSystem<T> 实现 IDeserializeSystem IEntitiesSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DeserializeSystem() protected DeserializeSystem() 方法 Deserialize(T) 在派生类中实现，用于反序列化指定的实体。 protected abstract void Deserialize(T self) 参数 self T 要反序列化的实体。 EntitiesType() 获取此系统用于处理的实体类型。 public Type EntitiesType() 返回 Type 实体类型。 Invoke(Entity) 调用实体的反序列化方法。 public void Invoke(Entity self) 参数 self Entity 要反序列化的实体。"
  },
  "reference/Fantasy.DestroySystem-1.html": {
    "href": "reference/Fantasy.DestroySystem-1.html",
    "title": "DestroySystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "DestroySystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示用于实现实体销毁逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的销毁操作。 public abstract class DestroySystem<T> : IDestroySystem, IEntitiesSystem where T : Entity 类型参数 T 需要处理销毁逻辑的实体类型。 继承 object DestroySystem<T> 实现 IDestroySystem IEntitiesSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DestroySystem() protected DestroySystem() 方法 Destroy(T) 在实体销毁时执行的逻辑。子类应实现此方法以处理特定实体类型的销毁操作。 protected abstract void Destroy(T self) 参数 self T 正在销毁的实体。 EntitiesType() 获取需要处理销毁逻辑的实体类型。 public Type EntitiesType() 返回 Type 实体类型。 Invoke(Entity) 调用实体的销毁逻辑。在实体销毁时，会调用此方法来执行相应的销毁操作。 public void Invoke(Entity self) 参数 self Entity 正在销毁的实体。"
  },
  "reference/Fantasy.DictionaryExtensions.html": {
    "href": "reference/Fantasy.DictionaryExtensions.html",
    "title": "DictionaryExtensions 类 | Fantasy.Net API Reference",
    "keywords": "DictionaryExtensions 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供对字典的扩展方法。 public static class DictionaryExtensions 继承 object DictionaryExtensions 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 尝试从字典中移除指定键，并返回相应的值。 public static bool TryRemove<T, TV>(this IDictionary<T, TV> self, T key, out TV value) 参数 self IDictionary<T, TV> 要操作的字典实例。 key T 要移除的键。 value TV 从字典中移除的值（如果成功移除）。 返回 bool 如果成功移除键值对，则为 true；否则为 false。 类型参数 T 字典中键的类型。 TV 字典中值的类型。"
  },
  "reference/Fantasy.DictionaryPool-2.html": {
    "href": "reference/Fantasy.DictionaryPool-2.html",
    "title": "DictionaryPool<TM, TN> 类 | Fantasy.Net API Reference",
    "keywords": "DictionaryPool<TM, TN> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供一个可以使用对象池管理的字典类。 public sealed class DictionaryPool<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IDictionary, ICollection, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TM : notnull 类型参数 TM 字典中键的类型。 TN 字典中值的类型。 继承 object Dictionary<TM, TN> DictionaryPool<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IDictionary ICollection IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values Dictionary<TM, TN>.this[TM] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 DictionaryPool() public DictionaryPool() 方法 Create() 创建一个新的 DictionaryPool<TM, TN> 实例。 public static DictionaryPool<TM, TN> Create() 返回 DictionaryPool<TM, TN> 新创建的实例。 Dispose() 释放实例占用的资源。 public void Dispose()"
  },
  "reference/Fantasy.DoubleMapDictionary-2.html": {
    "href": "reference/Fantasy.DoubleMapDictionary-2.html",
    "title": "DoubleMapDictionary<TK, TV> 类 | Fantasy.Net API Reference",
    "keywords": "DoubleMapDictionary<TK, TV> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可以实现双向映射的字典类，用于将键和值进行双向映射。 public class DoubleMapDictionary<TK, TV> where TK : notnull where TV : notnull 类型参数 TK 键的类型，不能为 null。 TV 值的类型，不能为 null。 继承 object DoubleMapDictionary<TK, TV> Derived DoubleMapDictionaryPool<TKey, TValue> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DoubleMapDictionary() 创建一个新的空的 DoubleMapDictionary<TK, TV> 实例。 public DoubleMapDictionary() DoubleMapDictionary(int) 创建一个新的具有指定初始容量的 DoubleMapDictionary<TK, TV> 实例。 public DoubleMapDictionary(int capacity) 参数 capacity int 初始容量。 属性 Keys 获取包含字典中所有键的列表。 public List<TK> Keys { get; } 属性值 List<TK> Values 获取包含字典中所有值的列表。 public List<TV> Values { get; } 属性值 List<TV> 方法 Add(TK, TV) 将指定的键值对添加到字典中。 public void Add(TK key, TV value) 参数 key TK 要添加的键。 value TV 要添加的值。 Clear() 清空字典中的所有键值对。 public void Clear() Contains(TK, TV) 判断字典是否包含指定的键值对。 public bool Contains(TK key, TV value) 参数 key TK 要检查的键。 value TV 要检查的值。 返回 bool 如果字典包含指定的键值对，则为 true；否则为 false。 ContainsKey(TK) 判断字典是否包含指定的键。 public bool ContainsKey(TK key) 参数 key TK 要检查的键。 返回 bool 如果字典包含指定的键，则为 true；否则为 false。 ContainsValue(TV) 判断字典是否包含指定的值。 public bool ContainsValue(TV value) 参数 value TV 要检查的值。 返回 bool 如果字典包含指定的值，则为 true；否则为 false。 ForEach(Action<TK, TV>) 对字典中的每个键值对执行指定的操作。 public void ForEach(Action<TK, TV> action) 参数 action Action<TK, TV> 要执行的操作。 GetKeyByValue(TV) 根据指定的值获取相应的键。 public TK GetKeyByValue(TV value) 参数 value TV 要查找键的值。 返回 TK 与指定值关联的键，如果找不到值，则返回默认键。 GetValueByKey(TK) 根据指定的键获取相应的值。 public TV GetValueByKey(TK key) 参数 key TK 要查找值的键。 返回 TV 与指定键关联的值，如果找不到键，则返回默认值。 RemoveByKey(TK) 根据指定的键移除键值对。 public void RemoveByKey(TK key) 参数 key TK 要移除的键。 RemoveByValue(TV) 根据指定的值移除键值对。 public void RemoveByValue(TV value) 参数 value TV 要移除的值。 TryGetKeyByValue(TV, out TK) 尝试根据指定的值获取相应的键。 public bool TryGetKeyByValue(TV value, out TK key) 参数 value TV 要查找键的值。 key TK 如果找到，则为与指定值关联的键；否则为键的默认值。 返回 bool 如果找到值，则为 true；否则为 false。 TryGetValueByKey(TK, out TV) 尝试根据指定的键获取相应的值。 public bool TryGetValueByKey(TK key, out TV value) 参数 key TK 要查找值的键。 value TV 如果找到，则为与指定键关联的值；否则为值的默认值。 返回 bool 如果找到键，则为 true；否则为 false。"
  },
  "reference/Fantasy.DoubleMapDictionaryPool-2.html": {
    "href": "reference/Fantasy.DoubleMapDictionaryPool-2.html",
    "title": "DoubleMapDictionaryPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "DoubleMapDictionaryPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供一个双向映射字典对象池类，用于双向键值对映射。 public class DoubleMapDictionaryPool<TKey, TValue> : DoubleMapDictionary<TKey, TValue>, IDisposable where TKey : notnull where TValue : notnull 类型参数 TKey 字典中键的类型。 TValue 字典中值的类型。 继承 object DoubleMapDictionary<TKey, TValue> DoubleMapDictionaryPool<TKey, TValue> 实现 IDisposable 继承成员 DoubleMapDictionary<TKey, TValue>.ForEach(Action<TKey, TValue>) DoubleMapDictionary<TKey, TValue>.Add(TKey, TValue) DoubleMapDictionary<TKey, TValue>.GetValueByKey(TKey) DoubleMapDictionary<TKey, TValue>.TryGetValueByKey(TKey, out TValue) DoubleMapDictionary<TKey, TValue>.GetKeyByValue(TValue) DoubleMapDictionary<TKey, TValue>.TryGetKeyByValue(TValue, out TKey) DoubleMapDictionary<TKey, TValue>.RemoveByKey(TKey) DoubleMapDictionary<TKey, TValue>.RemoveByValue(TValue) DoubleMapDictionary<TKey, TValue>.Clear() DoubleMapDictionary<TKey, TValue>.ContainsKey(TKey) DoubleMapDictionary<TKey, TValue>.ContainsValue(TValue) DoubleMapDictionary<TKey, TValue>.Contains(TKey, TValue) DoubleMapDictionary<TKey, TValue>.Keys DoubleMapDictionary<TKey, TValue>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 DoubleMapDictionaryPool() public DoubleMapDictionaryPool() 方法 Create() 创建一个新的 DoubleMapDictionaryPool<TKey, TValue> 实例。 public static DoubleMapDictionaryPool<TKey, TValue> Create() 返回 DoubleMapDictionaryPool<TKey, TValue> 新创建的实例。 Dispose() 释放实例占用的资源。 public void Dispose()"
  },
  "reference/Fantasy.EntitiesSystem.html": {
    "href": "reference/Fantasy.EntitiesSystem.html",
    "title": "EntitiesSystem 类 | Fantasy.Net API Reference",
    "keywords": "EntitiesSystem 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 实体系统管理器，用于管理各种实体系统的生命周期和更新 public sealed class EntitiesSystem : Singleton<EntitiesSystem>, IUpdateSingleton, ISingleton, IDisposable 继承 object Singleton<EntitiesSystem> EntitiesSystem 实现 IUpdateSingleton ISingleton IDisposable 继承成员 Singleton<EntitiesSystem>.Initialize() Singleton<EntitiesSystem>.IsDisposed Singleton<EntitiesSystem>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 EntitiesSystem() public EntitiesSystem() 方法 Awake<T>(T) 触发实体的唤醒方法 public void Awake<T>(T entity) where T : Entity 参数 entity T 实体对象 类型参数 T 实体类型 Deserialize<T>(T) 触发实体的反序列化方法 public void Deserialize<T>(T entity) where T : Entity 参数 entity T 实体对象 类型参数 T 实体类型 Destroy<T>(T) 触发实体的销毁方法 public void Destroy<T>(T entity) where T : Entity 参数 entity T 实体对象 类型参数 T 实体类型 Dispose() 释放实体系统管理器资源 public override void Dispose() FrameUpdate() 执行实体系统的帧更新逻辑 public void FrameUpdate() OnLoad(int) 当加载程序集时的处理方法，用于初始化实体系统列表 protected override void OnLoad(int assemblyName) 参数 assemblyName int 程序集名称 OnUnLoad(int) 当卸载程序集时的处理方法，用于清理实体系统列表 protected override void OnUnLoad(int assemblyName) 参数 assemblyName int 程序集名称 StartUpdate(Entity) 将实体加入更新队列，准备进行更新 public void StartUpdate(Entity entity) 参数 entity Entity 实体对象 Update() 执行实体系统的更新逻辑 public void Update()"
  },
  "reference/Fantasy.Entity.html": {
    "href": "reference/Fantasy.Entity.html",
    "title": "Entity 类 | Fantasy.Net API Reference",
    "keywords": "Entity 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 实体基类，用于实体创建、回收、获取，和组件操作 public abstract class Entity : IDisposable 继承 object Entity 实现 IDisposable Derived AddressableManageComponent AddressableMessageComponent AddressableRouteComponent ClientNetworkComponent LinkEntityComponent RouteComponent Scene ServerNetworkComponent Session SessionIdleCheckerComponent 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Entity() protected Entity() 属性 ForEachSingleCollection 获取一个 IEnumerable，用于遍历当前实体上所有实现了 ISupportedSingleCollection 接口的组件。 [IgnoreDataMember] public IEnumerable<Entity> ForEachSingleCollection { get; } 属性值 IEnumerable<Entity> ForEachTransfer 获取一个 IEnumerable，用于遍历当前实体上所有实现了 ISupportedSingleCollection 或 ISupportedTransfer 接口的组件。 [IgnoreDataMember] public IEnumerable<Entity> ForEachTransfer { get; } 属性值 IEnumerable<Entity> Id 获取或设置实体的唯一ID。 public long Id { get; } 属性值 long IsDisposed 获取一个值，表示实体是否已被释放。 [IgnoreDataMember] public bool IsDisposed { get; } 属性值 bool Parent 获取或设置实体的父实体。 [IgnoreDataMember] public Entity Parent { get; protected set; } 属性值 Entity RuntimeId 获取实体的运行时ID。 [IgnoreDataMember] public long RuntimeId { get; } 属性值 long Scene 获取或设置实体所属的场景。 [IgnoreDataMember] public Scene Scene { get; protected set; } 属性值 Scene 方法 AddComponent(Entity) 将指定的组件添加到当前实体。 public void AddComponent(Entity component) 参数 component Entity 要添加的组件。 AddComponent<T>() 在当前实体上添加一个指定类型的组件，并立即触发组件事件。 public T AddComponent<T>() where T : Entity, new() 返回 T 创建的组件实体。 类型参数 T 组件类型。 AddComponent<T>(long) 在当前实体上添加一个指定类型的组件，并立即触发组件事件。 public T AddComponent<T>(long id) where T : Entity, new() 参数 id long 要分配给组件的ID。 返回 T 创建的组件实体。 类型参数 T 组件类型。 Clone() 克隆当前实体，并返回一个新的实体对象，新对象将具有相同的状态和组件。 public Entity Clone() 返回 Entity 克隆生成的实体。 Create<T>(Scene, bool) 在指定场景中创建一个实体对象，并触发相关事件（可选）。 public static T Create<T>(Scene scene, bool isRunEvent = true) where T : Entity, new() 参数 scene Scene 要创建实体的场景。 isRunEvent bool 是否触发相关事件。 返回 T 创建的实体对象。 类型参数 T 实体类型。 Create<T>(Scene, long, bool) 在指定场景中创建一个具有指定ID的实体对象，并触发相关事件（可选）。 public static T Create<T>(Scene scene, long id, bool isRunEvent = true) where T : Entity, new() 参数 scene Scene 要创建实体的场景。 id long 要分配给实体的ID。 isRunEvent bool 是否触发相关事件。 返回 T 创建的实体对象。 类型参数 T 实体类型。 Create<T>(long, long, bool) 在指定位置中创建一个实体对象，并可选择是否立即触发事件。 protected static T Create<T>(long id, long runtimeId, bool isRunEvent = true) where T : Entity, new() 参数 id long 要分配给实体的ID。 runtimeId long 要分配给实体的运行时ID。 isRunEvent bool 是否立即触发实体事件。 返回 T 创建的实体对象。 类型参数 T 实体类型。 Create<T>(long, uint, bool) 在指定位置（locationId）上创建一个具有指定ID的实体对象，并触发相关事件（可选）。 protected static T Create<T>(long id, uint locationId, bool isRunEvent = true) where T : Entity, new() 参数 id long 要分配给实体的ID。 locationId uint 实体所在位置的ID。 isRunEvent bool 是否触发相关事件。 返回 T 创建的实体对象。 类型参数 T 实体类型。 Deserialize(Scene, bool) 从序列化数据中恢复当前实体的状态，并将其添加到指定的场景中。 public void Deserialize(Scene scene, bool resetId = false) 参数 scene Scene 要添加到的场景。 resetId bool 是否重置实体的ID。 Dispose() 释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。 public virtual void Dispose() ForEachEntity() 获取一个 IEnumerable，用于遍历当前实体上挂载的普通组件。 public IEnumerable<Entity> ForEachEntity() 返回 IEnumerable<Entity> ForEachMultiEntity() 获取一个 IEnumerable，用于遍历当前实体上所有实现了ISupportedMultiEntity接口的组件。 public IEnumerable<Entity> ForEachMultiEntity() 返回 IEnumerable<Entity> GetComponent(Type) 获取当前实体上的一个指定类型的组件实体。 public Entity GetComponent(Type componentType) 参数 componentType Type 要获取的组件类型。 返回 Entity 找到的组件实体，如果不存在则为 null。 GetComponent<T>() 获取当前实体上的一个指定类型的组件实体。 public T GetComponent<T>() where T : Entity, new() 返回 T 找到的组件实体，如果不存在则为 null。 类型参数 T 要获取的组件类型。 GetComponent<T>(long) 获取当前实体上的一个指定类型的多实体组件。 public T GetComponent<T>(long id) where T : ISupportedMultiEntity, new() 参数 id long 多实体组件的ID。 返回 T 找到的多实体组件，如果不存在则为 null。 类型参数 T 要获取的多实体组件类型。 GetEntity(long) 获取指定运行时ID的实体对象 public static Entity GetEntity(long runTimeId) 参数 runTimeId long 运行时ID 返回 Entity 实体对象 GetEntity<T>(long) 获取指定运行时ID的实体对象。 public static T GetEntity<T>(long runTimeId) where T : Entity, new() 参数 runTimeId long 要获取的实体的运行时ID。 返回 T 找到的实体对象，如果不存在则返回默认值。 类型参数 T 实体类型。 GetParent<T>() 获取当前实体的父实体。 public T GetParent<T>() where T : Entity, new() 返回 T 类型参数 T RemoveComponent(Entity, bool) 从当前实体上移除一个指定的组件实体。 public void RemoveComponent(Entity component, bool isDispose = true) 参数 component Entity 要移除的组件实体。 isDispose bool 是否同时释放被移除的组件。 RemoveComponent<T>(bool) 从当前实体上移除一个指定类型的组件。 public void RemoveComponent<T>(bool isDispose = true) where T : Entity, new() 参数 isDispose bool 是否同时释放被移除的组件。 类型参数 T 要移除的组件类型。 RemoveComponent<T>(long, bool) 从当前实体上移除一个指定类型的多实体组件。 public void RemoveComponent<T>(long id, bool isDispose = true) where T : ISupportedMultiEntity, new() 参数 id long 要移除的多实体组件的ID。 isDispose bool 是否同时释放被移除的组件。 类型参数 T 要移除的多实体组件类型。 TryGetEntity(long, out Entity) 尝试获取指定运行时ID的实体对象 public static bool TryGetEntity(long runTimeId, out Entity entity) 参数 runTimeId long 运行时ID entity Entity 输出参数，实体对象 返回 bool 是否获取成功 TryGetEntity<T>(long, out T) 尝试获取指定运行时ID的实体对象。 public static bool TryGetEntity<T>(long runTimeId, out T outEntity) where T : Entity, new() 参数 runTimeId long 要获取的实体的运行时ID。 outEntity T 输出参数，找到的实体对象。 返回 bool 如果找到实体对象则返回 true，否则返回 false。 类型参数 T 实体类型。"
  },
  "reference/Fantasy.EntityDictionary-2.html": {
    "href": "reference/Fantasy.EntityDictionary-2.html",
    "title": "EntityDictionary<TM, TN> 类 | Fantasy.Net API Reference",
    "keywords": "EntityDictionary<TM, TN> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供一个带资源释放功能的实体字典类，支持使用对象池管理。 public sealed class EntityDictionary<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IDictionary, ICollection, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TM : notnull where TN : IDisposable 类型参数 TM 字典中键的类型。 TN 字典中值的类型，必须实现 IDisposable 接口。 继承 object Dictionary<TM, TN> EntityDictionary<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IDictionary ICollection IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values Dictionary<TM, TN>.this[TM] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 EntityDictionary() public EntityDictionary() 方法 Clear() 清空字典中的所有键值对，并释放值的资源。 public void Clear() ClearNotDispose() 清空字典中的所有键值对，但不释放值的资源。 public void ClearNotDispose() Create() 创建一个新的 EntityDictionary<TM, TN> 实例。 public static EntityDictionary<TM, TN> Create() 返回 EntityDictionary<TM, TN> 新创建的实例。 Dispose() 释放实例占用的资源。 public void Dispose()"
  },
  "reference/Fantasy.EntityIdStruct.html": {
    "href": "reference/Fantasy.EntityIdStruct.html",
    "title": "EntityIdStruct 结构 | Fantasy.Net API Reference",
    "keywords": "EntityIdStruct 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 实体的唯一标识符结构。 public struct EntityIdStruct 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 EntityIdStruct(uint, uint, uint) 初始化 EntityIdStruct 结构的新实例。 public EntityIdStruct(uint locationId, uint time, uint sequence) 参数 locationId uint 位置 ID。 time uint 时间戳。 sequence uint 序列号。 字段 MaskRouteId 表示用于掩码的 RouteId。 public const int MaskRouteId = 262143 字段值 int MaskSequence 表示用于掩码的 Sequence。 public const int MaskSequence = 65535 字段值 int 属性 AppId 获取实体 ID 对应的 AppId。 public ushort AppId { get; } 属性值 ushort LocationId 获取或设置实体的位置 ID。 public readonly uint LocationId { get; } 属性值 uint Sequence 获取或设置实体的序列号部分。 public readonly uint Sequence { get; } 属性值 uint Time 获取或设置实体的时间戳部分。 public readonly uint Time { get; } 属性值 uint WordId 获取实体 ID 对应的 WordId。 public ushort WordId { get; } 属性值 ushort 运算符 implicit operator long(EntityIdStruct) 将 EntityIdStruct 隐式转换为 long 类型。 public static implicit operator long(EntityIdStruct entityIdStruct) 参数 entityIdStruct EntityIdStruct 要转换的 EntityIdStruct 实例。 返回 long implicit operator EntityIdStruct(long) 将 long 类型隐式转换为 EntityIdStruct。 public static implicit operator EntityIdStruct(long id) 参数 id long 要转换的 long 类型的值。 返回 EntityIdStruct"
  },
  "reference/Fantasy.EntityList-1.html": {
    "href": "reference/Fantasy.EntityList-1.html",
    "title": "EntityList<T> 类 | Fantasy.Net API Reference",
    "keywords": "EntityList<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 实体对象列表，继承自 List<T>，并实现 IDisposable 接口，用于创建和管理实体对象的集合。 public sealed class EntityList<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDisposable where T : IDisposable 类型参数 T 实体对象的类型。 继承 object List<T> EntityList<T> 实现 IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDisposable 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.Slice(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>) 构造函数 EntityList() public EntityList() 方法 Clear() 清空列表，并释放所有实体对象的资源。 public void Clear() ClearNotDispose() 清空列表，但不释放实体对象的资源。 public void ClearNotDispose() Create() 创建一个 EntityList<T> 实体对象列表的实例。 public static EntityList<T> Create() 返回 EntityList<T> 创建的实例。 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.EntityReference-1.html": {
    "href": "reference/Fantasy.EntityReference-1.html",
    "title": "EntityReference<T> 结构 | Fantasy.Net API Reference",
    "keywords": "EntityReference<T> 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 实体引用只读结构，用作对 Entity 实例的引用。 public struct EntityReference<T> where T : Entity 类型参数 T Entity 的类型。 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 运算符 implicit operator T(EntityReference<T>) 隐式地将 EntityReference 转换回原始的 Entity 类型。 public static implicit operator T(EntityReference<T> v) 参数 v EntityReference<T> 要转换的 EntityReference。 返回 T 如果运行时 ID 匹配，则返回原始的 Entity 实例，如果不匹配则返回 null， 或者如果引用为 null，则返回 null。 implicit operator EntityReference<T>(T) 隐式地将 Entity 实例转换为 EntityReference。 public static implicit operator EntityReference<T>(T t) 参数 t T 要转换的 Entity 实例。 返回 EntityReference<T> 引用同一 Entity 的 EntityReference 实例。"
  },
  "reference/Fantasy.EventSystem-1.html": {
    "href": "reference/Fantasy.EventSystem-1.html",
    "title": "EventSystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "EventSystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 事件系统的抽象基类。 public abstract class EventSystem<T> : IEvent 类型参数 T 事件的类型。 继承 object EventSystem<T> 实现 IEvent Derived OnCoroutineLockTimeout TimerHandler<T> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 EventSystem() protected EventSystem() 方法 EventType() 获取事件的类型。 public Type EventType() 返回 Type 事件的类型。 Handler(T) 同步处理事件的方法。 public abstract void Handler(T self) 参数 self T 事件的实例。 Invoke(object) 调用事件处理方法。 public void Invoke(object self) 参数 self object 事件的实例。"
  },
  "reference/Fantasy.EventSystem.html": {
    "href": "reference/Fantasy.EventSystem.html",
    "title": "EventSystem 类 | Fantasy.Net API Reference",
    "keywords": "EventSystem 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 事件系统类，用于加卸载程序集，发布和订阅事件。 public sealed class EventSystem : Singleton<EventSystem>, ISingleton, IDisposable 继承 object Singleton<EventSystem> EventSystem 实现 ISingleton IDisposable 继承成员 Singleton<EventSystem>.Initialize() Singleton<EventSystem>.IsDisposed Singleton<EventSystem>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 EventSystem() public EventSystem() 方法 Dispose() 清理资源和事件订阅 public override void Dispose() OnLoad(int) 在程序集加载时，遍历寻找并初始化事件。 protected override void OnLoad(int assemblyName) 参数 assemblyName int 程序集名 OnUnLoad(int) 在程序集卸载时，移除相关事件。 protected override void OnUnLoad(int assemblyName) 参数 assemblyName int 程序集名 PublishAsync<TEventData>(TEventData) 异步发布一个值类型的事件数据。 public FTask PublishAsync<TEventData>(TEventData eventData) where TEventData : struct 参数 eventData TEventData 事件数据实例。 返回 FTask 表示异步操作的任务。 类型参数 TEventData 事件数据类型（值类型）。 PublishAsync<TEventData>(TEventData, bool) 异步发布一个继承自 Entity 的事件数据。 public FTask PublishAsync<TEventData>(TEventData eventData, bool isDisposed = true) where TEventData : Entity 参数 eventData TEventData 事件数据实例。 isDisposed bool 是否释放事件数据。 返回 FTask 表示异步操作的任务。 类型参数 TEventData 事件数据类型（继承自 Entity）。 Publish<TEventData>(TEventData) 发布一个值类型的事件数据。 public void Publish<TEventData>(TEventData eventData) where TEventData : struct 参数 eventData TEventData 事件数据实例。 类型参数 TEventData 事件数据类型（值类型）。 Publish<TEventData>(TEventData, bool) 发布一个继承自 Entity 的事件数据。 public void Publish<TEventData>(TEventData eventData, bool isDisposed = true) where TEventData : Entity 参数 eventData TEventData 事件数据实例。 isDisposed bool 是否释放事件数据。 类型参数 TEventData 事件数据类型（继承自 Entity）。"
  },
  "reference/Fantasy.FCancellationToken.html": {
    "href": "reference/Fantasy.FCancellationToken.html",
    "title": "FCancellationToken 类 | Fantasy.Net API Reference",
    "keywords": "FCancellationToken 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个自定义的取消标记，允许添加和移除取消动作，并可用于取消一组注册的动作。 public sealed class FCancellationToken : IDisposable 继承 object FCancellationToken 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 FCancellationToken() public FCancellationToken() 属性 IsCancel 获取一个值，指示取消标记是否已被取消。 public bool IsCancel { get; } 属性值 bool 方法 Add(Action) 将一个动作添加到在取消时执行的动作列表中。 public void Add(Action action) 参数 action Action 要添加的动作。 Create() 创建一个取消标记。 public static FCancellationToken Create() 返回 FCancellationToken Dispose() 取消标记并执行所有已注册的取消动作。 public void Dispose() Remove(Action) 从取消标记中移除之前添加的动作。 public void Remove(Action action) 参数 action Action 要移除的动作。"
  },
  "reference/Fantasy.FTask-1.html": {
    "href": "reference/Fantasy.FTask-1.html",
    "title": "FTask<T> 类 | Fantasy.Net API Reference",
    "keywords": "FTask<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个轻量级的异步任务（Future Task），提供类似于 Task 的异步编程模型，但仅适用于某些简单的异步操作。 public sealed class FTask<T> : ICriticalNotifyCompletion, INotifyCompletion 类型参数 T 任务结果的类型。 继承 object FTask<T> 实现 ICriticalNotifyCompletion INotifyCompletion 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 FTask() public FTask() 属性 IsCompleted 获取一个值，表示异步任务是否已经完成。 public bool IsCompleted { get; } 属性值 bool 方法 Coroutine() 将任务转换为协程进行等待。 public void Coroutine() Create(bool) 创建一个新的异步任务。 public static FTask<T> Create(bool isFromPool = true) 参数 isFromPool bool 是否从对象池中创建。 返回 FTask<T> 新的异步任务实例。 GetAwaiter() 获取一个等待任务完成的 awaiter。 public FTask<T> GetAwaiter() 返回 FTask<T> 用于等待异步任务的 awaiter。 GetResult() 获取异步任务的结果。 public T GetResult() 返回 T 异步任务的结果。 OnCompleted(Action) 在任务未完成时，注册一个操作，以便在任务完成时执行。 如果任务已经完成，操作将立即执行。 public void OnCompleted(Action continuation) 参数 continuation Action 要注册的操作。 SetException(Exception) 设置异步任务的异常结果。 public void SetException(Exception exception) 参数 exception Exception 要关联的异常信息。 SetResult(T) 设置异步任务的成功结果。 public void SetResult(T value) 参数 value T 异步任务的结果值。 UnsafeOnCompleted(Action) 在任务未完成时，注册一个操作，以便在任务完成时执行。 如果任务已经完成，操作将立即执行。 public void UnsafeOnCompleted(Action continuation) 参数 continuation Action 要注册的操作。 WaitAny(params FTask<T>[]) 等待任意一个任务完成的异步方法。 public static FTask WaitAny(params FTask<T>[] tasks) 参数 tasks FTask<T>[] 要等待的任务数组。 返回 FTask WhenAll(params FTask<T>[]) 等待所有任务完成的异步方法。 public static FTask WhenAll(params FTask<T>[] tasks) 参数 tasks FTask<T>[] 要等待的任务数组。 返回 FTask WhenAll(List<FTask<T>>) 等待所有任务完成的异步方法。 public static FTask WhenAll(List<FTask<T>> tasks) 参数 tasks List<FTask<T>> 要等待的任务列表。 返回 FTask"
  },
  "reference/Fantasy.FTask.html": {
    "href": "reference/Fantasy.FTask.html",
    "title": "FTask 类 | Fantasy.Net API Reference",
    "keywords": "FTask 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 轻量级异步任务类。 public sealed class FTask : ICriticalNotifyCompletion, INotifyCompletion 继承 object FTask 实现 ICriticalNotifyCompletion INotifyCompletion 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 FTask() public FTask() 属性 CompletedTask 获取一个已完成的异步任务实例。 public static FTaskCompleted CompletedTask { get; } 属性值 FTaskCompleted IsCompleted 获取一个值，表示异步任务是否已经完成。 public bool IsCompleted { get; } 属性值 bool 如果异步任务已完成，则为 true；否则为 false。 方法 Any(params FTask[]) 等待任意一个任务完成的异步方法。 public static FTask Any(params FTask[] tasks) 参数 tasks FTask[] 要等待的任务数组。 返回 FTask Coroutine() 启动当前任务作为一个协程。 public void Coroutine() Create(bool) 创建一个新的异步任务。 public static FTask Create(bool isFromPool = true) 参数 isFromPool bool 是否从对象池中创建。 返回 FTask 新的异步任务实例。 FromResult<T>(T) 从指定的值创建一个已完成的异步任务。 public static FTask<T> FromResult<T>(T value) 参数 value T 异步任务的结果值。 返回 FTask<T> 已完成的异步任务。 类型参数 T 异步任务的结果类型。 GetAwaiter() 获取用于等待异步任务完成的等待器。 public FTask GetAwaiter() 返回 FTask 一个异步任务等待器。 GetResult() 获取异步任务的执行结果。 public void GetResult() 异常 NotSupportedException 不支持直接调用 GetResult。 OnCompleted(Action) 在异步任务完成时执行指定的操作。 public void OnCompleted(Action continuation) 参数 continuation Action 完成时要执行的操作。 Run(Func<FTask>) 使用指定的工厂方法创建并运行一个异步任务。 public static FTask Run(Func<FTask> factory) 参数 factory Func<FTask> 用于创建异步任务的工厂方法。 返回 FTask 创建并运行的异步任务。 Run<T>(Func<FTask<T>>) 使用指定的工厂方法创建并运行一个带有结果的异步任务。 public static FTask<T> Run<T>(Func<FTask<T>> factory) 参数 factory Func<FTask<T>> 用于创建异步任务的工厂方法。 返回 FTask<T> 创建并运行的异步任务。 类型参数 T 异步任务的结果类型。 SetException(Exception) 设置任务为异常完成状态，并指定异常信息。 如果任务已经完成，将引发异常。 public void SetException(Exception exception) 参数 exception Exception 要关联的异常信息。 SetResult() 设置异步任务的执行结果。 public void SetResult() UnsafeOnCompleted(Action) 在任务未完成时，注册一个操作，以便在任务完成时执行。 如果任务已经完成，操作将立即执行。 public void UnsafeOnCompleted(Action continuation) 参数 continuation Action 要注册的操作。 WhenAll(List<FTask>) 等待所有任务完成的异步方法。 public static FTask WhenAll(List<FTask> tasks) 参数 tasks List<FTask> 要等待的任务列表。 返回 FTask"
  },
  "reference/Fantasy.FTaskCompleted.html": {
    "href": "reference/Fantasy.FTaskCompleted.html",
    "title": "FTaskCompleted 结构 | Fantasy.Net API Reference",
    "keywords": "FTaskCompleted 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 已完成的异步任务结构。 public struct FTaskCompleted : INotifyCompletion 实现 INotifyCompletion 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 属性 IsCompleted 获取一个值，表示异步任务是否已经完成。 public bool IsCompleted { get; } 属性值 bool 方法 GetAwaiter() 获取一个等待器以等待此已完成的异步任务。 public FTaskCompleted GetAwaiter() 返回 FTaskCompleted 一个等待器。 GetResult() 获取异步任务的结果。 public void GetResult() OnCompleted(Action) 指定在异步操作完成时要执行的继续操作。 public void OnCompleted(Action continuation) 参数 continuation Action 要执行的继续操作。 UnsafeOnCompleted(Action) 指定在异步操作完成时要执行的不安全继续操作。 public void UnsafeOnCompleted(Action continuation) 参数 continuation Action 要执行的不安全继续操作。"
  },
  "reference/Fantasy.FantasySettingsHelper.html": {
    "href": "reference/Fantasy.FantasySettingsHelper.html",
    "title": "FantasySettingsHelper 类 | Fantasy.Net API Reference",
    "keywords": "FantasySettingsHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll FantasySettingsHelper 类用于加载和管理 Fantasy 系统的各项设置。 public static class FantasySettingsHelper 继承 object FantasySettingsHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Initialize() 初始化 Fantasy 系统的各项设置。 public static void Initialize()"
  },
  "reference/Fantasy.FileHelper.html": {
    "href": "reference/Fantasy.FileHelper.html",
    "title": "FileHelper 类 | Fantasy.Net API Reference",
    "keywords": "FileHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 文件操作助手类，提供了各种文件操作方法。 public static class FileHelper 继承 object FileHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 ClearDirectoryFile(string) 清空文件夹内的所有文件。 public static void ClearDirectoryFile(string folderPath) 参数 folderPath string 文件夹路径。 Copy(string, string, bool) 将文件复制到目标路径，如果目标目录不存在会自动创建目录。 public static void Copy(string sourceFile, string destinationFile, bool overwrite) 参数 sourceFile string 源文件路径。 destinationFile string 目标文件路径。 overwrite bool 是否覆盖已存在的目标文件。 CopyDirectory(string, string, bool) 将文件夹内的所有内容复制到目标位置。 public static void CopyDirectory(string sourceDirectory, string destinationDirectory, bool overwrite) 参数 sourceDirectory string 源文件夹路径。 destinationDirectory string 目标文件夹路径。 overwrite bool 是否覆盖已存在的文件。 CreateDirectory(string) 根据文件夹路径创建文件夹，如果文件夹不存在会自动创建文件夹。 public static void CreateDirectory(string directoryPath) 参数 directoryPath string GetDirectoriesByFilePath(string) 获取文件路径内的所有文件夹路径。 public static IEnumerable<string> GetDirectoriesByFilePath(string filePath) 参数 filePath string 文件路径。 返回 IEnumerable<string> 文件夹路径列表。 GetDirectoryFile(string, string, SearchOption) 获取目录下的所有文件 public static string[] GetDirectoryFile(string folderPath, string searchPattern, SearchOption searchOption) 参数 folderPath string 文件夹路径。 searchPattern string 需要查找的文件通配符 searchOption SearchOption 查找的类型 返回 string[] GetFullPath(string) 获取相对路径的完整路径。 public static string GetFullPath(string relativePath) 参数 relativePath string 相对路径。 返回 string 完整路径。"
  },
  "reference/Fantasy.FrameUpdateSystem-1.html": {
    "href": "reference/Fantasy.FrameUpdateSystem-1.html",
    "title": "FrameUpdateSystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "FrameUpdateSystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示实体帧更新系统的抽象基类。继承此类可以定义特定类型实体的更新逻辑。 public abstract class FrameUpdateSystem<T> : IFrameUpdateSystem, IEntitiesSystem where T : Entity 类型参数 T 实体类型，必须继承自Entity。 继承 object FrameUpdateSystem<T> 实现 IFrameUpdateSystem IEntitiesSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 FrameUpdateSystem() protected FrameUpdateSystem() 方法 EntitiesType() 获取实体帧更新系统所管理的实体类型。 public Type EntitiesType() 返回 Type 实体类型。 FrameUpdate(T) 在实体帧更新系统中执行特定实体的更新逻辑。具体的实现应在子类中实现。 protected abstract void FrameUpdate(T self) 参数 self T 需要执行帧更新逻辑的实体。 Invoke(Entity) 在实体帧更新系统中调用更新逻辑。 public void Invoke(Entity self) 参数 self Entity 需要执行帧更新逻辑的实体。"
  },
  "reference/Fantasy.HandlerInfo-1.html": {
    "href": "reference/Fantasy.HandlerInfo-1.html",
    "title": "HandlerInfo<T> 类 | Fantasy.Net API Reference",
    "keywords": "HandlerInfo<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于存储消息处理器的信息，包括类型和对象实例。 public sealed class HandlerInfo<T> 类型参数 T 消息处理器的类型 继承 object HandlerInfo<T> 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 HandlerInfo() public HandlerInfo() 字段 Obj 获取或设置消息处理器对象。 public T Obj 字段值 T Type 获取或设置消息处理器的类型。 public Type Type 字段值 Type"
  },
  "reference/Fantasy.HashSetBasePool-1.html": {
    "href": "reference/Fantasy.HashSetBasePool-1.html",
    "title": "HashSetBasePool<T> 类 | Fantasy.Net API Reference",
    "keywords": "HashSetBasePool<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基本哈希集合对象池，他自持有实际的哈希集合。 public sealed class HashSetBasePool<T> : IDisposable 类型参数 T 哈希集合中元素的类型。 继承 object HashSetBasePool<T> 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 HashSetBasePool() public HashSetBasePool() 字段 Set 存储实际的哈希集合 public HashSet<T> Set 字段值 HashSet<T> 方法 Create() 创建一个 HashSetBasePool<T> 基本哈希集合对象池的实例。 public static HashSetBasePool<T> Create() 返回 HashSetBasePool<T> 创建的实例。 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.HashSetPool-1.html": {
    "href": "reference/Fantasy.HashSetPool-1.html",
    "title": "HashSetPool<T> 类 | Fantasy.Net API Reference",
    "keywords": "HashSetPool<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可释放的哈希集合对象池。 public sealed class HashSetPool<T> : HashSet<T>, ISet<T>, ICollection<T>, IReadOnlySet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable 类型参数 T 哈希集合中元素的类型。 继承 object HashSet<T> HashSetPool<T> 实现 ISet<T> ICollection<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 HashSet<T>.Clear() HashSet<T>.Contains(T) HashSet<T>.Remove(T) HashSet<T>.GetEnumerator() HashSet<T>.OnDeserialization(object) HashSet<T>.Add(T) HashSet<T>.TryGetValue(T, out T) HashSet<T>.UnionWith(IEnumerable<T>) HashSet<T>.IntersectWith(IEnumerable<T>) HashSet<T>.ExceptWith(IEnumerable<T>) HashSet<T>.SymmetricExceptWith(IEnumerable<T>) HashSet<T>.IsSubsetOf(IEnumerable<T>) HashSet<T>.IsProperSubsetOf(IEnumerable<T>) HashSet<T>.IsSupersetOf(IEnumerable<T>) HashSet<T>.IsProperSupersetOf(IEnumerable<T>) HashSet<T>.Overlaps(IEnumerable<T>) HashSet<T>.SetEquals(IEnumerable<T>) HashSet<T>.CopyTo(T[]) HashSet<T>.CopyTo(T[], int) HashSet<T>.CopyTo(T[], int, int) HashSet<T>.RemoveWhere(Predicate<T>) HashSet<T>.EnsureCapacity(int) HashSet<T>.TrimExcess() HashSet<T>.CreateSetComparer() HashSet<T>.Count HashSet<T>.Comparer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 HashSetPool() public HashSetPool() 方法 Create() 创建一个 HashSetPool<T> 哈希集合池的实例。 public static HashSetPool<T> Create() 返回 HashSetPool<T> 创建的实例。 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.Helper.AssemblyInfo.html": {
    "href": "reference/Fantasy.Helper.AssemblyInfo.html",
    "title": "AssemblyInfo 类 | Fantasy.Net API Reference",
    "keywords": "AssemblyInfo 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public sealed class AssemblyInfo 继承 object AssemblyInfo 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AssemblyInfo() public AssemblyInfo() 字段 AssemblyTypeGroupList public readonly OneToManyList<Type, Type> AssemblyTypeGroupList 字段值 OneToManyList<Type, Type> AssemblyTypeList public readonly List<Type> AssemblyTypeList 字段值 List<Type> 属性 Assembly public Assembly Assembly { get; } 属性值 Assembly 方法 Load(Assembly) public void Load(Assembly assembly) 参数 assembly Assembly Unload() public void Unload()"
  },
  "reference/Fantasy.Helper.AssemblyManager.html": {
    "href": "reference/Fantasy.Helper.AssemblyManager.html",
    "title": "AssemblyManager 类 | Fantasy.Net API Reference",
    "keywords": "AssemblyManager 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class AssemblyManager 继承 object AssemblyManager 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Dispose() public static void Dispose() ForEach() public static IEnumerable<Type> ForEach() 返回 IEnumerable<Type> ForEach(int) public static IEnumerable<Type> ForEach(int assemblyName) 参数 assemblyName int 返回 IEnumerable<Type> ForEach(int, Type) public static IEnumerable<Type> ForEach(int assemblyName, Type findType) 参数 assemblyName int findType Type 返回 IEnumerable<Type> ForEach(Type) public static IEnumerable<Type> ForEach(Type findType) 参数 findType Type 返回 IEnumerable<Type> ForEachAssemblyName() public static IEnumerable<int> ForEachAssemblyName() 返回 IEnumerable<int> GetAssembly(int) public static Assembly GetAssembly(int assemblyName) 参数 assemblyName int 返回 Assembly Initialize() public static void Initialize() Load(int, Assembly) public static void Load(int assemblyName, Assembly assembly) 参数 assemblyName int assembly Assembly LoadAssembly(int, Assembly) public static void LoadAssembly(int assemblyName, Assembly assembly) 参数 assemblyName int assembly Assembly 事件 OnLoadAssemblyEvent public static event Action<int> OnLoadAssemblyEvent 事件类型 Action<int> OnReLoadAssemblyEvent public static event Action<int> OnReLoadAssemblyEvent 事件类型 Action<int> OnUnLoadAssemblyEvent public static event Action<int> OnUnLoadAssemblyEvent 事件类型 Action<int>"
  },
  "reference/Fantasy.Helper.ByteHelper.html": {
    "href": "reference/Fantasy.Helper.ByteHelper.html",
    "title": "ByteHelper 类 | Fantasy.Net API Reference",
    "keywords": "ByteHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class ByteHelper 继承 object ByteHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 MergeBytes(byte[], byte[]) public static byte[] MergeBytes(byte[] bytes, byte[] otherBytes) 参数 bytes byte[] otherBytes byte[] 返回 byte[] ReadInt32(FileStream) public static int ReadInt32(FileStream stream) 参数 stream FileStream 返回 int ReadInt32(MemoryStream) public static int ReadInt32(MemoryStream stream) 参数 stream MemoryStream 返回 int ReadInt64(FileStream) public static long ReadInt64(FileStream stream) 参数 stream FileStream 返回 long ReadInt64(MemoryStream) public static long ReadInt64(MemoryStream stream) 参数 stream MemoryStream 返回 long ToHex(byte) public static string ToHex(this byte b) 参数 b byte 返回 string ToHex(byte[]) public static string ToHex(this byte[] bytes) 参数 bytes byte[] 返回 string ToHex(byte[], int, int) public static string ToHex(this byte[] bytes, int offset, int count) 参数 bytes byte[] offset int count int 返回 string ToHex(byte[], string) public static string ToHex(this byte[] bytes, string format) 参数 bytes byte[] format string 返回 string ToReadableSpeed(long) public static string ToReadableSpeed(this long byteCount) 参数 byteCount long 返回 string ToReadableSpeed(ulong) public static string ToReadableSpeed(this ulong byteCount) 参数 byteCount ulong 返回 string ToStr(byte[]) public static string ToStr(this byte[] bytes) 参数 bytes byte[] 返回 string ToStr(byte[], int, int) public static string ToStr(this byte[] bytes, int index, int count) 参数 bytes byte[] index int count int 返回 string Utf8ToStr(byte[]) public static string Utf8ToStr(this byte[] bytes) 参数 bytes byte[] 返回 string Utf8ToStr(byte[], int, int) public static string Utf8ToStr(this byte[] bytes, int index, int count) 参数 bytes byte[] index int count int 返回 string WriteTo(byte[], int, byte) public static void WriteTo(this byte[] bytes, int offset, byte num) 参数 bytes byte[] offset int num byte WriteTo(byte[], int, short) public static void WriteTo(this byte[] bytes, int offset, short num) 参数 bytes byte[] offset int num short WriteTo(byte[], int, int) public static void WriteTo(this byte[] bytes, int offset, int num) 参数 bytes byte[] offset int num int WriteTo(byte[], int, ushort) public static void WriteTo(this byte[] bytes, int offset, ushort num) 参数 bytes byte[] offset int num ushort WriteTo(byte[], int, uint) public static void WriteTo(this byte[] bytes, int offset, uint num) 参数 bytes byte[] offset int num uint"
  },
  "reference/Fantasy.Helper.CryptHelper.html": {
    "href": "reference/Fantasy.Helper.CryptHelper.html",
    "title": "CryptHelper 类 | Fantasy.Net API Reference",
    "keywords": "CryptHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class CryptHelper 继承 object CryptHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 AesDecrypt(byte[]) public static byte[] AesDecrypt(byte[] toEncryptArray) 参数 toEncryptArray byte[] 返回 byte[] AesDecryptReturnStream(byte[]) public static MemoryStream AesDecryptReturnStream(byte[] toEncryptArray) 参数 toEncryptArray byte[] 返回 MemoryStream AesEncrypt(byte[]) public static byte[] AesEncrypt(byte[] toEncryptArray) 参数 toEncryptArray byte[] 返回 byte[] CreateKey(string) public static string CreateKey(string keyStr) 参数 keyStr string 返回 string"
  },
  "reference/Fantasy.Helper.EntityIdStruct.html": {
    "href": "reference/Fantasy.Helper.EntityIdStruct.html",
    "title": "EntityIdStruct 结构 | Fantasy.Net API Reference",
    "keywords": "EntityIdStruct 结构 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public struct EntityIdStruct 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 EntityIdStruct(uint, uint, uint) public EntityIdStruct(uint locationId, uint time, uint sequence) 参数 locationId uint time uint sequence uint 字段 MaskRouteId public const int MaskRouteId = 262143 字段值 int MaskSequence public const int MaskSequence = 65535 字段值 int 属性 AppId public ushort AppId { get; } 属性值 ushort LocationId public readonly uint LocationId { get; } 属性值 uint Sequence public readonly uint Sequence { get; } 属性值 uint Time public readonly uint Time { get; } 属性值 uint WordId public ushort WordId { get; } 属性值 ushort 运算符 implicit operator long(EntityIdStruct) public static implicit operator long(EntityIdStruct entityIdStruct) 参数 entityIdStruct EntityIdStruct 返回 long implicit operator EntityIdStruct(long) public static implicit operator EntityIdStruct(long id) 参数 id long 返回 EntityIdStruct"
  },
  "reference/Fantasy.Helper.ExcelHelper.html": {
    "href": "reference/Fantasy.Helper.ExcelHelper.html",
    "title": "ExcelHelper 类 | Fantasy.Net API Reference",
    "keywords": "ExcelHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class ExcelHelper 继承 object ExcelHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetCellValue(ExcelWorksheet, int, int) public static string GetCellValue(this ExcelWorksheet sheet, int row, int column) 参数 sheet ExcelWorksheet row int column int 返回 string LoadExcel(string) public static ExcelPackage LoadExcel(string name) 参数 name string 返回 ExcelPackage"
  },
  "reference/Fantasy.Helper.FileHelper.html": {
    "href": "reference/Fantasy.Helper.FileHelper.html",
    "title": "FileHelper 类 | Fantasy.Net API Reference",
    "keywords": "FileHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class FileHelper 继承 object FileHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 ClearDirectoryFile(string) public static void ClearDirectoryFile(string folderPath) 参数 folderPath string Copy(string, string, bool) public static void Copy(string sourceFile, string destinationFile, bool overwrite) 参数 sourceFile string destinationFile string overwrite bool CopyDirectory(string, string, bool) public static void CopyDirectory(string sourceDirectory, string destinationDirectory, bool overwrite) 参数 sourceDirectory string destinationDirectory string overwrite bool GetDirectoriesByFilePath(string) public static List<string> GetDirectoriesByFilePath(string filePath) 参数 filePath string 返回 List<string> GetFullPath(string) public static string GetFullPath(string relativePath) 参数 relativePath string 返回 string"
  },
  "reference/Fantasy.Helper.ISingleton.html": {
    "href": "reference/Fantasy.Helper.ISingleton.html",
    "title": "ISingleton 接口 | Fantasy.Net API Reference",
    "keywords": "ISingleton 接口 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public interface ISingleton : IDisposable 继承成员 IDisposable.Dispose() 扩展方法 JsonHelper.ToJson<T>(T) 属性 IsDisposed bool IsDisposed { get; set; } 属性值 bool 方法 Initialize() Task Initialize() 返回 Task"
  },
  "reference/Fantasy.Helper.IUpdateSingleton.html": {
    "href": "reference/Fantasy.Helper.IUpdateSingleton.html",
    "title": "IUpdateSingleton 接口 | Fantasy.Net API Reference",
    "keywords": "IUpdateSingleton 接口 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public interface IUpdateSingleton : ISingleton, IDisposable 继承成员 ISingleton.Initialize() ISingleton.IsDisposed IDisposable.Dispose() 扩展方法 JsonHelper.ToJson<T>(T) 方法 Update() void Update()"
  },
  "reference/Fantasy.Helper.IdFactory.html": {
    "href": "reference/Fantasy.Helper.IdFactory.html",
    "title": "IdFactory 类 | Fantasy.Net API Reference",
    "keywords": "IdFactory 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class IdFactory 继承 object IdFactory 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetAppId(long) public static ushort GetAppId(long entityId) 参数 entityId long 返回 ushort GetRouteId(long) public static uint GetRouteId(long entityId) 参数 entityId long 返回 uint GetWordId(long) public static int GetWordId(long entityId) 参数 entityId long 返回 int NextEntityId(uint) public static long NextEntityId(uint locationId) 参数 locationId uint 返回 long NextRunTimeId() public static long NextRunTimeId() 返回 long"
  },
  "reference/Fantasy.Helper.JsonHelper.html": {
    "href": "reference/Fantasy.Helper.JsonHelper.html",
    "title": "JsonHelper 类 | Fantasy.Net API Reference",
    "keywords": "JsonHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class JsonHelper 继承 object JsonHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Clone<T>(T) public static T Clone<T>(T t) 参数 t T 返回 T 类型参数 T Deserialize(string, Type, bool) public static object Deserialize(this string json, Type type, bool reflection = true) 参数 json string type Type reflection bool 返回 object Deserialize<T>(string) public static T Deserialize<T>(this string json) 参数 json string 返回 T 类型参数 T ToJson<T>(T) public static string ToJson<T>(this T t) 参数 t T 返回 string 类型参数 T"
  },
  "reference/Fantasy.Helper.MD5Helper.html": {
    "href": "reference/Fantasy.Helper.MD5Helper.html",
    "title": "MD5Helper 类 | Fantasy.Net API Reference",
    "keywords": "MD5Helper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class MD5Helper 继承 object MD5Helper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 BytesMD5(byte[]) public static string BytesMD5(byte[] bytes) 参数 bytes byte[] 返回 string FileMD5(FileStream) public static string FileMD5(FileStream fileStream) 参数 fileStream FileStream 返回 string FileMD5(string) public static string FileMD5(string filePath) 参数 filePath string 返回 string"
  },
  "reference/Fantasy.Helper.MemoryStreamHelper.html": {
    "href": "reference/Fantasy.Helper.MemoryStreamHelper.html",
    "title": "MemoryStreamHelper 类 | Fantasy.Net API Reference",
    "keywords": "MemoryStreamHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class MemoryStreamHelper 继承 object MemoryStreamHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetRecyclableMemoryStream() public static MemoryStream GetRecyclableMemoryStream() 返回 MemoryStream"
  },
  "reference/Fantasy.Helper.MongoHelper.html": {
    "href": "reference/Fantasy.Helper.MongoHelper.html",
    "title": "MongoHelper 类 | Fantasy.Net API Reference",
    "keywords": "MongoHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public sealed class MongoHelper : Singleton<MongoHelper>, ISingleton, IDisposable 继承 object Singleton<MongoHelper> MongoHelper 实现 ISingleton IDisposable 继承成员 Singleton<MongoHelper>.Initialize() Singleton<MongoHelper>.Dispose() Singleton<MongoHelper>.IsDisposed Singleton<MongoHelper>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MongoHelper() public MongoHelper() 方法 Clone<T>(T) public T Clone<T>(T t) 参数 t T 返回 T 类型参数 T Deserialize(byte[], string) public object Deserialize(byte[] bytes, string type) 参数 bytes byte[] type string 返回 object Deserialize(byte[], Type) public object Deserialize(byte[] bytes, Type type) 参数 bytes byte[] type Type 返回 object Deserialize(Stream, Type) public object Deserialize(Stream stream, Type type) 参数 stream Stream type Type 返回 object Deserialize(Memory<byte>, Type) public object Deserialize(Memory<byte> memory, Type type) 参数 memory Memory<byte> type Type 返回 object Deserialize(Span<byte>, Type) public object Deserialize(Span<byte> span, Type type) 参数 span Span<byte> type Type 返回 object DeserializeFrom(Type, MemoryStream) public object DeserializeFrom(Type type, MemoryStream stream) 参数 type Type stream MemoryStream 返回 object DeserializeFrom<T>(byte[], int, int) public T DeserializeFrom<T>(byte[] bytes, int index, int count) 参数 bytes byte[] index int count int 返回 T 类型参数 T DeserializeFrom<T>(MemoryStream) public T DeserializeFrom<T>(MemoryStream stream) 参数 stream MemoryStream 返回 T 类型参数 T Deserialize<T>(byte[]) public T Deserialize<T>(byte[] bytes) 参数 bytes byte[] 返回 T 类型参数 T Deserialize<T>(Stream) public T Deserialize<T>(Stream stream) 参数 stream Stream 返回 T 类型参数 T Deserialize<T>(Memory<byte>) public object Deserialize<T>(Memory<byte> memory) 参数 memory Memory<byte> 返回 object 类型参数 T Deserialize<T>(Span<byte>) public object Deserialize<T>(Span<byte> span) 参数 span Span<byte> 返回 object 类型参数 T OnLoad(int) protected override void OnLoad(int assemblyName) 参数 assemblyName int SerializeTo<T>(T) public byte[] SerializeTo<T>(T t) 参数 t T 返回 byte[] 类型参数 T SerializeTo<T>(T, MemoryStream) public void SerializeTo<T>(T t, MemoryStream stream) 参数 t T stream MemoryStream 类型参数 T SerializeTo<T>(T, Memory<byte>) public void SerializeTo<T>(T t, Memory<byte> memory) 参数 t T memory Memory<byte> 类型参数 T"
  },
  "reference/Fantasy.Helper.NetworkHelper.html": {
    "href": "reference/Fantasy.Helper.NetworkHelper.html",
    "title": "NetworkHelper 类 | Fantasy.Net API Reference",
    "keywords": "NetworkHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class NetworkHelper 继承 object NetworkHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetAddressIPs() public static string[] GetAddressIPs() 返回 string[] IPEndPointToStr(IPEndPoint) public static string IPEndPointToStr(this IPEndPoint self) 参数 self IPEndPoint 返回 string SetSioUdpConnReset(Socket) public static void SetSioUdpConnReset(Socket socket) 参数 socket Socket ToIPEndPoint(string) public static IPEndPoint ToIPEndPoint(string address) 参数 address string 返回 IPEndPoint ToIPEndPoint(string, int) public static IPEndPoint ToIPEndPoint(string host, int port) 参数 host string port int 返回 IPEndPoint"
  },
  "reference/Fantasy.Helper.ProtoBufHelper.html": {
    "href": "reference/Fantasy.Helper.ProtoBufHelper.html",
    "title": "ProtoBufHelper 类 | Fantasy.Net API Reference",
    "keywords": "ProtoBufHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class ProtoBufHelper 继承 object ProtoBufHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Clone<T>(T) public static T Clone<T>(T t) 参数 t T 返回 T 类型参数 T FromBytes(Type, byte[], int, int) public static object FromBytes(Type type, byte[] bytes, int index, int count) 参数 type Type bytes byte[] index int count int 返回 object FromBytes<T>(byte[]) public static T FromBytes<T>(byte[] bytes) 参数 bytes byte[] 返回 T 类型参数 T FromBytes<T>(byte[], int, int) public static T FromBytes<T>(byte[] bytes, int index, int count) 参数 bytes byte[] index int count int 返回 T 类型参数 T FromMemory(Type, Memory<byte>) public static object FromMemory(Type type, Memory<byte> memory) 参数 type Type memory Memory<byte> 返回 object FromSpan(Type, Span<byte>) public static object FromSpan(Type type, Span<byte> span) 参数 type Type span Span<byte> 返回 object FromStream(Type, MemoryStream) public static object FromStream(Type type, MemoryStream stream) 参数 type Type stream MemoryStream 返回 object FromStream<T>(MemoryStream) public static T FromStream<T>(MemoryStream stream) 参数 stream MemoryStream 返回 T 类型参数 T ToBytes(object) public static byte[] ToBytes(object message) 参数 message object 返回 byte[] ToMemory(object, Memory<byte>) public static void ToMemory(object message, Memory<byte> memory) 参数 message object memory Memory<byte> ToStream(object, MemoryStream) public static void ToStream(object message, MemoryStream stream) 参数 message object stream MemoryStream"
  },
  "reference/Fantasy.Helper.RandomHelper.html": {
    "href": "reference/Fantasy.Helper.RandomHelper.html",
    "title": "RandomHelper 类 | Fantasy.Net API Reference",
    "keywords": "RandomHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class RandomHelper 继承 object RandomHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 BreakRank<T>(List<T>) public static void BreakRank<T>(List<T> arr) 参数 arr List<T> 类型参数 T NextFloat(bool) public static float NextFloat(bool containNegative = false) 参数 containNegative bool 返回 float NextFloat(float) public static float NextFloat(float maxValue) 参数 maxValue float 返回 float NextFloat(float, float) public static float NextFloat(float minValue, float maxValue) 参数 minValue float maxValue float 返回 float NextVector2(float, float, float, float) public static Vector2 NextVector2(float minX, float maxX, float minY, float maxY) 参数 minX float maxX float minY float maxY float 返回 Vector2 RandFloat01() public static float RandFloat01() 返回 float RandInt64() public static long RandInt64() 返回 long RandUInt16() public static ushort RandUInt16() 返回 ushort RandUInt32() public static uint RandUInt32() 返回 uint RandUInt64() public static ulong RandUInt64() 返回 ulong RandomArray<T>(List<T>) public static T RandomArray<T>(this List<T> array) 参数 array List<T> 返回 T 类型参数 T RandomArray<T>(T[]) public static T RandomArray<T>(this T[] array) 参数 array T[] 返回 T 类型参数 T RandomBool() public static bool RandomBool() 返回 bool RandomByFixedProbability(int[]) public static int RandomByFixedProbability(int[] args) 参数 args int[] 返回 int RandomByWeight(int[]) public static int RandomByWeight(int[] weights) 参数 weights int[] 返回 int RandomNumber(int, int) public static int RandomNumber(int lower, int upper) 参数 lower int upper int 返回 int RandomNumberCode(int) public static string RandomNumberCode(int len = 6) 参数 len int 返回 string"
  },
  "reference/Fantasy.Helper.RouteIdStruct.html": {
    "href": "reference/Fantasy.Helper.RouteIdStruct.html",
    "title": "RouteIdStruct 结构 | Fantasy.Net API Reference",
    "keywords": "RouteIdStruct 结构 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public struct RouteIdStruct 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteIdStruct(ushort, ushort) public RouteIdStruct(ushort appId, ushort wordId) 参数 appId ushort wordId ushort 字段 AppId public ushort AppId 字段值 ushort MaskAppId public const int MaskAppId = 255 字段值 int MaskWordId public const int MaskWordId = 1023 字段值 int WordId public ushort WordId 字段值 ushort 运算符 implicit operator uint(RouteIdStruct) public static implicit operator uint(RouteIdStruct routeId) 参数 routeId RouteIdStruct 返回 uint implicit operator RouteIdStruct(uint) public static implicit operator RouteIdStruct(uint routeId) 参数 routeId uint 返回 RouteIdStruct"
  },
  "reference/Fantasy.Helper.RuntimeIdStruct.html": {
    "href": "reference/Fantasy.Helper.RuntimeIdStruct.html",
    "title": "RuntimeIdStruct 结构 | Fantasy.Net API Reference",
    "keywords": "RuntimeIdStruct 结构 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public struct RuntimeIdStruct 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RuntimeIdStruct(uint, uint) public RuntimeIdStruct(uint time, uint sequence) 参数 time uint sequence uint 运算符 implicit operator long(RuntimeIdStruct) public static implicit operator long(RuntimeIdStruct runtimeId) 参数 runtimeId RuntimeIdStruct 返回 long implicit operator RuntimeIdStruct(long) public static implicit operator RuntimeIdStruct(long id) 参数 id long 返回 RuntimeIdStruct"
  },
  "reference/Fantasy.Helper.Singleton-1.html": {
    "href": "reference/Fantasy.Helper.Singleton-1.html",
    "title": "Singleton<T> 类 | Fantasy.Net API Reference",
    "keywords": "Singleton<T> 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public abstract class Singleton<T> : ISingleton, IDisposable where T : ISingleton, new() 类型参数 T 继承 object Singleton<T> 实现 ISingleton IDisposable Derived MessageDispatcherSystem NetworkThread EntitiesSystem EventSystem MongoHelper SingleCollection TimerScheduler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Singleton() protected Singleton() 属性 Instance public static T Instance { get; } 属性值 T IsDisposed public bool IsDisposed { get; set; } 属性值 bool 方法 Dispose() public virtual void Dispose() Initialize() public virtual Task Initialize() 返回 Task OnLoad(int) protected virtual void OnLoad(int assemblyName) 参数 assemblyName int OnUnLoad(int) protected virtual void OnUnLoad(int assemblyName) 参数 assemblyName int"
  },
  "reference/Fantasy.Helper.SingletonSystem.html": {
    "href": "reference/Fantasy.Helper.SingletonSystem.html",
    "title": "SingletonSystem 类 | Fantasy.Net API Reference",
    "keywords": "SingletonSystem 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class SingletonSystem 继承 object SingletonSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Dispose() public static void Dispose() Initialize() public static void Initialize() Update() public static void Update()"
  },
  "reference/Fantasy.Helper.StructBsonSerialize-1.html": {
    "href": "reference/Fantasy.Helper.StructBsonSerialize-1.html",
    "title": "StructBsonSerialize<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "StructBsonSerialize<TValue> 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public class StructBsonSerialize<TValue> : StructSerializerBase<TValue> where TValue : struct 类型参数 TValue 继承 object StructBsonSerialize<TValue> 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StructBsonSerialize() public StructBsonSerialize() 方法 Deserialize(BsonDeserializationContext, BsonDeserializationArgs) public override TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) 参数 context BsonDeserializationContext args BsonDeserializationArgs 返回 TValue Serialize(BsonSerializationContext, BsonSerializationArgs, TValue) public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value) 参数 context BsonSerializationContext args BsonSerializationArgs value TValue"
  },
  "reference/Fantasy.Helper.TimeHelper.html": {
    "href": "reference/Fantasy.Helper.TimeHelper.html",
    "title": "TimeHelper 类 | Fantasy.Net API Reference",
    "keywords": "TimeHelper 类 命名空间 Fantasy.Helper 程序集 Fantasy.Net.dll public static class TimeHelper 继承 object TimeHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 Hour public const long Hour = 3600000 字段值 long Minute public const long Minute = 60000 字段值 long OneDay public const long OneDay = 86400000 字段值 long 属性 Now public static long Now { get; } 属性值 long 方法 Transition(DateTime) public static long Transition(DateTime d) 参数 d DateTime 返回 long Transition(long) public static DateTime Transition(long timeStamp) 参数 timeStamp long 返回 DateTime TransitionLocal(long) public static DateTime TransitionLocal(long timeStamp) 参数 timeStamp long 返回 DateTime"
  },
  "reference/Fantasy.Helper.html": {
    "href": "reference/Fantasy.Helper.html",
    "title": "Fantasy.Helper 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.Helper 命名空间 类 AssemblyInfo AssemblyManager ByteHelper CryptHelper ExcelHelper FileHelper IdFactory JsonHelper MD5Helper MemoryStreamHelper MongoHelper NetworkHelper ProtoBufHelper RandomHelper SingletonSystem Singleton<T> StructBsonSerialize<TValue> TimeHelper 结构 EntityIdStruct RouteIdStruct RuntimeIdStruct 接口 ISingleton IUpdateSingleton"
  },
  "reference/Fantasy.Hotfix.SingleCollection.html": {
    "href": "reference/Fantasy.Hotfix.SingleCollection.html",
    "title": "SingleCollection 类 | Fantasy.Net API Reference",
    "keywords": "SingleCollection 类 命名空间 Fantasy.Hotfix 程序集 Fantasy.Net.dll public class SingleCollection : Singleton<SingleCollection>, ISingleton, IDisposable 继承 object Singleton<SingleCollection> SingleCollection 实现 ISingleton IDisposable 继承成员 Singleton<SingleCollection>.Initialize() Singleton<SingleCollection>.Dispose() Singleton<SingleCollection>.IsDisposed Singleton<SingleCollection>.Instance object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SingleCollection() public SingleCollection() 方法 GetCollections(Entity) public FTask GetCollections(Entity entity) 参数 entity Entity 返回 FTask OnLoad(int) protected override void OnLoad(int assemblyName) 参数 assemblyName int OnUnLoad(int) protected override void OnUnLoad(int assemblyName) 参数 assemblyName int SaveCollections(Entity) public FTask SaveCollections(Entity entity) 参数 entity Entity 返回 FTask"
  },
  "reference/Fantasy.Hotfix.html": {
    "href": "reference/Fantasy.Hotfix.html",
    "title": "Fantasy.Hotfix 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.Hotfix 命名空间 类 SingleCollection"
  },
  "reference/Fantasy.IAddressableRouteMessage.html": {
    "href": "reference/Fantasy.IAddressableRouteMessage.html",
    "title": "IAddressableRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IAddressableRouteMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示可寻址协议的普通路由消息接口，继承自普通路由消息接口。 public interface IAddressableRouteMessage : IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IAddressableRouteRequest.html": {
    "href": "reference/Fantasy.IAddressableRouteRequest.html",
    "title": "IAddressableRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IAddressableRouteRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 可寻址协议的普通路由请求接口，继承自可寻址协议的普通路由消息接口。 public interface IAddressableRouteRequest : IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IAddressableRouteResponse.html": {
    "href": "reference/Fantasy.IAddressableRouteResponse.html",
    "title": "IAddressableRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IAddressableRouteResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 可寻址协议的普通路由响应接口，继承自普通路由响应接口。 public interface IAddressableRouteResponse : IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IAsyncEvent.html": {
    "href": "reference/Fantasy.IAsyncEvent.html",
    "title": "IAsyncEvent 接口 | Fantasy.Net API Reference",
    "keywords": "IAsyncEvent 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义异步事件的接口。 public interface IAsyncEvent 扩展方法 JsonHelper.ToJson<T>(T) 方法 EventType() 获取事件的类型。 Type EventType() 返回 Type 事件的类型。 InvokeAsync(object) 异步调用事件处理方法。 FTask InvokeAsync(object self) 参数 self object 事件的实例。 返回 FTask 表示异步操作的任务。"
  },
  "reference/Fantasy.IAwakeSystem.html": {
    "href": "reference/Fantasy.IAwakeSystem.html",
    "title": "IAwakeSystem 接口 | Fantasy.Net API Reference",
    "keywords": "IAwakeSystem 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义实体的唤醒系统接口。当需要在实体唤醒时执行特定的逻辑时，应实现此接口。 public interface IAwakeSystem : IEntitiesSystem 继承成员 IEntitiesSystem.EntitiesType() IEntitiesSystem.Invoke(Entity) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonAddressableRouteMessage.html": {
    "href": "reference/Fantasy.IBsonAddressableRouteMessage.html",
    "title": "IBsonAddressableRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonAddressableRouteMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示可寻址Bson协议的普通路由消息接口，继承自Bson消息和可寻址协议的普通路由消息接口。 public interface IBsonAddressableRouteMessage : IBsonMessage, IAddressableRouteMessage, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonAddressableRouteRequest.html": {
    "href": "reference/Fantasy.IBsonAddressableRouteRequest.html",
    "title": "IBsonAddressableRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonAddressableRouteRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 可寻址Bson协议的普通路由请求接口，继承自可寻址Bson协议的普通路由消息接口。 public interface IBsonAddressableRouteRequest : IBsonRouteMessage, IBsonMessage, IAddressableRouteRequest, IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonAddressableRouteResponse.html": {
    "href": "reference/Fantasy.IBsonAddressableRouteResponse.html",
    "title": "IBsonAddressableRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonAddressableRouteResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 可寻址Bson协议的普通路由响应接口，继承自Bson响应接口。 public interface IBsonAddressableRouteResponse : IBsonResponse, IBsonMessage, IAddressableRouteResponse, IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonMessage.html": {
    "href": "reference/Fantasy.IBsonMessage.html",
    "title": "IBsonMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示可以序列化为 BSON 格式的消息接口。 public interface IBsonMessage : IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonRequest.html": {
    "href": "reference/Fantasy.IBsonRequest.html",
    "title": "IBsonRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示可以序列化为 BSON 格式的请求消息接口。 public interface IBsonRequest : IBsonMessage, IRequest, IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonResponse.html": {
    "href": "reference/Fantasy.IBsonResponse.html",
    "title": "IBsonResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示可以序列化为 BSON 格式的响应消息接口。 public interface IBsonResponse : IBsonMessage, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonRouteMessage.html": {
    "href": "reference/Fantasy.IBsonRouteMessage.html",
    "title": "IBsonRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRouteMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示普通路由Bson消息的接口，继承自Bson消息和普通路由消息接口。 public interface IBsonRouteMessage : IBsonMessage, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonRouteRequest.html": {
    "href": "reference/Fantasy.IBsonRouteRequest.html",
    "title": "IBsonRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRouteRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 普通路由Bson请求接口，继承自普通路由Bson消息接口。 public interface IBsonRouteRequest : IBsonRouteMessage, IBsonMessage, IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IBsonRouteResponse.html": {
    "href": "reference/Fantasy.IBsonRouteResponse.html",
    "title": "IBsonRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IBsonRouteResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 普通路由Bson响应接口，继承自Bson响应接口。 public interface IBsonRouteResponse : IBsonResponse, IBsonMessage, IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IConfigTable.html": {
    "href": "reference/Fantasy.IConfigTable.html",
    "title": "IConfigTable 接口 | Fantasy.Net API Reference",
    "keywords": "IConfigTable 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示是一个配置文件 public interface IConfigTable 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ICustomRouteMessage.html": {
    "href": "reference/Fantasy.ICustomRouteMessage.html",
    "title": "ICustomRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomRouteMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示自定义Route协议的普通路由消息接口，继承自普通路由消息接口。 public interface ICustomRouteMessage : IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ICustomRouteRequest.html": {
    "href": "reference/Fantasy.ICustomRouteRequest.html",
    "title": "ICustomRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomRouteRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 自定义Route协议的普通路由请求接口，继承自自定义Route协议的普通路由消息接口。 public interface ICustomRouteRequest : IRouteRequest, IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ICustomRouteResponse.html": {
    "href": "reference/Fantasy.ICustomRouteResponse.html",
    "title": "ICustomRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "ICustomRouteResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 自定义Route协议的普通路由响应接口，继承自普通路由响应接口。 public interface ICustomRouteResponse : IRouteResponse, IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IDateBase.html": {
    "href": "reference/Fantasy.IDateBase.html",
    "title": "IDateBase 接口 | Fantasy.Net API Reference",
    "keywords": "IDateBase 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示用于执行各种数据库操作的数据库接口。 public interface IDateBase 扩展方法 JsonHelper.ToJson<T>(T) 字段 DataBaseLock 控制数据库访问并发性的锁队列类型。 public static readonly CoroutineLockQueueType DataBaseLock 字段值 CoroutineLockQueueType 方法 Count<T>(Expression<Func<T, bool>>, string) 在指定的集合中检索满足给定筛选条件的类型 T 的实体数量。 FTask<long> Count<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Count<T>(string) 在指定的集合中检索类型 T 的实体数量。 FTask<long> Count<T>(string collection = null) where T : Entity 参数 collection string 返回 FTask<long> 类型参数 T CreateDB(Type) 根据指定类型创建数据库，用于存储实体。 FTask CreateDB(Type type) 参数 type Type 返回 FTask CreateDB<T>() 创建指定类型 T 的数据库，用于存储实体。 FTask CreateDB<T>() where T : Entity 返回 FTask 类型参数 T CreateIndex<T>(params object[]) 在默认集合中创建索引，以提高类型 T 实体的查询性能。 FTask CreateIndex<T>(params object[] keys) where T : Entity 参数 keys object[] 返回 FTask 类型参数 T CreateIndex<T>(string, params object[]) 在指定的集合中创建索引，以提高类型 T 实体的查询性能。 FTask CreateIndex<T>(string collection, params object[] keys) where T : Entity 参数 collection string keys object[] 返回 FTask 类型参数 T Exist<T>(Expression<Func<T, bool>>, string) 检查指定集合中是否存在满足给定筛选条件的类型 T 的实体。 FTask<bool> Exist<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<bool> 类型参数 T Exist<T>(string) 检查指定集合中是否存在类型 T 的实体。 FTask<bool> Exist<T>(string collection = null) where T : Entity 参数 collection string 返回 FTask<bool> 类型参数 T First<T>(Expression<Func<T, bool>>, string) 检索满足给定筛选条件的类型 T 的第一个实体，从指定集合中。 FTask<T?> First<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<T> 类型参数 T First<T>(string, string[], string) 查询指定集合中满足给定 JSON 查询字符串的类型 T 的第一个实体，仅返回指定列的数据。 FTask<T> First<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string cols string[] collection string 返回 FTask<T> 类型参数 T Initialize(string, string) 初始化数据库连接。 IDateBase Initialize(string connectionString, string dbName) 参数 connectionString string dbName string 返回 IDateBase InsertBatch<T>(IEnumerable<T>, string) 批量插入一组类型 T 实体到指定集合中，如果集合不存在将自动创建。 FTask InsertBatch<T>(IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 list IEnumerable<T> collection string 返回 FTask 类型参数 T InsertBatch<T>(object, IEnumerable<T>, string) 通过事务会话，批量插入一组类型 T 实体到指定集合中，如果集合不存在将自动创建。 FTask InsertBatch<T>(object transactionSession, IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 transactionSession object list IEnumerable<T> collection string 返回 FTask 类型参数 T Insert<T>(T, string) 向指定集合中插入一个类型 T 实体，如果集合不存在将自动创建。 FTask Insert<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T collection string 返回 FTask 类型参数 T Query(long, List<string>, List<Entity>) 查询指定 ID 的多个集合，将结果存储在给定的实体列表中。 FTask Query(long id, List<string> collectionNames, List<Entity> result) 参数 id long collectionNames List<string> result List<Entity> 返回 FTask QueryByPageOrderBy<T>(Expression<Func<T, bool>>, int, int, Expression<Func<T, object>>, bool, string) 从指定集合中按页查询满足给定筛选条件的类型 T 的实体列表，按指定字段排序。 FTask<List<T>> QueryByPageOrderBy<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int orderByExpression Expression<Func<T, object>> isAsc bool collection string 返回 FTask<List<T>> 类型参数 T QueryByPage<T>(Expression<Func<T, bool>>, int, int, string) 分页查询指定集合中满足给定筛选条件的类型 T 的实体列表。 FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int collection string 返回 FTask<List<T>> 类型参数 T QueryByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 分页查询指定集合中满足给定筛选条件的类型 T 的实体列表，仅返回指定列的数据。 FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int cols string[] collection string 返回 FTask<List<T>> 类型参数 T QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string) 按页查询满足给定筛选条件的类型 T 的实体数量和日期。 FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int collection string 返回 FTask<(int count, List<T> dates)> 类型参数 T QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 按页查询满足给定筛选条件的类型 T 的实体数量和日期。 FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> pageIndex int pageSize int cols string[] collection string 返回 FTask<(int count, List<T> dates)> 类型参数 T QueryJson<T>(long, string, string) 根据给定的 JSON 查询字符串查询指定集合中的类型 T 实体列表，通过指定的任务 ID 进行标识。 FTask<List<T>> QueryJson<T>(long taskId, string json, string collection = null) where T : Entity 参数 taskId long json string collection string 返回 FTask<List<T>> 类型参数 T QueryJson<T>(string, string) 根据给定的 JSON 查询字符串查询指定集合中的类型 T 实体列表。 FTask<List<T>> QueryJson<T>(string json, string collection = null) where T : Entity 参数 json string collection string 返回 FTask<List<T>> 类型参数 T QueryJson<T>(string, string[], string) 根据给定的 JSON 查询字符串查询指定集合中的类型 T 实体列表，仅返回指定列的数据。 FTask<List<T>> QueryJson<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string cols string[] collection string 返回 FTask<List<T>> 类型参数 T QueryNotLock<T>(long, string) 从指定集合中检索指定 ID 的类型 T 的实体，不锁定。 FTask<T> QueryNotLock<T>(long id, string collection = null) where T : Entity 参数 id long collection string 返回 FTask<T> 类型参数 T QueryOrderBy<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, bool, string) 从指定集合中按页查询满足给定筛选条件的类型 T 的实体列表，按指定字段排序。 FTask<List<T>> QueryOrderBy<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> orderByExpression Expression<Func<T, object>> isAsc bool collection string 返回 FTask<List<T>> 类型参数 T Query<T>(long, string) 从指定集合中检索指定 ID 的类型 T 的实体。 FTask<T> Query<T>(long id, string collection = null) where T : Entity 参数 id long collection string 返回 FTask<T> 类型参数 T Query<T>(Expression<Func<T, bool>>, string) 从指定集合中按页查询满足给定筛选条件的类型 T 的实体列表。 FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> collection string 返回 FTask<List<T>> 类型参数 T Query<T>(Expression<Func<T, bool>>, string[], string) 查询指定集合中满足给定筛选条件的类型 T 实体列表，仅返回指定列的数据。 FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string[] cols, string collection = null) where T : class 参数 filter Expression<Func<T, bool>> cols string[] collection string 返回 FTask<List<T>> 类型参数 T Remove<T>(long, Expression<Func<T, bool>>, string) 根据给定的筛选条件和 ID 从数据库中删除指定类型 T 实体。 FTask<long> Remove<T>(long id, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Remove<T>(long, object, Expression<Func<T, bool>>, string) 通过事务会话，根据给定的筛选条件和 ID 从数据库中删除指定类型 T 实体。 FTask<long> Remove<T>(long id, object transactionSession, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long transactionSession object filter Expression<Func<T, bool>> collection string 返回 FTask<long> 类型参数 T Remove<T>(long, string) 根据指定的 ID 从数据库中删除指定类型 T 实体。 FTask<long> Remove<T>(long id, string collection = null) where T : Entity, new() 参数 id long collection string 返回 FTask<long> 类型参数 T Remove<T>(object, long, string) 通过事务会话，根据指定的 ID 从数据库中删除指定类型 T 实体。 FTask<long> Remove<T>(object transactionSession, long id, string collection = null) where T : Entity, new() 参数 transactionSession object id long collection string 返回 FTask<long> 类型参数 T Save(long, List<Entity>) 保存一组实体到数据库中，根据实体列表的 ID 进行区分和存储。 FTask Save(long id, List<Entity> entities) 参数 id long entities List<Entity> 返回 FTask Save<T>(object, T, string) 通过事务会话将类型 T 实体保存到指定集合中，如果集合不存在将自动创建。 FTask Save<T>(object transactionSession, T entity, string collection = null) where T : Entity 参数 transactionSession object entity T collection string 返回 FTask 类型参数 T Save<T>(T, string) 保存类型 T 实体到指定集合中，如果集合不存在将自动创建。 FTask Save<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T collection string 返回 FTask 类型参数 T Sum<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, string) 根据给定的筛选条件计算指定集合中类型 T 实体某个属性的总和。 FTask<long> Sum<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> sumExpression, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> sumExpression Expression<Func<T, object>> collection string 返回 FTask<long> 类型参数 T"
  },
  "reference/Fantasy.IDeserializeSystem.html": {
    "href": "reference/Fantasy.IDeserializeSystem.html",
    "title": "IDeserializeSystem 接口 | Fantasy.Net API Reference",
    "keywords": "IDeserializeSystem 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个用于反序列化的系统接口，扩展自 IEntitiesSystem。 public interface IDeserializeSystem : IEntitiesSystem 继承成员 IEntitiesSystem.EntitiesType() IEntitiesSystem.Invoke(Entity) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IDestroySystem.html": {
    "href": "reference/Fantasy.IDestroySystem.html",
    "title": "IDestroySystem 接口 | Fantasy.Net API Reference",
    "keywords": "IDestroySystem 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义实体销毁系统接口。当需要在实体销毁时执行特定的逻辑时，应实现此接口。 public interface IDestroySystem : IEntitiesSystem 继承成员 IEntitiesSystem.EntitiesType() IEntitiesSystem.Invoke(Entity) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IEntitiesSystem.html": {
    "href": "reference/Fantasy.IEntitiesSystem.html",
    "title": "IEntitiesSystem 接口 | Fantasy.Net API Reference",
    "keywords": "IEntitiesSystem 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义实体系统的接口。实体系统用于管理特定类型的实体，执行与该类型实体相关的逻辑。 public interface IEntitiesSystem 扩展方法 JsonHelper.ToJson<T>(T) 方法 EntitiesType() 获取实体系统所管理的实体类型。 Type EntitiesType() 返回 Type 实体类型。 Invoke(Entity) 在实体系统中执行特定实体的逻辑。具体的实现应在子类中实现。 void Invoke(Entity entity) 参数 entity Entity 需要执行逻辑的实体。"
  },
  "reference/Fantasy.IEvent.html": {
    "href": "reference/Fantasy.IEvent.html",
    "title": "IEvent 接口 | Fantasy.Net API Reference",
    "keywords": "IEvent 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义事件的接口。 public interface IEvent 扩展方法 JsonHelper.ToJson<T>(T) 方法 EventType() 获取事件的类型。 Type EventType() 返回 Type 事件的类型。 Invoke(object) 调用事件处理方法。 void Invoke(object self) 参数 self object 事件的实例。"
  },
  "reference/Fantasy.IFrameUpdateSystem.html": {
    "href": "reference/Fantasy.IFrameUpdateSystem.html",
    "title": "IFrameUpdateSystem 接口 | Fantasy.Net API Reference",
    "keywords": "IFrameUpdateSystem 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义实体帧更新系统的接口。实体帧更新系统用于管理特定类型的实体，在每次帧更新时执行与该类型实体相关的逻辑。 public interface IFrameUpdateSystem : IEntitiesSystem 继承成员 IEntitiesSystem.EntitiesType() IEntitiesSystem.Invoke(Entity) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ILog.html": {
    "href": "reference/Fantasy.ILog.html",
    "title": "ILog 接口 | Fantasy.Net API Reference",
    "keywords": "ILog 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义日志记录功能的接口。 public interface ILog 扩展方法 JsonHelper.ToJson<T>(T) 方法 Debug(string) 记录调试级别的日志消息。 void Debug(string message) 参数 message string 日志消息。 Debug(string, params object[]) 记录调试级别的格式化日志消息。 void Debug(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Error(string) 记录错误级别的日志消息。 void Error(string message) 参数 message string 日志消息。 Error(string, params object[]) 记录错误级别的格式化日志消息。 void Error(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Info(string) 记录信息级别的日志消息。 void Info(string message) 参数 message string 日志消息。 Info(string, params object[]) 记录信息级别的格式化日志消息。 void Info(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Trace(string) 记录跟踪级别的日志消息。 void Trace(string message) 参数 message string 日志消息。 Trace(string, params object[]) 记录跟踪级别的格式化日志消息。 void Trace(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Warning(string) 记录警告级别的日志消息。 void Warning(string message) 参数 message string 日志消息。 Warning(string, params object[]) 记录警告级别的格式化日志消息。 void Warning(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。"
  },
  "reference/Fantasy.IMessage.html": {
    "href": "reference/Fantasy.IMessage.html",
    "title": "IMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示通用消息接口。 public interface IMessage 扩展方法 JsonHelper.ToJson<T>(T) 方法 OpCode() 获取消息的操作代码。 uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.IMessageHandler.html": {
    "href": "reference/Fantasy.IMessageHandler.html",
    "title": "IMessageHandler 接口 | Fantasy.Net API Reference",
    "keywords": "IMessageHandler 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示消息处理器的接口，处理特定类型的消息。 public interface IMessageHandler 扩展方法 JsonHelper.ToJson<T>(T) 方法 Handle(Session, uint, uint, object) 处理消息的方法。 FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 session Session 会话对象。 rpcId uint RPC标识。 messageTypeCode uint 消息类型代码。 message object 要处理的消息。 返回 FTask 异步任务。 Type() 获取处理的消息类型。 Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.INetworkUpdate.html": {
    "href": "reference/Fantasy.INetworkUpdate.html",
    "title": "INetworkUpdate 接口 | Fantasy.Net API Reference",
    "keywords": "INetworkUpdate 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 网络更新的接口。 public interface INetworkUpdate 扩展方法 JsonHelper.ToJson<T>(T) 方法 Update() 在网络更新时调用的方法。 void Update()"
  },
  "reference/Fantasy.INotSupportedPool.html": {
    "href": "reference/Fantasy.INotSupportedPool.html",
    "title": "INotSupportedPool 接口 | Fantasy.Net API Reference",
    "keywords": "INotSupportedPool 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll Entity不支持对象池创建和回收 public interface INotSupportedPool 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IO.RecyclableMemoryStream.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStream.html",
    "title": "RecyclableMemoryStream 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStream 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStream : MemoryStream, IDisposable, IAsyncDisposable, IBufferWriter<byte> 继承 object MarshalByRefObject Stream MemoryStream RecyclableMemoryStream 实现 IDisposable IAsyncDisposable IBufferWriter<byte> 继承成员 MemoryStream.Flush() MemoryStream.FlushAsync(CancellationToken) MemoryStream.ReadAsync(byte[], int, int, CancellationToken) MemoryStream.ReadAsync(Memory<byte>, CancellationToken) MemoryStream.WriteAsync(byte[], int, int, CancellationToken) MemoryStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.DisposeAsync() Stream.FlushAsync() Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(byte[], int, int) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactly(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.Synchronized(Stream) Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RecyclableMemoryStream(RecyclableMemoryStreamManager) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager) 参数 memoryManager RecyclableMemoryStreamManager RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id) 参数 memoryManager RecyclableMemoryStreamManager id Guid RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid, string) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag) 参数 memoryManager RecyclableMemoryStreamManager id Guid tag string RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid, string, int) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, int requestedSize) 参数 memoryManager RecyclableMemoryStreamManager id Guid tag string requestedSize int RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid, string, long) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, long requestedSize) 参数 memoryManager RecyclableMemoryStreamManager id Guid tag string requestedSize long RecyclableMemoryStream(RecyclableMemoryStreamManager, string) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag) 参数 memoryManager RecyclableMemoryStreamManager tag string RecyclableMemoryStream(RecyclableMemoryStreamManager, string, int) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag, int requestedSize) 参数 memoryManager RecyclableMemoryStreamManager tag string requestedSize int RecyclableMemoryStream(RecyclableMemoryStreamManager, string, long) public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag, long requestedSize) 参数 memoryManager RecyclableMemoryStreamManager tag string requestedSize long 属性 CanRead public override bool CanRead { get; } 属性值 bool CanSeek public override bool CanSeek { get; } 属性值 bool CanTimeout public override bool CanTimeout { get; } 属性值 bool CanWrite public override bool CanWrite { get; } 属性值 bool Capacity public override int Capacity { get; set; } 属性值 int Capacity64 public long Capacity64 { get; set; } 属性值 long Length public override long Length { get; } 属性值 long Position public override long Position { get; set; } 属性值 long 方法 Advance(int) public void Advance(int count) 参数 count int Close() public override void Close() CopyTo(Stream, int) public override void CopyTo(Stream destination, int bufferSize) 参数 destination Stream bufferSize int CopyToAsync(Stream, int, CancellationToken) public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) 参数 destination Stream bufferSize int cancellationToken CancellationToken 返回 Task Dispose(bool) protected override void Dispose(bool disposing) 参数 disposing bool ~RecyclableMemoryStream() protected ~RecyclableMemoryStream() GetBuffer() public override byte[] GetBuffer() 返回 byte[] GetMemory(int) public Memory<byte> GetMemory(int sizeHint = 0) 参数 sizeHint int 返回 Memory<byte> GetReadOnlySequence() public ReadOnlySequence<byte> GetReadOnlySequence() 返回 ReadOnlySequence<byte> GetSpan(int) public Span<byte> GetSpan(int sizeHint = 0) 参数 sizeHint int 返回 Span<byte> Read(byte[], int, int) public override int Read(byte[] buffer, int offset, int count) 参数 buffer byte[] offset int count int 返回 int Read(Span<byte>) public override int Read(Span<byte> buffer) 参数 buffer Span<byte> 返回 int ReadByte() public override int ReadByte() 返回 int SafeRead(byte[], int, int, ref int) public int SafeRead(byte[] buffer, int offset, int count, ref int streamPosition) 参数 buffer byte[] offset int count int streamPosition int 返回 int SafeRead(byte[], int, int, ref long) public int SafeRead(byte[] buffer, int offset, int count, ref long streamPosition) 参数 buffer byte[] offset int count int streamPosition long 返回 int SafeRead(Span<byte>, ref int) public int SafeRead(Span<byte> buffer, ref int streamPosition) 参数 buffer Span<byte> streamPosition int 返回 int SafeRead(Span<byte>, ref long) public int SafeRead(Span<byte> buffer, ref long streamPosition) 参数 buffer Span<byte> streamPosition long 返回 int SafeReadByte(ref int) public int SafeReadByte(ref int streamPosition) 参数 streamPosition int 返回 int SafeReadByte(ref long) public int SafeReadByte(ref long streamPosition) 参数 streamPosition long 返回 int Seek(long, SeekOrigin) public override long Seek(long offset, SeekOrigin loc) 参数 offset long loc SeekOrigin 返回 long SetLength(long) public override void SetLength(long value) 参数 value long ToArray() [Obsolete(\"This method has degraded performance vs. GetBuffer and should be avoided.\")] public override byte[] ToArray() 返回 byte[] ToString() public override string ToString() 返回 string TryGetBuffer(out ArraySegment<byte>) public override bool TryGetBuffer(out ArraySegment<byte> buffer) 参数 buffer ArraySegment<byte> 返回 bool Write(byte[], int, int) public override void Write(byte[] buffer, int offset, int count) 参数 buffer byte[] offset int count int Write(ReadOnlySpan<byte>) public override void Write(ReadOnlySpan<byte> source) 参数 source ReadOnlySpan<byte> WriteByte(byte) public override void WriteByte(byte value) 参数 value byte WriteTo(byte[]) public void WriteTo(byte[] buffer) 参数 buffer byte[] WriteTo(byte[], long, long) public void WriteTo(byte[] buffer, long offset, long count) 参数 buffer byte[] offset long count long WriteTo(byte[], long, long, int) public void WriteTo(byte[] buffer, long offset, long count, int targetOffset) 参数 buffer byte[] offset long count long targetOffset int WriteTo(Stream) public override void WriteTo(Stream stream) 参数 stream Stream WriteTo(Stream, int, int) public void WriteTo(Stream stream, int offset, int count) 参数 stream Stream offset int count int WriteTo(Stream, long, long) public void WriteTo(Stream stream, long offset, long count) 参数 stream Stream offset long count long"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.BlockCreatedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.BlockCreatedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.BlockCreatedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.BlockCreatedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.BlockCreatedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.BlockCreatedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 SmallPoolInUse public long SmallPoolInUse { get; } 属性值 long"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.BufferDiscardedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.BufferDiscardedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.BufferDiscardedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.BufferDiscardedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.BufferDiscardedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.BufferDiscardedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 BufferType public RecyclableMemoryStreamManager.Events.MemoryStreamBufferType BufferType { get; } 属性值 RecyclableMemoryStreamManager.Events.MemoryStreamBufferType Id public Guid Id { get; } 属性值 Guid Reason public RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason Reason { get; } 属性值 RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType.html",
    "title": "RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 枚举 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 枚举 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public enum RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 扩展方法 JsonHelper.ToJson<T>(T) 字段 Large = 1 Small = 0"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason.html",
    "title": "RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 枚举 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 枚举 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public enum RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 扩展方法 JsonHelper.ToJson<T>(T) 字段 EnoughFree = 1 TooLarge = 0"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.Events.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.Events.html",
    "title": "RecyclableMemoryStreamManager.Events 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.Events 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll [EventSource(Name = \"Microsoft-IO-RecyclableMemoryStream\", Guid = \"{B80CD4E4-890E-468D-9CBA-90EB7C82DFC7}\")] public sealed class RecyclableMemoryStreamManager.Events : EventSource, IDisposable 继承 object EventSource RecyclableMemoryStreamManager.Events 实现 IDisposable 继承成员 EventSource.IsEnabled() EventSource.IsEnabled(EventLevel, EventKeywords) EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel) EventSource.GetGuid(Type) EventSource.GetName(Type) EventSource.GenerateManifest(Type, string) EventSource.GenerateManifest(Type, string, EventManifestOptions) EventSource.GetSources() EventSource.SendCommand(EventSource, EventCommand, IDictionary<string, string>) EventSource.GetTrait(string) EventSource.ToString() EventSource.SetCurrentThreadActivityId(Guid) EventSource.SetCurrentThreadActivityId(Guid, out Guid) EventSource.Dispose() EventSource.Write(string) EventSource.Write(string, EventSourceOptions) EventSource.Write<T>(string, T) EventSource.Write<T>(string, EventSourceOptions, T) EventSource.Write<T>(string, ref EventSourceOptions, ref T) EventSource.Write<T>(string, ref EventSourceOptions, ref Guid, ref Guid, ref T) EventSource.Name EventSource.Guid EventSource.Settings EventSource.ConstructionException EventSource.CurrentThreadActivityId EventSource.EventCommandExecuted object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Events() public Events() 字段 Writer public static RecyclableMemoryStreamManager.Events Writer 字段值 RecyclableMemoryStreamManager.Events 方法 MemoryStreamCreated(Guid, string, long, long) [Event(1, Level = EventLevel.Verbose, Version = 2)] public void MemoryStreamCreated(Guid guid, string tag, long requestedSize, long actualSize) 参数 guid Guid tag string requestedSize long actualSize long MemoryStreamDiscardBuffer(Guid, string, MemoryStreamBufferType, MemoryStreamDiscardReason, long, long, long, long, long, long) [Event(10, Level = EventLevel.Warning, Version = 2)] public void MemoryStreamDiscardBuffer(Guid guid, string tag, RecyclableMemoryStreamManager.Events.MemoryStreamBufferType bufferType, RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason reason, long smallBlocksFree, long smallPoolBytesFree, long smallPoolBytesInUse, long largeBlocksFree, long largePoolBytesFree, long largePoolBytesInUse) 参数 guid Guid tag string bufferType RecyclableMemoryStreamManager.Events.MemoryStreamBufferType reason RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason smallBlocksFree long smallPoolBytesFree long smallPoolBytesInUse long largeBlocksFree long largePoolBytesFree long largePoolBytesInUse long MemoryStreamDisposed(Guid, string, long, string, string) [Event(2, Level = EventLevel.Verbose, Version = 3)] public void MemoryStreamDisposed(Guid guid, string tag, long lifetimeMs, string allocationStack, string disposeStack) 参数 guid Guid tag string lifetimeMs long allocationStack string disposeStack string MemoryStreamDoubleDispose(Guid, string, string, string, string) [Event(3, Level = EventLevel.Critical)] public void MemoryStreamDoubleDispose(Guid guid, string tag, string allocationStack, string disposeStack1, string disposeStack2) 参数 guid Guid tag string allocationStack string disposeStack1 string disposeStack2 string MemoryStreamFinalized(Guid, string, string) [Event(4, Level = EventLevel.Error)] public void MemoryStreamFinalized(Guid guid, string tag, string allocationStack) 参数 guid Guid tag string allocationStack string MemoryStreamManagerInitialized(int, int, int) [Event(6, Level = EventLevel.Informational)] public void MemoryStreamManagerInitialized(int blockSize, int largeBufferMultiple, int maximumBufferSize) 参数 blockSize int largeBufferMultiple int maximumBufferSize int MemoryStreamNewBlockCreated(long) [Event(7, Level = EventLevel.Warning, Version = 2)] public void MemoryStreamNewBlockCreated(long smallPoolInUseBytes) 参数 smallPoolInUseBytes long MemoryStreamNewLargeBufferCreated(long, long) [Event(8, Level = EventLevel.Warning, Version = 3)] public void MemoryStreamNewLargeBufferCreated(long requiredSize, long largePoolInUseBytes) 参数 requiredSize long largePoolInUseBytes long MemoryStreamNonPooledLargeBufferCreated(Guid, string, long, string) [Event(9, Level = EventLevel.Verbose, Version = 3)] public void MemoryStreamNonPooledLargeBufferCreated(Guid guid, string tag, long requiredSize, string allocationStack) 参数 guid Guid tag string requiredSize long allocationStack string MemoryStreamOverCapacity(Guid, string, long, long, string) [Event(11, Level = EventLevel.Error, Version = 3)] public void MemoryStreamOverCapacity(Guid guid, string tag, long requestedCapacity, long maxCapacity, string allocationStack) 参数 guid Guid tag string requestedCapacity long maxCapacity long allocationStack string MemoryStreamToArray(Guid, string, string, long) [Event(5, Level = EventLevel.Verbose, Version = 2)] public void MemoryStreamToArray(Guid guid, string tag, string stack, long size) 参数 guid Guid tag string stack string size long"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 CallStack public string CallStack { get; } 属性值 string Id public Guid Id { get; } 属性值 Guid LargePoolInUse public long LargePoolInUse { get; } 属性值 long Pooled public bool Pooled { get; } 属性值 bool RequiredSize public long RequiredSize { get; } 属性值 long Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamConvertedToArrayEventArgs(Guid, string, string, long) public StreamConvertedToArrayEventArgs(Guid guid, string tag, string stack, long length) 参数 guid Guid tag string stack string length long 属性 Id public Guid Id { get; } 属性值 Guid Length public long Length { get; } 属性值 long Stack public string Stack { get; } 属性值 string Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamCreatedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamCreatedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamCreatedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamCreatedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamCreatedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamCreatedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamCreatedEventArgs(Guid, string, long, long) public StreamCreatedEventArgs(Guid guid, string tag, long requestedSize, long actualSize) 参数 guid Guid tag string requestedSize long actualSize long 属性 ActualSize public long ActualSize { get; } 属性值 long Id public Guid Id { get; } 属性值 Guid RequestedSize public long RequestedSize { get; } 属性值 long Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamDisposedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamDisposedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamDisposedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamDisposedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamDisposedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamDisposedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamDisposedEventArgs(Guid, string, string, string) [Obsolete(\"Use another constructor override\")] public StreamDisposedEventArgs(Guid guid, string tag, string allocationStack, string disposeStack) 参数 guid Guid tag string allocationStack string disposeStack string StreamDisposedEventArgs(Guid, string, TimeSpan, string, string) public StreamDisposedEventArgs(Guid guid, string tag, TimeSpan lifetime, string allocationStack, string disposeStack) 参数 guid Guid tag string lifetime TimeSpan allocationStack string disposeStack string 属性 AllocationStack public string AllocationStack { get; } 属性值 string DisposeStack public string DisposeStack { get; } 属性值 string Id public Guid Id { get; } 属性值 Guid Lifetime public TimeSpan Lifetime { get; } 属性值 TimeSpan Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamDoubleDisposedEventArgs(Guid, string, string, string, string) public StreamDoubleDisposedEventArgs(Guid guid, string tag, string allocationStack, string disposeStack1, string disposeStack2) 参数 guid Guid tag string allocationStack string disposeStack1 string disposeStack2 string 属性 AllocationStack public string AllocationStack { get; } 属性值 string DisposeStack1 public string DisposeStack1 { get; } 属性值 string DisposeStack2 public string DisposeStack2 { get; } 属性值 string Id public Guid Id { get; } 属性值 Guid Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamFinalizedEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamFinalizedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamFinalizedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamFinalizedEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamFinalizedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamFinalizedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamFinalizedEventArgs(Guid, string, string) public StreamFinalizedEventArgs(Guid guid, string tag, string allocationStack) 参数 guid Guid tag string allocationStack string 属性 AllocationStack public string AllocationStack { get; } 属性值 string Id public Guid Id { get; } 属性值 Guid Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamLengthEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamLengthEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamLengthEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamLengthEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamLengthEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamLengthEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamLengthEventArgs(long) public StreamLengthEventArgs(long length) 参数 length long 属性 Length public long Length { get; } 属性值 long"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamOverCapacityEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.StreamOverCapacityEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.StreamOverCapacityEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 AllocationStack public string AllocationStack { get; } 属性值 string Id public Guid Id { get; } 属性值 Guid MaximumCapacity public long MaximumCapacity { get; } 属性值 long RequestedCapacity public long RequestedCapacity { get; } 属性值 long Tag public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.UsageReportEventArgs.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.UsageReportEventArgs.html",
    "title": "RecyclableMemoryStreamManager.UsageReportEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.UsageReportEventArgs 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager.UsageReportEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.UsageReportEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 UsageReportEventArgs(long, long, long, long) public UsageReportEventArgs(long smallPoolInUseBytes, long smallPoolFreeBytes, long largePoolInUseBytes, long largePoolFreeBytes) 参数 smallPoolInUseBytes long smallPoolFreeBytes long largePoolInUseBytes long largePoolFreeBytes long 属性 LargePoolFreeBytes public long LargePoolFreeBytes { get; } 属性值 long LargePoolInUseBytes public long LargePoolInUseBytes { get; } 属性值 long SmallPoolFreeBytes public long SmallPoolFreeBytes { get; } 属性值 long SmallPoolInUseBytes public long SmallPoolInUseBytes { get; } 属性值 long"
  },
  "reference/Fantasy.IO.RecyclableMemoryStreamManager.html": {
    "href": "reference/Fantasy.IO.RecyclableMemoryStreamManager.html",
    "title": "RecyclableMemoryStreamManager 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager 类 命名空间 Fantasy.IO 程序集 Fantasy.Net.dll public sealed class RecyclableMemoryStreamManager 继承 object RecyclableMemoryStreamManager 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RecyclableMemoryStreamManager() public RecyclableMemoryStreamManager() RecyclableMemoryStreamManager(int, int, int) public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize) 参数 blockSize int largeBufferMultiple int maximumBufferSize int RecyclableMemoryStreamManager(int, int, int, bool) public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, bool useExponentialLargeBuffer) 参数 blockSize int largeBufferMultiple int maximumBufferSize int useExponentialLargeBuffer bool RecyclableMemoryStreamManager(int, int, int, bool, long, long) public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, bool useExponentialLargeBuffer, long maximumSmallPoolFreeBytes, long maximumLargePoolFreeBytes) 参数 blockSize int largeBufferMultiple int maximumBufferSize int useExponentialLargeBuffer bool maximumSmallPoolFreeBytes long maximumLargePoolFreeBytes long RecyclableMemoryStreamManager(int, int, int, long, long) public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, long maximumSmallPoolFreeBytes, long maximumLargePoolFreeBytes) 参数 blockSize int largeBufferMultiple int maximumBufferSize int maximumSmallPoolFreeBytes long maximumLargePoolFreeBytes long RecyclableMemoryStreamManager(long, long) public RecyclableMemoryStreamManager(long maximumSmallPoolFreeBytes, long maximumLargePoolFreeBytes) 参数 maximumSmallPoolFreeBytes long maximumLargePoolFreeBytes long 字段 DefaultBlockSize public const int DefaultBlockSize = 131072 字段值 int DefaultLargeBufferMultiple public const int DefaultLargeBufferMultiple = 1048576 字段值 int DefaultMaximumBufferSize public const int DefaultMaximumBufferSize = 134217728 字段值 int 属性 AggressiveBufferReturn public bool AggressiveBufferReturn { get; set; } 属性值 bool BlockSize public int BlockSize { get; } 属性值 int GenerateCallStacks public bool GenerateCallStacks { get; set; } 属性值 bool LargeBufferMultiple public int LargeBufferMultiple { get; } 属性值 int LargeBuffersFree public long LargeBuffersFree { get; } 属性值 long LargePoolFreeSize public long LargePoolFreeSize { get; } 属性值 long LargePoolInUseSize public long LargePoolInUseSize { get; } 属性值 long MaximumBufferSize public int MaximumBufferSize { get; } 属性值 int MaximumFreeLargePoolBytes public long MaximumFreeLargePoolBytes { get; set; } 属性值 long MaximumFreeSmallPoolBytes public long MaximumFreeSmallPoolBytes { get; set; } 属性值 long MaximumStreamCapacity public long MaximumStreamCapacity { get; set; } 属性值 long SmallBlocksFree public long SmallBlocksFree { get; } 属性值 long SmallPoolFreeSize public long SmallPoolFreeSize { get; } 属性值 long SmallPoolInUseSize public long SmallPoolInUseSize { get; } 属性值 long ThrowExceptionOnToArray public bool ThrowExceptionOnToArray { get; set; } 属性值 bool UseExponentialLargeBuffer public bool UseExponentialLargeBuffer { get; } 属性值 bool UseMultipleLargeBuffer public bool UseMultipleLargeBuffer { get; } 属性值 bool 方法 GetStream() public MemoryStream GetStream() 返回 MemoryStream GetStream(byte[]) public MemoryStream GetStream(byte[] buffer) 参数 buffer byte[] 返回 MemoryStream GetStream(Guid) public MemoryStream GetStream(Guid id) 参数 id Guid 返回 MemoryStream GetStream(Guid, string) public MemoryStream GetStream(Guid id, string tag) 参数 id Guid tag string 返回 MemoryStream GetStream(Guid, string, byte[], int, int) public MemoryStream GetStream(Guid id, string tag, byte[] buffer, int offset, int count) 参数 id Guid tag string buffer byte[] offset int count int 返回 MemoryStream GetStream(Guid, string, int) public MemoryStream GetStream(Guid id, string tag, int requiredSize) 参数 id Guid tag string requiredSize int 返回 MemoryStream GetStream(Guid, string, int, bool) public MemoryStream GetStream(Guid id, string tag, int requiredSize, bool asContiguousBuffer) 参数 id Guid tag string requiredSize int asContiguousBuffer bool 返回 MemoryStream GetStream(Guid, string, long) public MemoryStream GetStream(Guid id, string tag, long requiredSize) 参数 id Guid tag string requiredSize long 返回 MemoryStream GetStream(Guid, string, long, bool) public MemoryStream GetStream(Guid id, string tag, long requiredSize, bool asContiguousBuffer) 参数 id Guid tag string requiredSize long asContiguousBuffer bool 返回 MemoryStream GetStream(Guid, string, Memory<byte>) [Obsolete(\"Use the ReadOnlySpan<byte> version of this method instead.\")] public MemoryStream GetStream(Guid id, string tag, Memory<byte> buffer) 参数 id Guid tag string buffer Memory<byte> 返回 MemoryStream GetStream(Guid, string, ReadOnlySpan<byte>) public MemoryStream GetStream(Guid id, string tag, ReadOnlySpan<byte> buffer) 参数 id Guid tag string buffer ReadOnlySpan<byte> 返回 MemoryStream GetStream(Memory<byte>) [Obsolete(\"Use the ReadOnlySpan<byte> version of this method instead.\")] public MemoryStream GetStream(Memory<byte> buffer) 参数 buffer Memory<byte> 返回 MemoryStream GetStream(ReadOnlySpan<byte>) public MemoryStream GetStream(ReadOnlySpan<byte> buffer) 参数 buffer ReadOnlySpan<byte> 返回 MemoryStream GetStream(string) public MemoryStream GetStream(string tag) 参数 tag string 返回 MemoryStream GetStream(string, byte[], int, int) public MemoryStream GetStream(string tag, byte[] buffer, int offset, int count) 参数 tag string buffer byte[] offset int count int 返回 MemoryStream GetStream(string, int) public MemoryStream GetStream(string tag, int requiredSize) 参数 tag string requiredSize int 返回 MemoryStream GetStream(string, int, bool) public MemoryStream GetStream(string tag, int requiredSize, bool asContiguousBuffer) 参数 tag string requiredSize int asContiguousBuffer bool 返回 MemoryStream GetStream(string, long, bool) public MemoryStream GetStream(string tag, long requiredSize, bool asContiguousBuffer) 参数 tag string requiredSize long asContiguousBuffer bool 返回 MemoryStream GetStream(string, Memory<byte>) [Obsolete(\"Use the ReadOnlySpan<byte> version of this method instead.\")] public MemoryStream GetStream(string tag, Memory<byte> buffer) 参数 tag string buffer Memory<byte> 返回 MemoryStream GetStream(string, ReadOnlySpan<byte>) public MemoryStream GetStream(string tag, ReadOnlySpan<byte> buffer) 参数 tag string buffer ReadOnlySpan<byte> 返回 MemoryStream 事件 BlockCreated public event EventHandler<RecyclableMemoryStreamManager.BlockCreatedEventArgs> BlockCreated 事件类型 EventHandler<RecyclableMemoryStreamManager.BlockCreatedEventArgs> BufferDiscarded public event EventHandler<RecyclableMemoryStreamManager.BufferDiscardedEventArgs> BufferDiscarded 事件类型 EventHandler<RecyclableMemoryStreamManager.BufferDiscardedEventArgs> LargeBufferCreated public event EventHandler<RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs> LargeBufferCreated 事件类型 EventHandler<RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs> StreamConvertedToArray public event EventHandler<RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs> StreamConvertedToArray 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs> StreamCreated public event EventHandler<RecyclableMemoryStreamManager.StreamCreatedEventArgs> StreamCreated 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamCreatedEventArgs> StreamDisposed public event EventHandler<RecyclableMemoryStreamManager.StreamDisposedEventArgs> StreamDisposed 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamDisposedEventArgs> StreamDoubleDisposed public event EventHandler<RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs> StreamDoubleDisposed 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs> StreamFinalized public event EventHandler<RecyclableMemoryStreamManager.StreamFinalizedEventArgs> StreamFinalized 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamFinalizedEventArgs> StreamLength public event EventHandler<RecyclableMemoryStreamManager.StreamLengthEventArgs> StreamLength 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamLengthEventArgs> StreamOverCapacity public event EventHandler<RecyclableMemoryStreamManager.StreamOverCapacityEventArgs> StreamOverCapacity 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamOverCapacityEventArgs> UsageReport public event EventHandler<RecyclableMemoryStreamManager.UsageReportEventArgs> UsageReport 事件类型 EventHandler<RecyclableMemoryStreamManager.UsageReportEventArgs>"
  },
  "reference/Fantasy.IO.html": {
    "href": "reference/Fantasy.IO.html",
    "title": "Fantasy.IO 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy.IO 命名空间 类 RecyclableMemoryStream RecyclableMemoryStreamManager RecyclableMemoryStreamManager.BlockCreatedEventArgs RecyclableMemoryStreamManager.BufferDiscardedEventArgs RecyclableMemoryStreamManager.Events RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs RecyclableMemoryStreamManager.StreamCreatedEventArgs RecyclableMemoryStreamManager.StreamDisposedEventArgs RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs RecyclableMemoryStreamManager.StreamFinalizedEventArgs RecyclableMemoryStreamManager.StreamLengthEventArgs RecyclableMemoryStreamManager.StreamOverCapacityEventArgs RecyclableMemoryStreamManager.UsageReportEventArgs 枚举 RecyclableMemoryStreamManager.Events.MemoryStreamBufferType RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason"
  },
  "reference/Fantasy.IPoolMessage.html": {
    "href": "reference/Fantasy.IPoolMessage.html",
    "title": "IPoolMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IPoolMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 继承这个的Message协议会在序列化后回收到对象池中 创建消息请使用Pool.Rent来创建消息、否则会造成内存泄露 public interface IPoolMessage : IDisposable 继承成员 IDisposable.Dispose() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IRequest.html": {
    "href": "reference/Fantasy.IRequest.html",
    "title": "IRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示请求消息接口。 public interface IRequest : IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IResponse.html": {
    "href": "reference/Fantasy.IResponse.html",
    "title": "IResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示响应消息接口。 public interface IResponse : IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 ErrorCode 获取或设置错误代码。 uint ErrorCode { get; set; } 属性值 uint"
  },
  "reference/Fantasy.IRouteMessage.html": {
    "href": "reference/Fantasy.IRouteMessage.html",
    "title": "IRouteMessage 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteMessage 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示普通路由消息的接口，继承自请求接口。 public interface IRouteMessage : IRequest, IMessage 继承成员 IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T) 方法 RouteTypeOpCode() 获取路由消息的操作代码。 long RouteTypeOpCode() 返回 long 操作代码。"
  },
  "reference/Fantasy.IRouteMessageHandler.html": {
    "href": "reference/Fantasy.IRouteMessageHandler.html",
    "title": "IRouteMessageHandler 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteMessageHandler 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示路由消息处理器的接口，处理特定类型的路由消息。 public interface IRouteMessageHandler 扩展方法 JsonHelper.ToJson<T>(T) 方法 Handle(Session, Entity, uint, object) 处理路由消息的方法。 FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session 会话对象。 entity Entity 实体对象。 rpcId uint RPC标识。 routeMessage object 要处理的路由消息。 返回 FTask 异步任务。 Type() 获取处理的消息类型。 Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.IRouteRequest.html": {
    "href": "reference/Fantasy.IRouteRequest.html",
    "title": "IRouteRequest 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteRequest 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 普通路由请求接口，继承自普通路由消息接口。 public interface IRouteRequest : IRouteMessage, IRequest, IMessage 继承成员 IRouteMessage.RouteTypeOpCode() IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IRouteResponse.html": {
    "href": "reference/Fantasy.IRouteResponse.html",
    "title": "IRouteResponse 接口 | Fantasy.Net API Reference",
    "keywords": "IRouteResponse 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 普通路由响应接口，继承自响应接口。 public interface IRouteResponse : IResponse, IMessage 继承成员 IResponse.ErrorCode IMessage.OpCode() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ISingleCollectionRoot.html": {
    "href": "reference/Fantasy.ISingleCollectionRoot.html",
    "title": "ISingleCollectionRoot 接口 | Fantasy.Net API Reference",
    "keywords": "ISingleCollectionRoot 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll Entity保存到数据库的时候会根据子组件设置分离存储特性分表存储在不同的集合表中 public interface ISingleCollectionRoot 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ISingleton.html": {
    "href": "reference/Fantasy.ISingleton.html",
    "title": "ISingleton 接口 | Fantasy.Net API Reference",
    "keywords": "ISingleton 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义一个单例接口，表示可以被初始化并在销毁时进行处理。 public interface ISingleton : IDisposable 继承成员 IDisposable.Dispose() 扩展方法 JsonHelper.ToJson<T>(T) 属性 IsDisposed 获取或设置一个值，指示实例是否已被销毁。 bool IsDisposed { get; set; } 属性值 bool 方法 Initialize() 异步初始化单例实例的方法。 Task Initialize() 返回 Task 表示异步操作的任务。"
  },
  "reference/Fantasy.ISupportedDataBase.html": {
    "href": "reference/Fantasy.ISupportedDataBase.html",
    "title": "ISupportedDataBase 接口 | Fantasy.Net API Reference",
    "keywords": "ISupportedDataBase 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll Entity支持数据库 public interface ISupportedDataBase 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ISupportedMultiEntity.html": {
    "href": "reference/Fantasy.ISupportedMultiEntity.html",
    "title": "ISupportedMultiEntity 接口 | Fantasy.Net API Reference",
    "keywords": "ISupportedMultiEntity 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 支持再一个组件里添加多个同类型组件 public interface ISupportedMultiEntity : IDisposable 继承成员 IDisposable.Dispose() 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ISupportedSingleCollection.html": {
    "href": "reference/Fantasy.ISupportedSingleCollection.html",
    "title": "ISupportedSingleCollection 接口 | Fantasy.Net API Reference",
    "keywords": "ISupportedSingleCollection 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义实体支持单一集合存储的接口。当实体需要单独存储在一个集合中，并且在保存到数据库时不会与父组件一起保存在同一个集合中时，应实现此接口。 public interface ISupportedSingleCollection 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.ISupportedTransfer.html": {
    "href": "reference/Fantasy.ISupportedTransfer.html",
    "title": "ISupportedTransfer 接口 | Fantasy.Net API Reference",
    "keywords": "ISupportedTransfer 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll Entity支持传送 public interface ISupportedTransfer 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.IUpdateSingleton.html": {
    "href": "reference/Fantasy.IUpdateSingleton.html",
    "title": "IUpdateSingleton 接口 | Fantasy.Net API Reference",
    "keywords": "IUpdateSingleton 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义一个可更新的单例接口，继承自 ISingleton。 public interface IUpdateSingleton : ISingleton, IDisposable 继承成员 ISingleton.Initialize() ISingleton.IsDisposed IDisposable.Dispose() 扩展方法 JsonHelper.ToJson<T>(T) 方法 Update() 更新单例实例的方法。 void Update()"
  },
  "reference/Fantasy.IUpdateSystem.html": {
    "href": "reference/Fantasy.IUpdateSystem.html",
    "title": "IUpdateSystem 接口 | Fantasy.Net API Reference",
    "keywords": "IUpdateSystem 接口 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义实体更新系统的接口。实体更新系统用于管理特定类型的实体，在每次更新时执行与该类型实体相关的逻辑。 public interface IUpdateSystem : IEntitiesSystem 继承成员 IEntitiesSystem.EntitiesType() IEntitiesSystem.Invoke(Entity) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.I_AddressableAddHandler.html": {
    "href": "reference/Fantasy.I_AddressableAddHandler.html",
    "title": "I_AddressableAddHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableAddHandler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 声明一个 sealed 类 I_AddressableAddHandler，继承自 RouteRPC 类，并指定泛型参数 public sealed class I_AddressableAddHandler : RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response> I_AddressableAddHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Type() RouteRPC<Scene, I_AddressableAdd_Request, I_AddressableAdd_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableAddHandler() public I_AddressableAddHandler() 方法 Run(Scene, I_AddressableAdd_Request, I_AddressableAdd_Response, Action) 在收到地址映射添加请求时执行的逻辑。 protected override FTask Run(Scene scene, I_AddressableAdd_Request request, I_AddressableAdd_Response response, Action reply) 参数 scene Scene 当前场景实例。 request I_AddressableAdd_Request 包含请求信息的 I_AddressableAdd_Request 实例。 response I_AddressableAdd_Response 用于构建响应的 I_AddressableAdd_Response 实例。 reply Action 执行响应的回调操作。 返回 FTask"
  },
  "reference/Fantasy.I_AddressableAdd_Request.html": {
    "href": "reference/Fantasy.I_AddressableAdd_Request.html",
    "title": "I_AddressableAdd_Request 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableAdd_Request 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 添加一个可寻址地址请求 public class I_AddressableAdd_Request : AProto, IRouteRequest, IRouteMessage, IRequest, IMessage 继承 object AProto I_AddressableAdd_Request 实现 IRouteRequest IRouteMessage IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableAdd_Request() public I_AddressableAdd_Request() 属性 AddressableId 可寻址地址的标识。 public long AddressableId { get; set; } 属性值 long IsLock 是否锁定可寻址。 public bool IsLock { get; set; } 属性值 bool ResponseType 获取或设置响应类型。 public I_AddressableAdd_Response ResponseType { get; set; } 属性值 I_AddressableAdd_Response RouteId 路由的标识。 public long RouteId { get; set; } 属性值 long 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。 RouteTypeOpCode() 获取消息的路由类型操作代码。 public long RouteTypeOpCode() 返回 long 路由类型操作代码。"
  },
  "reference/Fantasy.I_AddressableAdd_Response.html": {
    "href": "reference/Fantasy.I_AddressableAdd_Response.html",
    "title": "I_AddressableAdd_Response 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableAdd_Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 添加一个可寻址地址响应 public class I_AddressableAdd_Response : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto I_AddressableAdd_Response 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableAdd_Response() public I_AddressableAdd_Response() 属性 ErrorCode 错误代码。 public uint ErrorCode { get; set; } 属性值 uint 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.I_AddressableGetHandler.html": {
    "href": "reference/Fantasy.I_AddressableGetHandler.html",
    "title": "I_AddressableGetHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableGetHandler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 声明一个 sealed 类 I_AddressableGetHandler，继承自 RouteRPC 类，并指定泛型参数 public sealed class I_AddressableGetHandler : RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response> I_AddressableGetHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Type() RouteRPC<Scene, I_AddressableGet_Request, I_AddressableGet_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableGetHandler() public I_AddressableGetHandler() 方法 Run(Scene, I_AddressableGet_Request, I_AddressableGet_Response, Action) 在收到地址映射获取请求时执行的逻辑。 protected override FTask Run(Scene scene, I_AddressableGet_Request request, I_AddressableGet_Response response, Action reply) 参数 scene Scene 当前场景实例。 request I_AddressableGet_Request 包含请求信息的 I_AddressableGet_Request 实例。 response I_AddressableGet_Response 用于构建响应的 I_AddressableGet_Response 实例。 reply Action 执行响应的回调操作。 返回 FTask"
  },
  "reference/Fantasy.I_AddressableGet_Request.html": {
    "href": "reference/Fantasy.I_AddressableGet_Request.html",
    "title": "I_AddressableGet_Request 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableGet_Request 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 查询一个可寻址请求 public class I_AddressableGet_Request : AProto, IRouteRequest, IRouteMessage, IRequest, IMessage 继承 object AProto I_AddressableGet_Request 实现 IRouteRequest IRouteMessage IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableGet_Request() public I_AddressableGet_Request() 属性 AddressableId 可寻址地址的标识。 public long AddressableId { get; set; } 属性值 long ResponseType 获取或设置响应类型。 public I_AddressableGet_Response ResponseType { get; set; } 属性值 I_AddressableGet_Response 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。 RouteTypeOpCode() 获取消息的路由类型操作代码。 public long RouteTypeOpCode() 返回 long 路由类型操作代码。"
  },
  "reference/Fantasy.I_AddressableGet_Response.html": {
    "href": "reference/Fantasy.I_AddressableGet_Response.html",
    "title": "I_AddressableGet_Response 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableGet_Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 查询一个可寻址响应 public class I_AddressableGet_Response : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto I_AddressableGet_Response 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableGet_Response() public I_AddressableGet_Response() 属性 ErrorCode 错误代码。 public uint ErrorCode { get; set; } 属性值 uint RouteId 路由的标识。 public long RouteId { get; set; } 属性值 long 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.I_AddressableLockHandler.html": {
    "href": "reference/Fantasy.I_AddressableLockHandler.html",
    "title": "I_AddressableLockHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableLockHandler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 声明一个 sealed 类 I_AddressableLockHandler，继承自 RouteRPC 类，并指定泛型参数 public sealed class I_AddressableLockHandler : RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response> I_AddressableLockHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Type() RouteRPC<Scene, I_AddressableLock_Request, I_AddressableLock_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableLockHandler() public I_AddressableLockHandler() 方法 Run(Scene, I_AddressableLock_Request, I_AddressableLock_Response, Action) 在收到地址映射锁定请求时执行的逻辑。 protected override FTask Run(Scene scene, I_AddressableLock_Request request, I_AddressableLock_Response response, Action reply) 参数 scene Scene 当前场景实例。 request I_AddressableLock_Request 包含请求信息的 I_AddressableLock_Request 实例。 response I_AddressableLock_Response 用于构建响应的 I_AddressableLock_Response 实例。 reply Action 执行响应的回调操作。 返回 FTask"
  },
  "reference/Fantasy.I_AddressableLock_Request.html": {
    "href": "reference/Fantasy.I_AddressableLock_Request.html",
    "title": "I_AddressableLock_Request 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableLock_Request 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 锁定一个可寻址请求。 public class I_AddressableLock_Request : AProto, IRouteRequest, IRouteMessage, IRequest, IMessage 继承 object AProto I_AddressableLock_Request 实现 IRouteRequest IRouteMessage IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableLock_Request() public I_AddressableLock_Request() 属性 AddressableId 可寻址地址的标识。 public long AddressableId { get; set; } 属性值 long ResponseType 获取或设置响应类型。 public I_AddressableLock_Response ResponseType { get; set; } 属性值 I_AddressableLock_Response 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。 RouteTypeOpCode() 获取消息的路由类型操作代码。 public long RouteTypeOpCode() 返回 long 路由类型操作代码。"
  },
  "reference/Fantasy.I_AddressableLock_Response.html": {
    "href": "reference/Fantasy.I_AddressableLock_Response.html",
    "title": "I_AddressableLock_Response 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableLock_Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 锁定一个可寻址响应。 public class I_AddressableLock_Response : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto I_AddressableLock_Response 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableLock_Response() public I_AddressableLock_Response() 属性 ErrorCode 获取或设置错误代码。 public uint ErrorCode { get; set; } 属性值 uint 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.I_AddressableRemoveHandler.html": {
    "href": "reference/Fantasy.I_AddressableRemoveHandler.html",
    "title": "I_AddressableRemoveHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableRemoveHandler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 声明一个 sealed 类 I_AddressableRemoveHandler，继承自 RouteRPC 类，并指定泛型参数 public sealed class I_AddressableRemoveHandler : RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response> I_AddressableRemoveHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Type() RouteRPC<Scene, I_AddressableRemove_Request, I_AddressableRemove_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableRemoveHandler() public I_AddressableRemoveHandler() 方法 Run(Scene, I_AddressableRemove_Request, I_AddressableRemove_Response, Action) 在收到地址映射移除请求时执行的逻辑。 protected override FTask Run(Scene scene, I_AddressableRemove_Request request, I_AddressableRemove_Response response, Action reply) 参数 scene Scene 当前场景实例。 request I_AddressableRemove_Request 包含请求信息的 I_AddressableRemove_Request 实例。 response I_AddressableRemove_Response 用于构建响应的 I_AddressableRemove_Response 实例。 reply Action 执行响应的回调操作。 返回 FTask"
  },
  "reference/Fantasy.I_AddressableRemove_Request.html": {
    "href": "reference/Fantasy.I_AddressableRemove_Request.html",
    "title": "I_AddressableRemove_Request 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableRemove_Request 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 删除一个可寻址请求 public class I_AddressableRemove_Request : AProto, IRouteRequest, IRouteMessage, IRequest, IMessage 继承 object AProto I_AddressableRemove_Request 实现 IRouteRequest IRouteMessage IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableRemove_Request() public I_AddressableRemove_Request() 属性 AddressableId 可寻址地址的标识。 public long AddressableId { get; set; } 属性值 long ResponseType 获取或设置响应类型。 public I_AddressableRemove_Response ResponseType { get; set; } 属性值 I_AddressableRemove_Response 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。 RouteTypeOpCode() 获取消息的路由类型操作代码。 public long RouteTypeOpCode() 返回 long 路由类型操作代码。"
  },
  "reference/Fantasy.I_AddressableRemove_Response.html": {
    "href": "reference/Fantasy.I_AddressableRemove_Response.html",
    "title": "I_AddressableRemove_Response 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableRemove_Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 删除一个可寻址响应 public class I_AddressableRemove_Response : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto I_AddressableRemove_Response 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableRemove_Response() public I_AddressableRemove_Response() 属性 ErrorCode 错误代码。 public uint ErrorCode { get; set; } 属性值 uint 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.I_AddressableUnLockHandler.html": {
    "href": "reference/Fantasy.I_AddressableUnLockHandler.html",
    "title": "I_AddressableUnLockHandler 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableUnLockHandler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 声明一个 sealed 类 I_AddressableUnLockHandler，继承自 RouteRPC 类，并指定泛型参数 public sealed class I_AddressableUnLockHandler : RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>, IRouteMessageHandler 继承 object RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response> I_AddressableUnLockHandler 实现 IRouteMessageHandler 继承成员 RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Type() RouteRPC<Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response>.Handle(Session, Entity, uint, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableUnLockHandler() public I_AddressableUnLockHandler() 方法 Run(Scene, I_AddressableUnLock_Request, I_AddressableUnLock_Response, Action) 在收到地址映射解锁请求时执行的逻辑。 protected override FTask Run(Scene scene, I_AddressableUnLock_Request request, I_AddressableUnLock_Response response, Action reply) 参数 scene Scene 当前场景实例。 request I_AddressableUnLock_Request 包含请求信息的 I_AddressableUnLock_Request 实例。 response I_AddressableUnLock_Response 用于构建响应的 I_AddressableUnLock_Response 实例。 reply Action 执行响应的回调操作。 返回 FTask"
  },
  "reference/Fantasy.I_AddressableUnLock_Request.html": {
    "href": "reference/Fantasy.I_AddressableUnLock_Request.html",
    "title": "I_AddressableUnLock_Request 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableUnLock_Request 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 解锁一个可寻址地址请求。 public class I_AddressableUnLock_Request : AProto, IRouteRequest, IRouteMessage, IRequest, IMessage 继承 object AProto I_AddressableUnLock_Request 实现 IRouteRequest IRouteMessage IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableUnLock_Request() public I_AddressableUnLock_Request() 属性 AddressableId 可寻址地址的标识。 public long AddressableId { get; set; } 属性值 long ResponseType 获取或设置响应类型。 public I_AddressableUnLock_Response ResponseType { get; set; } 属性值 I_AddressableUnLock_Response RouteId 路由的标识。 public long RouteId { get; set; } 属性值 long Source 请求解锁的源。 public string Source { get; set; } 属性值 string 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。 RouteTypeOpCode() 获取消息的路由类型操作代码。 public long RouteTypeOpCode() 返回 long 路由类型操作代码。"
  },
  "reference/Fantasy.I_AddressableUnLock_Response.html": {
    "href": "reference/Fantasy.I_AddressableUnLock_Response.html",
    "title": "I_AddressableUnLock_Response 类 | Fantasy.Net API Reference",
    "keywords": "I_AddressableUnLock_Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 解锁一个可寻址地址响应。 public class I_AddressableUnLock_Response : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto I_AddressableUnLock_Response 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 I_AddressableUnLock_Response() public I_AddressableUnLock_Response() 属性 ErrorCode 获取或设置错误代码。 public uint ErrorCode { get; set; } 属性值 uint 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.IdFactory.html": {
    "href": "reference/Fantasy.IdFactory.html",
    "title": "IdFactory 类 | Fantasy.Net API Reference",
    "keywords": "IdFactory 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于生成不同类型 ID 的工厂类。 public static class IdFactory 继承 object IdFactory 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetAppId(long) 获取实体 ID 对应的应用 ID。 public static ushort GetAppId(long entityId) 参数 entityId long 实体 ID。 返回 ushort 应用 ID。 GetRouteId(long) 获取实体 ID 对应的路由 ID。 public static uint GetRouteId(long entityId) 参数 entityId long 实体 ID。 返回 uint 路由 ID。 GetWordId(long) 获取实体 ID 对应的世界 ID。 public static int GetWordId(long entityId) 参数 entityId long 实体 ID。 返回 int 世界 ID。 NextEntityId(uint) 生成下一个实体 ID。 public static long NextEntityId(uint locationId) 参数 locationId uint 位置 ID。 返回 long 生成的实体 ID。 NextRunTimeId() 生成下一个运行时 ID。 public static long NextRunTimeId() 返回 long 生成的运行时 ID。"
  },
  "reference/Fantasy.InnerMessageScheduler.html": {
    "href": "reference/Fantasy.InnerMessageScheduler.html",
    "title": "InnerMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "InnerMessageScheduler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供了一个机制来调度和处理内部网络消息。 public sealed class InnerMessageScheduler : ANetworkMessageScheduler 继承 object ANetworkMessageScheduler InnerMessageScheduler 继承成员 ANetworkMessageScheduler.Scheduler(Session, APackInfo) ANetworkMessageScheduler.InnerScheduler(Session, uint, long, uint, long, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 InnerMessageScheduler() public InnerMessageScheduler() 方法 Handler(Session, Type, APackInfo) 在FantasyNet环境下，处理外部消息的方法。 protected override FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session 网络会话。 messageType Type 消息类型。 packInfo APackInfo 消息封包信息。 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) 在FantasyNet环境下，处理内部消息的方法。 protected override FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session 网络会话。 rpcId uint RPC请求ID。 routeId long 消息路由ID。 protocolCode uint 协议码。 routeTypeCode long 路由类型码。 messageType Type 消息类型。 message object 消息对象。 返回 FTask"
  },
  "reference/Fantasy.InnerPackInfo.html": {
    "href": "reference/Fantasy.InnerPackInfo.html",
    "title": "InnerPackInfo 类 | Fantasy.Net API Reference",
    "keywords": "InnerPackInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于处理内部网络数据包信息的类。 public sealed class InnerPackInfo : APackInfo, IDisposable 继承 object APackInfo InnerPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.ProtocolCode APackInfo.RouteTypeCode APackInfo.MessagePacketLength APackInfo.MemoryOwner APackInfo.IsDisposed APackInfo.Rent<T>() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 InnerPackInfo() public InnerPackInfo() 方法 Create(IMemoryOwner<byte>) 创建一个 InnerPackInfo 实例，并将其与内存资源关联。 public static InnerPackInfo Create(IMemoryOwner<byte> memoryOwner) 参数 memoryOwner IMemoryOwner<byte> 用于存储数据的内存资源。 返回 InnerPackInfo 创建的 InnerPackInfo 实例。 CreateMemoryStream() 创建一个 MemoryStream 实例，用于存储内存数据，并返回该实例。 public override MemoryStream CreateMemoryStream() 返回 MemoryStream 创建的 MemoryStream 实例。 Deserialize(Type) 将消息数据从内存反序列化为指定的消息类型实例。 public override object Deserialize(Type messageType) 参数 messageType Type 目标消息类型。 返回 object 反序列化后的消息类型实例。 Dispose() 释放当前 InnerPackInfo 实例及其关联的资源。 public override void Dispose()"
  },
  "reference/Fantasy.InnerPacketParser.html": {
    "href": "reference/Fantasy.InnerPacketParser.html",
    "title": "InnerPacketParser 类 | Fantasy.Net API Reference",
    "keywords": "InnerPacketParser 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于解析内部网络数据包的类。 public sealed class InnerPacketParser : APacketParser, IDisposable 继承 object APacketParser InnerPacketParser 实现 IDisposable 继承成员 APacketParser.CreatePacketParser(NetworkTarget) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 InnerPacketParser() 初始化一个新的 InnerPacketParser 实例。 public InnerPacketParser() 方法 Dispose() 释放资源并进行清理操作。 public override void Dispose() Pack(uint, long, MemoryStream) 将数据打包成一个内部数据包的内存流。 public static MemoryStream Pack(uint rpcId, long routeId, MemoryStream memoryStream) 参数 rpcId uint RPC ID。 routeId long Route ID。 memoryStream MemoryStream 要打包的数据内存流。 返回 MemoryStream 打包后的内存流。 Pack(uint, long, object) 将数据打包成一个内部数据包的内存流。 public static MemoryStream Pack(uint rpcId, long routeId, object message) 参数 rpcId uint RPC ID。 routeId long Route ID。 message object 要打包的数据对象。 返回 MemoryStream 打包后的内存流。 UnPack(CircularBuffer, out APackInfo) 尝试解析循环缓冲区中的数据为一个数据包信息。 public override bool UnPack(CircularBuffer buffer, out APackInfo packInfo) 参数 buffer CircularBuffer 待解析的循环缓冲区。 packInfo APackInfo 解析后的数据包信息。 返回 bool 如果成功解析并获取数据包信息，则返回 true，否则返回 false。 UnPack(IMemoryOwner<byte>, out APackInfo) 尝试从内存资源中解析数据为一个内部数据包信息。 public override bool UnPack(IMemoryOwner<byte> memoryOwner, out APackInfo packInfo) 参数 memoryOwner IMemoryOwner<byte> 包含数据的内存资源。 packInfo APackInfo 解析后的内部数据包信息。 返回 bool 如果成功解析并获取内部数据包信息，则返回 true，否则返回 false。"
  },
  "reference/Fantasy.IntDictionaryConfig.html": {
    "href": "reference/Fantasy.IntDictionaryConfig.html",
    "title": "IntDictionaryConfig 类 | Fantasy.Net API Reference",
    "keywords": "IntDictionaryConfig 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 使用 ProtoBuf 序列化的整数字典配置类。 public class IntDictionaryConfig 继承 object IntDictionaryConfig 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 IntDictionaryConfig() public IntDictionaryConfig() 字段 Dic 使用 ProtoBuf 序列化的字典。 public Dictionary<int, int> Dic 字段值 Dictionary<int, int> 属性 this[int] 获取或设置指定键的整数值。 public int this[int key] { get; } 参数 key int 键。 属性值 int 整数值。 方法 TryGetValue(int, out int) 尝试获取指定键的整数值。 public bool TryGetValue(int key, out int value) 参数 key int 键。 value int 获取到的整数值。 返回 bool 如果成功获取到值，则返回 true，否则返回 false。"
  },
  "reference/Fantasy.JsonHelper.html": {
    "href": "reference/Fantasy.JsonHelper.html",
    "title": "JsonHelper 类 | Fantasy.Net API Reference",
    "keywords": "JsonHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供操作 JSON 数据的辅助方法。 public static class JsonHelper 继承 object JsonHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Clone<T>(T) 克隆对象，通过将对象序列化为 JSON，然后再进行反序列化。 public static T Clone<T>(T t) 参数 t T 要克隆的对象。 返回 T 克隆后的对象。 类型参数 T 要克隆的对象类型。 Deserialize(string, Type, bool) 反序列化 JSON 字符串为指定类型的对象。 public static object Deserialize(this string json, Type type, bool reflection = true) 参数 json string 要反序列化的 JSON 字符串。 type Type 目标对象的类型。 reflection bool 是否使用反射进行反序列化（默认为 true）。 返回 object 反序列化后的对象。 Deserialize<T>(string) 反序列化 JSON 字符串为指定类型的对象。 public static T Deserialize<T>(this string json) 参数 json string 要反序列化的 JSON 字符串。 返回 T 反序列化后的对象。 类型参数 T 目标对象的类型。 ToJson<T>(T) 将对象序列化为 JSON 字符串。 public static string ToJson<T>(this T t) 参数 t T 要序列化的对象。 返回 string 表示序列化对象的 JSON 字符串。 类型参数 T 要序列化的对象类型。"
  },
  "reference/Fantasy.KCPClientNetwork.html": {
    "href": "reference/Fantasy.KCPClientNetwork.html",
    "title": "KCPClientNetwork 类 | Fantasy.Net API Reference",
    "keywords": "KCPClientNetwork 类 命名空间 Fantasy 程序集 Fantasy.Net.dll KCP协议客户端网络类，用于管理KCP客户端网络连接。 public sealed class KCPClientNetwork : AClientNetwork, IDisposable, INetworkUpdate 继承 object ANetwork AClientNetwork KCPClientNetwork 实现 IDisposable INetworkUpdate 继承成员 AClientNetwork.ChannelId ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPClientNetwork(Scene, NetworkTarget) 构造函数，创建一个KCP协议客户端网络实例。 public KCPClientNetwork(Scene scene, NetworkTarget networkTarget) 参数 scene Scene 所属场景。 networkTarget NetworkTarget 网络目标类型。 方法 Connect(IPEndPoint, Action, Action, Action, int) 连接到指定的远程终结点。 public override uint Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint 远程终结点。 onConnectComplete Action 连接成功回调。 onConnectFail Action 连接失败回调。 onConnectDisconnect Action 连接断开回调。 connectTimeout int 连接超时时间（毫秒），默认为 5000 毫秒。 返回 uint 新建的通道 ID。 异常 NotSupportedException 如果已经初始化，则抛出该异常。 Dispose() 销毁网络连接。 public override void Dispose() RemoveChannel(uint) 移除指定通道的网络连接。 public override void RemoveChannel(uint channelId) 参数 channelId uint 要移除的通道 ID。 Send(uint, uint, long, long, MemoryStream) 发送数据到远程端点。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long entityId, MemoryStream memoryStream) 参数 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型和操作码。 entityId long 实体 ID。 memoryStream MemoryStream 要发送的数据。 Send(uint, uint, long, long, object) 发送数据到远程端点。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long entityId, object message) 参数 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型和操作码。 entityId long 实体 ID。 message object 要发送的消息对象。 Update() 更新网络连接状态和数据接收。 public void Update() 事件 OnChangeChannelId 当通道ID发生变化时触发的事件。 public override event Action<uint> OnChangeChannelId 事件类型 Action<uint> OnConnectComplete 当连接成功建立时触发的事件。 public override event Action OnConnectComplete 事件类型 Action OnConnectDisconnect 当连接断开时触发的事件。 public override event Action OnConnectDisconnect 事件类型 Action OnConnectFail 当连接失败时触发的事件。 public override event Action OnConnectFail 事件类型 Action OnDispose 当网络对象被销毁时触发的事件。 public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream 当接收到内存流数据时触发的事件。 public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.KCPServerNetwork.html": {
    "href": "reference/Fantasy.KCPServerNetwork.html",
    "title": "KCPServerNetwork 类 | Fantasy.Net API Reference",
    "keywords": "KCPServerNetwork 类 命名空间 Fantasy 程序集 Fantasy.Net.dll KCP 服务端网络实现。 public class KCPServerNetwork : ANetwork, IDisposable, INetworkUpdate 继承 object ANetwork KCPServerNetwork 实现 IDisposable INetworkUpdate 继承成员 ANetwork.Pack ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPServerNetwork(Scene, NetworkTarget, IPEndPoint) 构造函数，初始化 KCP 服务端网络实例。 public KCPServerNetwork(Scene scene, NetworkTarget networkTarget, IPEndPoint address) 参数 scene Scene 场景实例。 networkTarget NetworkTarget 网络目标。 address IPEndPoint 绑定的地址和端口。 方法 Dispose() 释放KCPServerNetwork实例使用的所有资源。 public override void Dispose() RemoveChannel(uint) 从网络中移除指定通道。 public override void RemoveChannel(uint channelId) 参数 channelId uint 要移除的通道ID。 Send(uint, uint, long, long, MemoryStream) 向指定通道发送数据，使用KCP协议。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint 通道ID。 rpcId uint 远程过程调用的ID。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由ID。 memoryStream MemoryStream 包含要发送数据的MemoryStream。 Send(uint, uint, long, long, object) 向指定通道发送数据，使用KCP协议。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint 通道ID。 rpcId uint 远程过程调用的ID。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由ID。 message object 包含要发送数据的对象。 Update() 更新网络处理逻辑。 public void Update()"
  },
  "reference/Fantasy.KCPServerNetworkChannel.html": {
    "href": "reference/Fantasy.KCPServerNetworkChannel.html",
    "title": "KCPServerNetworkChannel 类 | Fantasy.Net API Reference",
    "keywords": "KCPServerNetworkChannel 类 命名空间 Fantasy 程序集 Fantasy.Net.dll KCP 服务器网络通道类，负责管理基于 KCP 协议的网络通信。 public sealed class KCPServerNetworkChannel : ANetworkChannel 继承 object ANetworkChannel KCPServerNetworkChannel 继承成员 ANetworkChannel.Id ANetworkChannel.Scene ANetworkChannel.NetworkId ANetworkChannel.IsDisposed ANetworkChannel.RemoteEndPoint ANetworkChannel.PacketParser object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPServerNetworkChannel(Scene, uint, long, EndPoint, Socket, uint) 构造函数，创建 KCP 服务器网络通道实例。 public KCPServerNetworkChannel(Scene scene, uint id, long networkId, EndPoint remoteEndPoint, Socket socket, uint createTime) 参数 scene Scene 所属场景 id uint 通道 ID networkId long 网络 ID remoteEndPoint EndPoint 远程终端点 socket Socket 套接字 createTime uint 创建时间 字段 CreateTime 连接创建时间（只读），用于记录连接建立的时间戳。 public readonly uint CreateTime 字段值 uint 属性 Kcp KCP协议实例，用于处理可靠的数据传输。 public Kcp Kcp { get; } 属性值 Kcp 方法 Connect(Kcp, Action<uint, uint>, int, NetworkTarget, ANetworkMessageScheduler) 连接到客户端，并设置 KCP 参数。 public void Connect(Kcp kcp, Action<uint, uint> addToUpdate, int maxSndWnd, NetworkTarget networkTarget, ANetworkMessageScheduler networkMessageScheduler) 参数 kcp Kcp KCP 实例 addToUpdate Action<uint, uint> 添加到更新的方法 maxSndWnd int 最大发送窗口大小 networkTarget NetworkTarget 网络目标 networkMessageScheduler ANetworkMessageScheduler 网络消息调度器 Dispose() 释放资源并断开连接。 public override void Dispose() Output(byte[], int) 将数据发送到网络。 public void Output(byte[] bytes, int count) 参数 bytes byte[] 字节数组 count int 发送的字节数 Receive() 接收数据并进行处理。 public void Receive() Send(MemoryStream) 发送数据到客户端。 public void Send(MemoryStream memoryStream) 参数 memoryStream MemoryStream 内存流 事件 OnDispose 当网络通道被释放时触发的事件。 public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream 当接收到内存流数据包时触发的事件。 public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.KCPSettings.html": {
    "href": "reference/Fantasy.KCPSettings.html",
    "title": "KCPSettings 类 | Fantasy.Net API Reference",
    "keywords": "KCPSettings 类 命名空间 Fantasy 程序集 Fantasy.Net.dll public class KCPSettings 继承 object KCPSettings 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 KCPSettings() public KCPSettings() 属性 MaxSendWindowSize public int MaxSendWindowSize { get; } 属性值 int Mtu public uint Mtu { get; } 属性值 uint ReceiveWindowSize public uint ReceiveWindowSize { get; } 属性值 uint SendWindowSize public uint SendWindowSize { get; } 属性值 uint 方法 Create(NetworkTarget) public static KCPSettings Create(NetworkTarget networkTarget) 参数 networkTarget NetworkTarget 返回 KCPSettings"
  },
  "reference/Fantasy.KcpHeader.html": {
    "href": "reference/Fantasy.KcpHeader.html",
    "title": "KcpHeader 枚举 | Fantasy.Net API Reference",
    "keywords": "KcpHeader 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll public enum KcpHeader : byte 扩展方法 JsonHelper.ToJson<T>(T) 字段 ConfirmConnection = 3 Disconnect = 7 None = 0 ReceiveData = 6 RepeatChannelId = 4 RequestConnection = 1 WaitConfirmConnection = 2"
  },
  "reference/Fantasy.LinkEntityComponent.html": {
    "href": "reference/Fantasy.LinkEntityComponent.html",
    "title": "LinkEntityComponent 类 | Fantasy.Net API Reference",
    "keywords": "LinkEntityComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 连接其他进程实体地址管理组件 public sealed class LinkEntityComponent : Entity, IDisposable 继承 object Entity LinkEntityComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 LinkEntityComponent() public LinkEntityComponent() 字段 LinkEntity 其他已经连接其他进程的Entity地址、key为EntityType类型、value为Entity所在进程的RouteId public readonly Dictionary<int, long> LinkEntity 字段值 Dictionary<int, long> LinkGateSessionRuntimeId 连接的Gate的Session的RuntimeId、通过这个可以直接发送消息给客户端 public long LinkGateSessionRuntimeId 字段值 long 方法 Dispose() 销毁 public override void Dispose()"
  },
  "reference/Fantasy.LinkEntity_Request.html": {
    "href": "reference/Fantasy.LinkEntity_Request.html",
    "title": "LinkEntity_Request 类 | Fantasy.Net API Reference",
    "keywords": "LinkEntity_Request 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 连接Entity到目标进程、目标进程可以通过EntityType、发送消息给这个Entity public class LinkEntity_Request : AProto, IRouteRequest, IRouteMessage, IRequest, IMessage 继承 object AProto LinkEntity_Request 实现 IRouteRequest IRouteMessage IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 LinkEntity_Request() public LinkEntity_Request() 属性 EntityType EntityType public int EntityType { get; set; } 属性值 int LinkGateSessionRuntimeId Gate服务器的Session.RuntimeId public long LinkGateSessionRuntimeId { get; set; } 属性值 long RuntimeId RuntimeId。 public long RuntimeId { get; set; } 属性值 long 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。 RouteTypeOpCode() 获取路由消息的操作代码。 public long RouteTypeOpCode() 返回 long 操作代码。"
  },
  "reference/Fantasy.LinkEntity_Response.html": {
    "href": "reference/Fantasy.LinkEntity_Response.html",
    "title": "LinkEntity_Response 类 | Fantasy.Net API Reference",
    "keywords": "LinkEntity_Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll public class LinkEntity_Response : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto LinkEntity_Response 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 LinkEntity_Response() public LinkEntity_Response() 属性 ErrorCode 获取或设置错误代码。 public uint ErrorCode { get; set; } 属性值 uint 方法 OpCode() 获取消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.ListPool-1.html": {
    "href": "reference/Fantasy.ListPool-1.html",
    "title": "ListPool<T> 类 | Fantasy.Net API Reference",
    "keywords": "ListPool<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可释放的列表（List）对象池。 public sealed class ListPool<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDisposable 类型参数 T 列表中元素的类型。 继承 object List<T> ListPool<T> 实现 IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDisposable 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.Slice(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>) 构造函数 ListPool() public ListPool() 方法 Create(List<T>) 使用指定的列表创建一个 ListPool<T> 列表（List）对象池的实例。 public static ListPool<T> Create(List<T> args) 参数 args List<T> 要添加到列表的元素列表。 返回 ListPool<T> 创建的实例。 Create(params T[]) 使用指定的元素创建一个 ListPool<T> 列表（List）对象池的实例。 public static ListPool<T> Create(params T[] args) 参数 args T[] 要添加到列表的元素。 返回 ListPool<T> 创建的实例。 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.Log.html": {
    "href": "reference/Fantasy.Log.html",
    "title": "Log 类 | Fantasy.Net API Reference",
    "keywords": "Log 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供日志记录功能的静态类。 public static class Log 继承 object Log 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Debug(string) 记录调试级别的日志消息。 public static void Debug(string msg) 参数 msg string 日志消息。 Debug(string, params object[]) 记录调试级别的格式化日志消息。 public static void Debug(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Error(Exception) 记录异常的错误级别的日志消息，并附带调用栈信息。 public static void Error(Exception e) 参数 e Exception 异常对象。 Error(string) 记录错误级别的日志消息，并附带调用栈信息。 public static void Error(string msg) 参数 msg string 日志消息。 Error(string, params object[]) 记录错误级别的格式化日志消息，并附带调用栈信息。 public static void Error(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Info(string) 记录信息级别的日志消息。 public static void Info(string msg) 参数 msg string 日志消息。 Info(string, params object[]) 记录信息级别的格式化日志消息。 public static void Info(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Trace(string) 记录跟踪级别的日志消息。 public static void Trace(string msg) 参数 msg string 日志消息。 Trace(string, params object[]) 记录跟踪级别的格式化日志消息，并附带调用栈信息。 public static void Trace(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 TraceInfo(string) 记录跟踪级别的日志消息，并附带调用栈信息。 public static void TraceInfo(string msg) 参数 msg string 日志消息。 Warning(string) 记录警告级别的日志消息。 public static void Warning(string msg) 参数 msg string 日志消息。 Warning(string, params object[]) 记录警告级别的格式化日志消息。 public static void Warning(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。"
  },
  "reference/Fantasy.MD5Helper.html": {
    "href": "reference/Fantasy.MD5Helper.html",
    "title": "MD5Helper 类 | Fantasy.Net API Reference",
    "keywords": "MD5Helper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供计算 MD5 散列值的辅助方法。 public static class MD5Helper 继承 object MD5Helper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 BytesMD5(byte[]) 计算给定字节数组的 MD5 散列值。 public static string BytesMD5(byte[] bytes) 参数 bytes byte[] 要计算散列值的字节数组。 返回 string 表示字节数组的 MD5 散列值的字符串。 FileMD5(FileStream) 计算给定文件流的 MD5 散列值。 public static string FileMD5(FileStream fileStream) 参数 fileStream FileStream 要计算散列值的文件流。 返回 string 表示文件流的 MD5 散列值的字符串。 FileMD5(string) 计算指定文件的 MD5 散列值。 public static string FileMD5(string filePath) 参数 filePath string 要计算散列值的文件路径。 返回 string 表示文件的 MD5 散列值的字符串。"
  },
  "reference/Fantasy.MachineConfigInfo.html": {
    "href": "reference/Fantasy.MachineConfigInfo.html",
    "title": "MachineConfigInfo 类 | Fantasy.Net API Reference",
    "keywords": "MachineConfigInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 机器配置信息的类。 public class MachineConfigInfo 继承 object MachineConfigInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MachineConfigInfo() public MachineConfigInfo() 字段 Id 获取或设置机器的唯一标识。 public uint Id 字段值 uint InnerBindIP 获取或设置内部绑定IP地址。 public string InnerBindIP 字段值 string ManagementPort 获取或设置管理端口。 public int ManagementPort 字段值 int OuterBindIP 获取或设置外部绑定IP地址。 public string OuterBindIP 字段值 string OuterIP 获取或设置外部IP地址。 public string OuterIP 字段值 string"
  },
  "reference/Fantasy.MemoryStreamHelper.html": {
    "href": "reference/Fantasy.MemoryStreamHelper.html",
    "title": "MemoryStreamHelper 类 | Fantasy.Net API Reference",
    "keywords": "MemoryStreamHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供获取可回收内存流的帮助方法。 public static class MemoryStreamHelper 继承 object MemoryStreamHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetRecyclableMemoryStream() 获取一个可回收内存流实例。 public static MemoryStream GetRecyclableMemoryStream() 返回 MemoryStream 可回收内存流实例。"
  },
  "reference/Fantasy.Message-1.html": {
    "href": "reference/Fantasy.Message-1.html",
    "title": "Message<T> 类 | Fantasy.Net API Reference",
    "keywords": "Message<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型消息基类，实现了 IMessageHandler 接口。 public abstract class Message<T> : IMessageHandler 类型参数 T 继承 object Message<T> 实现 IMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Message() protected Message() 方法 Handle(Session, uint, uint, object) 处理消息的方法。 public FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 session Session 会话对象。 rpcId uint RPC标识。 messageTypeCode uint 消息类型代码。 message object 要处理的消息。 返回 FTask 异步任务。 Run(Session, T) 运行消息处理逻辑。 protected abstract FTask Run(Session session, T message) 参数 session Session 会话对象。 message T 要处理的消息。 返回 FTask 异步任务。 Type() 获取处理的消息类型。 public Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.MessageCacheInfo.html": {
    "href": "reference/Fantasy.MessageCacheInfo.html",
    "title": "MessageCacheInfo 结构 | Fantasy.Net API Reference",
    "keywords": "MessageCacheInfo 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 消息缓存信息结构。 public struct MessageCacheInfo 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 字段 MemoryStream 获取或设置内存流。 public MemoryStream MemoryStream 字段值 MemoryStream Message 获取或设置消息对象。 public object Message 字段值 object RouteId 获取或设置路由 ID。 public long RouteId 字段值 long RouteTypeOpCode 获取或设置路由类型与操作码。 public long RouteTypeOpCode 字段值 long RpcId 获取或设置 RPC ID。 public uint RpcId 字段值 uint"
  },
  "reference/Fantasy.MessageDispatcherSystem.html": {
    "href": "reference/Fantasy.MessageDispatcherSystem.html",
    "title": "MessageDispatcherSystem 类 | Fantasy.Net API Reference",
    "keywords": "MessageDispatcherSystem 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 消息分发系统，负责管理消息和消息处理器之间的关系。 public sealed class MessageDispatcherSystem : Singleton<MessageDispatcherSystem>, ISingleton, IDisposable 继承 object Singleton<MessageDispatcherSystem> MessageDispatcherSystem 实现 ISingleton IDisposable 继承成员 Singleton<MessageDispatcherSystem>.Initialize() Singleton<MessageDispatcherSystem>.Dispose() Singleton<MessageDispatcherSystem>.IsDisposed Singleton<MessageDispatcherSystem>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MessageDispatcherSystem() public MessageDispatcherSystem() 方法 CreateResponse(IRequest, uint) 根据请求对象和错误码，创建普通响应消息。 public IResponse CreateResponse(IRequest iRequest, uint error) 参数 iRequest IRequest 请求对象 error uint 错误码 返回 IResponse 创建的普通响应消息 CreateResponse(IRouteRequest, uint) 根据路由请求对象和错误码，创建路由响应消息。 public IRouteResponse CreateResponse(IRouteRequest iRouteRequest, uint error) 参数 iRouteRequest IRouteRequest 路由请求对象 error uint 错误码 返回 IRouteResponse 创建的路由响应消息 CreateResponse(Type, uint) 根据请求类型和错误码，创建普通响应消息。 public IResponse CreateResponse(Type requestType, uint error) 参数 requestType Type 请求类型 error uint 错误码 返回 IResponse 创建的普通响应消息 CreateRouteResponse() 创建一个空的路由响应消息。 public IRouteResponse CreateRouteResponse() 返回 IRouteResponse 创建的路由响应消息 FailResponse(Session, IRouteRequest, uint, uint) 处理失败时，向会话发送失败响应消息。 public void FailResponse(Session session, IRouteRequest iRouteRequest, uint error, uint rpcId) 参数 session Session 会话对象 iRouteRequest IRouteRequest 路由请求对象 error uint 错误码 rpcId uint RPC标识 GetOpCode(Type) 根据消息类型获取对应的OpCode。 public uint GetOpCode(Type type) 参数 type Type 消息类型 返回 uint 消息对应的OpCode GetOpCodeType(uint) 根据OpCode获取对应的消息类型。 public Type GetOpCodeType(uint code) 参数 code uint OpCode 返回 Type OpCode对应的消息类型 MessageHandler(Session, Type, object, uint, uint) 处理普通消息，将消息分发给相应的消息处理器。 public void MessageHandler(Session session, Type type, object message, uint rpcId, uint protocolCode) 参数 session Session 会话对象 type Type 消息类型 message object 消息对象 rpcId uint RPC标识 protocolCode uint 协议码 OnLoad(int) 在加载程序集时，用于解析并存储消息处理相关的信息。 protected override void OnLoad(int assemblyName) 参数 assemblyName int 要加载的程序集名称 OnUnLoad(int) 在卸载程序集时，清理相关的消息处理信息。 protected override void OnUnLoad(int assemblyName) 参数 assemblyName int 要卸载的程序集名称 RouteMessageHandler(Session, Type, Entity, object, uint) 处理路由消息，将消息分发给相应的路由消息处理器。 public FTask RouteMessageHandler(Session session, Type type, Entity entity, object message, uint rpcId) 参数 session Session 会话对象 type Type 消息类型 entity Entity 实体对象 message object 消息对象 rpcId uint RPC标识 返回 FTask"
  },
  "reference/Fantasy.MessageHelper.NetworkMessageUpdate.html": {
    "href": "reference/Fantasy.MessageHelper.NetworkMessageUpdate.html",
    "title": "MessageHelper.NetworkMessageUpdate 结构 | Fantasy.Net API Reference",
    "keywords": "MessageHelper.NetworkMessageUpdate 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 定时检查过期的Call消息事件。 public struct MessageHelper.NetworkMessageUpdate 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T)"
  },
  "reference/Fantasy.MessageHelper.html": {
    "href": "reference/Fantasy.MessageHelper.html",
    "title": "MessageHelper 类 | Fantasy.Net API Reference",
    "keywords": "MessageHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 消息辅助类，用于处理网络消息的发送和接收。 public static class MessageHelper 继承 object MessageHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 RequestCallback 存储请求回调的字典。 public static readonly SortedDictionary<uint, MessageSender> RequestCallback 字段值 SortedDictionary<uint, MessageSender> Timeout 超时时间（毫秒）。 public const long Timeout = 40000 字段值 long TimeoutRouteMessageSenders 存储超时路由消息发送者的字典。 public static readonly Dictionary<uint, MessageSender> TimeoutRouteMessageSenders 字段值 Dictionary<uint, MessageSender> 方法 CallAddressable(Scene, long, IRouteMessage) 异步调用可寻址对象，并传递路由消息。 public static FTask<IResponse> CallAddressable(Scene scene, long addressableId, IRouteMessage request) 参数 scene Scene 场景 addressableId long 可寻址对象ID request IRouteMessage 路由消息 返回 FTask<IResponse> 异步任务，返回响应 CallInnerRoute(Scene, long, IRouteMessage) 异步调用内部路由，并传递路由消息。 public static FTask<IResponse> CallInnerRoute(Scene scene, long entityId, IRouteMessage request) 参数 scene Scene 场景 entityId long 实体ID request IRouteMessage 路由消息 返回 FTask<IResponse> 异步任务，返回响应 CallInnerRoute(Scene, long, long, Type, MemoryStream) 异步调用内部路由，并指定路由类型操作码、请求类型和请求数据流。 public static FTask<IResponse> CallInnerRoute(Scene scene, long entityId, long routeTypeOpCode, Type requestType, MemoryStream request) 参数 scene Scene 场景 entityId long 实体ID routeTypeOpCode long 路由类型操作码 requestType Type 请求类型 request MemoryStream 请求数据流 返回 FTask<IResponse> 异步任务，返回响应 CallInnerRoute(Server, long, IRouteMessage) 异步调用内部路由，并传递路由消息。 public static FTask<IResponse> CallInnerRoute(Server server, long entityId, IRouteMessage request) 参数 server Server 内部网络Server，可通过Scene.Server获得 entityId long 实体ID request IRouteMessage 路由消息 返回 FTask<IResponse> CallInnerServer(Scene, uint, IRequest) 异步调用内部服务器路由，并传递请求消息。 public static FTask<IResponse> CallInnerServer(Scene scene, uint targetServerId, IRequest request) 参数 scene Scene 场景 targetServerId uint 目标服务器ID request IRequest 请求消息 返回 FTask<IResponse> 异步任务，返回响应 Link(Entity, int, long) 连接Entity到目标进程、目标进程可以通过EntityType、发送消息给这个Entity public static FTask<bool> Link(Entity entity, int entityType, long addressableId) 参数 entity Entity 要进行连接的Entity entityType int 设置连接的Entity的EntityType addressableId long addressableId 返回 FTask<bool> LinkClient(Session, long) 连接GateSession到目标进程中、连接成功后可以通过SendToClient给客户端发送消息 public static FTask<bool> LinkClient(Session session, long addressableId) 参数 session Session addressableId long 返回 FTask<bool> ResponseHandler(uint, IResponse) 处理响应消息的方法。 public static void ResponseHandler(uint rpcId, IResponse response) 参数 rpcId uint RPC ID response IResponse 响应消息 SendAddressable(Scene, long, IRouteMessage) 将消息发送给可寻址对象，并在协程中执行。 public static void SendAddressable(Scene scene, long addressableId, IRouteMessage message) 参数 scene Scene 场景 addressableId long 可寻址对象ID message IRouteMessage 消息 SendInnerRoute(Scene, ICollection<long>, IRouteMessage) 将消息发送给一组内部路由。 public static void SendInnerRoute(Scene scene, ICollection<long> routeIdCollection, IRouteMessage message) 参数 scene Scene 场景 routeIdCollection ICollection<long> 路由ID集合 message IRouteMessage 消息 SendInnerRoute(Scene, long, IRouteMessage) 将消息发送给内部路由。 public static void SendInnerRoute(Scene scene, long entityId, IRouteMessage message) 参数 scene Scene 场景 entityId long 实体ID message IRouteMessage 消息 SendInnerRoute(Scene, long, long, MemoryStream) 将消息发送给内部路由，并指定路由类型操作码和消息数据流。 public static void SendInnerRoute(Scene scene, long entityId, long routeTypeOpCode, MemoryStream message) 参数 scene Scene 场景 entityId long 实体ID routeTypeOpCode long 路由类型操作码 message MemoryStream 消息数据流 SendInnerServer(Scene, uint, IMessage) 将消息发送给内部服务器。 public static void SendInnerServer(Scene scene, uint routeId, IMessage message) 参数 scene Scene 场景 routeId uint 路由ID message IMessage 消息 SendToClient(Entity, IRouteMessage) 发送消息给客户端、如果是Gate进程请不要使用这个发送、请使用Session.Send发送。 public static void SendToClient(Entity entity, IRouteMessage message) 参数 entity Entity message IRouteMessage"
  },
  "reference/Fantasy.MessageRPC-2.html": {
    "href": "reference/Fantasy.MessageRPC-2.html",
    "title": "MessageRPC<TRequest, TResponse> 类 | Fantasy.Net API Reference",
    "keywords": "MessageRPC<TRequest, TResponse> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型消息RPC基类，实现了 IMessageHandler 接口，用于处理请求和响应类型的消息。 public abstract class MessageRPC<TRequest, TResponse> : IMessageHandler where TRequest : IRequest where TResponse : IResponse 类型参数 TRequest TResponse 继承 object MessageRPC<TRequest, TResponse> 实现 IMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MessageRPC() protected MessageRPC() 方法 Handle(Session, uint, uint, object) 处理消息的方法。 public FTask Handle(Session session, uint rpcId, uint messageTypeCode, object message) 参数 session Session 会话对象。 rpcId uint RPC标识。 messageTypeCode uint 消息类型代码。 message object 要处理的消息。 返回 FTask 异步任务。 Run(Session, TRequest, TResponse, Action) 运行消息处理逻辑。 protected abstract FTask Run(Session session, TRequest request, TResponse response, Action reply) 参数 session Session 会话对象。 request TRequest 请求消息。 response TResponse 响应消息。 reply Action 发送响应的方法。 返回 FTask 异步任务。 Type() 获取处理的消息类型。 public Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.MessageSender.html": {
    "href": "reference/Fantasy.MessageSender.html",
    "title": "MessageSender 类 | Fantasy.Net API Reference",
    "keywords": "MessageSender 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 网络消息发送者的类。 public sealed class MessageSender : IDisposable 继承 object MessageSender 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MessageSender() public MessageSender() 属性 CreateTime 获取或设置创建时间。 public long CreateTime { get; } 属性值 long MessageType 获取或设置消息类型。 public Type MessageType { get; } 属性值 Type Request 获取或设置请求消息。 public IMessage Request { get; } 属性值 IMessage RouteId 获取或设置路由 ID。 public long RouteId { get; } 属性值 long RpcId 获取或设置 RPC ID。 public uint RpcId { get; } 属性值 uint Tcs 获取或设置任务。 public FTask<IResponse> Tcs { get; } 属性值 FTask<IResponse> 方法 Create(uint, IRequest, FTask<IResponse>) 创建一个 MessageSender 实例。 public static MessageSender Create(uint rpcId, IRequest request, FTask<IResponse> tcs) 参数 rpcId uint RPC ID。 request IRequest 请求消息。 tcs FTask<IResponse> 任务。 返回 MessageSender 创建的 MessageSender 实例。 Create(uint, long, IRouteMessage, FTask<IResponse>) 创建一个 MessageSender 实例。 public static MessageSender Create(uint rpcId, long routeId, IRouteMessage request, FTask<IResponse> tcs) 参数 rpcId uint RPC ID。 routeId long 路由 ID。 request IRouteMessage 路由消息请求。 tcs FTask<IResponse> 任务。 返回 MessageSender 创建的 MessageSender 实例。 Create(uint, Type, FTask<IResponse>) 创建一个 MessageSender 实例。 public static MessageSender Create(uint rpcId, Type requestType, FTask<IResponse> tcs) 参数 rpcId uint RPC ID。 requestType Type 请求消息类型。 tcs FTask<IResponse> 任务。 返回 MessageSender 创建的 MessageSender 实例。 Dispose() 释放资源。 public void Dispose()"
  },
  "reference/Fantasy.MongoDataBase.html": {
    "href": "reference/Fantasy.MongoDataBase.html",
    "title": "MongoDataBase 类 | Fantasy.Net API Reference",
    "keywords": "MongoDataBase 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 使用 MongoDB 数据库的实现。 public sealed class MongoDataBase : IDateBase 继承 object MongoDataBase 实现 IDateBase 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MongoDataBase() public MongoDataBase() 方法 Count<T>(Expression<Func<T, bool>>, string) 统计指定集合中满足条件的文档数量。 public FTask<long> Count<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 用于筛选文档的表达式。 collection string 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 FTask<long> 满足条件的文档数量。 类型参数 T 实体类型。 Count<T>(string) 统计指定集合中满足条件的文档数量。 public FTask<long> Count<T>(string collection = null) where T : Entity 参数 collection string 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 FTask<long> 满足条件的文档数量。 类型参数 T 实体类型。 CreateDB(Type) 创建数据库集合（如果不存在）。 public FTask CreateDB(Type type) 参数 type Type 实体类型。 返回 FTask CreateDB<T>() 创建数据库集合（如果不存在）。 public FTask CreateDB<T>() where T : Entity 返回 FTask 类型参数 T 实体类型。 CreateIndex<T>(params object[]) 创建数据库的索引（加锁）。 public FTask CreateIndex<T>(params object[] keys) where T : Entity 参数 keys object[] 索引键定义。 返回 FTask 类型参数 T 实体类型。 CreateIndex<T>(string, params object[]) 创建数据库索引（加锁）。 public FTask CreateIndex<T>(string collection, params object[] keys) where T : Entity 参数 collection string keys object[] 返回 FTask 类型参数 T Exist<T>(Expression<Func<T, bool>>, string) 判断指定集合中是否存在满足条件的文档。 public FTask<bool> Exist<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 用于筛选文档的表达式。 collection string 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 FTask<bool> 如果存在满足条件的文档则返回 true，否则返回 false。 类型参数 T 实体类型。 Exist<T>(string) 判断指定集合中是否存在文档。 public FTask<bool> Exist<T>(string collection = null) where T : Entity 参数 collection string 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 FTask<bool> 如果存在文档则返回 true，否则返回 false。 类型参数 T 实体类型。 First<T>(Expression<Func<T, bool>>, string) 通过指定过滤条件查询并返回满足条件的第一个文档（加锁）。 public FTask<T?> First<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 collection string 集合名称。 返回 FTask<T> 满足条件的第一个文档，如果未找到则为 null。 类型参数 T 文档实体类型。 First<T>(string, string[], string) 通过指定 JSON 格式查询并返回满足条件的第一个文档（加锁）。 public FTask<T> First<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string JSON 查询条件。 cols string[] 要查询的列名称数组。 collection string 集合名称。 返回 FTask<T> 满足条件的第一个文档。 类型参数 T 文档实体类型。 Initialize(string, string) 初始化 MongoDB 数据库连接并记录所有集合名。 public IDateBase Initialize(string connectionString, string dbName) 参数 connectionString string 数据库连接字符串。 dbName string 数据库名称。 返回 IDateBase 初始化后的数据库实例。 InsertBatch<T>(IEnumerable<T>, string) 批量插入实体对象列表到数据库（加锁）。 public FTask InsertBatch<T>(IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 list IEnumerable<T> 要插入的实体对象列表。 collection string 集合名称。 返回 FTask 类型参数 T 实体类型。 InsertBatch<T>(object, IEnumerable<T>, string) 批量插入实体对象列表到数据库（加锁）。 public FTask InsertBatch<T>(object transactionSession, IEnumerable<T> list, string collection = null) where T : Entity, new() 参数 transactionSession object 事务会话对象。 list IEnumerable<T> 要插入的实体对象列表。 collection string 集合名称。 返回 FTask 类型参数 T 实体类型。 Insert<T>(T, string) 插入单个实体对象到数据库（加锁）。 public FTask Insert<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T 要插入的实体对象。 collection string 集合名称。 返回 FTask 类型参数 T 实体类型。 Query(long, List<string>, List<Entity>) 根据指定 ID 加锁查询多个集合中的文档。 public FTask Query(long id, List<string> collectionNames, List<Entity> result) 参数 id long 文档 ID。 collectionNames List<string> 要查询的集合名称列表。 result List<Entity> 查询结果存储列表。 返回 FTask QueryByPageOrderBy<T>(Expression<Func<T, bool>>, int, int, Expression<Func<T, object>>, bool, string) 通过分页查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。 public FTask<List<T>> QueryByPageOrderBy<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 pageIndex int 页码。 pageSize int 每页大小。 orderByExpression Expression<Func<T, object>> 排序表达式。 isAsc bool 是否升序排序。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 QueryByPage<T>(Expression<Func<T, bool>>, int, int, string) 通过分页查询并返回满足条件的文档列表（不加锁）。 public FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 pageIndex int 页码。 pageSize int 每页大小。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 QueryByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 通过分页查询并返回满足条件的文档列表（加锁）。 public FTask<List<T>> QueryByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 pageIndex int 页码。 pageSize int 每页大小。 cols string[] 要查询的列名称数组。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string) 通过分页查询并返回满足条件的文档数量和日期列表（不加锁）。 public FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 pageIndex int 页码。 pageSize int 每页大小。 collection string 集合名称。 返回 FTask<(int count, List<T> dates)> 满足条件的文档数量和日期列表。 类型参数 T 文档实体类型。 QueryCountAndDatesByPage<T>(Expression<Func<T, bool>>, int, int, string[], string) 通过分页查询并返回满足条件的文档数量和日期列表（加锁）。 public FTask<(int count, List<T> dates)> QueryCountAndDatesByPage<T>(Expression<Func<T, bool>> filter, int pageIndex, int pageSize, string[] cols, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 pageIndex int 页码。 pageSize int 每页大小。 cols string[] 要查询的列名称数组。 collection string 集合名称。 返回 FTask<(int count, List<T> dates)> 满足条件的文档数量和日期列表。 类型参数 T 文档实体类型。 QueryJson<T>(long, string, string) 根据指定的 JSON 查询条件和任务 ID 查询并返回满足条件的文档列表（加锁）。 public FTask<List<T>> QueryJson<T>(long taskId, string json, string collection = null) where T : Entity 参数 taskId long 任务 ID。 json string JSON 查询条件。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 QueryJson<T>(string, string) 根据指定的 JSON 查询条件查询并返回满足条件的文档列表（加锁）。 public FTask<List<T>> QueryJson<T>(string json, string collection = null) where T : Entity 参数 json string JSON 查询条件。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 QueryJson<T>(string, string[], string) 根据指定的 JSON 查询条件查询并返回满足条件的文档列表，并选择指定的列（加锁）。 public FTask<List<T>> QueryJson<T>(string json, string[] cols, string collection = null) where T : Entity 参数 json string JSON 查询条件。 cols string[] 要查询的列名称数组。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 QueryNotLock<T>(long, string) 在不加数据库锁定的情况下，查询指定 ID 的文档。 public FTask<T> QueryNotLock<T>(long id, string collection = null) where T : Entity 参数 id long 要查询的文档 ID。 collection string 集合名称。 返回 FTask<T> 查询到的文档。 类型参数 T 文档实体类型。 QueryOrderBy<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, bool, string) 通过指定过滤条件查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。 public FTask<List<T>> QueryOrderBy<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> orderByExpression, bool isAsc = true, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 orderByExpression Expression<Func<T, object>> 排序表达式。 isAsc bool 是否升序排序。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 Query<T>(long, string) 查询指定 ID 的文档，并加数据库锁定以确保数据一致性。 public FTask<T> Query<T>(long id, string collection = null) where T : Entity 参数 id long 要查询的文档 ID。 collection string 集合名称。 返回 FTask<T> 查询到的文档。 类型参数 T 文档实体类型。 Query<T>(Expression<Func<T, bool>>, string) 通过指定过滤条件查询并返回满足条件的文档列表（加锁）。 public FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 查询过滤条件。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 Query<T>(Expression<Func<T, bool>>, string[], string) 根据指定过滤条件查询并返回满足条件的文档列表，选择指定的列（加锁）。 public FTask<List<T>> Query<T>(Expression<Func<T, bool>> filter, string[] cols, string collection = null) where T : class 参数 filter Expression<Func<T, bool>> 查询过滤条件。 cols string[] 要查询的列名称数组。 collection string 集合名称。 返回 FTask<List<T>> 满足条件的文档列表。 类型参数 T 文档实体类型。 Remove<T>(long, Expression<Func<T, bool>>, string) 根据ID和筛选条件删除多个实体对象（加锁）。 public FTask<long> Remove<T>(long id, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long 要删除的实体的ID。 filter Expression<Func<T, bool>> 筛选条件。 collection string 集合名称。 返回 FTask<long> 删除的实体数量。 类型参数 T 实体类型。 Remove<T>(long, object, Expression<Func<T, bool>>, string) 根据ID和筛选条件删除多个实体对象（加锁）。 public FTask<long> Remove<T>(long id, object transactionSession, Expression<Func<T, bool>> filter, string collection = null) where T : Entity, new() 参数 id long 要删除的实体的ID。 transactionSession object 事务会话对象。 filter Expression<Func<T, bool>> 筛选条件。 collection string 集合名称。 返回 FTask<long> 删除的实体数量。 类型参数 T 实体类型。 Remove<T>(long, string) 根据ID删除单个实体对象（加锁）。 public FTask<long> Remove<T>(long id, string collection = null) where T : Entity, new() 参数 id long 要删除的实体的ID。 collection string 集合名称。 返回 FTask<long> 删除的实体数量。 类型参数 T 实体类型。 Remove<T>(object, long, string) 根据ID删除单个实体对象（加锁）。 public FTask<long> Remove<T>(object transactionSession, long id, string collection = null) where T : Entity, new() 参数 transactionSession object 事务会话对象。 id long 要删除的实体的ID。 collection string 集合名称。 返回 FTask<long> 删除的实体数量。 类型参数 T 实体类型。 Save(long, List<Entity>) 保存多个实体对象到数据库（加锁）。 public FTask Save(long id, List<Entity> entities) 参数 id long 文档 ID。 entities List<Entity> 要保存的实体对象列表。 返回 FTask Save<T>(object, T, string) 保存实体对象到数据库（加锁）。 public FTask Save<T>(object transactionSession, T entity, string collection = null) where T : Entity 参数 transactionSession object 事务会话对象。 entity T 要保存的实体对象。 collection string 集合名称。 返回 FTask 类型参数 T 实体类型。 Save<T>(T, string) 保存实体对象到数据库（加锁）。 public FTask Save<T>(T entity, string collection = null) where T : Entity, new() 参数 entity T 要保存的实体对象。 collection string 集合名称。 返回 FTask 类型参数 T 实体类型。 Sum<T>(Expression<Func<T, bool>>, Expression<Func<T, object>>, string) 对满足条件的文档中的某个数值字段进行求和操作。 public FTask<long> Sum<T>(Expression<Func<T, bool>> filter, Expression<Func<T, object>> sumExpression, string collection = null) where T : Entity 参数 filter Expression<Func<T, bool>> 用于筛选文档的表达式。 sumExpression Expression<Func<T, object>> 要对其进行求和的字段表达式。 collection string 集合名称，可选。如果未指定，将使用实体类型的名称。 返回 FTask<long> 满足条件的文档中指定字段的求和结果。 类型参数 T 实体类型。"
  },
  "reference/Fantasy.MongoHelper.html": {
    "href": "reference/Fantasy.MongoHelper.html",
    "title": "MongoHelper 类 | Fantasy.Net API Reference",
    "keywords": "MongoHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供与MongoDB数据序列化和反序列化相关的帮助方法。 public sealed class MongoHelper : Singleton<MongoHelper>, ISingleton, IDisposable 继承 object Singleton<MongoHelper> MongoHelper 实现 ISingleton IDisposable 继承成员 Singleton<MongoHelper>.Initialize() Singleton<MongoHelper>.Dispose() Singleton<MongoHelper>.IsDisposed Singleton<MongoHelper>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 MongoHelper() public MongoHelper() 方法 Clone<T>(T) 克隆一个对象，通过序列化和反序列化的方式实现。 public T Clone<T>(T t) 参数 t T 要克隆的对象。 返回 T 克隆后的对象。 类型参数 T 要克隆的对象类型。 Deserialize(byte[], string) 将字节数组反序列化为指定类型的对象。 public object Deserialize(byte[] bytes, string type) 参数 bytes byte[] 要反序列化的字节数组。 type string 要反序列化的目标类型的类型名字符串。 返回 object 反序列化后的对象。 Deserialize(byte[], Type) 将字节数组反序列化为指定类型的对象。 public object Deserialize(byte[] bytes, Type type) 参数 bytes byte[] 要反序列化的字节数组。 type Type 要反序列化的目标类型。 返回 object 反序列化后的对象。 Deserialize(Stream, Type) 将输入流中的数据反序列化为指定类型的对象。 public object Deserialize(Stream stream, Type type) 参数 stream Stream 输入流。 type Type 要反序列化的目标类型。 返回 object 反序列化后的对象。 Deserialize(Memory<byte>, Type) 将字节数据反序列化为指定类型的对象。 public object Deserialize(Memory<byte> memory, Type type) 参数 memory Memory<byte> 要反序列化的字节数据。 type Type 要反序列化的目标类型。 返回 object 反序列化后的对象。 Deserialize(Span<byte>, Type) 将字节数据反序列化为指定类型的对象。 public object Deserialize(Span<byte> span, Type type) 参数 span Span<byte> 要反序列化的字节数据。 type Type 要反序列化的目标类型。 返回 object 反序列化后的对象。 DeserializeFrom(Type, MemoryStream) 将内存流中的数据反序列化为指定类型的对象。 public object DeserializeFrom(Type type, MemoryStream stream) 参数 type Type 要反序列化的目标类型。 stream MemoryStream 内存流。 返回 object 反序列化后的对象。 DeserializeFrom<T>(byte[], int, int) 将字节数组中指定范围的数据反序列化为指定类型的对象。 public T DeserializeFrom<T>(byte[] bytes, int index, int count) 参数 bytes byte[] 字节数组。 index int 开始索引。 count int 数据长度。 返回 T 反序列化后的对象。 类型参数 T 要反序列化的目标类型。 DeserializeFrom<T>(MemoryStream) 将内存流中的数据反序列化为指定类型的对象。 public T DeserializeFrom<T>(MemoryStream stream) 参数 stream MemoryStream 内存流。 返回 T 反序列化后的对象。 类型参数 T 要反序列化的目标类型。 Deserialize<T>(byte[]) 将字节数组反序列化为指定类型的对象。 public T Deserialize<T>(byte[] bytes) 参数 bytes byte[] 要反序列化的字节数组。 返回 T 反序列化后的对象。 类型参数 T 要反序列化的目标类型。 Deserialize<T>(Stream) 将输入流中的数据反序列化为指定类型的对象。 public T Deserialize<T>(Stream stream) 参数 stream Stream 输入流。 返回 T 反序列化后的对象。 类型参数 T 要反序列化的目标类型。 Deserialize<T>(Memory<byte>) 将字节数据反序列化为指定类型的对象。 public object Deserialize<T>(Memory<byte> memory) 参数 memory Memory<byte> 要反序列化的字节数据。 返回 object 反序列化后的对象。 类型参数 T 要反序列化的目标类型。 Deserialize<T>(Span<byte>) 将字节数据反序列化为指定类型的对象。 public object Deserialize<T>(Span<byte> span) 参数 span Span<byte> 要反序列化的字节数据。 返回 object 反序列化后的对象。 类型参数 T 要反序列化的目标类型。 OnLoad(int) 在装载程序集时执行的方法，用于注册实体类型到BsonClassMap。 protected override void OnLoad(int assemblyName) 参数 assemblyName int 要注册的程序集名称。 SerializeTo<T>(T) 将对象序列化为字节数组。 public byte[] SerializeTo<T>(T t) 参数 t T 要序列化的对象。 返回 byte[] 序列化后的字节数组。 类型参数 T 要序列化的对象类型。 SerializeTo<T>(T, MemoryStream) 将对象序列化并写入到指定的内存流中。 public void SerializeTo<T>(T t, MemoryStream stream) 参数 t T 要序列化的对象。 stream MemoryStream 要写入的内存流。 类型参数 T 要序列化的对象类型。 SerializeTo<T>(T, Memory<byte>) 将对象序列化并写入到内存中。 public void SerializeTo<T>(T t, Memory<byte> memory) 参数 t T 要序列化的对象。 memory Memory<byte> 要写入的内存。 类型参数 T 要序列化的对象类型。"
  },
  "reference/Fantasy.NLog.html": {
    "href": "reference/Fantasy.NLog.html",
    "title": "NLog 类 | Fantasy.Net API Reference",
    "keywords": "NLog 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 使用 NLog 实现的日志记录器。 public class NLog : ILog 继承 object NLog 实现 ILog 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 NLog(string) 初始化 NLog 实例。 public NLog(string name) 参数 name string 日志记录器的名称。 方法 Debug(string) 记录调试级别的日志消息。 public void Debug(string message) 参数 message string 日志消息。 Debug(string, params object[]) 记录调试级别的格式化日志消息。 public void Debug(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Error(string) 记录错误级别的日志消息。 public void Error(string message) 参数 message string 日志消息。 Error(string, params object[]) 记录错误级别的格式化日志消息。 public void Error(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Fatal(string) 记录严重错误级别的日志消息。 public void Fatal(string message) 参数 message string 日志消息。 Fatal(string, params object[]) 记录严重错误级别的格式化日志消息。 public void Fatal(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Info(string) 记录信息级别的日志消息。 public void Info(string message) 参数 message string 日志消息。 Info(string, params object[]) 记录信息级别的格式化日志消息。 public void Info(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Trace(string) 记录跟踪级别的日志消息。 public void Trace(string message) 参数 message string 日志消息。 Trace(string, params object[]) 记录跟踪级别的格式化日志消息。 public void Trace(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。 Warning(string) 记录警告级别的日志消息。 public void Warning(string message) 参数 message string 日志消息。 Warning(string, params object[]) 记录警告级别的格式化日志消息。 public void Warning(string message, params object[] args) 参数 message string 日志消息模板。 args object[] 格式化参数。"
  },
  "reference/Fantasy.NetAction.html": {
    "href": "reference/Fantasy.NetAction.html",
    "title": "NetAction 结构 | Fantasy.Net API Reference",
    "keywords": "NetAction 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个网络操作，可以是发送消息、移除通道等操作。 public struct NetAction : IDisposable 实现 IDisposable 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 NetAction(long, uint, uint, long, long, NetActionType, MemoryStream) 初始化一个新的 NetAction 结构体实例，用于发送内存流。 public NetAction(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long entityId, NetActionType netActionType, MemoryStream memoryStream) 参数 networkId long 关联的网络 ID。 channelId uint 关联的通道 ID。 rpcId uint 要发送的 RPC ID。 routeTypeOpCode long 关联的路由类型 Op Code。 entityId long 关联的实体 ID。 netActionType NetActionType 网络操作的类型。 memoryStream MemoryStream 要发送的内存流。 NetAction(long, uint, uint, long, long, NetActionType, object) 初始化一个新的 NetAction 结构体实例，用于发送对象。 public NetAction(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long entityId, NetActionType netActionType, object obj) 参数 networkId long 关联的网络 ID。 channelId uint 关联的通道 ID。 rpcId uint 要发送的 RPC ID。 routeTypeOpCode long 关联的路由类型 Op Code。 entityId long 关联的实体 ID。 netActionType NetActionType 网络操作的类型。 obj object 要发送的对象。 字段 ChannelId 关联的通道 ID。 public uint ChannelId 字段值 uint EntityId 关联的实体 ID。 public long EntityId 字段值 long MemoryStream 用于发送的内存流。 public MemoryStream MemoryStream 字段值 MemoryStream NetActionType 网络操作的类型。 public NetActionType NetActionType 字段值 NetActionType NetworkId 关联的网络 ID。 public long NetworkId 字段值 long Obj 用于发送的对象，可能是消息对象或其他数据。 public object Obj 字段值 object RouteTypeOpCode 关联的路由类型 Op Code。 public long RouteTypeOpCode 字段值 long RpcId 要发送的 RPC ID。 public uint RpcId 字段值 uint 方法 Dispose() 释放资源并清理当前实例的状态。 public void Dispose()"
  },
  "reference/Fantasy.NetActionType.html": {
    "href": "reference/Fantasy.NetActionType.html",
    "title": "NetActionType 枚举 | Fantasy.Net API Reference",
    "keywords": "NetActionType 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 不同类型的网络操作。 public enum NetActionType 扩展方法 JsonHelper.ToJson<T>(T) 字段 None = 0 无操作。 RemoveChannel = 3 移除通道。 Send = 1 发送数据。 SendMemoryStream = 2 发送内存流数据。"
  },
  "reference/Fantasy.NetworkHelper.html": {
    "href": "reference/Fantasy.NetworkHelper.html",
    "title": "NetworkHelper 类 | Fantasy.Net API Reference",
    "keywords": "NetworkHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供网络操作相关的帮助方法。 public static class NetworkHelper 继承 object NetworkHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 GetAddressIPs() 获取本机所有网络适配器的IP地址。 public static string[] GetAddressIPs() 返回 string[] IP地址数组。 IPEndPointToStr(IPEndPoint) 将 IPEndPoint 实例转换为字符串表示形式。 public static string IPEndPointToStr(this IPEndPoint self) 参数 self IPEndPoint IPEndPoint 实例。 返回 string 表示 IPEndPoint 的字符串。 SetSioUdpConnReset(Socket) 针对 Windows 平台设置UDP连接重置选项。 public static void SetSioUdpConnReset(Socket socket) 参数 socket Socket 要设置选项的 Socket 实例。 ToIPEndPoint(string) 将地址字符串转换为 IPEndPoint 实例。 public static IPEndPoint ToIPEndPoint(string address) 参数 address string 地址字符串，格式为 \"主机名:端口号\"。 返回 IPEndPoint IPEndPoint 实例。 ToIPEndPoint(string, int) 将主机名和端口号转换为 IPEndPoint 实例。 public static IPEndPoint ToIPEndPoint(string host, int port) 参数 host string 主机名。 port int 端口号。 返回 IPEndPoint IPEndPoint 实例。"
  },
  "reference/Fantasy.NetworkProtocolType.html": {
    "href": "reference/Fantasy.NetworkProtocolType.html",
    "title": "NetworkProtocolType 枚举 | Fantasy.Net API Reference",
    "keywords": "NetworkProtocolType 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示网络通信协议类型的枚举。 public enum NetworkProtocolType 扩展方法 JsonHelper.ToJson<T>(T) 字段 KCP = 1 使用KCP（KCP协议）进行通信。 None = 0 未指定协议类型。 TCP = 2 使用TCP（传输控制协议）进行通信。"
  },
  "reference/Fantasy.NetworkTarget.html": {
    "href": "reference/Fantasy.NetworkTarget.html",
    "title": "NetworkTarget 枚举 | Fantasy.Net API Reference",
    "keywords": "NetworkTarget 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示网络通信的目标类型的枚举。 public enum NetworkTarget 扩展方法 JsonHelper.ToJson<T>(T) 字段 Inner = 2 表示内部网络通信目标。 None = 0 未指定网络通信目标。 Outer = 1 表示外部网络通信目标。"
  },
  "reference/Fantasy.NetworkThread.html": {
    "href": "reference/Fantasy.NetworkThread.html",
    "title": "NetworkThread 类 | Fantasy.Net API Reference",
    "keywords": "NetworkThread 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 网络线程管理器的单例类。负责处理网络相关操作、通信以及线程管理。 public sealed class NetworkThread : Singleton<NetworkThread>, ISingleton, IDisposable 继承 object Singleton<NetworkThread> NetworkThread 实现 ISingleton IDisposable 继承成员 Singleton<NetworkThread>.IsDisposed Singleton<NetworkThread>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 NetworkThread() public NetworkThread() 字段 SynchronizationContext 线程同步上下文对象，用于在多线程环境中进行线程间的同步和通信。 在网络线程中，通过设置和使用该上下文对象，可以实现线程安全的操作和数据传递。 public ThreadSynchronizationContext SynchronizationContext 字段值 ThreadSynchronizationContext 属性 ManagedThreadId 获取当前逻辑线程的线程 ID。 public int ManagedThreadId { get; } 属性值 int 方法 AddNetwork(ANetwork) 添加网络对象到网络线程管理。 public void AddNetwork(ANetwork aNetwork) 参数 aNetwork ANetwork 要添加的网络对象。 Dispose() 释放对象所占用的资源，并执行必要的清理操作。 public override void Dispose() Initialize() 初始化网络线程管理器，创建逻辑线程并启动。 public override Task Initialize() 返回 Task RemoveChannel(long, uint) 移除指定网络通道。 public void RemoveChannel(long networkId, uint channelId) 参数 networkId long 网络通道的 ID。 channelId uint 通道 ID。 RemoveNetwork(long) 从网络线程管理中移除网络对象。 public void RemoveNetwork(long networkId) 参数 networkId long 要移除的网络对象的 ID。 Send(long, uint, uint, long, long, object) 向指定的网络通道发送消息。 public void Send(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long entityId, object message) 参数 networkId long 网络通道的 ID。 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型操作码。 entityId long 实体 ID。 message object 要发送的消息对象。 SendStream(long, uint, uint, long, long, MemoryStream) 向指定的网络通道发送内存流。 public void SendStream(long networkId, uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 networkId long 网络通道的 ID。 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型操作码。 routeId long 路由 ID。 memoryStream MemoryStream 要发送的内存流。"
  },
  "reference/Fantasy.NetworkType.html": {
    "href": "reference/Fantasy.NetworkType.html",
    "title": "NetworkType 枚举 | Fantasy.Net API Reference",
    "keywords": "NetworkType 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示网络类型的枚举。 public enum NetworkType 扩展方法 JsonHelper.ToJson<T>(T) 字段 Client = 1 表示客户端网络类型。 None = 0 未指定网络类型。 Server = 2 表示服务器网络类型。"
  },
  "reference/Fantasy.OnCoroutineLockTimeout.html": {
    "href": "reference/Fantasy.OnCoroutineLockTimeout.html",
    "title": "OnCoroutineLockTimeout 类 | Fantasy.Net API Reference",
    "keywords": "OnCoroutineLockTimeout 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 协程锁超时时的事件处理类，继承自 EventSystem<CoroutineLockTimeout> public sealed class OnCoroutineLockTimeout : EventSystem<CoroutineLockTimeout>, IEvent 继承 object EventSystem<CoroutineLockTimeout> OnCoroutineLockTimeout 实现 IEvent 继承成员 EventSystem<CoroutineLockTimeout>.EventType() EventSystem<CoroutineLockTimeout>.Invoke(object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OnCoroutineLockTimeout() public OnCoroutineLockTimeout() 方法 Handler(CoroutineLockTimeout) 处理协程锁超时时的逻辑 public override void Handler(CoroutineLockTimeout self) 参数 self CoroutineLockTimeout 协程锁超时的信息"
  },
  "reference/Fantasy.OnCreateScene.html": {
    "href": "reference/Fantasy.OnCreateScene.html",
    "title": "OnCreateScene 结构 | Fantasy.Net API Reference",
    "keywords": "OnCreateScene 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示当创建新场景时引发的事件数据结构。 public struct OnCreateScene 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OnCreateScene(Scene) 初始化一个新的 OnCreateScene 实例。 public OnCreateScene(Scene scene) 参数 scene Scene 与事件关联的场景实体。 字段 Scene 获取与事件关联的场景实体。 public readonly Scene Scene 字段值 Scene"
  },
  "reference/Fantasy.OnNetworkMessageUpdateCheckTimeout.html": {
    "href": "reference/Fantasy.OnNetworkMessageUpdateCheckTimeout.html",
    "title": "OnNetworkMessageUpdateCheckTimeout 类 | Fantasy.Net API Reference",
    "keywords": "OnNetworkMessageUpdateCheckTimeout 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 定时处理网络消息超时的任务。 public sealed class OnNetworkMessageUpdateCheckTimeout : TimerHandler<MessageHelper.NetworkMessageUpdate>, IEvent 继承 object EventSystem<MessageHelper.NetworkMessageUpdate> TimerHandler<MessageHelper.NetworkMessageUpdate> OnNetworkMessageUpdateCheckTimeout 实现 IEvent 继承成员 EventSystem<MessageHelper.NetworkMessageUpdate>.EventType() EventSystem<MessageHelper.NetworkMessageUpdate>.Invoke(object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OnNetworkMessageUpdateCheckTimeout() public OnNetworkMessageUpdateCheckTimeout() 方法 Handler(NetworkMessageUpdate) 处理网络消息超时的逻辑。 public override void Handler(MessageHelper.NetworkMessageUpdate self) 参数 self MessageHelper.NetworkMessageUpdate 计时器回调参数，不会被使用。"
  },
  "reference/Fantasy.OnServerStartComplete.html": {
    "href": "reference/Fantasy.OnServerStartComplete.html",
    "title": "OnServerStartComplete 结构 | Fantasy.Net API Reference",
    "keywords": "OnServerStartComplete 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 当Server启动完成时触发。 public struct OnServerStartComplete 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OnServerStartComplete(Server) 初始化一个新的 OnServerStartComplete 实例。 public OnServerStartComplete(Server server) 参数 server Server 字段 Server 获取启动完成的服务器。 public readonly Server Server 字段值 Server"
  },
  "reference/Fantasy.OneToManyDictionary-3.html": {
    "href": "reference/Fantasy.OneToManyDictionary-3.html",
    "title": "OneToManyDictionary<TKey, TValueKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyDictionary<TKey, TValueKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多映射关系的字典。每个键都对应一个内部字典，该内部字典将键值映射到相应的值。 public class OneToManyDictionary<TKey, TValueKey, TValue> : Dictionary<TKey, Dictionary<TValueKey, TValue>>, IDictionary<TKey, Dictionary<TValueKey, TValue>>, ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull where TValueKey : notnull 类型参数 TKey 外部字典中的键类型。 TValueKey 内部字典中的键类型。 TValue 内部字典中的值类型。 继承 object Dictionary<TKey, Dictionary<TValueKey, TValue>> OneToManyDictionary<TKey, TValueKey, TValue> 实现 IDictionary<TKey, Dictionary<TValueKey, TValue>> ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyDictionaryPool<TKey, TValueKey, TValue> 继承成员 Dictionary<TKey, Dictionary<TValueKey, TValue>>.Add(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsValue(Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetEnumerator() Dictionary<TKey, Dictionary<TValueKey, TValue>>.OnDeserialization(object) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryGetValue(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryAdd(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess() Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Comparer Dictionary<TKey, Dictionary<TValueKey, TValue>>.Count Dictionary<TKey, Dictionary<TValueKey, TValue>>.Keys Dictionary<TKey, Dictionary<TValueKey, TValue>>.Values Dictionary<TKey, Dictionary<TValueKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyDictionary() 创建一个新的 OneToManyDictionary<TKey, TValueKey, TValue> 实例。 public OneToManyDictionary() OneToManyDictionary(int) 创建一个新的 OneToManyDictionary<TKey, TValueKey, TValue> 实例，并指定最大缓存数量。 public OneToManyDictionary(int recyclingLimit = 0) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValueKey, TValue) 向字典中添加指定的键值对。 public void Add(TKey key, TValueKey valueKey, TValue value) 参数 key TKey 要添加键值对的键。 valueKey TValueKey 要添加键值对的内部字典键。 value TValue 要添加的值。 Clear() 清空字典中的所有键值对，并将不再使用的内部字典实例放回对象池中。 public void Clear() Contains(TKey, TValueKey) 检查是否包含指定的键值对。 public bool Contains(TKey key, TValueKey valueKey) 参数 key TKey 外部字典中的键。 valueKey TValueKey 内部字典中的键。 返回 bool 如果包含指定的键值对，则为 true；否则为 false。 First(TKey) 获取指定键的第一个值。 public TValue First(TKey key) 参数 key TKey 要获取第一个值的键。 返回 TValue Remove(TKey, TValueKey) 从字典中移除指定的键值对。 public bool Remove(TKey key, TValueKey valueKey) 参数 key TKey 要移除键值对的键。 valueKey TValueKey 要移除键值对的内部字典键。 返回 bool 如果成功移除键值对，则为 true；否则为 false。 Remove(TKey, TValueKey, out TValue) 从字典中移除指定的键值对。 public bool Remove(TKey key, TValueKey valueKey, out TValue value) 参数 key TKey 要移除键值对的键。 valueKey TValueKey 要移除键值对的内部字典键。 value TValue 如果成功移除键值对，则为移除的值；否则为默认值。 返回 bool 如果成功移除键值对，则为 true；否则为 false。 RemoveKey(TKey) 移除字典中的指定键及其相关的所有键值对。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 TryGetValue(TKey, TValueKey, out TValue) 尝试获取指定键值对的值。 public bool TryGetValue(TKey key, TValueKey valueKey, out TValue value) 参数 key TKey 外部字典中的键。 valueKey TValueKey 内部字典中的键。 value TValue 获取的值，如果操作成功，则为值；否则为默认值。 返回 bool 如果操作成功，则为 true；否则为 false。"
  },
  "reference/Fantasy.OneToManyDictionaryPool-3.html": {
    "href": "reference/Fantasy.OneToManyDictionaryPool-3.html",
    "title": "OneToManyDictionaryPool<TKey, TValueKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyDictionaryPool<TKey, TValueKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多映射关系的字典对象池。 public class OneToManyDictionaryPool<TKey, TValueKey, TValue> : OneToManyDictionary<TKey, TValueKey, TValue>, IDictionary<TKey, Dictionary<TValueKey, TValue>>, ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull where TValueKey : notnull 类型参数 TKey 外部字典中的键类型。 TValueKey 内部字典中的键类型。 TValue 内部字典中的值类型。 继承 object Dictionary<TKey, Dictionary<TValueKey, TValue>> OneToManyDictionary<TKey, TValueKey, TValue> OneToManyDictionaryPool<TKey, TValueKey, TValue> 实现 IDictionary<TKey, Dictionary<TValueKey, TValue>> ICollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Dictionary<TValueKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable<KeyValuePair<TKey, Dictionary<TValueKey, TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyDictionary<TKey, TValueKey, TValue>.Contains(TKey, TValueKey) OneToManyDictionary<TKey, TValueKey, TValue>.TryGetValue(TKey, TValueKey, out TValue) OneToManyDictionary<TKey, TValueKey, TValue>.First(TKey) OneToManyDictionary<TKey, TValueKey, TValue>.Add(TKey, TValueKey, TValue) OneToManyDictionary<TKey, TValueKey, TValue>.Remove(TKey, TValueKey) OneToManyDictionary<TKey, TValueKey, TValue>.Remove(TKey, TValueKey, out TValue) OneToManyDictionary<TKey, TValueKey, TValue>.RemoveKey(TKey) OneToManyDictionary<TKey, TValueKey, TValue>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.Add(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Clear() Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.ContainsValue(Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.GetEnumerator() Dictionary<TKey, Dictionary<TValueKey, TValue>>.OnDeserialization(object) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Remove(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryGetValue(TKey, out Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TryAdd(TKey, Dictionary<TValueKey, TValue>) Dictionary<TKey, Dictionary<TValueKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess() Dictionary<TKey, Dictionary<TValueKey, TValue>>.TrimExcess(int) Dictionary<TKey, Dictionary<TValueKey, TValue>>.Comparer Dictionary<TKey, Dictionary<TValueKey, TValue>>.Count Dictionary<TKey, Dictionary<TValueKey, TValue>>.Keys Dictionary<TKey, Dictionary<TValueKey, TValue>>.Values Dictionary<TKey, Dictionary<TValueKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyDictionaryPool() public OneToManyDictionaryPool() 方法 Create() 创建一个 OneToManyDictionaryPool<TKey, TValueKey, TValue> 的实例。 public static OneToManyDictionaryPool<TKey, TValueKey, TValue> Create() 返回 OneToManyDictionaryPool<TKey, TValueKey, TValue> 新创建的 OneToManyDictionaryPool 实例。 Dispose() 释放当前实例及其资源。 public void Dispose()"
  },
  "reference/Fantasy.OneToManyHashSet-2.html": {
    "href": "reference/Fantasy.OneToManyHashSet-2.html",
    "title": "OneToManyHashSet<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyHashSet<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多哈希集合（OneToManyHashSet），用于创建和管理键对应多个值的集合。 public class OneToManyHashSet<TKey, TValue> : Dictionary<TKey, HashSet<TValue>>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object Dictionary<TKey, HashSet<TValue>> OneToManyHashSet<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyHashSetPool<TKey, TValue> 继承成员 Dictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Clear() Dictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) Dictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.GetEnumerator() Dictionary<TKey, HashSet<TValue>>.OnDeserialization(object) Dictionary<TKey, HashSet<TValue>>.Remove(TKey) Dictionary<TKey, HashSet<TValue>>.Remove(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryAdd(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.EnsureCapacity(int) Dictionary<TKey, HashSet<TValue>>.TrimExcess() Dictionary<TKey, HashSet<TValue>>.TrimExcess(int) Dictionary<TKey, HashSet<TValue>>.Comparer Dictionary<TKey, HashSet<TValue>>.Count Dictionary<TKey, HashSet<TValue>>.Keys Dictionary<TKey, HashSet<TValue>>.Values Dictionary<TKey, HashSet<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyHashSet() 初始化 OneToManyHashSet<TKey, TValue> 类的新实例。 public OneToManyHashSet() OneToManyHashSet(int) 设置最大缓存数量 public OneToManyHashSet(int recyclingLimit) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValue) 添加指定的键值对到集合中。 public void Add(TKey key, TValue value) 参数 key TKey 键。 value TValue 值。 Clear() 清空集合中的数据并和队列。 protected void Clear() Contains(TKey, TValue) 判断指定的键值对是否存在于集合中。 public bool Contains(TKey key, TValue value) 参数 key TKey 键。 value TValue 值。 返回 bool 如果存在则为 true，否则为 false。 GetValue(TKey) 获取指定键对应的值集合，如果不存在则返回一个空的哈希集合。 public HashSet<TValue> GetValue(TKey key) 参数 key TKey 键。 返回 HashSet<TValue> 对应的值集合或空的哈希集合。 RemoveKey(TKey) 从集合中移除指定键及其对应的值集合。 public void RemoveKey(TKey key) 参数 key TKey 键。 RemoveValue(TKey, TValue) 从集合中移除指定键对应的值。 public void RemoveValue(TKey key, TValue value) 参数 key TKey 键。 value TValue 要移除的值。"
  },
  "reference/Fantasy.OneToManyHashSetPool-2.html": {
    "href": "reference/Fantasy.OneToManyHashSetPool-2.html",
    "title": "OneToManyHashSetPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyHashSetPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多哈希集合（OneToManyHashSet）对象池。 public class OneToManyHashSetPool<TKey, TValue> : OneToManyHashSet<TKey, TValue>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object Dictionary<TKey, HashSet<TValue>> OneToManyHashSet<TKey, TValue> OneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyHashSet<TKey, TValue>.Contains(TKey, TValue) OneToManyHashSet<TKey, TValue>.Add(TKey, TValue) OneToManyHashSet<TKey, TValue>.RemoveValue(TKey, TValue) OneToManyHashSet<TKey, TValue>.RemoveKey(TKey) OneToManyHashSet<TKey, TValue>.GetValue(TKey) OneToManyHashSet<TKey, TValue>.Clear() Dictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.Clear() Dictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) Dictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.GetEnumerator() Dictionary<TKey, HashSet<TValue>>.OnDeserialization(object) Dictionary<TKey, HashSet<TValue>>.Remove(TKey) Dictionary<TKey, HashSet<TValue>>.Remove(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.TryAdd(TKey, HashSet<TValue>) Dictionary<TKey, HashSet<TValue>>.EnsureCapacity(int) Dictionary<TKey, HashSet<TValue>>.TrimExcess() Dictionary<TKey, HashSet<TValue>>.TrimExcess(int) Dictionary<TKey, HashSet<TValue>>.Comparer Dictionary<TKey, HashSet<TValue>>.Count Dictionary<TKey, HashSet<TValue>>.Keys Dictionary<TKey, HashSet<TValue>>.Values Dictionary<TKey, HashSet<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyHashSetPool() public OneToManyHashSetPool() 方法 Create() 创建一个 OneToManyHashSetPool<TKey, TValue> 一对多哈希集合（OneToManyHashSet）对象池的实例。 public static OneToManyHashSetPool<TKey, TValue> Create() 返回 OneToManyHashSetPool<TKey, TValue> 创建的实例。 Dispose() 释放实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.OneToManyList-2.html": {
    "href": "reference/Fantasy.OneToManyList-2.html",
    "title": "OneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyList<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多关系的列表字典。 public class OneToManyList<TKey, TValue> : Dictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object Dictionary<TKey, List<TValue>> OneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyListPool<TKey, TValue> 继承成员 Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values Dictionary<TKey, List<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyList() 初始化一个新的 OneToManyList<TKey, TValue> 实例。 public OneToManyList() OneToManyList(int) 设置最大缓存数量 public OneToManyList(int recyclingLimit) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValue) 向列表中添加指定键和值。 public void Add(TKey key, TValue value) 参数 key TKey 要添加值的键。 value TValue 要添加的值。 Clear() 清除字典中的所有键值对，并回收相关的值集合。 public void Clear() Contains(TKey, TValue) 判断给定的键和值是否存在于列表中。 public bool Contains(TKey key, TValue value) 参数 key TKey 要搜索的键。 value TValue 要搜索的值。 返回 bool 如果存在则为 true，否则为 false。 First(TKey) 获取指定键对应的列表中的第一个值。 public TValue First(TKey key) 参数 key TKey 要获取值的键。 返回 TValue 键对应的列表中的第一个值。 GetValues(TKey) 获取指定键关联的所有值的列表。 public List<TValue> GetValues(TKey key) 参数 key TKey 要获取值的键。 返回 List<TValue> 键关联的所有值的列表。 RemoveByKey(TKey) 从列表中移除指定键及其关联的所有值。 public bool RemoveByKey(TKey key) 参数 key TKey 要移除的键。 返回 bool 如果成功移除则为 true，否则为 false。 RemoveValue(TKey, TValue) 从列表中移除指定键和值。 public bool RemoveValue(TKey key, TValue value) 参数 key TKey 要移除值的键。 value TValue 要移除的值。 返回 bool 如果成功移除则为 true，否则为 false。"
  },
  "reference/Fantasy.OneToManyListPool-2.html": {
    "href": "reference/Fantasy.OneToManyListPool-2.html",
    "title": "OneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyListPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可回收的、一对多关系的列表池。 public class OneToManyListPool<TKey, TValue> : OneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object Dictionary<TKey, List<TValue>> OneToManyList<TKey, TValue> OneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyList<TKey, TValue>.Contains(TKey, TValue) OneToManyList<TKey, TValue>.Add(TKey, TValue) OneToManyList<TKey, TValue>.First(TKey) OneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) OneToManyList<TKey, TValue>.RemoveByKey(TKey) OneToManyList<TKey, TValue>.GetValues(TKey) OneToManyList<TKey, TValue>.Clear() Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values Dictionary<TKey, List<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyListPool() public OneToManyListPool() 方法 Create() 创建一个 OneToManyListPool<TKey, TValue> 一对多关系的列表池的实例。 public static OneToManyListPool<TKey, TValue> Create() 返回 OneToManyListPool<TKey, TValue> 创建的实例。 Dispose() 释放当前对象所占用的资源，并将对象回收到对象池中。 public void Dispose()"
  },
  "reference/Fantasy.OneToManyQueue-2.html": {
    "href": "reference/Fantasy.OneToManyQueue-2.html",
    "title": "OneToManyQueue<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyQueue<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 支持一对多关系的队列，用于存储具有相同键的值的队列集合。 public class OneToManyQueue<TKey, TValue> : Dictionary<TKey, Queue<TValue>>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object Dictionary<TKey, Queue<TValue>> OneToManyQueue<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManyQueuePool<TKey, TValue> 继承成员 Dictionary<TKey, Queue<TValue>>.Add(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Clear() Dictionary<TKey, Queue<TValue>>.ContainsKey(TKey) Dictionary<TKey, Queue<TValue>>.ContainsValue(Queue<TValue>) Dictionary<TKey, Queue<TValue>>.GetEnumerator() Dictionary<TKey, Queue<TValue>>.OnDeserialization(object) Dictionary<TKey, Queue<TValue>>.Remove(TKey) Dictionary<TKey, Queue<TValue>>.Remove(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.EnsureCapacity(int) Dictionary<TKey, Queue<TValue>>.TrimExcess() Dictionary<TKey, Queue<TValue>>.TrimExcess(int) Dictionary<TKey, Queue<TValue>>.Comparer Dictionary<TKey, Queue<TValue>>.Count Dictionary<TKey, Queue<TValue>>.Keys Dictionary<TKey, Queue<TValue>>.Values Dictionary<TKey, Queue<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyQueue(int) 创建一个 OneToManyQueue<TKey, TValue> 一对多关系的队列的实例。设置最大缓存数量 public OneToManyQueue(int recyclingLimit = 0) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Clear() 清空当前实例的数据，同时回收所有值队列。 protected void Clear() Contains(TKey, TValue) 判断指定键的值队列是否包含指定的值。 public bool Contains(TKey key, TValue value) 参数 key TKey 要查找的键。 value TValue 要查找的值。 返回 bool 如果存在，则为 true；否则为 false。 Dequeue(TKey) 从指定键的值队列中出队一个值。 public TValue Dequeue(TKey key) 参数 key TKey 要出队的键。 返回 TValue 出队的值。 Enqueue(TKey, TValue) 将指定的值添加到指定键的值队列中。 public void Enqueue(TKey key, TValue value) 参数 key TKey 要添加值的键。 value TValue 要添加的值。 RemoveKey(TKey) 从字典中移除指定键及其对应的值队列。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 TryDequeue(TKey, out TValue) 尝试从指定键的值队列中出队一个值。 public bool TryDequeue(TKey key, out TValue value) 参数 key TKey 要出队的键。 value TValue 出队的值。 返回 bool 如果成功出队，则为 true；否则为 false。"
  },
  "reference/Fantasy.OneToManyQueuePool-2.html": {
    "href": "reference/Fantasy.OneToManyQueuePool-2.html",
    "title": "OneToManyQueuePool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManyQueuePool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 支持一对多关系的队列池，用于存储具有相同键的值的队列集合。 public class OneToManyQueuePool<TKey, TValue> : OneToManyQueue<TKey, TValue>, IDictionary<TKey, Queue<TValue>>, ICollection<KeyValuePair<TKey, Queue<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, Queue<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable<KeyValuePair<TKey, Queue<TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object Dictionary<TKey, Queue<TValue>> OneToManyQueue<TKey, TValue> OneToManyQueuePool<TKey, TValue> 实现 IDictionary<TKey, Queue<TValue>> ICollection<KeyValuePair<TKey, Queue<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, Queue<TValue>> IReadOnlyCollection<KeyValuePair<TKey, Queue<TValue>>> IEnumerable<KeyValuePair<TKey, Queue<TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManyQueue<TKey, TValue>.Contains(TKey, TValue) OneToManyQueue<TKey, TValue>.Enqueue(TKey, TValue) OneToManyQueue<TKey, TValue>.Dequeue(TKey) OneToManyQueue<TKey, TValue>.TryDequeue(TKey, out TValue) OneToManyQueue<TKey, TValue>.RemoveKey(TKey) OneToManyQueue<TKey, TValue>.Clear() Dictionary<TKey, Queue<TValue>>.Add(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.Clear() Dictionary<TKey, Queue<TValue>>.ContainsKey(TKey) Dictionary<TKey, Queue<TValue>>.ContainsValue(Queue<TValue>) Dictionary<TKey, Queue<TValue>>.GetEnumerator() Dictionary<TKey, Queue<TValue>>.OnDeserialization(object) Dictionary<TKey, Queue<TValue>>.Remove(TKey) Dictionary<TKey, Queue<TValue>>.Remove(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryGetValue(TKey, out Queue<TValue>) Dictionary<TKey, Queue<TValue>>.TryAdd(TKey, Queue<TValue>) Dictionary<TKey, Queue<TValue>>.EnsureCapacity(int) Dictionary<TKey, Queue<TValue>>.TrimExcess() Dictionary<TKey, Queue<TValue>>.TrimExcess(int) Dictionary<TKey, Queue<TValue>>.Comparer Dictionary<TKey, Queue<TValue>>.Count Dictionary<TKey, Queue<TValue>>.Keys Dictionary<TKey, Queue<TValue>>.Values Dictionary<TKey, Queue<TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManyQueuePool() public OneToManyQueuePool() 方法 Create() 创建一个 OneToManyQueuePool<TKey, TValue> 一对多关系的队列池的实例。 public static OneToManyQueuePool<TKey, TValue> Create() 返回 OneToManyQueuePool<TKey, TValue> 创建的实例。 Dispose() 释放当前实例所占用的资源，并将实例回收到对象池中。 public void Dispose()"
  },
  "reference/Fantasy.OneToManySortedDictionary-3.html": {
    "href": "reference/Fantasy.OneToManySortedDictionary-3.html",
    "title": "OneToManySortedDictionary<TKey, TSortedKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManySortedDictionary<TKey, TSortedKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多映射关系的排序字典。每个外部键映射到一个内部排序字典，该内部排序字典将排序键映射到相应的值。 public class OneToManySortedDictionary<TKey, TSortedKey, TValue> : Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback where TKey : notnull where TSortedKey : notnull 类型参数 TKey 外部字典中的键类型。 TSortedKey 内部字典中的排序键类型。 TValue 内部字典中的值类型。 继承 object Dictionary<TKey, SortedDictionary<TSortedKey, TValue>> OneToManySortedDictionary<TKey, TSortedKey, TValue> 实现 IDictionary<TKey, SortedDictionary<TSortedKey, TValue>> ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable ISerializable IDeserializationCallback Derived OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 继承成员 Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Add(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsValue(SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetEnumerator() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.OnDeserialization(object) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryAdd(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Comparer Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Count Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Keys Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Values Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManySortedDictionary() 创建一个新的 OneToManySortedDictionary<TKey, TSortedKey, TValue> 实例。 protected OneToManySortedDictionary() OneToManySortedDictionary(int) 创建一个新的 OneToManySortedDictionary<TKey, TSortedKey, TValue> 实例。设置最大缓存数量 public OneToManySortedDictionary(int recyclingLimit) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TSortedKey, TValue) 向字典中添加一个值，关联到指定的外部键和排序键。 public void Add(TKey key, TSortedKey sortedKey, TValue value) 参数 key TKey 要关联值的外部键。 sortedKey TSortedKey 要关联值的排序键。 value TValue 要添加的值。 Clear() 清空字典以及内部排序字典缓存队列，释放所有资源。 protected void Clear() Contains(TKey) 检查字典是否包含指定的外部键。 public bool Contains(TKey key) 参数 key TKey 要检查的外部键。 返回 bool 如果字典包含指定的外部键，则为 true；否则为 false。 Contains(TKey, TSortedKey) 检查字典是否包含指定的外部键和排序键。 public bool Contains(TKey key, TSortedKey sortedKey) 参数 key TKey 要检查的外部键。 sortedKey TSortedKey 要检查的排序键。 返回 bool 如果字典包含指定的外部键和排序键，则为 true；否则为 false。 RemoveKey(TKey) 从字典中移除指定外部键及其关联的所有值。 public bool RemoveKey(TKey key) 参数 key TKey 要移除的外部键。 返回 bool 如果成功移除外部键及其关联的所有值，则为 true；否则为 false。 RemoveSortedKey(TKey, TSortedKey) 从字典中移除指定外部键和排序键关联的值。 public bool RemoveSortedKey(TKey key, TSortedKey sortedKey) 参数 key TKey 要移除值的外部键。 sortedKey TSortedKey 要移除值的排序键。 返回 bool 如果成功移除值，则为 true；否则为 false。 TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) 尝试从字典中获取指定外部键对应的内部排序字典。 public bool TryGetValue(TKey key, out SortedDictionary<TSortedKey, TValue> dic) 参数 key TKey 要获取内部排序字典的外部键。 dic SortedDictionary<TSortedKey, TValue> 获取到的内部排序字典，如果找不到则为 null。 返回 bool 如果找到内部排序字典，则为 true；否则为 false。 TryGetValueBySortedKey(TKey, TSortedKey, out TValue) 尝试从字典中获取指定外部键和排序键对应的值。 public bool TryGetValueBySortedKey(TKey key, TSortedKey sortedKey, out TValue value) 参数 key TKey 要获取值的外部键。 sortedKey TSortedKey 要获取值的排序键。 value TValue 获取到的值，如果找不到则为 default。 返回 bool 如果找到值，则为 true；否则为 false。"
  },
  "reference/Fantasy.OneToManySortedDictionaryPool-3.html": {
    "href": "reference/Fantasy.OneToManySortedDictionaryPool-3.html",
    "title": "OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一对多映射关系的排序字典对象池。 public class OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> : OneToManySortedDictionary<TKey, TSortedKey, TValue>, IDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TKey : notnull where TSortedKey : notnull 类型参数 TKey 外部字典中的键类型。 TSortedKey 内部字典中的排序键类型。 TValue 内部字典中的值类型。 继承 object Dictionary<TKey, SortedDictionary<TSortedKey, TValue>> OneToManySortedDictionary<TKey, TSortedKey, TValue> OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 实现 IDictionary<TKey, SortedDictionary<TSortedKey, TValue>> ICollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, SortedDictionary<TSortedKey, TValue>> IReadOnlyCollection<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable<KeyValuePair<TKey, SortedDictionary<TSortedKey, TValue>>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 OneToManySortedDictionary<TKey, TSortedKey, TValue>.Contains(TKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Contains(TKey, TSortedKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) OneToManySortedDictionary<TKey, TSortedKey, TValue>.TryGetValueBySortedKey(TKey, TSortedKey, out TValue) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Add(TKey, TSortedKey, TValue) OneToManySortedDictionary<TKey, TSortedKey, TValue>.RemoveSortedKey(TKey, TSortedKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.RemoveKey(TKey) OneToManySortedDictionary<TKey, TSortedKey, TValue>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Add(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Clear() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsKey(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.ContainsValue(SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.GetEnumerator() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.OnDeserialization(object) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Remove(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryGetValue(TKey, out SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TryAdd(TKey, SortedDictionary<TSortedKey, TValue>) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.EnsureCapacity(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess() Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.TrimExcess(int) Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Comparer Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Count Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Keys Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.Values Dictionary<TKey, SortedDictionary<TSortedKey, TValue>>.this[TKey] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 OneToManySortedDictionaryPool() public OneToManySortedDictionaryPool() 方法 Create() 创建一个 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 的实例。 public static OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> Create() 返回 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 新创建的 OneToManySortedDictionaryPool 实例。 Dispose() 释放当前实例及其资源。 public void Dispose()"
  },
  "reference/Fantasy.Opcode.html": {
    "href": "reference/Fantasy.Opcode.html",
    "title": "Opcode 类 | Fantasy.Net API Reference",
    "keywords": "Opcode 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 定义了各种消息操作码，用于标识不同类型的消息和请求。 public static class Opcode 继承 object Opcode 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 AddressableAddRequest 可寻址消息：添加请求操作码。 public const uint AddressableAddRequest = 220000001 字段值 uint AddressableAddResponse 可寻址消息：添加回复操作码。 public const uint AddressableAddResponse = 260000001 字段值 uint AddressableGetRequest 可寻址消息：获取请求操作码。 public const uint AddressableGetRequest = 220000002 字段值 uint AddressableGetResponse 可寻址消息：获取回复操作码。 public const uint AddressableGetResponse = 260000002 字段值 uint AddressableLockRequest 可寻址消息：锁定请求操作码。 public const uint AddressableLockRequest = 220000004 字段值 uint AddressableLockResponse 可寻址消息：锁定回复操作码。 public const uint AddressableLockResponse = 260000004 字段值 uint AddressableRemoveRequest 可寻址消息：移除请求操作码。 public const uint AddressableRemoveRequest = 220000003 字段值 uint AddressableRemoveResponse 可寻址消息：移除回复操作码。 public const uint AddressableRemoveResponse = 260000003 字段值 uint AddressableUnLockRequest 可寻址消息：解锁请求操作码。 public const uint AddressableUnLockRequest = 220000005 字段值 uint AddressableUnLockResponse 可寻址消息：解锁回复操作码。 public const uint AddressableUnLockResponse = 260000005 字段值 uint DefaultResponse 默认回复操作码。 public const uint DefaultResponse = 3 字段值 uint DefaultRouteResponse 默认的Route返回操作码。 public const uint DefaultRouteResponse = 260000007 字段值 uint InnerBsonMessage 内网Bson消息操作码的基准值。 public const uint InnerBsonMessage = 140000000 字段值 uint InnerBsonRequest 内网Bson请求操作码的基准值。 public const uint InnerBsonRequest = 150000000 字段值 uint InnerBsonResponse 内网Bson回复操作码的基准值。 public const uint InnerBsonResponse = 180000000 字段值 uint InnerBsonRouteMessage 内网Bson路由消息操作码的基准值。 public const uint InnerBsonRouteMessage = 230000000 字段值 uint InnerBsonRouteRequest 内网Bson路由请求操作码的基准值。 public const uint InnerBsonRouteRequest = 240000000 字段值 uint InnerBsonRouteResponse 内网Bson路由回复操作码的基准值。 public const uint InnerBsonRouteResponse = 270000000 字段值 uint InnerMessage 内网消息操作码的基准值。 public const uint InnerMessage = 120000000 字段值 uint InnerRequest 内网请求操作码的基准值。 public const uint InnerRequest = 130000000 字段值 uint InnerResponse 内网回复操作码的基准值。 public const uint InnerResponse = 170000000 字段值 uint InnerRouteMessage 内网路由消息操作码的基准值。 public const uint InnerRouteMessage = 210000000 字段值 uint InnerRouteRequest 内网路由请求操作码的基准值。 public const uint InnerRouteRequest = 220000000 字段值 uint InnerRouteResponse 内网路由回复操作码的基准值。 public const uint InnerRouteResponse = 260000000 字段值 uint LinkEntityRequest 连接Entity到目标进程、目标进程可以通过EntityType、发送消息给这个Entity public const uint LinkEntityRequest = 220000006 字段值 uint LinkEntityResponse public const uint LinkEntityResponse = 260000006 字段值 uint OuterMessage 外网消息操作码的基准值。 public const uint OuterMessage = 100000000 字段值 uint OuterRequest 外网请求操作码的基准值。 public const uint OuterRequest = 110000000 字段值 uint OuterResponse 外网回复操作码的基准值。 public const uint OuterResponse = 160000000 字段值 uint OuterRouteMessage 外网路由消息操作码的基准值。 public const uint OuterRouteMessage = 190000000 字段值 uint OuterRouteRequest 外网路由请求操作码的基准值。 public const uint OuterRouteRequest = 200000000 字段值 uint OuterRouteResponse 外网路由回复操作码的基准值。 public const uint OuterRouteResponse = 250000000 字段值 uint PingRequest 心跳消息请求操作码。 public const uint PingRequest = 1 字段值 uint PingResponse 心跳消息回复操作码。 public const uint PingResponse = 2 字段值 uint"
  },
  "reference/Fantasy.OuterMessageScheduler.html": {
    "href": "reference/Fantasy.OuterMessageScheduler.html",
    "title": "OuterMessageScheduler 类 | Fantasy.Net API Reference",
    "keywords": "OuterMessageScheduler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供了一个机制来调度和处理外部网络消息。 public sealed class OuterMessageScheduler : ANetworkMessageScheduler 继承 object ANetworkMessageScheduler OuterMessageScheduler 继承成员 ANetworkMessageScheduler.Scheduler(Session, APackInfo) ANetworkMessageScheduler.InnerScheduler(Session, uint, long, uint, long, object) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OuterMessageScheduler() public OuterMessageScheduler() 方法 Handler(Session, Type, APackInfo) 在FantasyNet环境下，处理外部消息的方法。 protected override FTask Handler(Session session, Type messageType, APackInfo packInfo) 参数 session Session 网络会话。 messageType Type 消息类型。 packInfo APackInfo 消息封包信息。 返回 FTask InnerHandler(Session, uint, long, uint, long, Type, object) 在FantasyNet环境下，处理内部消息的方法。 protected override FTask InnerHandler(Session session, uint rpcId, long routeId, uint protocolCode, long routeTypeCode, Type messageType, object message) 参数 session Session 网络会话。 rpcId uint RPC请求ID。 routeId long 消息路由ID。 protocolCode uint 协议码。 routeTypeCode long 路由类型码。 messageType Type 消息类型。 message object 消息对象。 返回 FTask"
  },
  "reference/Fantasy.OuterPackInfo.html": {
    "href": "reference/Fantasy.OuterPackInfo.html",
    "title": "OuterPackInfo 类 | Fantasy.Net API Reference",
    "keywords": "OuterPackInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于解析外部网络消息的数据包信息。 public sealed class OuterPackInfo : APackInfo, IDisposable 继承 object APackInfo OuterPackInfo 实现 IDisposable 继承成员 APackInfo.RpcId APackInfo.RouteId APackInfo.ProtocolCode APackInfo.RouteTypeCode APackInfo.MessagePacketLength APackInfo.MemoryOwner APackInfo.IsDisposed APackInfo.Rent<T>() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OuterPackInfo() public OuterPackInfo() 方法 Create(IMemoryOwner<byte>) 创建一个 OuterPackInfo 实例，并将其与给定的内存资源关联。 public static OuterPackInfo Create(IMemoryOwner<byte> memoryOwner) 参数 memoryOwner IMemoryOwner<byte> 内存资源的所有者。 返回 OuterPackInfo 创建的 OuterPackInfo 实例。 CreateMemoryStream() 创建一个 MemoryStream 实例，用于存储内存数据，并返回该实例。 public override MemoryStream CreateMemoryStream() 返回 MemoryStream 创建的 MemoryStream 实例。 Deserialize(Type) 将消息数据从内存反序列化为指定的消息类型实例。 public override object Deserialize(Type messageType) 参数 messageType Type 目标消息类型。 返回 object 反序列化后的消息类型实例。 Dispose() 释放当前 OuterPackInfo 实例及其关联的资源。 public override void Dispose()"
  },
  "reference/Fantasy.OuterPacketParser.html": {
    "href": "reference/Fantasy.OuterPacketParser.html",
    "title": "OuterPacketParser 类 | Fantasy.Net API Reference",
    "keywords": "OuterPacketParser 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于解析外部网络消息的数据包解析器。 public sealed class OuterPacketParser : APacketParser, IDisposable 继承 object APacketParser OuterPacketParser 实现 IDisposable 继承成员 APacketParser.CreatePacketParser(NetworkTarget) object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 OuterPacketParser() 创建一个新的 OuterPacketParser 实例。 public OuterPacketParser() 方法 Dispose() 释放资源并重置状态。 public override void Dispose() Pack(uint, long, MemoryStream) 封装数据包。 public static MemoryStream Pack(uint rpcId, long routeTypeOpCode, MemoryStream memoryStream) 参数 rpcId uint RPC标识。 routeTypeOpCode long 路由类型和操作码。 memoryStream MemoryStream 要封装的内存流。 返回 MemoryStream 封装后的内存流。 Pack(uint, long, object) 封装数据包。 public static MemoryStream Pack(uint rpcId, long routeTypeOpCode, object message) 参数 rpcId uint RPC标识。 routeTypeOpCode long 路由类型和操作码。 message object 要封装的消息对象。 返回 MemoryStream 封装后的内存流。 UnPack(CircularBuffer, out APackInfo) 用于解析外部网络消息的数据包解析器。 public override bool UnPack(CircularBuffer buffer, out APackInfo packInfo) 参数 buffer CircularBuffer 循环缓冲区，用于存储接收到的数据。 packInfo APackInfo 解析后的数据包信息。 返回 bool 如果成功解析数据包，则返回 true；否则返回 false。 UnPack(IMemoryOwner<byte>, out APackInfo) 从内存中解析数据包。 public override bool UnPack(IMemoryOwner<byte> memoryOwner, out APackInfo packInfo) 参数 memoryOwner IMemoryOwner<byte> 内存块所有者。 packInfo APackInfo 解析后的数据包信息。 返回 bool 如果成功解析数据包，则返回 true；否则返回 false。"
  },
  "reference/Fantasy.Packet.html": {
    "href": "reference/Fantasy.Packet.html",
    "title": "Packet 结构 | Fantasy.Net API Reference",
    "keywords": "Packet 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供关于消息包的常量定义。 public struct Packet 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 字段 InnerPacketHeadLength 内网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteId长度） public const int InnerPacketHeadLength = 20 字段值 int InnerPacketMaxLength 内网消息总长度（消息体最大长度 + 外网消息头长度） public const int InnerPacketMaxLength = 1048580 字段值 int InnerPacketRouteRouteIdLocation RouteId所在的位置 public const int InnerPacketRouteRouteIdLocation = 12 字段值 int InnerPacketRpcIdLocation InnerRPCId所在的位置 public const int InnerPacketRpcIdLocation = 8 字段值 int OuterPacketHeadLength 外网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteTypeOpCode长度） public const int OuterPacketHeadLength = 20 字段值 int OuterPacketMaxLength 外网消息总长度（消息体最大长度 + 外网消息头长度） public const int OuterPacketMaxLength = 1048580 字段值 int OuterPacketRouteTypeOpCodeLocation RouteTypeOpCode所在的位置 public const int OuterPacketRouteTypeOpCodeLocation = 12 字段值 int OuterPacketRpcIdLocation OuterRPCId所在的位置 public const int OuterPacketRpcIdLocation = 8 字段值 int PacketBodyMaxLength 消息体最大长度 public const int PacketBodyMaxLength = 1048560 字段值 int PacketLength 消息体长度在消息头占用的长度 public const int PacketLength = 4 字段值 int PacketRouteIdLength RouteId长度 public const int PacketRouteIdLength = 8 字段值 int ProtocolCodeLength 协议编号在消息头占用的长度 public const int ProtocolCodeLength = 4 字段值 int RouteTypeOpCodeLength RouteTypeOpCode在消息头占用的长度 public const int RouteTypeOpCodeLength = 8 字段值 int RpcIdLength RpcId在消息头占用的长度 public const int RpcIdLength = 4 字段值 int"
  },
  "reference/Fantasy.PingRequest.html": {
    "href": "reference/Fantasy.PingRequest.html",
    "title": "PingRequest 类 | Fantasy.Net API Reference",
    "keywords": "PingRequest 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示Ping请求消息的类，实现了 IRequest 接口。 public class PingRequest : AProto, IRequest, IMessage 继承 object AProto PingRequest 实现 IRequest IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 PingRequest() public PingRequest() 属性 ResponseType 获取或设置Ping响应类型。 public PingResponse ResponseType { get; set; } 属性值 PingResponse RpcId 获取或设置RPC标识。 public long RpcId { get; set; } 属性值 long 方法 OpCode() 获取当前消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.PingResponse.html": {
    "href": "reference/Fantasy.PingResponse.html",
    "title": "PingResponse 类 | Fantasy.Net API Reference",
    "keywords": "PingResponse 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示Ping响应消息的类，实现了 IResponse 接口。 public class PingResponse : AProto, IResponse, IMessage 继承 object AProto PingResponse 实现 IResponse IMessage 继承成员 AProto.AfterDeserialization() AProto.EndInit() object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 PingResponse() public PingResponse() 字段 Now 获取或设置时间戳。 public long Now 字段值 long 属性 ErrorCode 获取或设置错误代码。 public uint ErrorCode { get; set; } 属性值 uint RpcId 获取或设置RPC标识。 public long RpcId { get; set; } 属性值 long 方法 OpCode() 获取当前消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.Pool-1.html": {
    "href": "reference/Fantasy.Pool-1.html",
    "title": "Pool<T> 类 | Fantasy.Net API Reference",
    "keywords": "Pool<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 静态通用对象池。 public static class Pool<T> 类型参数 T 要存储在对象池中的对象类型。 继承 object Pool<T> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 属性 Count 获取对象池中的对象数量。 public static int Count { get; } 属性值 int 方法 Clear() 清空对象池。 public static void Clear() Rent() 从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。 public static T Rent() 返回 T 获取的对象实例。 Rent(Func<T>) 从对象池中获取一个对象实例。如果池为空，则使用提供的生成器函数创建一个新的对象。 public static T Rent(Func<T> generator) 参数 generator Func<T> 用于生成新对象的函数。 返回 T 获取的对象实例。 Return(T) 将对象实例返回到对象池中。 public static void Return(T t) 参数 t T 要返回的对象实例。 Return(T, Action<T>) 将对象实例返回到对象池中，并使用提供的重置函数对对象进行重置操作。 public static void Return(T t, Action<T> reset) 参数 t T 要返回的对象实例。 reset Action<T> 用于重置对象的函数。"
  },
  "reference/Fantasy.PoolCore-1.html": {
    "href": "reference/Fantasy.PoolCore-1.html",
    "title": "PoolCore<T> 类 | Fantasy.Net API Reference",
    "keywords": "PoolCore<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型对象池核心类，用于创建和管理可重复使用的对象实例。 public abstract class PoolCore<T> 类型参数 T 要池化的对象类型。 继承 object PoolCore<T> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 PoolCore(Func<T>, Action<T>, int) 初始化一个对象池 protected PoolCore(Func<T> generator, Action<T> reset, int initialCapacity = 0) 参数 generator Func<T> 生成对象实例的方法。某些类型的构造函数中可能需要额外的参数，所以使用Func生成器 reset Action<T> 重置对象实例的方法，可用于清理对象状态。某些类型可能需要对返回的对象进行额外清理 initialCapacity int 初始池容量，可预分配对象实例。 属性 Count 获取池中当前可用的对象数量。 public int Count { get; } 属性值 int 方法 Clear() 清空对象池。 public void Clear() Rent() 从对象池中获取一个对象实例。 public T Rent() 返回 T 可重复使用的对象实例。 Return(T) 将对象实例返回到对象池中，以便重复使用。 public void Return(T item) 参数 item T 要返回的对象实例。"
  },
  "reference/Fantasy.PoolWithDisposable-1.html": {
    "href": "reference/Fantasy.PoolWithDisposable-1.html",
    "title": "PoolWithDisposable<T> 类 | Fantasy.Net API Reference",
    "keywords": "PoolWithDisposable<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 静态通用对象池，用于存储实现了 IDisposable 接口的对象。 public static class PoolWithDisposable<T> where T : IDisposable 类型参数 T 要存储在对象池中的对象类型，必须实现 IDisposable 接口。 继承 object PoolWithDisposable<T> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 属性 Count 获取对象池中的对象数量。 public static int Count { get; } 属性值 int 方法 Clear() 清空对象池。 public static void Clear() Rent() 从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。 public static T Rent() 返回 T 获取的对象实例。 Rent(Func<T>) 从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。 public static T Rent(Func<T> generator) 参数 generator Func<T> 用于生成新对象的函数。 返回 T 获取的对象实例。 Return(T) 将对象实例返回到对象池中，并调用其 Dispose 方法进行资源释放。 public static void Return(T t) 参数 t T 要返回的对象实例。 Return(T, Action<T>) 将对象实例返回到对象池中，并使用提供的重置函数对对象进行重置操作，然后调用其 Dispose 方法进行资源释放。 public static void Return(T t, Action<T> reset) 参数 t T 要返回的对象实例。 reset Action<T> 用于重置对象的函数。"
  },
  "reference/Fantasy.ProtoBufHelper.html": {
    "href": "reference/Fantasy.ProtoBufHelper.html",
    "title": "ProtoBufHelper 类 | Fantasy.Net API Reference",
    "keywords": "ProtoBufHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供ProtoBuf序列化和反序列化的帮助方法类。 public static class ProtoBufHelper 继承 object ProtoBufHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Clone<T>(T) 克隆一个对象，通过序列化和反序列化实现深度复制。 public static T Clone<T>(T t) 参数 t T 要克隆的对象。 返回 T 克隆后的新对象。 类型参数 T 要克隆的对象类型。 FromBytes(Type, byte[], int, int) 从指定的字节数组中的指定范围反序列化对象。 public static object FromBytes(Type type, byte[] bytes, int index, int count) 参数 type Type 要反序列化的对象类型。 bytes byte[] 包含对象序列化数据的字节数组。 index int 要反序列化数据的起始索引。 count int 要反序列化的字节数据长度。 返回 object 反序列化得到的对象。 FromBytes<T>(byte[]) 从字节数组中反序列化对象。 public static T FromBytes<T>(byte[] bytes) 参数 bytes byte[] 包含对象序列化数据的字节数组。 返回 T 反序列化得到的对象。 类型参数 T 要反序列化的对象类型。 FromBytes<T>(byte[], int, int) 从指定的字节数组中的指定范围反序列化对象。 public static T FromBytes<T>(byte[] bytes, int index, int count) 参数 bytes byte[] 包含对象序列化数据的字节数组。 index int 要反序列化数据的起始索引。 count int 要反序列化的字节数据长度。 返回 T 反序列化得到的对象。 类型参数 T 要反序列化的对象类型。 FromMemory(Type, Memory<byte>) 从 Memory/byte 中反序列化对象。 public static object FromMemory(Type type, Memory<byte> memory) 参数 type Type 要反序列化的对象类型。 memory Memory<byte> 要反序列化的内存数据。 返回 object 反序列化得到的对象。 FromSpan(Type, Span<byte>) 从 Span/byte 中反序列化对象。 public static object FromSpan(Type type, Span<byte> span) 参数 type Type 要反序列化的对象类型。 span Span<byte> 要反序列化的字节数据。 返回 object 反序列化得到的对象。 FromStream(Type, MemoryStream) 从指定的流中反序列化对象。 public static object FromStream(Type type, MemoryStream stream) 参数 type Type 要反序列化的对象类型。 stream MemoryStream 包含对象序列化数据的流。 返回 object 反序列化得到的对象。 FromStream<T>(MemoryStream) 从指定的流中反序列化对象。 public static T FromStream<T>(MemoryStream stream) 参数 stream MemoryStream 包含对象序列化数据的流。 返回 T 反序列化得到的对象。 类型参数 T 要反序列化的对象类型。 ToBytes(object) 将对象序列化为字节数组。 public static byte[] ToBytes(object message) 参数 message object 要序列化的对象。 返回 byte[] 包含序列化数据的字节数组。 ToMemory(object, Memory<byte>) 将对象序列化到指定的内存中。 public static void ToMemory(object message, Memory<byte> memory) 参数 message object 要序列化的对象。 memory Memory<byte> 目标内存。 ToStream(object, MemoryStream) 将对象序列化到指定的流中。 public static void ToStream(object message, MemoryStream stream) 参数 message object 要序列化的对象。 stream MemoryStream 目标流。"
  },
  "reference/Fantasy.RandomHelper.html": {
    "href": "reference/Fantasy.RandomHelper.html",
    "title": "RandomHelper 类 | Fantasy.Net API Reference",
    "keywords": "RandomHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 随机数操作助手类，提供各种随机数生成和操作方法。 public static class RandomHelper 继承 object RandomHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 BreakRank<T>(List<T>) 打乱列表中元素的顺序。 public static void BreakRank<T>(List<T> arr) 参数 arr List<T> 要打乱顺序的列表。 类型参数 T 列表元素的类型。 NextFloat(bool) 返回随机数。 public static float NextFloat(bool containNegative = false) 参数 containNegative bool 是否包含负数。 返回 float 返回一个随机的单精度浮点数。 NextFloat(float) 返回一个小于所指定最大值的非负随机数。 public static float NextFloat(float maxValue) 参数 maxValue float 要生成的随机数的上限（随机数不能取该上限值）。 maxValue 必须大于或等于零。 返回 float 大于等于零且小于 maxValue 的单精度浮点数，即：返回值的范围通常包括零但不包括 maxValue。 不过，如果 maxValue 等于零，则返回 maxValue。 NextFloat(float, float) 返回一个指定范围内的随机数。 public static float NextFloat(float minValue, float maxValue) 参数 minValue float 返回的随机数的下界（随机数可取该下界值）。 maxValue float 返回的随机数的上界（随机数不能取该上界值）。 maxValue 必须大于或等于 minValue。 返回 float 一个大于等于 minValue 且小于 maxValue 的单精度浮点数，即：返回的值范围包括 minValue 但不包括 maxValue。 如果 minValue 等于 maxValue，则返回 minValue。 NextVector2(float, float, float, float) 在指定的矩形区域内随机生成一个二维向量位置。 public static Vector2 NextVector2(float minX, float maxX, float minY, float maxY) 参数 minX float X轴最小值。 maxX float X轴最大值。 minY float Y轴最小值。 maxY float Y轴最大值。 返回 Vector2 随机生成的二维向量位置。 RandFloat01() 生成一个介于 0 和 1 之间的随机单精度浮点数。 public static float RandFloat01() 返回 float 随机单精度浮点数。 RandInt64() 生成一个随机的 64 位整数。 public static long RandInt64() 返回 long 64 位整数。 RandUInt16() 生成一个随机的无符号 16 位整数。 public static ushort RandUInt16() 返回 ushort 无符号 16 位整数。 RandUInt32() 生成一个随机的无符号 32 位整数。 public static uint RandUInt32() 返回 uint 无符号 32 位整数。 RandUInt64() 生成一个随机的无符号 64 位整数。 public static ulong RandUInt64() 返回 ulong 无符号 64 位整数。 RandomArray<T>(List<T>) 从列表中随机选择一个元素。 public static T RandomArray<T>(this List<T> array) 参数 array List<T> 要选择的列表。 返回 T 随机选择的列表元素。 类型参数 T 列表元素的类型。 RandomArray<T>(T[]) 从数组中随机选择一个元素。 public static T RandomArray<T>(this T[] array) 参数 array T[] 要选择的数组。 返回 T 随机选择的数组元素。 类型参数 T 数组元素的类型。 RandomBool() 生成一个随机的布尔值。 public static bool RandomBool() 返回 bool 随机的布尔值。 RandomByFixedProbability(int[]) 根据固定概率随机选择一个索引，即某个数值上限内随机多少次。 public static int RandomByFixedProbability(int[] args) 参数 args int[] 概率数组，每个元素表示相应索引的概率。 返回 int 随机选择的索引值。 RandomByWeight(int[]) 根据权重随机选择一个索引。 public static int RandomByWeight(int[] weights) 参数 weights int[] 权重数组，每个元素表示相应索引的权重。 返回 int 随机选择的索引值。 RandomNumber(int, int) 在指定范围内生成一个随机整数（包含下限，不包含上限）。 public static int RandomNumber(int lower, int upper) 参数 lower int 下限。 upper int 上限。 返回 int 生成的随机整数。 RandomNumberCode(int) 生成指定长度的随机数字代码。 public static string RandomNumberCode(int len = 6) 参数 len int 数字代码的长度。 返回 string 生成的随机数字代码。"
  },
  "reference/Fantasy.RecyclableMemoryStream.html": {
    "href": "reference/Fantasy.RecyclableMemoryStream.html",
    "title": "RecyclableMemoryStream 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStream 类 命名空间 Fantasy 程序集 Fantasy.Net.dll MemoryStream implementation that deals with pooling and managing memory streams which use potentially large buffers. public sealed class RecyclableMemoryStream : MemoryStream, IDisposable, IAsyncDisposable, IBufferWriter<byte> 继承 object MarshalByRefObject Stream MemoryStream RecyclableMemoryStream 实现 IDisposable IAsyncDisposable IBufferWriter<byte> 继承成员 MemoryStream.Flush() MemoryStream.FlushAsync(CancellationToken) MemoryStream.ReadAsync(byte[], int, int, CancellationToken) MemoryStream.ReadAsync(Memory<byte>, CancellationToken) MemoryStream.WriteAsync(byte[], int, int, CancellationToken) MemoryStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.DisposeAsync() Stream.FlushAsync() Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(byte[], int, int) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactly(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.Synchronized(Stream) Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 备注 This class works in tandem with the RecyclableMemoryStreamManager to supply MemoryStream-derived objects to callers, while avoiding these specific problems: LOH allocationsSince all large buffers are pooled, they will never incur a Gen2 GC Memory wasteA standard memory stream doubles its size when it runs out of room. This leads to continual memory growth as each stream approaches the maximum allowed size. Memory copyingEach time a MemoryStream grows, all the bytes are copied into new buffers. This implementation only copies the bytes when GetBuffer() is called. Memory fragmentationBy using homogeneous buffer sizes, it ensures that blocks of memory can be easily reused. The stream is implemented on top of a series of uniformly-sized blocks. As the stream's length grows, additional blocks are retrieved from the memory manager. It is these blocks that are pooled, not the stream object itself. The biggest wrinkle in this implementation is when GetBuffer() is called. This requires a single contiguous buffer. If only a single block is in use, then that block is returned. If multiple blocks are in use, we retrieve a larger buffer from the memory manager. These large buffers are also pooled, split by size--they are multiples/exponentials of a chunk size (1 MB by default). Once a large buffer is assigned to the stream the small blocks are NEVER again used for this stream. All operations take place on the large buffer. The large buffer can be replaced by a larger buffer from the pool as needed. All blocks and large buffers are maintained in the stream until the stream is disposed (unless AggressiveBufferReturn is enabled in the stream manager). A further wrinkle is what happens when the stream is longer than the maximum allowable array length under .NET. This is allowed when only blocks are in use, and only the Read/Write APIs are used. Once a stream grows to this size, any attempt to convert it to a single buffer will result in an exception. Similarly, if a stream is already converted to use a single larger buffer, then it cannot grow beyond the limits of the maximum allowable array size. Any method that modifies the stream has the potential to throw an OutOfMemoryException, either because the stream is beyond the limits set in RecyclableStreamManager, or it would result in a buffer larger than the maximum array size supported by .NET. 构造函数 RecyclableMemoryStream(RecyclableMemoryStreamManager) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager) 参数 memoryManager RecyclableMemoryStreamManager The memory manager. RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id) 参数 memoryManager RecyclableMemoryStreamManager The memory manager. id Guid A unique identifier which can be used to trace usages of the stream. RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid, string) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag) 参数 memoryManager RecyclableMemoryStreamManager The memory manager. id Guid A unique identifier which can be used to trace usages of the stream. tag string A string identifying this stream for logging and debugging purposes. RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid, string, int) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, int requestedSize) 参数 memoryManager RecyclableMemoryStreamManager The memory manager. id Guid A unique identifier which can be used to trace usages of the stream. tag string A string identifying this stream for logging and debugging purposes. requestedSize int The initial requested size to prevent future allocations. RecyclableMemoryStream(RecyclableMemoryStreamManager, Guid, string, long) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, long requestedSize) 参数 memoryManager RecyclableMemoryStreamManager The memory manager id Guid A unique identifier which can be used to trace usages of the stream. tag string A string identifying this stream for logging and debugging purposes. requestedSize long The initial requested size to prevent future allocations. RecyclableMemoryStream(RecyclableMemoryStreamManager, string) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag) 参数 memoryManager RecyclableMemoryStreamManager The memory manager. tag string A string identifying this stream for logging and debugging purposes. RecyclableMemoryStream(RecyclableMemoryStreamManager, string, int) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag, int requestedSize) 参数 memoryManager RecyclableMemoryStreamManager The memory manager tag string A string identifying this stream for logging and debugging purposes. requestedSize int The initial requested size to prevent future allocations. RecyclableMemoryStream(RecyclableMemoryStreamManager, string, long) Initializes a new instance of the RecyclableMemoryStream class. public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag, long requestedSize) 参数 memoryManager RecyclableMemoryStreamManager The memory manager. tag string A string identifying this stream for logging and debugging purposes. requestedSize long The initial requested size to prevent future allocations. 属性 CanRead Whether the stream can currently read. public override bool CanRead { get; } 属性值 bool CanSeek Whether the stream can currently seek. public override bool CanSeek { get; } 属性值 bool CanTimeout Always false. public override bool CanTimeout { get; } 属性值 bool CanWrite Whether the stream can currently write. public override bool CanWrite { get; } 属性值 bool Capacity Gets or sets the capacity. public override int Capacity { get; set; } 属性值 int 备注 Capacity is always in multiples of the memory manager's block size, unless the large buffer is in use. Capacity never decreases during a stream's lifetime. Explicitly setting the capacity to a lower value than the current value will have no effect. This is because the buffers are all pooled by chunks and there's little reason to allow stream truncation. Writing past the current capacity will cause Capacity to automatically increase, until MaximumStreamCapacity is reached. If the capacity is larger than int.MaxValue, then InvalidOperationException will be thrown. If you anticipate using larger streams, use the Capacity64 property instead. 异常 ObjectDisposedException Object has been disposed. InvalidOperationException Capacity is larger than int.MaxValue. Capacity64 Returns a 64-bit version of capacity, for streams larger than int.MaxValue in length. public long Capacity64 { get; set; } 属性值 long Length Gets the number of bytes written to this stream. public override long Length { get; } 属性值 long 备注 If the buffer has already been converted to a large buffer, then the maximum length is limited by the maximum allowed array length in .NET. 异常 ObjectDisposedException Object has been disposed. Position Gets the current position in the stream. public override long Position { get; set; } 属性值 long 备注 If the buffer has already been converted to a large buffer, then the maximum length (and thus position) is limited by the maximum allowed array length in .NET. 异常 ObjectDisposedException Object has been disposed. ArgumentOutOfRangeException A negative value was passed. InvalidOperationException Stream is in large-buffer mode, but an attempt was made to set the position past the maximum allowed array length. 方法 Advance(int) Notifies the stream that count bytes were written to the buffer returned by GetMemory(int) or GetSpan(int). Seeks forward by count bytes. public void Advance(int count) 参数 count int How many bytes to advance. 备注 You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer. 异常 ObjectDisposedException Object has been disposed. ArgumentOutOfRangeException count is negative. InvalidOperationException count is larger than the size of the previously requested buffer. Close() Equivalent to Dispose. public override void Close() CopyTo(Stream, int) public override void CopyTo(Stream destination, int bufferSize) 参数 destination Stream bufferSize int CopyToAsync(Stream, int, CancellationToken) Asynchronously reads all the bytes from the current position in this stream and writes them to another stream. public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) 参数 destination Stream The stream to which the contents of the current stream will be copied. bufferSize int This parameter is ignored. cancellationToken CancellationToken The token to monitor for cancellation requests. 返回 Task A task that represents the asynchronous copy operation. 备注 Similarly to MemoryStream's behavior, CopyToAsync will adjust the source stream's position by the number of bytes written to the destination stream, as a Read would do. 异常 ArgumentNullException destination is null. ObjectDisposedException Either the current stream or the destination stream is disposed. NotSupportedException The current stream does not support reading, or the destination stream does not support writing. Dispose(bool) Returns the memory used by this stream back to the pool. protected override void Dispose(bool disposing) 参数 disposing bool Whether we're disposing (true), or being called by the finalizer (false). ~RecyclableMemoryStream() The finalizer will be called when a stream is not disposed properly. protected ~RecyclableMemoryStream() 备注 Failing to dispose indicates a bug in the code using streams. Care should be taken to properly account for stream lifetime. GetBuffer() Returns a single buffer containing the contents of the stream. The buffer may be longer than the stream length. public override byte[] GetBuffer() 返回 byte[] A byte[] buffer. 备注 IMPORTANT: Doing a Write(byte[], int, int) after calling GetBuffer invalidates the buffer. The old buffer is held onto until Dispose(bool) is called, but the next time GetBuffer is called, a new buffer from the pool will be required. 异常 ObjectDisposedException Object has been disposed. OutOfMemoryException stream is too large for a contiguous buffer. GetMemory(int) public Memory<byte> GetMemory(int sizeHint = 0) 参数 sizeHint int 返回 Memory<byte> 备注 IMPORTANT: Calling Write(), GetBuffer(), TryGetBuffer(), Seek(), GetLength(), Advance(), or setting Position after calling GetMemory() invalidates the memory. GetReadOnlySequence() Returns a sequence containing the contents of the stream. public ReadOnlySequence<byte> GetReadOnlySequence() 返回 ReadOnlySequence<byte> A ReadOnlySequence of bytes. 备注 IMPORTANT: Calling Write(), GetMemory(), GetSpan(), Dispose(), or Close() after calling GetReadOnlySequence() invalidates the sequence. 异常 ObjectDisposedException Object has been disposed. GetSpan(int) public Span<byte> GetSpan(int sizeHint = 0) 参数 sizeHint int 返回 Span<byte> 备注 IMPORTANT: Calling Write(), GetBuffer(), TryGetBuffer(), Seek(), GetLength(), Advance(), or setting Position after calling GetSpan() invalidates the span. Read(byte[], int, int) Reads from the current position into the provided buffer. public override int Read(byte[] buffer, int offset, int count) 参数 buffer byte[] Destination buffer. offset int Offset into buffer at which to start placing the read bytes. count int Number of bytes to read. 返回 int The number of bytes read. 异常 ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is less than 0. ArgumentException offset subtracted from the buffer length is less than count. ObjectDisposedException Object has been disposed. Read(Span<byte>) Reads from the current position into the provided buffer. public override int Read(Span<byte> buffer) 参数 buffer Span<byte> Destination buffer. 返回 int The number of bytes read. 异常 ObjectDisposedException Object has been disposed. ReadByte() Reads a single byte from the current position in the stream. public override int ReadByte() 返回 int The byte at the current position, or -1 if the position is at the end of the stream. 异常 ObjectDisposedException Object has been disposed. SafeRead(byte[], int, int, ref int) Reads from the specified position into the provided buffer. public int SafeRead(byte[] buffer, int offset, int count, ref int streamPosition) 参数 buffer byte[] Destination buffer. offset int Offset into buffer at which to start placing the read bytes. count int Number of bytes to read. streamPosition int Position in the stream to start reading from. 返回 int The number of bytes read. 异常 ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is less than 0. ArgumentException offset subtracted from the buffer length is less than count. ObjectDisposedException Object has been disposed. InvalidOperationException Stream position is beyond int.MaxValue. SafeRead(byte[], int, int, ref long) Reads from the specified position into the provided buffer. public int SafeRead(byte[] buffer, int offset, int count, ref long streamPosition) 参数 buffer byte[] Destination buffer. offset int Offset into buffer at which to start placing the read bytes. count int Number of bytes to read. streamPosition long Position in the stream to start reading from. 返回 int The number of bytes read. 异常 ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is less than 0. ArgumentException offset subtracted from the buffer length is less than count. ObjectDisposedException Object has been disposed. SafeRead(Span<byte>, ref int) Reads from the specified position into the provided buffer. public int SafeRead(Span<byte> buffer, ref int streamPosition) 参数 buffer Span<byte> Destination buffer. streamPosition int Position in the stream to start reading from. 返回 int The number of bytes read. 异常 ObjectDisposedException Object has been disposed. InvalidOperationException Stream position is beyond int.MaxValue. SafeRead(Span<byte>, ref long) Reads from the specified position into the provided buffer. public int SafeRead(Span<byte> buffer, ref long streamPosition) 参数 buffer Span<byte> Destination buffer. streamPosition long Position in the stream to start reading from. 返回 int The number of bytes read. 异常 ObjectDisposedException Object has been disposed. SafeReadByte(ref int) Reads a single byte from the specified position in the stream. public int SafeReadByte(ref int streamPosition) 参数 streamPosition int The position in the stream to read from. 返回 int The byte at the current position, or -1 if the position is at the end of the stream. 异常 ObjectDisposedException Object has been disposed. InvalidOperationException Stream position is beyond int.MaxValue. SafeReadByte(ref long) Reads a single byte from the specified position in the stream. public int SafeReadByte(ref long streamPosition) 参数 streamPosition long The position in the stream to read from. 返回 int The byte at the current position, or -1 if the position is at the end of the stream. 异常 ObjectDisposedException Object has been disposed. Seek(long, SeekOrigin) Sets the position to the offset from the seek location. public override long Seek(long offset, SeekOrigin loc) 参数 offset long How many bytes to move. loc SeekOrigin From where. 返回 long The new position. 异常 ObjectDisposedException Object has been disposed. ArgumentOutOfRangeException offset is larger than MaximumStreamCapacity. ArgumentException Invalid seek origin. IOException Attempt to set negative position. SetLength(long) Sets the length of the stream. public override void SetLength(long value) 参数 value long 异常 ArgumentOutOfRangeException value is negative or larger than MaximumStreamCapacity. ObjectDisposedException Object has been disposed. ToArray() Returns a new array with a copy of the buffer's contents. You should almost certainly be using GetBuffer() combined with the Length to access the bytes in this stream. Calling ToArray will destroy the benefits of pooled buffers, but it is included for the sake of completeness. [Obsolete(\"This method has degraded performance vs. GetBuffer and should be avoided.\")] public override byte[] ToArray() 返回 byte[] 异常 ObjectDisposedException Object has been disposed. NotSupportedException The current RecyclableMemoryStreamManagerobject disallows ToArray calls. OutOfMemoryException The length of the stream is too long for a contiguous array. ToString() Returns a useful string for debugging. This should not normally be called in actual production code. public override string ToString() 返回 string TryGetBuffer(out ArraySegment<byte>) Returns an ArraySegment that wraps a single buffer containing the contents of the stream. public override bool TryGetBuffer(out ArraySegment<byte> buffer) 参数 buffer ArraySegment<byte> An ArraySegment containing a reference to the underlying bytes. 返回 bool Returns true if a buffer can be returned; otherwise, false. Write(byte[], int, int) Writes the buffer to the stream. public override void Write(byte[] buffer, int offset, int count) 参数 buffer byte[] Source buffer. offset int Start position. count int Number of bytes to write. 异常 ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException buffer.Length - offset is not less than count. ObjectDisposedException Object has been disposed. Write(ReadOnlySpan<byte>) Writes the buffer to the stream. public override void Write(ReadOnlySpan<byte> source) 参数 source ReadOnlySpan<byte> Source buffer. 异常 ArgumentNullException buffer is null. ObjectDisposedException Object has been disposed. WriteByte(byte) Writes a single byte to the current position in the stream. public override void WriteByte(byte value) 参数 value byte byte value to write. 异常 ObjectDisposedException Object has been disposed. WriteTo(byte[]) Writes bytes from the current stream to a destination byte array. public void WriteTo(byte[] buffer) 参数 buffer byte[] Target buffer. 备注 The entire stream is written to the target array. 异常 ArgumentNullException buffer> is null. ObjectDisposedException Object has been disposed. WriteTo(byte[], long, long) Writes bytes from the current stream to a destination byte array. public void WriteTo(byte[] buffer, long offset, long count) 参数 buffer byte[] Target buffer. offset long Offset in the source stream, from which to start. count long Number of bytes to write. 异常 ArgumentNullException buffer> is null. ArgumentOutOfRangeException offset is less than 0, or offset + count is beyond this stream's length. ObjectDisposedException Object has been disposed. WriteTo(byte[], long, long, int) Writes bytes from the current stream to a destination byte array. public void WriteTo(byte[] buffer, long offset, long count, int targetOffset) 参数 buffer byte[] Target buffer. offset long Offset in the source stream, from which to start. count long Number of bytes to write. targetOffset int Offset in the target byte array to start writing 异常 ArgumentNullException buffer is null ArgumentOutOfRangeException offset is less than 0, or offset + count is beyond this stream's length. ArgumentOutOfRangeException targetOffset is less than 0, or targetOffset + count is beyond the target buffer's length. ObjectDisposedException Object has been disposed. WriteTo(Stream) Synchronously writes this stream's bytes to the argument stream. public override void WriteTo(Stream stream) 参数 stream Stream Destination stream. 备注 Important: This does a synchronous write, which may not be desired in some situations. 异常 ArgumentNullException stream is null. ObjectDisposedException Object has been disposed. WriteTo(Stream, int, int) Synchronously writes this stream's bytes, starting at offset, for count bytes, to the argument stream. public void WriteTo(Stream stream, int offset, int count) 参数 stream Stream Destination stream. offset int Offset in source. count int Number of bytes to write. 异常 ArgumentNullException stream is null. ArgumentOutOfRangeException offset is less than 0, or offset + count is beyond this stream's length. ObjectDisposedException Object has been disposed. WriteTo(Stream, long, long) Synchronously writes this stream's bytes, starting at offset, for count bytes, to the argument stream. public void WriteTo(Stream stream, long offset, long count) 参数 stream Stream Destination stream. offset long Offset in source. count long Number of bytes to write. 异常 ArgumentNullException stream is null. ArgumentOutOfRangeException offset is less than 0, or offset + count is beyond this stream's length. ObjectDisposedException Object has been disposed."
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.BlockCreatedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.BlockCreatedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.BlockCreatedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.BlockCreatedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 BlockCreated 事件的参数类。 public sealed class RecyclableMemoryStreamManager.BlockCreatedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.BlockCreatedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 SmallPoolInUse 当前从小型池中使用的字节数。 public long SmallPoolInUse { get; } 属性值 long"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.BufferDiscardedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.BufferDiscardedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.BufferDiscardedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.BufferDiscardedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 BufferDiscarded 事件的参数类。 public sealed class RecyclableMemoryStreamManager.BufferDiscardedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.BufferDiscardedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 BufferType 缓冲区的类型。 public RecyclableMemoryStreamManager.Events.MemoryStreamBufferType BufferType { get; } 属性值 RecyclableMemoryStreamManager.Events.MemoryStreamBufferType Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid Reason 丢弃此缓冲区的原因。 public RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason Reason { get; } 属性值 RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.Events.MemoryStreamBufferType.html",
    "title": "RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 枚举 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 缓冲区类型枚举。 public enum RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 扩展方法 JsonHelper.ToJson<T>(T) 字段 Large = 1 大池缓冲区。 Small = 0 小块缓冲区。"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason.html",
    "title": "RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 枚举 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 丢弃缓冲区的可能原因枚举。 public enum RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 扩展方法 JsonHelper.ToJson<T>(T) 字段 EnoughFree = 1 池中有足够的空闲字节。 TooLarge = 0 缓冲区太大，无法重新放入池中。"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.Events.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.Events.html",
    "title": "RecyclableMemoryStreamManager.Events 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.Events 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于 RecyclableMemoryStream 的 ETW 事件。 [EventSource(Name = \"Microsoft-IO-RecyclableMemoryStream\", Guid = \"{B80CD4E4-890E-468D-9CBA-90EB7C82DFC7}\")] public sealed class RecyclableMemoryStreamManager.Events : EventSource, IDisposable 继承 object EventSource RecyclableMemoryStreamManager.Events 实现 IDisposable 继承成员 EventSource.IsEnabled() EventSource.IsEnabled(EventLevel, EventKeywords) EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel) EventSource.GetGuid(Type) EventSource.GetName(Type) EventSource.GenerateManifest(Type, string) EventSource.GenerateManifest(Type, string, EventManifestOptions) EventSource.GetSources() EventSource.SendCommand(EventSource, EventCommand, IDictionary<string, string>) EventSource.GetTrait(string) EventSource.ToString() EventSource.SetCurrentThreadActivityId(Guid) EventSource.SetCurrentThreadActivityId(Guid, out Guid) EventSource.Dispose() EventSource.Write(string) EventSource.Write(string, EventSourceOptions) EventSource.Write<T>(string, T) EventSource.Write<T>(string, EventSourceOptions, T) EventSource.Write<T>(string, ref EventSourceOptions, ref T) EventSource.Write<T>(string, ref EventSourceOptions, ref Guid, ref Guid, ref T) EventSource.Name EventSource.Guid EventSource.Settings EventSource.ConstructionException EventSource.CurrentThreadActivityId EventSource.EventCommandExecuted object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Events() public Events() 字段 Writer 静态日志对象，通过它写入所有事件。 public static RecyclableMemoryStreamManager.Events Writer 字段值 RecyclableMemoryStreamManager.Events 方法 MemoryStreamCreated(Guid, string, long, long) 在创建流对象时记录的事件。 [Event(1, Level = EventLevel.Verbose, Version = 2)] public void MemoryStreamCreated(Guid guid, string tag, long requestedSize, long actualSize) 参数 guid Guid 此流的唯一 ID。 tag string 临时 ID，通常表示当前使用情况。 requestedSize long 流的请求大小。 actualSize long 从池中分配给流的实际大小。 MemoryStreamDiscardBuffer(Guid, string, MemoryStreamBufferType, MemoryStreamDiscardReason, long, long, long, long, long, long) 当缓冲区被丢弃时记录的事件（没有放回池中，而是交由 GC 清理）。 [Event(10, Level = EventLevel.Warning, Version = 2)] public void MemoryStreamDiscardBuffer(Guid guid, string tag, RecyclableMemoryStreamManager.Events.MemoryStreamBufferType bufferType, RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason reason, long smallBlocksFree, long smallPoolBytesFree, long smallPoolBytesInUse, long largeBlocksFree, long largePoolBytesFree, long largePoolBytesInUse) 参数 guid Guid 唯一的流 ID。 tag string 临时 ID，通常表示当前使用情况。 bufferType RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 被丢弃的缓冲区类型。 reason RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 丢弃原因。 smallBlocksFree long 小块池中的空闲块数。 smallPoolBytesFree long 小块池中的空闲字节数。 smallPoolBytesInUse long 从小块池中使用的字节数。 largeBlocksFree long 大缓冲区池中的空闲块数。 largePoolBytesFree long 大缓冲区池中的空闲字节数。 largePoolBytesInUse long 从大缓冲区池中使用的字节数。 MemoryStreamDisposed(Guid, string, long, string, string) 当流被释放时记录的事件。 [Event(2, Level = EventLevel.Verbose, Version = 3)] public void MemoryStreamDisposed(Guid guid, string tag, long lifetimeMs, string allocationStack, string disposeStack) 参数 guid Guid 此流的唯一 ID。 tag string 临时 ID，通常表示当前使用情况。 lifetimeMs long 流的生命周期（毫秒）。 allocationStack string 初始分配的调用堆栈。 disposeStack string 释放的调用堆栈。 MemoryStreamDoubleDispose(Guid, string, string, string, string) 当流第二次被释放时记录的事件。 [Event(3, Level = EventLevel.Critical)] public void MemoryStreamDoubleDispose(Guid guid, string tag, string allocationStack, string disposeStack1, string disposeStack2) 参数 guid Guid 此流的唯一 ID。 tag string 临时 ID，通常表示当前使用情况。 allocationStack string 初始分配的调用堆栈。 disposeStack1 string 第一次释放的调用堆栈。 disposeStack2 string 第二次释放的调用堆栈。 备注 注意：只有在 RecyclableMemoryStreamManager.GenerateCallStacks 为 true 时，堆栈才会被填充。 MemoryStreamFinalized(Guid, string, string) 当流被终结时记录的事件。 [Event(4, Level = EventLevel.Error)] public void MemoryStreamFinalized(Guid guid, string tag, string allocationStack) 参数 guid Guid 此流的唯一 ID。 tag string 临时 ID，通常表示当前使用情况。 allocationStack string 初始分配的调用堆栈。 备注 注意：只有在 RecyclableMemoryStreamManager.GenerateCallStacks 为 true 时，堆栈才会被填充。 MemoryStreamManagerInitialized(int, int, int) 当 RecyclableMemoryStreamManager 被初始化时记录的事件。 [Event(6, Level = EventLevel.Informational)] public void MemoryStreamManagerInitialized(int blockSize, int largeBufferMultiple, int maximumBufferSize) 参数 blockSize int 块的大小，以字节为单位。 largeBufferMultiple int 大缓冲区的倍数，以字节为单位。 maximumBufferSize int 最大缓冲区大小，以字节为单位。 MemoryStreamNewBlockCreated(long) 当创建新的块时记录的事件。 [Event(7, Level = EventLevel.Warning, Version = 2)] public void MemoryStreamNewBlockCreated(long smallPoolInUseBytes) 参数 smallPoolInUseBytes long 当前在小块池中使用的字节数。 MemoryStreamNewLargeBufferCreated(long, long) 当创建新的大缓冲区时记录的事件。 [Event(8, Level = EventLevel.Warning, Version = 3)] public void MemoryStreamNewLargeBufferCreated(long requiredSize, long largePoolInUseBytes) 参数 requiredSize long 请求的大小。 largePoolInUseBytes long 当前在大缓冲区池中使用的字节数。 MemoryStreamNonPooledLargeBufferCreated(Guid, string, long, string) 当创建的缓冲区过大无法放入池中时记录的事件。 [Event(9, Level = EventLevel.Verbose, Version = 3)] public void MemoryStreamNonPooledLargeBufferCreated(Guid guid, string tag, long requiredSize, string allocationStack) 参数 guid Guid 唯一的流 ID。 tag string 临时 ID，通常表示当前使用情况。 requiredSize long 调用者请求的大小。 allocationStack string 请求流的调用堆栈。 备注 注意：只有在 RecyclableMemoryStreamManager.GenerateCallStacks 为 true 时，堆栈才会被填充。 MemoryStreamOverCapacity(Guid, string, long, long, string) 当流的容量超过最大值时记录的事件。 [Event(11, Level = EventLevel.Error, Version = 3)] public void MemoryStreamOverCapacity(Guid guid, string tag, long requestedCapacity, long maxCapacity, string allocationStack) 参数 guid Guid 唯一的流 ID。 tag string 临时 ID，通常表示当前使用情况。 requestedCapacity long 请求的容量。 maxCapacity long 最大容量，由 RecyclableMemoryStreamManager 配置。 allocationStack string 容量请求的调用堆栈。 备注 注意：只有在 RecyclableMemoryStreamManager.GenerateCallStacks 为 true 时，堆栈才会被填充。 MemoryStreamToArray(Guid, string, string, long) 当流的 ToArray 方法被调用时记录的事件。 [Event(5, Level = EventLevel.Verbose, Version = 2)] public void MemoryStreamToArray(Guid guid, string tag, string stack, long size) 参数 guid Guid 此流的唯一 ID。 tag string 临时 ID，通常表示当前使用情况。 stack string ToArray 方法的调用堆栈。 size long 流的长度。 备注 注意：只有在 RecyclableMemoryStreamManager.GenerateCallStacks 为 true 时，堆栈才会被填充。"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 LargeBufferCreated 事件的参数类。 public sealed class RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 CallStack 如果缓冲区未从池中满足需求，并且 GenerateCallStacks 已打开， 则包含分配请求的调用堆栈。 public string CallStack { get; } 属性值 string Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid LargePoolInUse 从大型池中当前使用的字节数。 public long LargePoolInUse { get; } 属性值 long Pooled 缓冲区是否满足来自池的需求。 public bool Pooled { get; } 属性值 bool RequiredSize 所需的缓冲区大小。 public long RequiredSize { get; } 属性值 long Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 StreamConvertedToArray 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamConvertedToArrayEventArgs(Guid, string, string, long) 初始化 RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 类的新实例。 public StreamConvertedToArrayEventArgs(Guid guid, string tag, string stack, long length) 参数 guid Guid 流的唯一 ID。 tag string 流的标签。 stack string ToArray 调用的堆栈。 length long 流的长度。 属性 Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid Length 堆栈的长度。 public long Length { get; } 属性值 long Stack 调用 ToArray 的堆栈。 public string Stack { get; } 属性值 string Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamCreatedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamCreatedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamCreatedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamCreatedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 用于 StreamCreated 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamCreatedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamCreatedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamCreatedEventArgs(Guid, string, long, long) 初始化 RecyclableMemoryStreamManager.StreamCreatedEventArgs 类的新实例。 public StreamCreatedEventArgs(Guid guid, string tag, long requestedSize, long actualSize) 参数 guid Guid 流的唯一 ID。 tag string 流的标签。 requestedSize long 请求的流大小。 actualSize long 实际的流大小。 属性 ActualSize 实际的流大小。 public long ActualSize { get; } 属性值 long Id Stream流的唯一 ID。 public Guid Id { get; } 属性值 Guid RequestedSize 请求的流大小。 public long RequestedSize { get; } 属性值 long Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamDisposedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamDisposedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamDisposedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamDisposedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 StreamDisposed 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamDisposedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamDisposedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamDisposedEventArgs(Guid, string, string, string) 初始化 RecyclableMemoryStreamManager.StreamDisposedEventArgs 类的新实例。 [Obsolete(\"Use another constructor override\")] public StreamDisposedEventArgs(Guid guid, string tag, string allocationStack, string disposeStack) 参数 guid Guid 流的唯一 ID。 tag string 流的标签。 allocationStack string 原始分配的堆栈。 disposeStack string 处置堆栈。 StreamDisposedEventArgs(Guid, string, TimeSpan, string, string) 初始化 RecyclableMemoryStreamManager.StreamDisposedEventArgs 类的新实例。 public StreamDisposedEventArgs(Guid guid, string tag, TimeSpan lifetime, string allocationStack, string disposeStack) 参数 guid Guid 流的唯一 ID。 tag string 流的标签。 lifetime TimeSpan 流的生命周期。 allocationStack string 原始分配的堆栈。 disposeStack string 处置堆栈。 属性 AllocationStack 分配流的堆栈 public string AllocationStack { get; } 属性值 string DisposeStack 处置流的堆栈。 public string DisposeStack { get; } 属性值 string Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid Lifetime 流的生命周期。 public TimeSpan Lifetime { get; } 属性值 TimeSpan Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 StreamDoubleDisposed 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamDoubleDisposedEventArgs(Guid, string, string, string, string) 初始化 RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 类的新实例。 public StreamDoubleDisposedEventArgs(Guid guid, string tag, string allocationStack, string disposeStack1, string disposeStack2) 参数 guid Guid 流的唯一 ID。 tag string 流的标签。 allocationStack string 原始分配的堆栈。 disposeStack1 string 第一个处置堆栈。 disposeStack2 string 第二个处置堆栈。 属性 AllocationStack 分配流的堆栈。 public string AllocationStack { get; } 属性值 string DisposeStack1 第一个处置堆栈。 public string DisposeStack1 { get; } 属性值 string DisposeStack2 第二个处置堆栈。 public string DisposeStack2 { get; } 属性值 string Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamFinalizedEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamFinalizedEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamFinalizedEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamFinalizedEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 StreamFinalized 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamFinalizedEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamFinalizedEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamFinalizedEventArgs(Guid, string, string) 初始化 RecyclableMemoryStreamManager.StreamFinalizedEventArgs 类的新实例。 public StreamFinalizedEventArgs(Guid guid, string tag, string allocationStack) 参数 guid Guid 流的唯一 ID。 tag string 流的标签。 allocationStack string 原始分配的堆栈。 属性 AllocationStack 分配流的堆栈。 public string AllocationStack { get; } 属性值 string Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamLengthEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamLengthEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamLengthEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamLengthEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 StreamLength 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamLengthEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamLengthEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StreamLengthEventArgs(long) 初始化 RecyclableMemoryStreamManager.StreamLengthEventArgs 类的新实例。 public StreamLengthEventArgs(long length) 参数 length long 流的长度。 属性 Length 流的长度。 public long Length { get; } 属性值 long"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.StreamOverCapacityEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.StreamOverCapacityEventArgs.html",
    "title": "RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 StreamOverCapacity 事件的参数类。 public sealed class RecyclableMemoryStreamManager.StreamOverCapacityEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 属性 AllocationStack 原始分配堆栈。 public string AllocationStack { get; } 属性值 string Id 流的唯一 ID。 public Guid Id { get; } 属性值 Guid MaximumCapacity 最大容量。 public long MaximumCapacity { get; } 属性值 long RequestedCapacity 请求的容量。 public long RequestedCapacity { get; } 属性值 long Tag 可选的事件标签。 public string Tag { get; } 属性值 string"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.UsageReportEventArgs.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.UsageReportEventArgs.html",
    "title": "RecyclableMemoryStreamManager.UsageReportEventArgs 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager.UsageReportEventArgs 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于 UsageReport 事件的参数类。 public sealed class RecyclableMemoryStreamManager.UsageReportEventArgs : EventArgs 继承 object EventArgs RecyclableMemoryStreamManager.UsageReportEventArgs 继承成员 EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 UsageReportEventArgs(long, long, long, long) 初始化 RecyclableMemoryStreamManager.UsageReportEventArgs 类的新实例。 public UsageReportEventArgs(long smallPoolInUseBytes, long smallPoolFreeBytes, long largePoolInUseBytes, long largePoolFreeBytes) 参数 smallPoolInUseBytes long 当前正在使用的小型池字节数。 smallPoolFreeBytes long 当前可用的小型池字节数。 largePoolInUseBytes long 当前正在使用的大型池字节数。 largePoolFreeBytes long 当前可用的大型池字节数。 属性 LargePoolFreeBytes 当前可用的大型池字节数。 public long LargePoolFreeBytes { get; } 属性值 long LargePoolInUseBytes 当前正在使用的大型池字节数。 public long LargePoolInUseBytes { get; } 属性值 long SmallPoolFreeBytes 当前可用的小型池字节数。 public long SmallPoolFreeBytes { get; } 属性值 long SmallPoolInUseBytes 当前正在使用的小型池字节数。 public long SmallPoolInUseBytes { get; } 属性值 long"
  },
  "reference/Fantasy.RecyclableMemoryStreamManager.html": {
    "href": "reference/Fantasy.RecyclableMemoryStreamManager.html",
    "title": "RecyclableMemoryStreamManager 类 | Fantasy.Net API Reference",
    "keywords": "RecyclableMemoryStreamManager 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供用于管理可回收内存流的分部类。 public sealed class RecyclableMemoryStreamManager 继承 object RecyclableMemoryStreamManager 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 备注 There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams as they write more data. For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all multiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example. 构造函数 RecyclableMemoryStreamManager() Initializes the memory manager with the default block/buffer specifications. This pool may have unbounded growth unless you modify MaximumFreeSmallPoolBytes and MaximumFreeLargePoolBytes. public RecyclableMemoryStreamManager() RecyclableMemoryStreamManager(int, int, int) Initializes the memory manager with the given block requiredSize. This pool may have unbounded growth unless you modify MaximumFreeSmallPoolBytes and MaximumFreeLargePoolBytes. public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize) 参数 blockSize int Size of each block that is pooled. Must be > 0. largeBufferMultiple int Each large buffer will be a multiple of this value. maximumBufferSize int Buffers larger than this are not pooled 异常 ArgumentOutOfRangeException blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize. ArgumentException maximumBufferSize is not a multiple of largeBufferMultiple. RecyclableMemoryStreamManager(int, int, int, bool) Initializes the memory manager with the given block requiredSize. This pool may have unbounded growth unless you modify MaximumFreeSmallPoolBytes and MaximumFreeLargePoolBytes. public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, bool useExponentialLargeBuffer) 参数 blockSize int Size of each block that is pooled. Must be > 0. largeBufferMultiple int Each large buffer will be a multiple/exponential of this value. maximumBufferSize int Buffers larger than this are not pooled useExponentialLargeBuffer bool Switch to exponential large buffer allocation strategy 异常 ArgumentOutOfRangeException blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize. ArgumentException maximumBufferSize is not a multiple/exponential of largeBufferMultiple. RecyclableMemoryStreamManager(int, int, int, bool, long, long) Initializes the memory manager with the given block requiredSize. public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, bool useExponentialLargeBuffer, long maximumSmallPoolFreeBytes, long maximumLargePoolFreeBytes) 参数 blockSize int Size of each block that is pooled. Must be > 0. largeBufferMultiple int Each large buffer will be a multiple/exponential of this value. maximumBufferSize int Buffers larger than this are not pooled. useExponentialLargeBuffer bool Switch to exponential large buffer allocation strategy. maximumSmallPoolFreeBytes long Maximum number of bytes to keep available in the small pool before future buffers get dropped for garbage collection. maximumLargePoolFreeBytes long Maximum number of bytes to keep available in the large pool before future buffers get dropped for garbage collection. 异常 ArgumentOutOfRangeException blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize, or maximumSmallPoolFreeBytes is negative, or maximumLargePoolFreeBytes is negative. ArgumentException maximumBufferSize is not a multiple/exponential of largeBufferMultiple. RecyclableMemoryStreamManager(int, int, int, long, long) Initializes the memory manager with the given block requiredSize. public RecyclableMemoryStreamManager(int blockSize, int largeBufferMultiple, int maximumBufferSize, long maximumSmallPoolFreeBytes, long maximumLargePoolFreeBytes) 参数 blockSize int Size of each block that is pooled. Must be > 0. largeBufferMultiple int Each large buffer will be a multiple of this value. maximumBufferSize int Buffers larger than this are not pooled maximumSmallPoolFreeBytes long Maximum number of bytes to keep available in the small pool before future buffers get dropped for garbage collection maximumLargePoolFreeBytes long Maximum number of bytes to keep available in the large pool before future buffers get dropped for garbage collection 异常 ArgumentOutOfRangeException blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize, or maximumSmallPoolFreeBytes is negative, or maximumLargePoolFreeBytes is negative. ArgumentException maximumBufferSize is not a multiple of largeBufferMultiple. RecyclableMemoryStreamManager(long, long) Initializes the memory manager with the default block/buffer specifications and maximum free bytes specifications. public RecyclableMemoryStreamManager(long maximumSmallPoolFreeBytes, long maximumLargePoolFreeBytes) 参数 maximumSmallPoolFreeBytes long Maximum number of bytes to keep available in the small pool before future buffers get dropped for garbage collection maximumLargePoolFreeBytes long Maximum number of bytes to keep available in the large pool before future buffers get dropped for garbage collection 异常 ArgumentOutOfRangeException maximumSmallPoolFreeBytes is negative, or maximumLargePoolFreeBytes is negative. 字段 DefaultBlockSize Default block size, in bytes. public const int DefaultBlockSize = 131072 字段值 int DefaultLargeBufferMultiple Default large buffer multiple, in bytes. public const int DefaultLargeBufferMultiple = 1048576 字段值 int DefaultMaximumBufferSize Default maximum buffer size, in bytes. public const int DefaultMaximumBufferSize = 134217728 字段值 int 属性 AggressiveBufferReturn Whether dirty buffers can be immediately returned to the buffer pool. public bool AggressiveBufferReturn { get; set; } 属性值 bool 备注 When GetBuffer() is called on a stream and creates a single large buffer, if this setting is enabled, the other blocks will be returned to the buffer pool immediately. Note when enabling this setting that the user is responsible for ensuring that any buffer previously retrieved from a stream which is subsequently modified is not used after modification (as it may no longer be valid). BlockSize The size of each block. It must be set at creation and cannot be changed. public int BlockSize { get; } 属性值 int GenerateCallStacks Whether to save callstacks for stream allocations. This can help in debugging. It should NEVER be turned on generally in production. public bool GenerateCallStacks { get; set; } 属性值 bool LargeBufferMultiple All buffers are multiples/exponentials of this number. It must be set at creation and cannot be changed. public int LargeBufferMultiple { get; } 属性值 int LargeBuffersFree How many buffers are in the large pool. public long LargeBuffersFree { get; } 属性值 long LargePoolFreeSize Number of bytes in large pool not currently in use. public long LargePoolFreeSize { get; } 属性值 long LargePoolInUseSize Number of bytes currently in use by streams from the large pool. public long LargePoolInUseSize { get; } 属性值 long MaximumBufferSize Gets the maximum buffer size. public int MaximumBufferSize { get; } 属性值 int 备注 Any buffer that is returned to the pool that is larger than this will be discarded and garbage collected. MaximumFreeLargePoolBytes How many bytes of large free buffers to allow before we start dropping those returned to us. public long MaximumFreeLargePoolBytes { get; set; } 属性值 long 备注 The default value is 0, meaning the pool is unbounded. MaximumFreeSmallPoolBytes How many bytes of small free blocks to allow before we start dropping those returned to us. public long MaximumFreeSmallPoolBytes { get; set; } 属性值 long 备注 The default value is 0, meaning the pool is unbounded. MaximumStreamCapacity Maximum stream capacity in bytes. Attempts to set a larger capacity will result in an exception. public long MaximumStreamCapacity { get; set; } 属性值 long 备注 A value of 0 indicates no limit. SmallBlocksFree How many blocks are in the small pool. public long SmallBlocksFree { get; } 属性值 long SmallPoolFreeSize Number of bytes in small pool not currently in use. public long SmallPoolFreeSize { get; } 属性值 long SmallPoolInUseSize Number of bytes currently in use by stream from the small pool. public long SmallPoolInUseSize { get; } 属性值 long ThrowExceptionOnToArray Causes an exception to be thrown if ToArray() is ever called. public bool ThrowExceptionOnToArray { get; set; } 属性值 bool 备注 Calling ToArray() defeats the purpose of a pooled buffer. Use this property to discover code that is calling ToArray(). If this is set and ToArray() is called, a NotSupportedException will be thrown. UseExponentialLargeBuffer Use exponential large buffer allocation strategy. It must be set at creation and cannot be changed. public bool UseExponentialLargeBuffer { get; } 属性值 bool UseMultipleLargeBuffer Use multiple large buffer allocation strategy. It must be set at creation and cannot be changed. public bool UseMultipleLargeBuffer { get; } 属性值 bool 方法 GetStream() Retrieve a new MemoryStream object with no tag and a default initial capacity. public MemoryStream GetStream() 返回 MemoryStream A MemoryStream. GetStream(byte[]) Retrieve a new MemoryStream object with the contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. public MemoryStream GetStream(byte[] buffer) 参数 buffer byte[] The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(Guid) Retrieve a new MemoryStream object with no tag and a default initial capacity. public MemoryStream GetStream(Guid id) 参数 id Guid A unique identifier which can be used to trace usages of the stream. 返回 MemoryStream A MemoryStream. GetStream(Guid, string) Retrieve a new MemoryStream object with the given tag and a default initial capacity. public MemoryStream GetStream(Guid id, string tag) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. 返回 MemoryStream A MemoryStream. GetStream(Guid, string, byte[], int, int) Retrieve a new MemoryStream object with the given tag and with contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. public MemoryStream GetStream(Guid id, string tag, byte[] buffer, int offset, int count) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. buffer byte[] The byte buffer to copy data from. offset int The offset from the start of the buffer to copy from. count int The number of bytes to copy from the buffer. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(Guid, string, int) Retrieve a new MemoryStream object with the given tag and at least the given capacity. public MemoryStream GetStream(Guid id, string tag, int requiredSize) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. requiredSize int The minimum desired capacity for the stream. 返回 MemoryStream A MemoryStream. GetStream(Guid, string, int, bool) Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using a single contiguous underlying buffer. public MemoryStream GetStream(Guid id, string tag, int requiredSize, bool asContiguousBuffer) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. requiredSize int The minimum desired capacity for the stream. asContiguousBuffer bool Whether to attempt to use a single contiguous buffer. 返回 MemoryStream A MemoryStream. 备注 Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations where the initial size is known and it is desirable to avoid copying data between the smaller underlying buffers to a single large one. This is most helpful when you know that you will always call GetBuffer() on the underlying stream. GetStream(Guid, string, long) Retrieve a new MemoryStream object with the given tag and at least the given capacity. public MemoryStream GetStream(Guid id, string tag, long requiredSize) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. requiredSize long The minimum desired capacity for the stream. 返回 MemoryStream A MemoryStream. GetStream(Guid, string, long, bool) Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using a single contiguous underlying buffer. public MemoryStream GetStream(Guid id, string tag, long requiredSize, bool asContiguousBuffer) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. requiredSize long The minimum desired capacity for the stream. asContiguousBuffer bool Whether to attempt to use a single contiguous buffer. 返回 MemoryStream A MemoryStream. 备注 Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations where the initial size is known and it is desirable to avoid copying data between the smaller underlying buffers to a single large one. This is most helpful when you know that you will always call GetBuffer() on the underlying stream. GetStream(Guid, string, Memory<byte>) Retrieve a new MemoryStream object with the given tag and with contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. [Obsolete(\"Use the ReadOnlySpan<byte> version of this method instead.\")] public MemoryStream GetStream(Guid id, string tag, Memory<byte> buffer) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. buffer Memory<byte> The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(Guid, string, ReadOnlySpan<byte>) Retrieve a new MemoryStream object with the given tag and with contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. public MemoryStream GetStream(Guid id, string tag, ReadOnlySpan<byte> buffer) 参数 id Guid A unique identifier which can be used to trace usages of the stream. tag string A tag which can be used to track the source of the stream. buffer ReadOnlySpan<byte> The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(Memory<byte>) Retrieve a new MemoryStream object with the contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. [Obsolete(\"Use the ReadOnlySpan<byte> version of this method instead.\")] public MemoryStream GetStream(Memory<byte> buffer) 参数 buffer Memory<byte> The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(ReadOnlySpan<byte>) Retrieve a new MemoryStream object with the contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. public MemoryStream GetStream(ReadOnlySpan<byte> buffer) 参数 buffer ReadOnlySpan<byte> The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(string) Retrieve a new MemoryStream object with the given tag and a default initial capacity. public MemoryStream GetStream(string tag) 参数 tag string A tag which can be used to track the source of the stream. 返回 MemoryStream A MemoryStream. GetStream(string, byte[], int, int) Retrieve a new MemoryStream object with the given tag and with contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. public MemoryStream GetStream(string tag, byte[] buffer, int offset, int count) 参数 tag string A tag which can be used to track the source of the stream. buffer byte[] The byte buffer to copy data from. offset int The offset from the start of the buffer to copy from. count int The number of bytes to copy from the buffer. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(string, int) Retrieve a new MemoryStream object with the given tag and at least the given capacity. public MemoryStream GetStream(string tag, int requiredSize) 参数 tag string A tag which can be used to track the source of the stream. requiredSize int The minimum desired capacity for the stream. 返回 MemoryStream A MemoryStream. GetStream(string, int, bool) Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using a single contiguous underlying buffer. public MemoryStream GetStream(string tag, int requiredSize, bool asContiguousBuffer) 参数 tag string A tag which can be used to track the source of the stream. requiredSize int The minimum desired capacity for the stream. asContiguousBuffer bool Whether to attempt to use a single contiguous buffer. 返回 MemoryStream A MemoryStream. 备注 Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations where the initial size is known and it is desirable to avoid copying data between the smaller underlying buffers to a single large one. This is most helpful when you know that you will always call GetBuffer() on the underlying stream. GetStream(string, long, bool) Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using a single contiguous underlying buffer. public MemoryStream GetStream(string tag, long requiredSize, bool asContiguousBuffer) 参数 tag string A tag which can be used to track the source of the stream. requiredSize long The minimum desired capacity for the stream. asContiguousBuffer bool Whether to attempt to use a single contiguous buffer. 返回 MemoryStream A MemoryStream. 备注 Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations where the initial size is known and it is desirable to avoid copying data between the smaller underlying buffers to a single large one. This is most helpful when you know that you will always call GetBuffer() on the underlying stream. GetStream(string, Memory<byte>) Retrieve a new MemoryStream object with the given tag and with contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. [Obsolete(\"Use the ReadOnlySpan<byte> version of this method instead.\")] public MemoryStream GetStream(string tag, Memory<byte> buffer) 参数 tag string A tag which can be used to track the source of the stream. buffer Memory<byte> The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. GetStream(string, ReadOnlySpan<byte>) Retrieve a new MemoryStream object with the given tag and with contents copied from the provided buffer. The provided buffer is not wrapped or used after construction. public MemoryStream GetStream(string tag, ReadOnlySpan<byte> buffer) 参数 tag string A tag which can be used to track the source of the stream. buffer ReadOnlySpan<byte> The byte buffer to copy data from. 返回 MemoryStream A MemoryStream. 备注 The new stream's position is set to the beginning of the stream when returned. 事件 BlockCreated Triggered when a new block is created. public event EventHandler<RecyclableMemoryStreamManager.BlockCreatedEventArgs> BlockCreated 事件类型 EventHandler<RecyclableMemoryStreamManager.BlockCreatedEventArgs> BufferDiscarded Triggered when a buffer of either type is discarded, along with the reason for the discard. public event EventHandler<RecyclableMemoryStreamManager.BufferDiscardedEventArgs> BufferDiscarded 事件类型 EventHandler<RecyclableMemoryStreamManager.BufferDiscardedEventArgs> LargeBufferCreated Triggered when a new large buffer is created. public event EventHandler<RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs> LargeBufferCreated 事件类型 EventHandler<RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs> StreamConvertedToArray Triggered when a user converts a stream to array. public event EventHandler<RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs> StreamConvertedToArray 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs> StreamCreated Triggered when a new stream is created. public event EventHandler<RecyclableMemoryStreamManager.StreamCreatedEventArgs> StreamCreated 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamCreatedEventArgs> StreamDisposed Triggered when a stream is disposed. public event EventHandler<RecyclableMemoryStreamManager.StreamDisposedEventArgs> StreamDisposed 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamDisposedEventArgs> StreamDoubleDisposed Triggered when a stream is disposed of twice (an error). public event EventHandler<RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs> StreamDoubleDisposed 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs> StreamFinalized Triggered when a stream is finalized. public event EventHandler<RecyclableMemoryStreamManager.StreamFinalizedEventArgs> StreamFinalized 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamFinalizedEventArgs> StreamLength Triggered when a stream is disposed to report the stream's length. public event EventHandler<RecyclableMemoryStreamManager.StreamLengthEventArgs> StreamLength 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamLengthEventArgs> StreamOverCapacity Triggered when a stream is requested to expand beyond the maximum length specified by the responsible RecyclableMemoryStreamManager. public event EventHandler<RecyclableMemoryStreamManager.StreamOverCapacityEventArgs> StreamOverCapacity 事件类型 EventHandler<RecyclableMemoryStreamManager.StreamOverCapacityEventArgs> UsageReport Periodically triggered to report usage statistics. public event EventHandler<RecyclableMemoryStreamManager.UsageReportEventArgs> UsageReport 事件类型 EventHandler<RecyclableMemoryStreamManager.UsageReportEventArgs>"
  },
  "reference/Fantasy.Response.html": {
    "href": "reference/Fantasy.Response.html",
    "title": "Response 类 | Fantasy.Net API Reference",
    "keywords": "Response 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示响应消息的基类，实现了 IResponse 接口。 public sealed class Response : AProto, IResponse, IMessage 继承 object AProto Response 实现 IResponse IMessage 继承成员 AProto.AfterDeserialization() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Response() public Response() 属性 ErrorCode 获取或设置错误代码。 public uint ErrorCode { get; set; } 属性值 uint RpcId 获取或设置RPC标识。 public long RpcId { get; set; } 属性值 long 方法 OpCode() 获取当前消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.ReuseDictionary-2.html": {
    "href": "reference/Fantasy.ReuseDictionary-2.html",
    "title": "ReuseDictionary<TM, TN> 类 | Fantasy.Net API Reference",
    "keywords": "ReuseDictionary<TM, TN> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供一个可以重用的字典类，支持使用对象池管理。 public sealed class ReuseDictionary<TM, TN> : Dictionary<TM, TN>, IDictionary<TM, TN>, ICollection<KeyValuePair<TM, TN>>, IDictionary, ICollection, IReadOnlyDictionary<TM, TN>, IReadOnlyCollection<KeyValuePair<TM, TN>>, IEnumerable<KeyValuePair<TM, TN>>, IEnumerable, ISerializable, IDeserializationCallback, IDisposable where TM : notnull 类型参数 TM 字典中键的类型。 TN 字典中值的类型。 继承 object Dictionary<TM, TN> ReuseDictionary<TM, TN> 实现 IDictionary<TM, TN> ICollection<KeyValuePair<TM, TN>> IDictionary ICollection IReadOnlyDictionary<TM, TN> IReadOnlyCollection<KeyValuePair<TM, TN>> IEnumerable<KeyValuePair<TM, TN>> IEnumerable ISerializable IDeserializationCallback IDisposable 继承成员 Dictionary<TM, TN>.Add(TM, TN) Dictionary<TM, TN>.Clear() Dictionary<TM, TN>.ContainsKey(TM) Dictionary<TM, TN>.ContainsValue(TN) Dictionary<TM, TN>.GetEnumerator() Dictionary<TM, TN>.OnDeserialization(object) Dictionary<TM, TN>.Remove(TM) Dictionary<TM, TN>.Remove(TM, out TN) Dictionary<TM, TN>.TryGetValue(TM, out TN) Dictionary<TM, TN>.TryAdd(TM, TN) Dictionary<TM, TN>.EnsureCapacity(int) Dictionary<TM, TN>.TrimExcess() Dictionary<TM, TN>.TrimExcess(int) Dictionary<TM, TN>.Comparer Dictionary<TM, TN>.Count Dictionary<TM, TN>.Keys Dictionary<TM, TN>.Values Dictionary<TM, TN>.this[TM] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 ReuseDictionary() public ReuseDictionary() 方法 Create() 创建一个新的 ReuseDictionary<TM, TN> 实例。 public static ReuseDictionary<TM, TN> Create() 返回 ReuseDictionary<TM, TN> 新创建的实例。 Dispose() 释放实例占用的资源。 public void Dispose()"
  },
  "reference/Fantasy.ReuseList-1.html": {
    "href": "reference/Fantasy.ReuseList-1.html",
    "title": "ReuseList<T> 类 | Fantasy.Net API Reference",
    "keywords": "ReuseList<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 可重用的列表，继承自 List<T> 类。该类支持通过对象池重用列表实例，以减少对象分配和释放的开销。 public sealed class ReuseList<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDisposable 类型参数 T 列表中元素的类型。 继承 object List<T> ReuseList<T> 实现 IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDisposable 继承成员 List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.Slice(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) RandomHelper.RandomArray<T>(List<T>) 构造函数 ReuseList() public ReuseList() 方法 Create() 创建一个 ReuseList<T> 可重用的列表的实例。 public static ReuseList<T> Create() 返回 ReuseList<T> 创建的实例。 Dispose() 释放该实例所占用的资源，并将实例返回到对象池中，以便重用。 public void Dispose()"
  },
  "reference/Fantasy.Route-2.html": {
    "href": "reference/Fantasy.Route-2.html",
    "title": "Route<TEntity, TMessage> 类 | Fantasy.Net API Reference",
    "keywords": "Route<TEntity, TMessage> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和路由消息类型的路由。 public abstract class Route<TEntity, TMessage> : IRouteMessageHandler where TEntity : Entity where TMessage : IRouteMessage 类型参数 TEntity 实体类型。 TMessage 路由消息类型。 继承 object Route<TEntity, TMessage> 实现 IRouteMessageHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Route() protected Route() 方法 Handle(Session, Entity, uint, object) 处理路由消息的方法。 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session 会话对象。 entity Entity 实体对象。 rpcId uint RPC标识。 routeMessage object 要处理的路由消息。 返回 FTask 异步任务。 Run(TEntity, TMessage) 运行路由消息处理逻辑。 protected abstract FTask Run(TEntity entity, TMessage message) 参数 entity TEntity 实体对象。 message TMessage 要处理的路由消息。 返回 FTask 异步任务。 Type() 获取处理的消息类型。 public Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.RouteComponent.html": {
    "href": "reference/Fantasy.RouteComponent.html",
    "title": "RouteComponent 类 | Fantasy.Net API Reference",
    "keywords": "RouteComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 自定义Route组件、如果要自定义Route协议必须使用这个组件 public sealed class RouteComponent : Entity, IDisposable 继承 object Entity RouteComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteComponent() public RouteComponent() 字段 RouteAddress 存储路由类型和路由ID的映射关系。 public readonly Dictionary<long, long> RouteAddress 字段值 Dictionary<long, long> 方法 AddAddress(long, long) 添加路由类型和路由ID的映射关系。 public void AddAddress(long routeType, long routeId) 参数 routeType long 路由类型。 routeId long 路由ID。 Dispose() 释放组件资源，清空映射关系。 public override void Dispose() GetRouteId(long) 获取指定路由类型的路由ID。 public long GetRouteId(long routeType) 参数 routeType long 路由类型。 返回 long 路由ID。 RemoveAddress(long) 移除指定路由类型的映射关系。 public void RemoveAddress(long routeType) 参数 routeType long 路由类型。 TryGetRouteId(long, out long) 尝试获取指定路由类型的路由ID。 public bool TryGetRouteId(long routeType, out long routeId) 参数 routeType long 路由类型。 routeId long 输出的路由ID。 返回 bool 如果获取成功返回true，否则返回false。"
  },
  "reference/Fantasy.RouteIdStruct.html": {
    "href": "reference/Fantasy.RouteIdStruct.html",
    "title": "RouteIdStruct 结构 | Fantasy.Net API Reference",
    "keywords": "RouteIdStruct 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个路由 ID 的结构。 public struct RouteIdStruct 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteIdStruct(ushort, ushort) 初始化一个新的路由 ID 结构。 public RouteIdStruct(ushort appId, ushort wordId) 参数 appId ushort 进程 ID。 wordId ushort 世界 ID。 字段 AppId 进程 ID public ushort AppId 字段值 ushort MaskAppId AppId 的掩码。 public const int MaskAppId = 255 字段值 int MaskWordId WordId 的掩码。 public const int MaskWordId = 1023 字段值 int WordId 世界 ID public ushort WordId 字段值 ushort 运算符 implicit operator uint(RouteIdStruct) 将路由 ID 结构隐式转换为无符号整型。 public static implicit operator uint(RouteIdStruct routeId) 参数 routeId RouteIdStruct 要转换的路由 ID 结构。 返回 uint implicit operator RouteIdStruct(uint) 将无符号整型隐式转换为路由 ID 结构。 public static implicit operator RouteIdStruct(uint routeId) 参数 routeId uint 要转换的无符号整型路由 ID。 返回 RouteIdStruct"
  },
  "reference/Fantasy.RouteRPC-3.html": {
    "href": "reference/Fantasy.RouteRPC-3.html",
    "title": "RouteRPC<TEntity, TRouteRequest, TRouteResponse> 类 | Fantasy.Net API Reference",
    "keywords": "RouteRPC<TEntity, TRouteRequest, TRouteResponse> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 泛型路由RPC基类，实现了 IRouteMessageHandler 接口，用于处理请求和响应类型的路由。 public abstract class RouteRPC<TEntity, TRouteRequest, TRouteResponse> : IRouteMessageHandler where TEntity : Entity where TRouteRequest : IRouteRequest where TRouteResponse : IRouteResponse 类型参数 TEntity 实体类型。 TRouteRequest 路由请求类型。 TRouteResponse 路由响应类型。 继承 object RouteRPC<TEntity, TRouteRequest, TRouteResponse> 实现 IRouteMessageHandler Derived ConnectEntityHandler I_AddressableAddHandler I_AddressableGetHandler I_AddressableLockHandler I_AddressableRemoveHandler I_AddressableUnLockHandler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteRPC() protected RouteRPC() 方法 Handle(Session, Entity, uint, object) 处理路由消息的方法。 public FTask Handle(Session session, Entity entity, uint rpcId, object routeMessage) 参数 session Session 会话对象。 entity Entity 实体对象。 rpcId uint RPC标识。 routeMessage object 要处理的路由消息。 返回 FTask 异步任务。 Run(TEntity, TRouteRequest, TRouteResponse, Action) 运行路由消息处理逻辑。 protected abstract FTask Run(TEntity entity, TRouteRequest request, TRouteResponse response, Action reply) 参数 entity TEntity 实体对象。 request TRouteRequest 请求路由消息。 response TRouteResponse 响应路由消息。 reply Action 发送响应的方法。 返回 FTask 异步任务。 Type() 获取处理的消息类型。 public Type Type() 返回 Type 消息类型。"
  },
  "reference/Fantasy.RouteResponse.html": {
    "href": "reference/Fantasy.RouteResponse.html",
    "title": "RouteResponse 类 | Fantasy.Net API Reference",
    "keywords": "RouteResponse 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示路由响应消息的类，实现了 IRouteResponse 接口。 public sealed class RouteResponse : AProto, IRouteResponse, IResponse, IMessage 继承 object AProto RouteResponse 实现 IRouteResponse IResponse IMessage 继承成员 AProto.AfterDeserialization() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RouteResponse() public RouteResponse() 属性 ErrorCode 获取或设置错误代码。 public uint ErrorCode { get; set; } 属性值 uint RpcId 获取或设置RPC标识。 public long RpcId { get; set; } 属性值 long 方法 OpCode() 获取当前消息的操作代码。 public uint OpCode() 返回 uint 操作代码。"
  },
  "reference/Fantasy.RuntimeIdStruct.html": {
    "href": "reference/Fantasy.RuntimeIdStruct.html",
    "title": "RuntimeIdStruct 结构 | Fantasy.Net API Reference",
    "keywords": "RuntimeIdStruct 结构 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个运行时 ID 的结构。 public struct RuntimeIdStruct 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RuntimeIdStruct(uint, uint) 初始化一个新的运行时 ID 结构。 public RuntimeIdStruct(uint time, uint sequence) 参数 time uint 时间部分。 sequence uint 序列号部分。 运算符 implicit operator long(RuntimeIdStruct) 将运行时 ID 结构隐式转换为长整型。 public static implicit operator long(RuntimeIdStruct runtimeId) 参数 runtimeId RuntimeIdStruct 要转换的运行时 ID 结构。 返回 long implicit operator RuntimeIdStruct(long) 将长整型隐式转换为运行时 ID 结构。 public static implicit operator RuntimeIdStruct(long id) 参数 id long 要转换的长整型 ID。 返回 RuntimeIdStruct"
  },
  "reference/Fantasy.STaskStatus.html": {
    "href": "reference/Fantasy.STaskStatus.html",
    "title": "STaskStatus 枚举 | Fantasy.Net API Reference",
    "keywords": "STaskStatus 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示异步任务的状态。 public enum STaskStatus : byte 扩展方法 JsonHelper.ToJson<T>(T) 字段 Faulted = 2 The operation completed with an error. Pending = 0 The operation has not yet completed. Succeeded = 1 The operation completed successfully."
  },
  "reference/Fantasy.ScanException.html": {
    "href": "reference/Fantasy.ScanException.html",
    "title": "ScanException 类 | Fantasy.Net API Reference",
    "keywords": "ScanException 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 在扫描过程中发生的异常。 public class ScanException : Exception, ISerializable 继承 object Exception ScanException 实现 ISerializable 继承成员 Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ScanException() 初始化 ScanException 类的新实例。 public ScanException() ScanException(string) 使用指定的错误消息初始化 ScanException 类的新实例。 public ScanException(string msg) 参数 msg string 错误消息。"
  },
  "reference/Fantasy.Scene.html": {
    "href": "reference/Fantasy.Scene.html",
    "title": "Scene 类 | Fantasy.Net API Reference",
    "keywords": "Scene 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个场景实体，用于创建与管理特定的游戏场景信息。 public class Scene : Entity, IDisposable, INotSupportedPool 继承 object Entity Scene 实现 IDisposable INotSupportedPool 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.Create<T>(long, uint, bool) Entity.Create<T>(long, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Scene() public Scene() 字段 Scenes 存储所有已创建的场景实体。 public static readonly List<Scene> Scenes 字段值 List<Scene> 属性 LocationId 获取场景的位置ID。 public uint LocationId { get; } 属性值 uint SceneSubType 获取或设置场景子类型。 public int SceneSubType { get; } 属性值 int SceneType 获取或设置场景类型。 public int SceneType { get; } 属性值 int Server 获取或设置所属服务器。 public Server Server { get; } 属性值 Server World 获取或设置所属世界。 public World? World { get; } 属性值 World 方法 Create(Server, int, int, long, uint, string, string, int) 创建一个新的场景实体，并根据提供的参数配置场景属性。 public static FTask<Scene> Create(Server server, int sceneType = 0, int sceneSubType = 0, long sceneId = 0, uint worldId = 0, string networkProtocol = null, string outerBindIp = null, int outerPort = 0) 参数 server Server 所属服务器实体。 sceneType int 场景类型。 sceneSubType int 场景子类型。 sceneId long 场景ID。 worldId uint 世界ID。 networkProtocol string 网络协议。 outerBindIp string 外部绑定IP。 outerPort int 外部端口。 返回 FTask<Scene> 新创建的场景实体。 Create<T>(Scene, int, int) 创建一个新的场景实体，通过复制已有场景并设置特定属性来实现。 public static FTask<T> Create<T>(Scene scene, int sceneType, int sceneSubType) where T : Scene, new() 参数 scene Scene 要复制的场景。 sceneType int 场景类型。 sceneSubType int 场景子类型。 返回 FTask<T> 新创建的场景实体。 类型参数 T 要创建的场景类型。 Dispose() 释放场景实体及其资源。 public override void Dispose() DisposeAllScene() 释放所有已创建的场景实体及其资源。 public static void DisposeAllScene() GetSceneInfoByServerConfigId(uint) 根据服务器配置ID获取与之关联的场景配置信息列表。 public static List<SceneConfigInfo> GetSceneInfoByServerConfigId(uint serverConfigId) 参数 serverConfigId uint 服务器配置ID。 返回 List<SceneConfigInfo> 与服务器配置ID关联的场景配置信息列表。"
  },
  "reference/Fantasy.SceneConfigInfo.html": {
    "href": "reference/Fantasy.SceneConfigInfo.html",
    "title": "SceneConfigInfo 类 | Fantasy.Net API Reference",
    "keywords": "SceneConfigInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 场景配置信息的类。 public class SceneConfigInfo 继承 object SceneConfigInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SceneConfigInfo() public SceneConfigInfo() 字段 EntityId 获取或设置场景实体的唯一标识。 public long EntityId 字段值 long Id 获取或设置场景的唯一标识。 public uint Id 字段值 uint NetworkProtocol 获取或设置网络协议。 public string NetworkProtocol 字段值 string OuterPort 获取或设置外部端口。 public int OuterPort 字段值 int SceneSubType 获取或设置场景子类型。 public int SceneSubType 字段值 int SceneSubTypeStr 获取或设置场景子类型的字符串表示。 public string SceneSubTypeStr 字段值 string SceneType 获取或设置场景类型。 public int SceneType 字段值 int SceneTypeStr 获取或设置场景类型的字符串表示。 public string SceneTypeStr 字段值 string ServerConfigId 获取或设置服务器配置的唯一标识。 public uint ServerConfigId 字段值 uint WorldId 获取或设置世界的唯一标识。 public uint WorldId 字段值 uint"
  },
  "reference/Fantasy.Server.html": {
    "href": "reference/Fantasy.Server.html",
    "title": "Server 类 | Fantasy.Net API Reference",
    "keywords": "Server 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 网络中的服务器。 public sealed class Server 继承 object Server 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Server() public Server() 属性 Id 获取服务器的唯一标识符。 public uint Id { get; } 属性值 uint Scene 获取与服务器关联的场景。 public Scene Scene { get; } 属性值 Scene 方法 Create(uint) 创建并初始化具有指定服务器配置的服务器。 public static FTask Create(uint serverConfigId) 参数 serverConfigId uint 服务器配置的标识符。 返回 FTask Create(uint, string, int, string, List<SceneConfigInfo>) 创建一个新的服务器实例或获取现有服务器实例。 public static FTask<Server> Create(uint serverConfigId, string innerBindIp, int innerPort, string outerBindIp, List<SceneConfigInfo> sceneInfos) 参数 serverConfigId uint 要创建的服务器的配置标识符。 innerBindIp string 服务器的内部绑定 IP 地址。 innerPort int 服务器的内部端口。 outerBindIp string 服务器的外部绑定 IP 地址。 sceneInfos List<SceneConfigInfo> 要创建的场景配置信息列表。 返回 FTask<Server> 创建或获取的服务器实例。 Get(uint) 根据路由标识符获取服务器实例。 public static Server Get(uint routeId) 参数 routeId uint 服务器的路由标识符。 返回 Server 找到的服务器实例，如果未找到则返回 null。 GetSession(uint) 获取用于与指定目标服务器通信的会话。 public Session GetSession(uint targetServerId) 参数 targetServerId uint 目标服务器的标识符。 返回 Session 与目标服务器的会话。 RemoveSession(uint) 移除与指定目标服务器关联的会话。 public void RemoveSession(uint targetServerId) 参数 targetServerId uint 目标服务器的标识符。"
  },
  "reference/Fantasy.ServerConfigInfo.html": {
    "href": "reference/Fantasy.ServerConfigInfo.html",
    "title": "ServerConfigInfo 类 | Fantasy.Net API Reference",
    "keywords": "ServerConfigInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 服务器配置信息。 public class ServerConfigInfo 继承 object ServerConfigInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ServerConfigInfo() public ServerConfigInfo() 字段 Id 获取或设置服务器的唯一标识符。 public uint Id 字段值 uint InnerPort 获取或设置服务器的内部端口。 public int InnerPort 字段值 int MachineId 获取或设置服务器所在的机器标识符。 public uint MachineId 字段值 uint"
  },
  "reference/Fantasy.ServerInnerSession.html": {
    "href": "reference/Fantasy.ServerInnerSession.html",
    "title": "ServerInnerSession 类 | Fantasy.Net API Reference",
    "keywords": "ServerInnerSession 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 网络服务器内部会话。 public sealed class ServerInnerSession : Session, INotSupportedPool, ISupportedMultiEntity, IDisposable 继承 object Entity Session ServerInnerSession 实现 INotSupportedPool ISupportedMultiEntity IDisposable 继承成员 Session.Sessions Session.RequestCallback Session.Create(ANetworkMessageScheduler, ANetworkChannel, NetworkTarget) Session.Create(AClientNetwork, IPEndPoint) Session.Create(ANetwork) Session.CreateServerInner(Scene) Session.TryGet(long, out Session) Session.Dispose() Session.NetworkId Session.ChannelId Session.RemoteEndPoint Session.LastReceiveTime Session.NetworkMessageScheduler Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ServerInnerSession() public ServerInnerSession() 方法 Call(IRequest, long) 调用请求并等待响应（不支持）。 public override FTask<IResponse> Call(IRequest request, long routeId = 0) 参数 request IRequest 要调用的请求。 routeId long 路由标识符。 返回 FTask<IResponse> 一个代表异步操作的任务，返回响应。 Send(IRouteMessage, uint, long) 发送路由消息到服务器内部。 public override void Send(IRouteMessage routeMessage, uint rpcId = 0, long routeId = 0) 参数 routeMessage IRouteMessage 要发送的路由消息。 rpcId uint RPC 标识符。 routeId long 路由标识符。 Send(MemoryStream, uint, long, long) 发送内存流到服务器内部（不支持）。 public override void Send(MemoryStream memoryStream, uint rpcId = 0, long routeTypeOpCode = 0, long routeId = 0) 参数 memoryStream MemoryStream 要发送的内存流。 rpcId uint RPC 标识符。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由标识符。 Send(object, uint, long) 发送消息到服务器内部。 public override void Send(object message, uint rpcId = 0, long routeId = 0) 参数 message object 要发送的消息。 rpcId uint RPC 标识符。 routeId long 路由标识符。"
  },
  "reference/Fantasy.ServerNetworkComponent.html": {
    "href": "reference/Fantasy.ServerNetworkComponent.html",
    "title": "ServerNetworkComponent 类 | Fantasy.Net API Reference",
    "keywords": "ServerNetworkComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 服务端Network网络组件。 public sealed class ServerNetworkComponent : Entity, IDisposable, INotSupportedPool 继承 object Entity ServerNetworkComponent 实现 IDisposable INotSupportedPool 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ServerNetworkComponent() public ServerNetworkComponent() 属性 Network 获取关联的服务端Network网络实例。 public ANetwork Network { get; } 属性值 ANetwork 方法 Dispose() 释放服务端网络组件及关联的资源。 public override void Dispose() Initialize(NetworkProtocolType, NetworkTarget, IPEndPoint) 初始化服务端网络组件。 public void Initialize(NetworkProtocolType networkProtocolType, NetworkTarget networkTarget, IPEndPoint address) 参数 networkProtocolType NetworkProtocolType 网络协议类型。 networkTarget NetworkTarget 网络目标。 address IPEndPoint 绑定的IP地址和端口。"
  },
  "reference/Fantasy.Session.html": {
    "href": "reference/Fantasy.Session.html",
    "title": "Session 类 | Fantasy.Net API Reference",
    "keywords": "Session 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 网络会话的基类，用于管理网络通信。 public class Session : Entity, INotSupportedPool, ISupportedMultiEntity, IDisposable 继承 object Entity Session 实现 INotSupportedPool ISupportedMultiEntity IDisposable Derived ServerInnerSession 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.Create<T>(long, uint, bool) Entity.Create<T>(long, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Session() public Session() 字段 RequestCallback 存储请求回调的字典。 public readonly Dictionary<long, FTask<IResponse>> RequestCallback 字段值 Dictionary<long, FTask<IResponse>> Sessions 存储所有会话的字典。 public static readonly Dictionary<long, Session> Sessions 字段值 Dictionary<long, Session> 属性 ChannelId 获取通道的标识符。 public uint ChannelId { get; } 属性值 uint LastReceiveTime 获取最后一次接收数据的时间。 public long LastReceiveTime { get; } 属性值 long NetworkId 获取网络会话的唯一标识符。 public long NetworkId { get; } 属性值 long NetworkMessageScheduler 获取用于网络消息调度的实例。 public ANetworkMessageScheduler NetworkMessageScheduler { get; } 属性值 ANetworkMessageScheduler RemoteEndPoint 连接目标的终结点信息 public IPEndPoint RemoteEndPoint { get; } 属性值 IPEndPoint 方法 Call(IRequest, long) 调用请求并等待响应。 public virtual FTask<IResponse> Call(IRequest request, long routeId = 0) 参数 request IRequest 要调用的请求。 routeId long 路由标识符。 返回 FTask<IResponse> 一个代表异步操作的任务，返回响应。 Create(AClientNetwork, IPEndPoint) 创建一个与客户端网络相关的会话并添加到会话字典中。 public static Session Create(AClientNetwork network, IPEndPoint remoteEndPoint) 参数 network AClientNetwork 与会话关联的客户端网络。 remoteEndPoint IPEndPoint 终结点信息 返回 Session 创建的会话实例。 Create(ANetwork) 创建一个与服务器网络相关的会话并添加到会话字典中。 public static ServerInnerSession Create(ANetwork network) 参数 network ANetwork 与会话关联的服务器网络。 返回 ServerInnerSession 创建的会话实例。 Create(ANetworkMessageScheduler, ANetworkChannel, NetworkTarget) 创建一个会话并添加到会话字典中。 public static void Create(ANetworkMessageScheduler networkMessageScheduler, ANetworkChannel channel, NetworkTarget networkTarget) 参数 networkMessageScheduler ANetworkMessageScheduler 用于网络消息调度的实例。 channel ANetworkChannel 与会话关联的通道。 networkTarget NetworkTarget 网络目标。 CreateServerInner(Scene) 创建一个用于服务器内部会话的实例并添加到会话字典中。 public static ServerInnerSession CreateServerInner(Scene scene) 参数 scene Scene 关联的场景。 返回 ServerInnerSession 创建的会话实例。 Dispose() 释放会话所持有的资源。 public override void Dispose() Send(IRouteMessage, uint, long) 发送路由消息到会话。 public virtual void Send(IRouteMessage routeMessage, uint rpcId = 0, long routeId = 0) 参数 routeMessage IRouteMessage 要发送的路由消息。 rpcId uint RPC 标识符。 routeId long 路由标识符。 Send(MemoryStream, uint, long, long) 发送内存流到会话。 public virtual void Send(MemoryStream memoryStream, uint rpcId = 0, long routeTypeOpCode = 0, long routeId = 0) 参数 memoryStream MemoryStream 要发送的内存流。 rpcId uint RPC 标识符。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由标识符。 Send(object, uint, long) 发送消息到会话。 public virtual void Send(object message, uint rpcId = 0, long routeId = 0) 参数 message object 要发送的消息。 rpcId uint RPC 标识符。 routeId long 路由标识符。 TryGet(long, out Session) 尝试从会话字典中获取指定标识符的会话实例。 public static bool TryGet(long id, out Session session) 参数 id long 会话标识符。 session Session 输出参数，如果找到会话则返回会话实例，否则返回 null。 返回 bool 如果找到会话返回 true，否则返回 false。"
  },
  "reference/Fantasy.SessionIdleCheckerComponent.html": {
    "href": "reference/Fantasy.SessionIdleCheckerComponent.html",
    "title": "SessionIdleCheckerComponent 类 | Fantasy.Net API Reference",
    "keywords": "SessionIdleCheckerComponent 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 负责检查会话空闲超时的组件。 public class SessionIdleCheckerComponent : Entity, IDisposable 继承 object Entity SessionIdleCheckerComponent 实现 IDisposable 继承成员 Entity.GetEntity(long) Entity.TryGetEntity(long, out Entity) Entity.GetEntity<T>(long) Entity.TryGetEntity<T>(long, out T) Entity.Create<T>(Scene, bool) Entity.Create<T>(Scene, long, bool) Entity.Create<T>(long, uint, bool) Entity.Create<T>(long, long, bool) Entity.GetParent<T>() Entity.AddComponent<T>() Entity.AddComponent<T>(long) Entity.AddComponent(Entity) Entity.ForEachMultiEntity() Entity.ForEachEntity() Entity.GetComponent<T>() Entity.GetComponent(Type) Entity.GetComponent<T>(long) Entity.RemoveComponent<T>(bool) Entity.RemoveComponent<T>(long, bool) Entity.RemoveComponent(Entity, bool) Entity.Deserialize(Scene, bool) Entity.Clone() Entity.Id Entity.RuntimeId Entity.IsDisposed Entity.Scene Entity.Parent Entity.ForEachSingleCollection Entity.ForEachTransfer object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SessionIdleCheckerComponent() public SessionIdleCheckerComponent() 方法 Dispose() 重写 Dispose 方法以释放资源。 public override void Dispose() Start(int, int) 使用指定的间隔和空闲超时时间启动空闲检查功能。 public void Start(int interval, int timeOut) 参数 interval int 以毫秒为单位的检查间隔。 timeOut int 以毫秒为单位的空闲超时时间。 Stop() 停止空闲检查功能。 public void Stop()"
  },
  "reference/Fantasy.SingleCollection.html": {
    "href": "reference/Fantasy.SingleCollection.html",
    "title": "SingleCollection 类 | Fantasy.Net API Reference",
    "keywords": "SingleCollection 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 单例集合管理器类，继承自 Singleton<T>。 public class SingleCollection : Singleton<SingleCollection>, ISingleton, IDisposable 继承 object Singleton<SingleCollection> SingleCollection 实现 ISingleton IDisposable 继承成员 Singleton<SingleCollection>.Initialize() Singleton<SingleCollection>.Dispose() Singleton<SingleCollection>.IsDisposed Singleton<SingleCollection>.Instance object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SingleCollection() public SingleCollection() 方法 GetCollections(Entity) 异步获取实体的集合数据。 public FTask GetCollections(Entity entity) 参数 entity Entity 实体对象。 返回 FTask 表示异步操作的任务。 OnLoad(int) 在程序集加载时执行的方法。 protected override void OnLoad(int assemblyName) 参数 assemblyName int 程序集名称。 OnUnLoad(int) 在程序集卸载时执行的方法。 protected override void OnUnLoad(int assemblyName) 参数 assemblyName int 程序集名称。 SaveCollections(Entity) 异步保存实体的集合数据。 public FTask SaveCollections(Entity entity) 参数 entity Entity 实体对象。 返回 FTask 表示异步操作的任务。"
  },
  "reference/Fantasy.SingleCollectionAttribute.html": {
    "href": "reference/Fantasy.SingleCollectionAttribute.html",
    "title": "SingleCollectionAttribute 类 | Fantasy.Net API Reference",
    "keywords": "SingleCollectionAttribute 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示用于指定实体的单一集合存储属性。此属性用于配合 ISupportedSingleCollection 接口使用， 用于定义实体属于哪个父实体的子集合，以及在数据库中使用的集合名称。 [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public class SingleCollectionAttribute : Attribute 继承 object Attribute SingleCollectionAttribute 继承成员 Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SingleCollectionAttribute(Type, string) 初始化 SingleCollectionAttribute 类的新实例，指定父实体类型和集合名称。 public SingleCollectionAttribute(Type rootType, string collectionName) 参数 rootType Type 父实体的类型。 collectionName string 在数据库中使用的集合名称。 字段 CollectionName 获取在数据库中使用的集合名称。 public readonly string CollectionName 字段值 string RootType 获取父实体的类型，指示此实体是属于哪个父实体的子集合。 public readonly Type RootType 字段值 Type"
  },
  "reference/Fantasy.Singleton-1.html": {
    "href": "reference/Fantasy.Singleton-1.html",
    "title": "Singleton<T> 类 | Fantasy.Net API Reference",
    "keywords": "Singleton<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象的单例基类，继承自 ISingleton 接口。 public abstract class Singleton<T> : ISingleton, IDisposable where T : ISingleton, new() 类型参数 T 单例类型。 继承 object Singleton<T> 实现 ISingleton IDisposable Derived EntitiesSystem EventSystem MessageDispatcherSystem MongoHelper NetworkThread SingleCollection TimerScheduler 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Singleton() protected Singleton() 属性 Instance 获取单例的实例。 public static T Instance { get; } 属性值 T IsDisposed 获取或设置单例是否已被销毁。 public bool IsDisposed { get; set; } 属性值 bool 方法 Dispose() 释放单例的方法。 public virtual void Dispose() Initialize() 初始化单例的方法。 public virtual Task Initialize() 返回 Task 表示异步操作的任务。 OnLoad(int) 在程序集加载时执行的方法。 protected virtual void OnLoad(int assemblyName) 参数 assemblyName int 程序集名称。 OnUnLoad(int) 在程序集卸载时执行的方法。 protected virtual void OnUnLoad(int assemblyName) 参数 assemblyName int 程序集名称。"
  },
  "reference/Fantasy.SingletonSystem.html": {
    "href": "reference/Fantasy.SingletonSystem.html",
    "title": "SingletonSystem 类 | Fantasy.Net API Reference",
    "keywords": "SingletonSystem 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 单例管理系统，负责管理和调度实现 ISingleton 接口的单例对象。 public static class SingletonSystem 继承 object SingletonSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Dispose() 销毁 SingletonSystem，释放所有单例资源并取消监视程序集事件。 public static void Dispose() Initialize() 初始化 SingletonSystem，开始监视程序集加载和卸载事件。 public static void Initialize() Update() 更新 SingletonSystem 中的所有 IUpdateSingleton 单例对象。 public static void Update()"
  },
  "reference/Fantasy.SkipTable-1.html": {
    "href": "reference/Fantasy.SkipTable-1.html",
    "title": "SkipTable<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTable<TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 跳表数据结构（升序版） public class SkipTable<TValue> : SkipTableBase<TValue>, IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 TValue 跳表中存储的值的类型。 继承 object SkipTableBase<TValue> SkipTable<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 SkipTableBase<TValue>.MaxLayer SkipTableBase<TValue>.TopHeader SkipTableBase<TValue>.BottomHeader SkipTableBase<TValue>.Random SkipTableBase<TValue>.Node SkipTableBase<TValue>.AntiFindStack SkipTableBase<TValue>.GetRanking(long) SkipTableBase<TValue>.GetAntiRanking(long) SkipTableBase<TValue>.TryGetValueByKey(long, out TValue) SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>) SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.GetLastValue() SkipTableBase<TValue>.Remove(long) SkipTableBase<TValue>.GetEnumerator() SkipTableBase<TValue>.Count SkipTableBase<TValue>.this[long] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTable(int) 创建一个新的跳表实例。 public SkipTable(int maxLayer = 8) 参数 maxLayer int 跳表的最大层数。 方法 Add(long, long, long, TValue) 向跳表中添加一个新节点。 public override void Add(long sortKey, long viceKey, long key, TValue value) 参数 sortKey long 节点的主排序键。 viceKey long 节点的副排序键。 key long 节点的唯一键。 value TValue 要添加的值。 Remove(long, long, long, out TValue) 从跳表中移除一个节点。 public override bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 sortKey long 节点的主排序键。 viceKey long 节点的副排序键。 key long 节点的唯一键。 value TValue 被移除的节点的值。 返回 bool 如果成功移除节点，则为 true；否则为 false。"
  },
  "reference/Fantasy.SkipTableBase-1.html": {
    "href": "reference/Fantasy.SkipTableBase-1.html",
    "title": "SkipTableBase<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTableBase<TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 抽象的跳表基类，提供跳表的基本功能和操作。 public abstract class SkipTableBase<TValue> : IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 TValue 跳表中存储的值的类型。 继承 object SkipTableBase<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable Derived SkipTableDesc<TValue> SkipTable<TValue> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTableBase(int) 初始化一个新的跳表实例。 protected SkipTableBase(int maxLayer = 8) 参数 maxLayer int 跳表的最大层数，默认为 8。 字段 AntiFindStack 用于辅助反向查找的栈 protected readonly Stack<SkipTableNode<TValue>> AntiFindStack 字段值 Stack<SkipTableNode<TValue>> BottomHeader 跳表的底部头节点 public SkipTableNode<TValue> BottomHeader 字段值 SkipTableNode<TValue> MaxLayer 跳表的最大层数 public readonly int MaxLayer 字段值 int Node 存储跳表节点的字典 protected readonly Dictionary<long, SkipTableNode<TValue>> Node 字段值 Dictionary<long, SkipTableNode<TValue>> Random 用于生成随机数的随机数生成器 protected readonly Random Random 字段值 Random TopHeader 跳表的顶部头节点 public readonly SkipTableNode<TValue> TopHeader 字段值 SkipTableNode<TValue> 属性 Count 跳表中节点的数量，使用了 Node 字典的计数 public int Count { get; } 属性值 int this[long] 获取指定键的节点的值，若不存在则返回默认值。 public TValue this[long key] { get; } 参数 key long 要查找的键。 属性值 TValue 方法 Add(long, long, long, TValue) 向跳表中添加节点。 public abstract void Add(long sortKey, long viceKey, long key, TValue value) 参数 sortKey long 节点的排序键。 viceKey long 节点的副键。 key long 节点的键。 value TValue 节点的值。 AntiFind(int, int, ListPool<SkipTableNode<TValue>>) 在跳表中进行反向查找节点，返回从结束位置到起始位置的节点列表。 public void AntiFind(int start, int end, ListPool<SkipTableNode<TValue>> list) 参数 start int 结束位置的排名。 end int 起始位置的排名。 list ListPool<SkipTableNode<TValue>> 用于存储节点列表的 ListPool<T> 实例。 Find(int, int, ListPool<SkipTableNode<TValue>>) 在跳表中查找节点，返回从起始位置到结束位置的节点列表。 public void Find(int start, int end, ListPool<SkipTableNode<TValue>> list) 参数 start int 起始位置的排名。 end int 结束位置的排名。 list ListPool<SkipTableNode<TValue>> 用于存储节点列表的 ListPool<T> 实例。 GetAntiRanking(long) 获取指定键的反向排名，即在比该键更大的节点中的排名。 public int GetAntiRanking(long key) 参数 key long 要查找的键。 返回 int 反向排名。 GetEnumerator() 返回一个枚举器，用于遍历跳表中的节点。 public IEnumerator<SkipTableNode<TValue>> GetEnumerator() 返回 IEnumerator<SkipTableNode<TValue>> 一个可用于遍历跳表节点的枚举器。 GetLastValue() 获取跳表中最后一个节点的值。 public TValue GetLastValue() 返回 TValue 最后一个节点的值。 GetRanking(long) 获取指定键的节点在跳表中的排名。 public int GetRanking(long key) 参数 key long 要查找的键。 返回 int 节点的排名。 Remove(long) 移除跳表中指定键的节点。 public bool Remove(long key) 参数 key long 要移除的节点的键。 返回 bool 移除是否成功。 Remove(long, long, long, out TValue) 从跳表中移除指定键的节点。 public abstract bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 sortKey long 节点的排序键。 viceKey long 节点的副键。 key long 节点的键。 value TValue 被移除的节点的值。 返回 bool 移除是否成功。 TryGetNodeByKey(long, out SkipTableNode<TValue>) 尝试通过键获取节点。 public bool TryGetNodeByKey(long key, out SkipTableNode<TValue> node) 参数 key long 要查找的键。 node SkipTableNode<TValue> 获取到的节点，如果键不存在则为 null。 返回 bool 是否成功获取节点。 TryGetValueByKey(long, out TValue) 尝试通过键获取节点的值。 public bool TryGetValueByKey(long key, out TValue value) 参数 key long 要查找的键。 value TValue 获取到的节点的值，如果键不存在则为默认值。 返回 bool 是否成功获取节点的值。"
  },
  "reference/Fantasy.SkipTableDesc-1.html": {
    "href": "reference/Fantasy.SkipTableDesc-1.html",
    "title": "SkipTableDesc<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTableDesc<TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 跳表降序版，用于存储降序排列的数据。 public class SkipTableDesc<TValue> : SkipTableBase<TValue>, IEnumerable<SkipTableNode<TValue>>, IEnumerable 类型参数 TValue 存储的值的类型。 继承 object SkipTableBase<TValue> SkipTableDesc<TValue> 实现 IEnumerable<SkipTableNode<TValue>> IEnumerable 继承成员 SkipTableBase<TValue>.MaxLayer SkipTableBase<TValue>.TopHeader SkipTableBase<TValue>.BottomHeader SkipTableBase<TValue>.Random SkipTableBase<TValue>.Node SkipTableBase<TValue>.AntiFindStack SkipTableBase<TValue>.GetRanking(long) SkipTableBase<TValue>.GetAntiRanking(long) SkipTableBase<TValue>.TryGetValueByKey(long, out TValue) SkipTableBase<TValue>.TryGetNodeByKey(long, out SkipTableNode<TValue>) SkipTableBase<TValue>.Find(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.AntiFind(int, int, ListPool<SkipTableNode<TValue>>) SkipTableBase<TValue>.GetLastValue() SkipTableBase<TValue>.Remove(long) SkipTableBase<TValue>.GetEnumerator() SkipTableBase<TValue>.Count SkipTableBase<TValue>.this[long] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTableDesc(int) 初始化跳表降序版的新实例。 public SkipTableDesc(int maxLayer = 8) 参数 maxLayer int 跳表的最大层数，默认为 8。 方法 Add(long, long, long, TValue) 向跳表中添加一个节点，根据降序规则进行插入。 public override void Add(long sortKey, long viceKey, long key, TValue value) 参数 sortKey long 排序主键。 viceKey long 副键。 key long 键。 value TValue 值。 Remove(long, long, long, out TValue) 从跳表中移除一个节点，根据降序规则进行移除。 public override bool Remove(long sortKey, long viceKey, long key, out TValue value) 参数 sortKey long 排序主键。 viceKey long 副键。 key long 键。 value TValue 移除的节点值。 返回 bool 如果成功移除节点，则返回 true，否则返回 false。"
  },
  "reference/Fantasy.SkipTableNode-1.html": {
    "href": "reference/Fantasy.SkipTableNode-1.html",
    "title": "SkipTableNode<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SkipTableNode<TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 跳跃表节点。 public class SkipTableNode<TValue> 类型参数 TValue 节点的值的类型。 继承 object SkipTableNode<TValue> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 SkipTableNode(long, long, long, TValue, int, SkipTableNode<TValue>, SkipTableNode<TValue>, SkipTableNode<TValue>) 初始化跳跃表节点的新实例。 public SkipTableNode(long sortKey, long viceKey, long key, TValue value, int index, SkipTableNode<TValue> l, SkipTableNode<TValue> r, SkipTableNode<TValue> d) 参数 sortKey long 节点的排序键。 viceKey long 节点的副键。 key long 节点的主键。 value TValue 节点存储的值。 index int 节点在跳跃表中的索引。 l SkipTableNode<TValue> 指向左侧节点的引用。 r SkipTableNode<TValue> 指向右侧节点的引用。 d SkipTableNode<TValue> 指向下一层节点的引用。 字段 Down 指向下一层节点的引用。 public SkipTableNode<TValue> Down 字段值 SkipTableNode<TValue> Index 节点在跳跃表中的索引。 public int Index 字段值 int Key 节点的主键。 public long Key 字段值 long Left 指向左侧节点的引用。 public SkipTableNode<TValue> Left 字段值 SkipTableNode<TValue> Right 指向右侧节点的引用。 public SkipTableNode<TValue> Right 字段值 SkipTableNode<TValue> SortKey 节点的排序键。 public long SortKey 字段值 long Value 节点存储的值。 public TValue Value 字段值 TValue ViceKey 节点的副键。 public long ViceKey 字段值 long"
  },
  "reference/Fantasy.SocketExtensions.html": {
    "href": "reference/Fantasy.SocketExtensions.html",
    "title": "SocketExtensions 类 | Fantasy.Net API Reference",
    "keywords": "SocketExtensions 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供扩展方法以操作 Socket 缓冲区大小。 public static class SocketExtensions 继承 object SocketExtensions 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 SetReceiveBufferToOSLimit(Socket, int, int) 将 Socket 接收缓冲区大小设置为操作系统限制。 尝试增加接收缓冲区大小的次数 = 默认 + 最大增加 100 MB。 public static void SetReceiveBufferToOSLimit(this Socket socket, int stepSize = 1024, int attempts = 100000) 参数 socket Socket 要设置接收缓冲区大小的 Socket。 stepSize int 每次增加的步长大小。 attempts int 尝试增加缓冲区大小的次数。 SetSendBufferToOSLimit(Socket, int, int) 将 Socket 发送缓冲区大小设置为操作系统限制。 尝试增加发送缓冲区大小的次数 = 默认 + 最大增加 100 MB。 public static void SetSendBufferToOSLimit(this Socket socket, int stepSize = 1024, int attempts = 100000) 参数 socket Socket 要设置发送缓冲区大小的 Socket。 stepSize int 每次增加的步长大小。 attempts int 尝试增加缓冲区大小的次数。 SetSocketBufferToOsLimit(Socket) 将 Socket 缓冲区大小设置为操作系统限制。 public static void SetSocketBufferToOsLimit(this Socket socket) 参数 socket Socket 要设置缓冲区大小的 Socket。"
  },
  "reference/Fantasy.SortedConcurrentOneToManyList-2.html": {
    "href": "reference/Fantasy.SortedConcurrentOneToManyList-2.html",
    "title": "SortedConcurrentOneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedConcurrentOneToManyList<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基于排序字典和并发集合实现的一多对映射列表类，继承自 SortedDictionary<TKey, TValue> 类， 用于在多个值与一个键关联的情况下进行管理和存储。该类支持并发操作，适用于多线程环境。 public class SortedConcurrentOneToManyList<TKey, TValue> : SortedDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object SortedDictionary<TKey, List<TValue>> SortedConcurrentOneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable Derived SortedConcurrentOneToManyListPool<TKey, TValue> 继承成员 SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedConcurrentOneToManyList() 初始化一个新的 SortedConcurrentOneToManyList<TKey, TValue> 类的实例，使用默认的参数设置。 public SortedConcurrentOneToManyList() SortedConcurrentOneToManyList(int) 初始化一个新的 SortedConcurrentOneToManyList<TKey, TValue> 类的实例，指定最大缓存数量。 public SortedConcurrentOneToManyList(int recyclingLimit = 0) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValue) 将指定的值添加到与指定键关联的列表中。 public void Add(TKey key, TValue value) 参数 key TKey 要关联值的键。 value TValue 要添加到列表的值。 Clear() 清空映射列表以及队列。 protected void Clear() Contains(TKey, TValue) 检查指定的键和值是否存在于映射列表中。 public bool Contains(TKey key, TValue value) 参数 key TKey 要检查的键。 value TValue 要检查的值。 返回 bool 如果存在，则为 true；否则为 false。 First(TKey) 获取与指定键关联的列表中的第一个值。 如果列表不存在或为空，则返回默认值。 public TValue First(TKey key) 参数 key TKey 要获取第一个值的键。 返回 TValue 第一个值，或默认值。 RemoveKey(TKey) 从映射列表中移除指定的键及其关联的列表。 如果键不存在于映射列表中，则不执行任何操作。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 RemoveValue(TKey, TValue) 从与指定键关联的列表中移除指定的值。 如果列表不存在或值不存在于列表中，则不执行任何操作。 public void RemoveValue(TKey key, TValue value) 参数 key TKey 要移除值的键。 value TValue 要移除的值。"
  },
  "reference/Fantasy.SortedConcurrentOneToManyListPool-2.html": {
    "href": "reference/Fantasy.SortedConcurrentOneToManyListPool-2.html",
    "title": "SortedConcurrentOneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedConcurrentOneToManyListPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基于排序字典和并发集合实现的一对多映射列表的对象池包装类，继承自 SortedConcurrentOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 public class SortedConcurrentOneToManyListPool<TKey, TValue> : SortedConcurrentOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey 键的类型。 TValue 值的类型。 继承 object SortedDictionary<TKey, List<TValue>> SortedConcurrentOneToManyList<TKey, TValue> SortedConcurrentOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable IDisposable 继承成员 SortedConcurrentOneToManyList<TKey, TValue>.Contains(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.Add(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.First(TKey) SortedConcurrentOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) SortedConcurrentOneToManyList<TKey, TValue>.RemoveKey(TKey) SortedConcurrentOneToManyList<TKey, TValue>.Clear() SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedConcurrentOneToManyListPool() public SortedConcurrentOneToManyListPool() 方法 Create() 创建一个新的 SortedConcurrentOneToManyListPool<TKey, TValue> 实例，使用默认的参数设置。 public static SortedConcurrentOneToManyListPool<TKey, TValue> Create() 返回 SortedConcurrentOneToManyListPool<TKey, TValue> 新创建的 SortedConcurrentOneToManyListPool<TKey, TValue> 实例。 Dispose() 释放当前对象池实例，将其返回到对象池以供重用。 public void Dispose()"
  },
  "reference/Fantasy.SortedOneToManyHashSet-2.html": {
    "href": "reference/Fantasy.SortedOneToManyHashSet-2.html",
    "title": "SortedOneToManyHashSet<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyHashSet<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基于排序字典实现的一对多关系的映射哈希集合类，将唯一键映射到多个值的哈希集合。 用于在多个值与一个键关联的情况下进行管理和存储。 public class SortedOneToManyHashSet<TKey, TValue> : SortedDictionary<TKey, HashSet<TValue>>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey 字典中键的类型。 TValue 集合中值的类型。 继承 object SortedDictionary<TKey, HashSet<TValue>> SortedOneToManyHashSet<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable Derived SortedOneToManyHashSetPool<TKey, TValue> 继承成员 SortedDictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Clear() SortedDictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.CopyTo(KeyValuePair<TKey, HashSet<TValue>>[], int) SortedDictionary<TKey, HashSet<TValue>>.GetEnumerator() SortedDictionary<TKey, HashSet<TValue>>.Remove(TKey) SortedDictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.this[TKey] SortedDictionary<TKey, HashSet<TValue>>.Count SortedDictionary<TKey, HashSet<TValue>>.Comparer SortedDictionary<TKey, HashSet<TValue>>.Keys SortedDictionary<TKey, HashSet<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyHashSet() 创建一个新的 SortedOneToManyHashSet<TKey, TValue> 实例。 public SortedOneToManyHashSet() SortedOneToManyHashSet(int) 创建一个新的 SortedOneToManyHashSet<TKey, TValue> 实例，设置最大缓存数量 public SortedOneToManyHashSet(int recyclingLimit) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValue) 将指定值添加到给定键关联的哈希集合中。 public void Add(TKey key, TValue value) 参数 key TKey 要添加值的键。 value TValue 要添加的值。 Clear() 重写 Clear 方法，清空字典并清空回收队列。 protected void Clear() Contains(TKey, TValue) 判断哈希集合中是否包含指定的键值对。 public bool Contains(TKey key, TValue value) 参数 key TKey 要查找的键。 value TValue 要查找的值。 返回 bool 如果键值对存在，则为 true；否则为 false。 RemoveKey(TKey) 从字典中移除指定键以及关联的哈希集合，并将集合进行回收。 如果键不存在于映射列表中，则不执行任何操作。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 RemoveValue(TKey, TValue) 从指定键关联的哈希集合中移除特定值。 如果哈希集合不存在或值不存在于集合中，则不执行任何操作。 public void RemoveValue(TKey key, TValue value) 参数 key TKey 要移除值的键。 value TValue 要移除的值。"
  },
  "reference/Fantasy.SortedOneToManyHashSetPool-2.html": {
    "href": "reference/Fantasy.SortedOneToManyHashSetPool-2.html",
    "title": "SortedOneToManyHashSetPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyHashSetPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基于排序字典实现的一对多关系的映射哈希集合的对象池包装类，将唯一键映射到多个值的哈希集合。 同时实现了 IDisposable 接口，以支持对象的重用和释放。 public class SortedOneToManyHashSetPool<TKey, TValue> : SortedOneToManyHashSet<TKey, TValue>, IDictionary<TKey, HashSet<TValue>>, ICollection<KeyValuePair<TKey, HashSet<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, HashSet<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable<KeyValuePair<TKey, HashSet<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey 字典中键的类型。 TValue 哈希集合中值的类型。 继承 object SortedDictionary<TKey, HashSet<TValue>> SortedOneToManyHashSet<TKey, TValue> SortedOneToManyHashSetPool<TKey, TValue> 实现 IDictionary<TKey, HashSet<TValue>> ICollection<KeyValuePair<TKey, HashSet<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, HashSet<TValue>> IReadOnlyCollection<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable<KeyValuePair<TKey, HashSet<TValue>>> IEnumerable IDisposable 继承成员 SortedOneToManyHashSet<TKey, TValue>.Contains(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.Add(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.RemoveValue(TKey, TValue) SortedOneToManyHashSet<TKey, TValue>.RemoveKey(TKey) SortedOneToManyHashSet<TKey, TValue>.Clear() SortedDictionary<TKey, HashSet<TValue>>.Add(TKey, HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.Clear() SortedDictionary<TKey, HashSet<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, HashSet<TValue>>.ContainsValue(HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.CopyTo(KeyValuePair<TKey, HashSet<TValue>>[], int) SortedDictionary<TKey, HashSet<TValue>>.GetEnumerator() SortedDictionary<TKey, HashSet<TValue>>.Remove(TKey) SortedDictionary<TKey, HashSet<TValue>>.TryGetValue(TKey, out HashSet<TValue>) SortedDictionary<TKey, HashSet<TValue>>.this[TKey] SortedDictionary<TKey, HashSet<TValue>>.Count SortedDictionary<TKey, HashSet<TValue>>.Comparer SortedDictionary<TKey, HashSet<TValue>>.Keys SortedDictionary<TKey, HashSet<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyHashSetPool() public SortedOneToManyHashSetPool() 方法 Create() 创建一个 SortedOneToManyHashSetPool<TKey, TValue> 实例。 public static SortedOneToManyHashSetPool<TKey, TValue> Create() 返回 SortedOneToManyHashSetPool<TKey, TValue> 新创建的实例。 Dispose() 释放当前对象池实例，将其返回到对象池以供重用。 public void Dispose()"
  },
  "reference/Fantasy.SortedOneToManyList-2.html": {
    "href": "reference/Fantasy.SortedOneToManyList-2.html",
    "title": "SortedOneToManyList<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyList<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基于排序字典实现的一对多关系的映射列表类，将唯一键映射到包含多个值的列表。 用于在多个值与一个键关联的情况下进行管理和存储。 public class SortedOneToManyList<TKey, TValue> : SortedDictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable where TKey : notnull 类型参数 TKey 字典中键的类型。 TValue 列表中值的类型。 继承 object SortedDictionary<TKey, List<TValue>> SortedOneToManyList<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable Derived SortedOneToManyListPool<TKey, TValue> 继承成员 SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyList() 创建一个新的 SortedOneToManyList<TKey, TValue> 实例。 public SortedOneToManyList() SortedOneToManyList(int) 创建一个新的 SortedOneToManyList<TKey, TValue> 实例，设置最大缓存数量 public SortedOneToManyList(int recyclingLimit = 0) 参数 recyclingLimit int 1:防止数据量过大、所以超过recyclingLimit的数据还是走GC. 2:设置成0不控制数量，全部缓存 方法 Add(TKey, TValue) 将指定值添加到给定键关联的列表中。 public void Add(TKey key, TValue value) 参数 key TKey 要添加值的键。 value TValue 要添加的值。 Clear() 重写 Clear 方法，清空字典并清空回收队列。 protected void Clear() Contains(TKey, TValue) 判断列表中是否包含指定的键值对。 public bool Contains(TKey key, TValue value) 参数 key TKey 要查找的键。 value TValue 要查找的值。 返回 bool 如果键值对存在，则为 true；否则为 false。 First(TKey) 获取指定键关联的列表中的第一个值。 public TValue First(TKey key) 参数 key TKey 要查找值的键。 返回 TValue 指定键关联的列表中的第一个值，如果列表为空则返回默认值。 RemoveKey(TKey) 从字典中移除指定键以及关联的列表，并将列表进行回收。 public void RemoveKey(TKey key) 参数 key TKey 要移除的键。 RemoveValue(TKey, TValue) 从指定键关联的列表中移除特定值。 public void RemoveValue(TKey key, TValue value) 参数 key TKey 要移除值的键。 value TValue 要移除的值。"
  },
  "reference/Fantasy.SortedOneToManyListPool-2.html": {
    "href": "reference/Fantasy.SortedOneToManyListPool-2.html",
    "title": "SortedOneToManyListPool<TKey, TValue> 类 | Fantasy.Net API Reference",
    "keywords": "SortedOneToManyListPool<TKey, TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 基于排序字典实现的一对多映射列表的对象池包装类，继承自 SortedOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 public class SortedOneToManyListPool<TKey, TValue> : SortedOneToManyList<TKey, TValue>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IEnumerable, IDisposable where TKey : notnull 类型参数 TKey 字典中键的类型。 TValue 列表中值的类型。 继承 object SortedDictionary<TKey, List<TValue>> SortedOneToManyList<TKey, TValue> SortedOneToManyListPool<TKey, TValue> 实现 IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IEnumerable IDisposable 继承成员 SortedOneToManyList<TKey, TValue>.Contains(TKey, TValue) SortedOneToManyList<TKey, TValue>.Add(TKey, TValue) SortedOneToManyList<TKey, TValue>.First(TKey) SortedOneToManyList<TKey, TValue>.RemoveValue(TKey, TValue) SortedOneToManyList<TKey, TValue>.RemoveKey(TKey) SortedOneToManyList<TKey, TValue>.Clear() SortedDictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) SortedDictionary<TKey, List<TValue>>.Clear() SortedDictionary<TKey, List<TValue>>.ContainsKey(TKey) SortedDictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) SortedDictionary<TKey, List<TValue>>.CopyTo(KeyValuePair<TKey, List<TValue>>[], int) SortedDictionary<TKey, List<TValue>>.GetEnumerator() SortedDictionary<TKey, List<TValue>>.Remove(TKey) SortedDictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) SortedDictionary<TKey, List<TValue>>.this[TKey] SortedDictionary<TKey, List<TValue>>.Count SortedDictionary<TKey, List<TValue>>.Comparer SortedDictionary<TKey, List<TValue>>.Keys SortedDictionary<TKey, List<TValue>>.Values object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) DictionaryExtensions.TryRemove<T, TV>(IDictionary<T, TV>, T, out TV) 构造函数 SortedOneToManyListPool() public SortedOneToManyListPool() 方法 Create() 创建一个 SortedOneToManyListPool<TKey, TValue> 实例。 public static SortedOneToManyListPool<TKey, TValue> Create() 返回 SortedOneToManyListPool<TKey, TValue> 新创建的实例。 Dispose() 释放当前对象池实例，将其返回到对象池以供重用。 public void Dispose()"
  },
  "reference/Fantasy.StringDictionaryConfig.html": {
    "href": "reference/Fantasy.StringDictionaryConfig.html",
    "title": "StringDictionaryConfig 类 | Fantasy.Net API Reference",
    "keywords": "StringDictionaryConfig 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 使用 ProtoBuf 序列化的字符串字典配置类。 public sealed class StringDictionaryConfig 继承 object StringDictionaryConfig 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StringDictionaryConfig() public StringDictionaryConfig() 字段 Dic 使用 ProtoBuf 序列化的字典。 public Dictionary<int, string> Dic 字段值 Dictionary<int, string> 属性 this[int] 获取或设置指定键的字符串值。 public string this[int key] { get; } 参数 key int 键。 属性值 string 字符串值。 方法 TryGetValue(int, out string) 尝试获取指定键的字符串值。 public bool TryGetValue(int key, out string value) 参数 key int 键。 value string 获取到的字符串值。 返回 bool 如果成功获取到值，则返回 true，否则返回 false。"
  },
  "reference/Fantasy.StructBsonSerialize-1.html": {
    "href": "reference/Fantasy.StructBsonSerialize-1.html",
    "title": "StructBsonSerialize<TValue> 类 | Fantasy.Net API Reference",
    "keywords": "StructBsonSerialize<TValue> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供对结构体类型进行 BSON 序列化和反序列化的辅助类。 public class StructBsonSerialize<TValue> : StructSerializerBase<TValue> where TValue : struct 类型参数 TValue 要序列化和反序列化的结构体类型。 继承 object StructBsonSerialize<TValue> 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 StructBsonSerialize() public StructBsonSerialize() 方法 Deserialize(BsonDeserializationContext, BsonDeserializationArgs) 将 BSON 数据反序列化为结构体对象。 public override TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args) 参数 context BsonDeserializationContext 反序列化上下文。 args BsonDeserializationArgs 反序列化参数。 返回 TValue 反序列化得到的结构体对象。 Serialize(BsonSerializationContext, BsonSerializationArgs, TValue) 将结构体对象序列化为 BSON 数据。 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value) 参数 context BsonSerializationContext 序列化上下文。 args BsonSerializationArgs 序列化参数。 value TValue 要序列化的结构体对象。"
  },
  "reference/Fantasy.TCPClientNetwork.html": {
    "href": "reference/Fantasy.TCPClientNetwork.html",
    "title": "TCPClientNetwork 类 | Fantasy.Net API Reference",
    "keywords": "TCPClientNetwork 类 命名空间 Fantasy 程序集 Fantasy.Net.dll TCP客户端网络类，用于管理TCP客户端网络连接。 public sealed class TCPClientNetwork : AClientNetwork, IDisposable 继承 object ANetwork AClientNetwork TCPClientNetwork 实现 IDisposable 继承成员 AClientNetwork.ChannelId ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TCPClientNetwork(Scene, NetworkTarget) 创建一个 TCP协议客户端网络实例。 public TCPClientNetwork(Scene scene, NetworkTarget networkTarget) 参数 scene Scene 所属场景。 networkTarget NetworkTarget 网络目标。 方法 Connect(IPEndPoint, Action, Action, Action, int) 连接到远程服务器。 public override uint Connect(IPEndPoint remoteEndPoint, Action onConnectComplete, Action onConnectFail, Action onConnectDisconnect, int connectTimeout = 5000) 参数 remoteEndPoint IPEndPoint 远程服务器的终端点。 onConnectComplete Action 连接成功时的回调。 onConnectFail Action 连接失败时的回调。 onConnectDisconnect Action 连接断开时的回调。 connectTimeout int 连接超时时间，单位：毫秒。 返回 uint 连接的通道ID。 Dispose() 释放资源并断开网络连接。 public override void Dispose() RemoveChannel(uint) 从网络中移除指定通道。 public override void RemoveChannel(uint channelId) 参数 channelId uint 要移除的通道 ID。 Send(uint, uint, long, long, MemoryStream) 发送数据到指定的网络通道。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由 ID。 memoryStream MemoryStream 要发送的内存流。 Send(uint, uint, long, long, object) 发送数据到指定的网络通道。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint 通道 ID。 rpcId uint RPC ID。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由 ID。 message object 要发送的消息。 事件 OnChangeChannelId 在通道 ID 发生变化时触发的事件，参数为新的通道 ID。 public override event Action<uint> OnChangeChannelId 事件类型 Action<uint> OnConnectComplete 在连接成功时触发的事件。 public override event Action OnConnectComplete 事件类型 Action OnConnectDisconnect 在连接断开时触发的事件。 public override event Action OnConnectDisconnect 事件类型 Action OnConnectFail 在连接失败时触发的事件。 public override event Action OnConnectFail 事件类型 Action OnDispose 在网络通道被销毁时触发的事件。 public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream 在接收到内存流数据包时触发的事件，参数为解析后的数据包信息。 public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.TCPServerNetwork.html": {
    "href": "reference/Fantasy.TCPServerNetwork.html",
    "title": "TCPServerNetwork 类 | Fantasy.Net API Reference",
    "keywords": "TCPServerNetwork 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示 TCP 协议服务端网络类。 public sealed class TCPServerNetwork : ANetwork, IDisposable 继承 object ANetwork TCPServerNetwork 实现 IDisposable 继承成员 ANetwork.Id ANetwork.Scene ANetwork.IsDisposed ANetwork.NetworkType ANetwork.NetworkTarget ANetwork.NetworkProtocolType ANetwork.NetworkMessageScheduler object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TCPServerNetwork(Scene, NetworkTarget, IPEndPoint) 创建一个 TCP 协议服务端网络实例。 public TCPServerNetwork(Scene scene, NetworkTarget networkTarget, IPEndPoint address) 参数 scene Scene 所属场景。 networkTarget NetworkTarget 网络目标。 address IPEndPoint 服务器绑定的地址和端口。 方法 Dispose() 释放TCPServerNetwork实例使用的所有资源。 public override void Dispose() RemoveChannel(uint) 从网络中移除指定的通道。 public override void RemoveChannel(uint channelId) 参数 channelId uint 要移除的通道的唯一标识。 Send(uint, uint, long, long, MemoryStream) 在指定通道上发送网络消息。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, MemoryStream memoryStream) 参数 channelId uint 要发送消息的通道ID。 rpcId uint RPC（远程过程调用）的ID。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由ID。 memoryStream MemoryStream MemoryStream 包含消息数据。 Send(uint, uint, long, long, object) 在指定通道上发送网络消息。 public override void Send(uint channelId, uint rpcId, long routeTypeOpCode, long routeId, object message) 参数 channelId uint 要发送消息的通道ID。 rpcId uint RPC（远程过程调用）的ID。 routeTypeOpCode long 路由类型和操作码。 routeId long 路由ID。 message object 要发送的消息对象。"
  },
  "reference/Fantasy.TCPServerNetworkChannel.html": {
    "href": "reference/Fantasy.TCPServerNetworkChannel.html",
    "title": "TCPServerNetworkChannel 类 | Fantasy.Net API Reference",
    "keywords": "TCPServerNetworkChannel 类 命名空间 Fantasy 程序集 Fantasy.Net.dll TCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。 public sealed class TCPServerNetworkChannel : ANetworkChannel 继承 object ANetworkChannel TCPServerNetworkChannel 继承成员 ANetworkChannel.Id ANetworkChannel.Scene ANetworkChannel.NetworkId ANetworkChannel.IsDisposed ANetworkChannel.RemoteEndPoint ANetworkChannel.PacketParser object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TCPServerNetworkChannel(uint, Socket, ANetwork) 初始化 TCPServerNetworkChannel 实例。 public TCPServerNetworkChannel(uint id, Socket socket, ANetwork network) 参数 id uint 通道 ID。 socket Socket 与客户端连接的 Socket。 network ANetwork 所属的网络实例。 方法 Dispose() 释放资源并关闭通道。 public override void Dispose() Receive() 开始接收数据。 public void Receive() Send(MemoryStream) 向通道发送内存流数据。 public void Send(MemoryStream memoryStream) 参数 memoryStream MemoryStream 待发送的内存流。 事件 OnDispose 当通道被释放时触发的事件。 public override event Action OnDispose 事件类型 Action OnReceiveMemoryStream 当接收到内存流数据时触发的事件。 public override event Action<APackInfo> OnReceiveMemoryStream 事件类型 Action<APackInfo>"
  },
  "reference/Fantasy.ThreadSynchronizationContext.html": {
    "href": "reference/Fantasy.ThreadSynchronizationContext.html",
    "title": "ThreadSynchronizationContext 类 | Fantasy.Net API Reference",
    "keywords": "ThreadSynchronizationContext 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 一个用于线程同步的上下文。 public sealed class ThreadSynchronizationContext : SynchronizationContext 继承 object SynchronizationContext ThreadSynchronizationContext 继承成员 SynchronizationContext.IsWaitNotificationRequired() SynchronizationContext.Send(SendOrPostCallback, object) SynchronizationContext.OperationStarted() SynchronizationContext.OperationCompleted() SynchronizationContext.Wait(nint[], bool, int) SynchronizationContext.SetSynchronizationContext(SynchronizationContext) SynchronizationContext.CreateCopy() SynchronizationContext.Current object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 ThreadSynchronizationContext(int) 初始化 ThreadSynchronizationContext 类的新实例。 public ThreadSynchronizationContext(int threadId) 参数 threadId int 线程的唯一标识符。 字段 ThreadId 获取线程的唯一标识符。 public readonly int ThreadId 字段值 int 属性 Main 获取主线程的同步上下文实例。 public static ThreadSynchronizationContext Main { get; } 属性值 ThreadSynchronizationContext 方法 Post(Action) 将操作排队以在同步上下文中异步执行。 public void Post(Action action) 参数 action Action 要执行的操作。 Post(SendOrPostCallback, object) 将操作排队以在同步上下文中异步执行。 public override void Post(SendOrPostCallback callback, object state) 参数 callback SendOrPostCallback 要执行的回调方法。 state object 传递给回调方法的状态对象。 Update() 更新同步上下文中的操作。 public void Update()"
  },
  "reference/Fantasy.TimeHelper.html": {
    "href": "reference/Fantasy.TimeHelper.html",
    "title": "TimeHelper 类 | Fantasy.Net API Reference",
    "keywords": "TimeHelper 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 提供与时间相关的帮助方法。 public static class TimeHelper 继承 object TimeHelper 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 FrameDeltaTime 获取当前帧与上一帧的时间间隔毫秒数。 public static int FrameDeltaTime 字段值 int Hour 一小时的毫秒值。 public const long Hour = 3600000 字段值 long Minute 一分钟的毫秒值。 public const long Minute = 60000 字段值 long OneDay 一天的毫秒值。 public const long OneDay = 86400000 字段值 long PreviousFrameTime 记录上一帧的总时间。 public static long PreviousFrameTime 字段值 long TotalFrameTime 获取帧运行毫秒数。 public static long TotalFrameTime 字段值 long 属性 FrameDeltaTimeSeconds 获取当前帧与上一帧的时间间隔秒数 public static float FrameDeltaTimeSeconds { get; } 属性值 float Now 获取当前时间的毫秒数，从1970年1月1日开始计算。 public static long Now { get; } 属性值 long 方法 Transition(DateTime) 将日期时间转换为毫秒数，从1970年1月1日开始计算。 public static long Transition(DateTime d) 参数 d DateTime 要转换的日期时间。 返回 long 转换后的毫秒数。 Transition(long) 将毫秒数转换为日期时间。 public static DateTime Transition(long timeStamp) 参数 timeStamp long 要转换的毫秒数。 返回 DateTime 转换后的日期时间。 TransitionLocal(long) 将毫秒数转换为本地时间的日期时间。 public static DateTime TransitionLocal(long timeStamp) 参数 timeStamp long 要转换的毫秒数。 返回 DateTime 转换后的本地时间的日期时间。"
  },
  "reference/Fantasy.TimerAction.html": {
    "href": "reference/Fantasy.TimerAction.html",
    "title": "TimerAction 类 | Fantasy.Net API Reference",
    "keywords": "TimerAction 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 计时器操作类，用于管理定时器相关信息。 public sealed class TimerAction : IDisposable 继承 object TimerAction 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TimerAction() public TimerAction() 字段 Callback 回调对象。 public object Callback 字段值 object Id 唯一标识符。 public long Id 字段值 long Time 触发时间。 public long Time 字段值 long TimerType 计时器类型。 public TimerType TimerType 字段值 TimerType 方法 Create() 创建一个 TimerAction 实例。 public static TimerAction Create() 返回 TimerAction 新创建的 TimerAction 实例。 Dispose() 释放资源。 public void Dispose()"
  },
  "reference/Fantasy.TimerHandler-1.html": {
    "href": "reference/Fantasy.TimerHandler-1.html",
    "title": "TimerHandler<T> 类 | Fantasy.Net API Reference",
    "keywords": "TimerHandler<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 计时器抽象类，提供了一个基础框架，用于创建处理计时器事件的具体类。 public abstract class TimerHandler<T> : EventSystem<T>, IEvent 类型参数 T 事件的类型参数 继承 object EventSystem<T> TimerHandler<T> 实现 IEvent Derived OnNetworkMessageUpdateCheckTimeout 继承成员 EventSystem<T>.EventType() EventSystem<T>.Handler(T) EventSystem<T>.Invoke(object) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TimerHandler() protected TimerHandler()"
  },
  "reference/Fantasy.TimerScheduler.html": {
    "href": "reference/Fantasy.TimerScheduler.html",
    "title": "TimerScheduler 类 | Fantasy.Net API Reference",
    "keywords": "TimerScheduler 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 计时器调度器类，用于管理计时器任务的调度。 public sealed class TimerScheduler : Singleton<TimerScheduler>, IUpdateSingleton, ISingleton, IDisposable 继承 object Singleton<TimerScheduler> TimerScheduler 实现 IUpdateSingleton ISingleton IDisposable 继承成员 Singleton<TimerScheduler>.Dispose() Singleton<TimerScheduler>.IsDisposed Singleton<TimerScheduler>.Instance object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TimerScheduler() public TimerScheduler() 字段 Core 使用系统时间创建的计时器核心。 public readonly TimerSchedulerCore Core 字段值 TimerSchedulerCore Frame 使用帧运行总时间创建的计时器核心。 public readonly TimerSchedulerCore Frame 字段值 TimerSchedulerCore 方法 FrameUpdate() 更新帧计时器任务。自动根据TimeHelper.Now计算帧间隔时间。 public void FrameUpdate() FrameUpdate(int) 手动更新帧计时器任务。需要自己计算帧间隔时间。 public void FrameUpdate(int frameDeltaTime) 参数 frameDeltaTime int Initialize() 初始化计时器调度器。 public override Task Initialize() 返回 Task Update() 更新计时器任务。 public void Update()"
  },
  "reference/Fantasy.TimerSchedulerCore.html": {
    "href": "reference/Fantasy.TimerSchedulerCore.html",
    "title": "TimerSchedulerCore 类 | Fantasy.Net API Reference",
    "keywords": "TimerSchedulerCore 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 计时器调度核心类，提供计时器的核心功能。 public class TimerSchedulerCore 继承 object TimerSchedulerCore 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 TimerSchedulerCore(Func<long>) 构造函数，初始化计时器核心。 public TimerSchedulerCore(Func<long> now) 参数 now Func<long> 获取当前时间的委托。 方法 NewFrameTimer(Action) 创建一个在下一帧执行的计时器。 public long NewFrameTimer(Action action) 参数 action Action 计时器回调方法。 返回 long 计时器的 ID。 OnceTillTimer(long, Action) 创建一个只执行一次的计时器，直到指定时间。 public long OnceTillTimer(long tillTime, Action action) 参数 tillTime long 计时器执行的目标时间。 action Action 计时器回调方法。 返回 long 计时器的 ID。 OnceTillTimer<T>(long, T) 创建一个只执行一次的计时器，直到指定时间，用于发布指定类型的事件。 public long OnceTillTimer<T>(long tillTime, T timerHandlerType) where T : struct 参数 tillTime long 计时器执行的目标时间。 timerHandlerType T 事件处理器类型。 返回 long 计时器的 ID。 类型参数 T 事件类型。 OnceTimer(long, Action) 创建一个只执行一次的计时器。 public long OnceTimer(long time, Action action) 参数 time long 计时器执行的延迟时间。 action Action 计时器回调方法。 返回 long 计时器的 ID。 OnceTimer<T>(long, T) 创建一个只执行一次的计时器，用于发布指定类型的事件。 public long OnceTimer<T>(long time, T timerHandlerType) where T : struct 参数 time long 计时器执行的延迟时间。 timerHandlerType T 事件处理器类型。 返回 long 计时器的 ID。 类型参数 T 事件类型。 Remove(long) 移除指定 ID 的计时器。 public void Remove(long id) 参数 id long 计时器的 ID。 RemoveByRef(ref long) 通过引用移除计时器。 public void RemoveByRef(ref long id) 参数 id long 计时器的 ID。 RepeatedTimer(long, Action) 创建一个重复执行的计时器。 public long RepeatedTimer(long time, Action action) 参数 time long 计时器重复间隔的时间。 action Action 计时器回调方法。 返回 long 计时器的 ID。 RepeatedTimer<T>(long, T) 创建一个重复执行的计时器，用于发布指定类型的事件。 public long RepeatedTimer<T>(long time, T timerHandlerType) where T : struct 参数 time long 计时器重复间隔的时间。 timerHandlerType T 事件处理器类型。 返回 long 计时器的 ID。 类型参数 T 事件类型。 Update() 更新计时器，检查并执行超时的计时器任务。 public void Update() WaitAsync(long, FCancellationToken) 异步等待指定时间。 public FTask<bool> WaitAsync(long time, FCancellationToken cancellationToken = null) 参数 time long 等待的时间长度。 cancellationToken FCancellationToken 可选的取消令牌。 返回 FTask<bool> 等待是否成功。 WaitFrameAsync() 异步等待一帧时间。 public FTask<bool> WaitFrameAsync() 返回 FTask<bool> 等待是否成功。 WaitTillAsync(long, FCancellationToken) 异步等待直到指定时间。 public FTask<bool> WaitTillAsync(long tillTime, FCancellationToken cancellationToken = null) 参数 tillTime long 等待的目标时间。 cancellationToken FCancellationToken 可选的取消令牌。 返回 FTask<bool> 等待是否成功。"
  },
  "reference/Fantasy.TimerType.html": {
    "href": "reference/Fantasy.TimerType.html",
    "title": "TimerType 枚举 | Fantasy.Net API Reference",
    "keywords": "TimerType 枚举 命名空间 Fantasy 程序集 Fantasy.Net.dll 枚举对象TimerType public enum TimerType 扩展方法 JsonHelper.ToJson<T>(T) 字段 None = 0 None OnceTimer = 2 一次性定时器 OnceWaitTimer = 1 一次等待定时器 RepeatedTimer = 3 重复定时器"
  },
  "reference/Fantasy.UpdateSystem-1.html": {
    "href": "reference/Fantasy.UpdateSystem-1.html",
    "title": "UpdateSystem<T> 类 | Fantasy.Net API Reference",
    "keywords": "UpdateSystem<T> 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示实体更新系统的抽象基类。继承此类可以定义特定类型实体的更新逻辑。 public abstract class UpdateSystem<T> : IUpdateSystem, IEntitiesSystem where T : Entity 类型参数 T 实体类型，必须继承自Entity。 继承 object UpdateSystem<T> 实现 IUpdateSystem IEntitiesSystem 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 UpdateSystem() protected UpdateSystem() 方法 EntitiesType() 获取实体更新系统所管理的实体类型。 public Type EntitiesType() 返回 Type 实体类型。 Invoke(Entity) 在实体更新系统中调用更新逻辑。 public void Invoke(Entity self) 参数 self Entity 需要执行更新逻辑的实体。 Update(T) 在实体更新系统中执行特定实体的更新逻辑。具体的实现应在子类中实现。 protected abstract void Update(T self) 参数 self T 需要执行更新逻辑的实体。"
  },
  "reference/Fantasy.WaitCoroutineLock.html": {
    "href": "reference/Fantasy.WaitCoroutineLock.html",
    "title": "WaitCoroutineLock 类 | Fantasy.Net API Reference",
    "keywords": "WaitCoroutineLock 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 等待协程锁的类，实现了 IDisposable 接口 public sealed class WaitCoroutineLock : IDisposable 继承 object WaitCoroutineLock 实现 IDisposable 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 WaitCoroutineLock() public WaitCoroutineLock() 属性 CoroutineLockQueue 获取所属的协程锁队列 public CoroutineLockQueue CoroutineLockQueue { get; } 属性值 CoroutineLockQueue IsDisposed 获取当前对象是否已经被释放的标识 public bool IsDisposed { get; } 属性值 bool LockId 获取协程锁的唯一标识 public long LockId { get; } 属性值 long Tag 获取协程锁的标签 public string Tag { get; } 属性值 string Tcs 获取用于等待协程锁释放的任务 public FTask<WaitCoroutineLock> Tcs { get; } 属性值 FTask<WaitCoroutineLock> 方法 Create(CoroutineLockQueue, string, int) 创建一个等待协程锁对象 public static WaitCoroutineLock Create(CoroutineLockQueue coroutineLockQueue, string tag, int timeOut) 参数 coroutineLockQueue CoroutineLockQueue 协程锁队列 tag string 协程锁标签 timeOut int 超时时间（毫秒） 返回 WaitCoroutineLock 等待协程锁对象 Dispose() 释放协程锁对象 public void Dispose() SetResult() 设置等待协程锁的任务结果 public void SetResult()"
  },
  "reference/Fantasy.World.html": {
    "href": "reference/Fantasy.World.html",
    "title": "World 类 | Fantasy.Net API Reference",
    "keywords": "World 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示一个游戏世界。 public sealed class World 继承 object World 继承成员 object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 World(WorldConfigInfo) 使用指定的配置信息创建一个游戏世界实例。 public World(WorldConfigInfo worldConfigInfo) 参数 worldConfigInfo WorldConfigInfo 游戏世界的配置信息。 属性 Config 获取游戏世界的配置信息。 public WorldConfigInfo Config { get; } 属性值 WorldConfigInfo DateBase 获取游戏世界的数据库接口。 public IDateBase DateBase { get; } 属性值 IDateBase Id 获取游戏世界的唯一标识。 public uint Id { get; } 属性值 uint 方法 Create(uint) 创建一个指定唯一标识的游戏世界实例。 public static World Create(uint id) 参数 id uint 游戏世界的唯一标识。 返回 World 游戏世界实例。"
  },
  "reference/Fantasy.WorldConfigInfo.html": {
    "href": "reference/Fantasy.WorldConfigInfo.html",
    "title": "WorldConfigInfo 类 | Fantasy.Net API Reference",
    "keywords": "WorldConfigInfo 类 命名空间 Fantasy 程序集 Fantasy.Net.dll 表示游戏世界的配置信息。 public class WorldConfigInfo 继承 object WorldConfigInfo 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 WorldConfigInfo() public WorldConfigInfo() 属性 DbConnection 获取或设置游戏世界的数据库连接字符串。 public string DbConnection { get; set; } 属性值 string DbName 获取或设置游戏世界的数据库名称。 public string DbName { get; set; } 属性值 string DbType 获取或设置游戏世界的数据库类型。 public string DbType { get; set; } 属性值 string Id 获取或设置游戏世界的唯一标识。 public uint Id { get; set; } 属性值 uint WorldName 获取或设置游戏世界的名称。 public string WorldName { get; set; } 属性值 string"
  },
  "reference/Fantasy.html": {
    "href": "reference/Fantasy.html",
    "title": "Fantasy 命名空间 | Fantasy.Net API Reference",
    "keywords": "Fantasy 命名空间 类 AClientNetwork 抽象客户端网络基类。 ANetwork 抽象网络基类。 ANetworkChannel 抽象的网络通道基类。 ANetworkMessageScheduler 抽象网络消息调度器基类，用于处理网络消息的调度和处理逻辑。 APackInfo 抽象的数据包信息基类，用于存储解析得到的数据包信息。 APacketParser 抽象的包解析器基类，用于解析网络通信数据包。 AProto 提供 ProtoBuf 序列化和反序列化支持的抽象基类。 AddressableHelper 提供操作地址映射的辅助方法。 AddressableManageComponent 地址映射管理组件，用于管理地址映射和锁定。 AddressableMessageComponent 可寻址消息组件、挂载了这个组件可以接收Addressable消息 AddressableRPC<TEntity, TRouteRequest, TRouteResponse> 泛型可寻址RPC路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址RPC路由请求类型的路由。 AddressableRouteComponent 可寻址路由消息组件，挂载了这个组件可以接收和发送 Addressable 消息。 Addressable<TEntity, TMessage> 泛型可寻址路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和可寻址路由消息类型的路由。 AppDefine 控制台程序定义类型 Application Fantasy 应用程序入口类型 AssemblyInfo AssemblyInfo提供有关程序集和类型的信息 AssemblyManager 管理程序集加载和卸载的帮助类。 AsyncEventSystem<T> 异步事件系统的抽象基类。 AwakeSystem<T> 表示用于实现实体唤醒逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的唤醒操作。 ByteHelper 提供字节操作辅助方法的静态类。 CircularBuffer 自增式缓存类，继承自 Stream 和 IDisposable 接口。 环形缓存具有自动扩充的特性，但不会收缩，适用于操作不过大的 IO 流。 ClientMessageScheduler 提供了一个用于客户端网络消息调度和处理的抽象基类。 ClientNetworkComponent 客户端Network网络组件。 CommandLineOptions 命令行选项类，用于解析命令行参数。 ConcurrentOneToManyListPool<TKey, TValue> 并发的一对多列表池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 ConcurrentOneToManyList<TKey, TValue> 并发的一对多列表，用于维护具有相同键的多个值的关联关系。 ConcurrentOneToManyQueuePool<TKey, TValue> 表示一个并发的一对多队列池，用于维护具有相同键的多个值的关联关系，实现了 IDisposable 接口。 ConcurrentOneToManyQueue<TKey, TValue> 表示一个并发的一对多队列，用于维护具有相同键的多个值的关联关系。 ConcurrentPool<T> 线程安全的静态通用对象池。 ConfigTableManage 配置表管理器 ConnectEntityHandler CoreErrorCode 定义 Fantasy 框架中的核心错误代码。 CoreRouteType 提供了一组框架内置的核心路由类型。 CoroutineLockQueue 协程锁队列，用于协程等待和释放锁的管理。 CoroutineLockQueueType 指定键的协程锁队列类型，用于管理不同类型的协程锁队列。 CryptHelper 提供加密和解密相关的辅助方法。 Define 定义包含 Fantasy 系统设置的静态类。 DeserializeSystem<T> 表示一个用于反序列化特定类型实体的系统抽象类，扩展自 IDeserializeSystem。 DestroySystem<T> 表示用于实现实体销毁逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的销毁操作。 DictionaryExtensions 提供对字典的扩展方法。 DictionaryPool<TM, TN> 提供一个可以使用对象池管理的字典类。 DoubleMapDictionaryPool<TKey, TValue> 提供一个双向映射字典对象池类，用于双向键值对映射。 DoubleMapDictionary<TK, TV> 可以实现双向映射的字典类，用于将键和值进行双向映射。 EntitiesSystem 实体系统管理器，用于管理各种实体系统的生命周期和更新 Entity 实体基类，用于实体创建、回收、获取，和组件操作 EntityDictionary<TM, TN> 提供一个带资源释放功能的实体字典类，支持使用对象池管理。 EntityList<T> 实体对象列表，继承自 List<T>，并实现 IDisposable 接口，用于创建和管理实体对象的集合。 EventSystem 事件系统类，用于加卸载程序集，发布和订阅事件。 EventSystem<T> 事件系统的抽象基类。 FCancellationToken 表示一个自定义的取消标记，允许添加和移除取消动作，并可用于取消一组注册的动作。 FTask 轻量级异步任务类。 FTask<T> 表示一个轻量级的异步任务（Future Task），提供类似于 Task 的异步编程模型，但仅适用于某些简单的异步操作。 FantasySettingsHelper FantasySettingsHelper 类用于加载和管理 Fantasy 系统的各项设置。 FileHelper 文件操作助手类，提供了各种文件操作方法。 FrameUpdateSystem<T> 表示实体帧更新系统的抽象基类。继承此类可以定义特定类型实体的更新逻辑。 HandlerInfo<T> 用于存储消息处理器的信息，包括类型和对象实例。 HashSetBasePool<T> 基本哈希集合对象池，他自持有实际的哈希集合。 HashSetPool<T> 可释放的哈希集合对象池。 I_AddressableAddHandler 声明一个 sealed 类 I_AddressableAddHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableAdd_Request 添加一个可寻址地址请求 I_AddressableAdd_Response 添加一个可寻址地址响应 I_AddressableGetHandler 声明一个 sealed 类 I_AddressableGetHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableGet_Request 查询一个可寻址请求 I_AddressableGet_Response 查询一个可寻址响应 I_AddressableLockHandler 声明一个 sealed 类 I_AddressableLockHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableLock_Request 锁定一个可寻址请求。 I_AddressableLock_Response 锁定一个可寻址响应。 I_AddressableRemoveHandler 声明一个 sealed 类 I_AddressableRemoveHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableRemove_Request 删除一个可寻址请求 I_AddressableRemove_Response 删除一个可寻址响应 I_AddressableUnLockHandler 声明一个 sealed 类 I_AddressableUnLockHandler，继承自 RouteRPC 类，并指定泛型参数 I_AddressableUnLock_Request 解锁一个可寻址地址请求。 I_AddressableUnLock_Response 解锁一个可寻址地址响应。 IdFactory 提供用于生成不同类型 ID 的工厂类。 InnerMessageScheduler 提供了一个机制来调度和处理内部网络消息。 InnerPackInfo 用于处理内部网络数据包信息的类。 InnerPacketParser 用于解析内部网络数据包的类。 IntDictionaryConfig 使用 ProtoBuf 序列化的整数字典配置类。 JsonHelper 提供操作 JSON 数据的辅助方法。 KCPClientNetwork KCP协议客户端网络类，用于管理KCP客户端网络连接。 KCPServerNetwork KCP 服务端网络实现。 KCPServerNetworkChannel KCP 服务器网络通道类，负责管理基于 KCP 协议的网络通信。 KCPSettings LinkEntityComponent 连接其他进程实体地址管理组件 LinkEntity_Request 连接Entity到目标进程、目标进程可以通过EntityType、发送消息给这个Entity LinkEntity_Response ListPool<T> 可释放的列表（List）对象池。 Log 提供日志记录功能的静态类。 MD5Helper 提供计算 MD5 散列值的辅助方法。 MachineConfigInfo 机器配置信息的类。 MemoryStreamHelper 提供获取可回收内存流的帮助方法。 MessageDispatcherSystem 消息分发系统，负责管理消息和消息处理器之间的关系。 MessageHelper 消息辅助类，用于处理网络消息的发送和接收。 MessageRPC<TRequest, TResponse> 泛型消息RPC基类，实现了 IMessageHandler 接口，用于处理请求和响应类型的消息。 MessageSender 网络消息发送者的类。 Message<T> 泛型消息基类，实现了 IMessageHandler 接口。 MongoDataBase 使用 MongoDB 数据库的实现。 MongoHelper 提供与MongoDB数据序列化和反序列化相关的帮助方法。 NLog 使用 NLog 实现的日志记录器。 NetworkHelper 提供网络操作相关的帮助方法。 NetworkThread 网络线程管理器的单例类。负责处理网络相关操作、通信以及线程管理。 OnCoroutineLockTimeout 协程锁超时时的事件处理类，继承自 EventSystem<CoroutineLockTimeout> OnNetworkMessageUpdateCheckTimeout 定时处理网络消息超时的任务。 OneToManyDictionaryPool<TKey, TValueKey, TValue> 一对多映射关系的字典对象池。 OneToManyDictionary<TKey, TValueKey, TValue> 一对多映射关系的字典。每个键都对应一个内部字典，该内部字典将键值映射到相应的值。 OneToManyHashSetPool<TKey, TValue> 一对多哈希集合（OneToManyHashSet）对象池。 OneToManyHashSet<TKey, TValue> 一对多哈希集合（OneToManyHashSet），用于创建和管理键对应多个值的集合。 OneToManyListPool<TKey, TValue> 可回收的、一对多关系的列表池。 OneToManyList<TKey, TValue> 一对多关系的列表字典。 OneToManyQueuePool<TKey, TValue> 支持一对多关系的队列池，用于存储具有相同键的值的队列集合。 OneToManyQueue<TKey, TValue> 支持一对多关系的队列，用于存储具有相同键的值的队列集合。 OneToManySortedDictionaryPool<TKey, TSortedKey, TValue> 一对多映射关系的排序字典对象池。 OneToManySortedDictionary<TKey, TSortedKey, TValue> 一对多映射关系的排序字典。每个外部键映射到一个内部排序字典，该内部排序字典将排序键映射到相应的值。 Opcode 定义了各种消息操作码，用于标识不同类型的消息和请求。 OuterMessageScheduler 提供了一个机制来调度和处理外部网络消息。 OuterPackInfo 用于解析外部网络消息的数据包信息。 OuterPacketParser 用于解析外部网络消息的数据包解析器。 PingRequest 表示Ping请求消息的类，实现了 IRequest 接口。 PingResponse 表示Ping响应消息的类，实现了 IResponse 接口。 PoolCore<T> 泛型对象池核心类，用于创建和管理可重复使用的对象实例。 PoolWithDisposable<T> 静态通用对象池，用于存储实现了 IDisposable 接口的对象。 Pool<T> 静态通用对象池。 ProtoBufHelper 提供ProtoBuf序列化和反序列化的帮助方法类。 RandomHelper 随机数操作助手类，提供各种随机数生成和操作方法。 RecyclableMemoryStream MemoryStream implementation that deals with pooling and managing memory streams which use potentially large buffers. RecyclableMemoryStreamManager 提供用于管理可回收内存流的分部类。 RecyclableMemoryStreamManager.BlockCreatedEventArgs 提供用于 BlockCreated 事件的参数类。 RecyclableMemoryStreamManager.BufferDiscardedEventArgs 提供用于 BufferDiscarded 事件的参数类。 RecyclableMemoryStreamManager.Events 用于 RecyclableMemoryStream 的 ETW 事件。 RecyclableMemoryStreamManager.LargeBufferCreatedEventArgs 提供用于 LargeBufferCreated 事件的参数类。 RecyclableMemoryStreamManager.StreamConvertedToArrayEventArgs 提供用于 StreamConvertedToArray 事件的参数类。 RecyclableMemoryStreamManager.StreamCreatedEventArgs 用于 StreamCreated 事件的参数类。 RecyclableMemoryStreamManager.StreamDisposedEventArgs 提供用于 StreamDisposed 事件的参数类。 RecyclableMemoryStreamManager.StreamDoubleDisposedEventArgs 提供用于 StreamDoubleDisposed 事件的参数类。 RecyclableMemoryStreamManager.StreamFinalizedEventArgs 提供用于 StreamFinalized 事件的参数类。 RecyclableMemoryStreamManager.StreamLengthEventArgs 提供用于 StreamLength 事件的参数类。 RecyclableMemoryStreamManager.StreamOverCapacityEventArgs 提供用于 StreamOverCapacity 事件的参数类。 RecyclableMemoryStreamManager.UsageReportEventArgs 提供用于 UsageReport 事件的参数类。 Response 表示响应消息的基类，实现了 IResponse 接口。 ReuseDictionary<TM, TN> 提供一个可以重用的字典类，支持使用对象池管理。 ReuseList<T> 可重用的列表，继承自 List<T> 类。该类支持通过对象池重用列表实例，以减少对象分配和释放的开销。 RouteComponent 自定义Route组件、如果要自定义Route协议必须使用这个组件 RouteRPC<TEntity, TRouteRequest, TRouteResponse> 泛型路由RPC基类，实现了 IRouteMessageHandler 接口，用于处理请求和响应类型的路由。 RouteResponse 表示路由响应消息的类，实现了 IRouteResponse 接口。 Route<TEntity, TMessage> 泛型路由基类，实现了 IRouteMessageHandler 接口，用于处理特定实体和路由消息类型的路由。 ScanException 在扫描过程中发生的异常。 Scene 表示一个场景实体，用于创建与管理特定的游戏场景信息。 SceneConfigInfo 场景配置信息的类。 Server 网络中的服务器。 ServerConfigInfo 服务器配置信息。 ServerInnerSession 网络服务器内部会话。 ServerNetworkComponent 服务端Network网络组件。 Session 网络会话的基类，用于管理网络通信。 SessionIdleCheckerComponent 负责检查会话空闲超时的组件。 SingleCollection 单例集合管理器类，继承自 Singleton<T>。 SingleCollectionAttribute 表示用于指定实体的单一集合存储属性。此属性用于配合 ISupportedSingleCollection 接口使用， 用于定义实体属于哪个父实体的子集合，以及在数据库中使用的集合名称。 SingletonSystem 单例管理系统，负责管理和调度实现 ISingleton 接口的单例对象。 Singleton<T> 抽象的单例基类，继承自 ISingleton 接口。 SkipTableBase<TValue> 抽象的跳表基类，提供跳表的基本功能和操作。 SkipTableDesc<TValue> 跳表降序版，用于存储降序排列的数据。 SkipTableNode<TValue> 跳跃表节点。 SkipTable<TValue> 跳表数据结构（升序版） SocketExtensions 提供扩展方法以操作 Socket 缓冲区大小。 SortedConcurrentOneToManyListPool<TKey, TValue> 基于排序字典和并发集合实现的一对多映射列表的对象池包装类，继承自 SortedConcurrentOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 SortedConcurrentOneToManyList<TKey, TValue> 基于排序字典和并发集合实现的一多对映射列表类，继承自 SortedDictionary<TKey, TValue> 类， 用于在多个值与一个键关联的情况下进行管理和存储。该类支持并发操作，适用于多线程环境。 SortedOneToManyHashSetPool<TKey, TValue> 基于排序字典实现的一对多关系的映射哈希集合的对象池包装类，将唯一键映射到多个值的哈希集合。 同时实现了 IDisposable 接口，以支持对象的重用和释放。 SortedOneToManyHashSet<TKey, TValue> 基于排序字典实现的一对多关系的映射哈希集合类，将唯一键映射到多个值的哈希集合。 用于在多个值与一个键关联的情况下进行管理和存储。 SortedOneToManyListPool<TKey, TValue> 基于排序字典实现的一对多映射列表的对象池包装类，继承自 SortedOneToManyList<TKey, TValue> 类， 同时实现了 IDisposable 接口，以支持对象的重用和释放。 SortedOneToManyList<TKey, TValue> 基于排序字典实现的一对多关系的映射列表类，将唯一键映射到包含多个值的列表。 用于在多个值与一个键关联的情况下进行管理和存储。 StringDictionaryConfig 使用 ProtoBuf 序列化的字符串字典配置类。 StructBsonSerialize<TValue> 提供对结构体类型进行 BSON 序列化和反序列化的辅助类。 TCPClientNetwork TCP客户端网络类，用于管理TCP客户端网络连接。 TCPServerNetwork 表示 TCP 协议服务端网络类。 TCPServerNetworkChannel TCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。 ThreadSynchronizationContext 一个用于线程同步的上下文。 TimeHelper 提供与时间相关的帮助方法。 TimerAction 计时器操作类，用于管理定时器相关信息。 TimerHandler<T> 计时器抽象类，提供了一个基础框架，用于创建处理计时器事件的具体类。 TimerScheduler 计时器调度器类，用于管理计时器任务的调度。 TimerSchedulerCore 计时器调度核心类，提供计时器的核心功能。 UpdateSystem<T> 表示实体更新系统的抽象基类。继承此类可以定义特定类型实体的更新逻辑。 WaitCoroutineLock 等待协程锁的类，实现了 IDisposable 接口 World 表示一个游戏世界。 WorldConfigInfo 表示游戏世界的配置信息。 结构 AsyncFTaskCompletedMethodBuilder 用于构建已完成的异步任务方法的构建器。 AsyncFTaskMethodBuilder 用于异步任务方法的构建器。 AsyncFTaskMethodBuilder<T> 表示用于构建泛型异步任务方法的构建器。 CoroutineLockTimeout 等待协程锁超时的数据结构 EntityIdStruct 实体的唯一标识符结构。 EntityReference<T> 实体引用只读结构，用作对 Entity 实例的引用。 FTaskCompleted 已完成的异步任务结构。 MessageCacheInfo 消息缓存信息结构。 MessageHelper.NetworkMessageUpdate 定时检查过期的Call消息事件。 NetAction 表示一个网络操作，可以是发送消息、移除通道等操作。 OnCreateScene 表示当创建新场景时引发的事件数据结构。 OnServerStartComplete 当Server启动完成时触发。 Packet 提供关于消息包的常量定义。 RouteIdStruct 表示一个路由 ID 的结构。 RuntimeIdStruct 表示一个运行时 ID 的结构。 接口 IAddressableRouteMessage 表示可寻址协议的普通路由消息接口，继承自普通路由消息接口。 IAddressableRouteRequest 可寻址协议的普通路由请求接口，继承自可寻址协议的普通路由消息接口。 IAddressableRouteResponse 可寻址协议的普通路由响应接口，继承自普通路由响应接口。 IAsyncEvent 定义异步事件的接口。 IAwakeSystem 定义实体的唤醒系统接口。当需要在实体唤醒时执行特定的逻辑时，应实现此接口。 IBsonAddressableRouteMessage 表示可寻址Bson协议的普通路由消息接口，继承自Bson消息和可寻址协议的普通路由消息接口。 IBsonAddressableRouteRequest 可寻址Bson协议的普通路由请求接口，继承自可寻址Bson协议的普通路由消息接口。 IBsonAddressableRouteResponse 可寻址Bson协议的普通路由响应接口，继承自Bson响应接口。 IBsonMessage 表示可以序列化为 BSON 格式的消息接口。 IBsonRequest 表示可以序列化为 BSON 格式的请求消息接口。 IBsonResponse 表示可以序列化为 BSON 格式的响应消息接口。 IBsonRouteMessage 表示普通路由Bson消息的接口，继承自Bson消息和普通路由消息接口。 IBsonRouteRequest 普通路由Bson请求接口，继承自普通路由Bson消息接口。 IBsonRouteResponse 普通路由Bson响应接口，继承自Bson响应接口。 IConfigTable 表示是一个配置文件 ICustomRouteMessage 表示自定义Route协议的普通路由消息接口，继承自普通路由消息接口。 ICustomRouteRequest 自定义Route协议的普通路由请求接口，继承自自定义Route协议的普通路由消息接口。 ICustomRouteResponse 自定义Route协议的普通路由响应接口，继承自普通路由响应接口。 IDateBase 表示用于执行各种数据库操作的数据库接口。 IDeserializeSystem 表示一个用于反序列化的系统接口，扩展自 IEntitiesSystem。 IDestroySystem 定义实体销毁系统接口。当需要在实体销毁时执行特定的逻辑时，应实现此接口。 IEntitiesSystem 定义实体系统的接口。实体系统用于管理特定类型的实体，执行与该类型实体相关的逻辑。 IEvent 定义事件的接口。 IFrameUpdateSystem 定义实体帧更新系统的接口。实体帧更新系统用于管理特定类型的实体，在每次帧更新时执行与该类型实体相关的逻辑。 ILog 定义日志记录功能的接口。 IMessage 表示通用消息接口。 IMessageHandler 表示消息处理器的接口，处理特定类型的消息。 INetworkUpdate 网络更新的接口。 INotSupportedPool Entity不支持对象池创建和回收 IPoolMessage 继承这个的Message协议会在序列化后回收到对象池中 创建消息请使用Pool.Rent来创建消息、否则会造成内存泄露 IRequest 表示请求消息接口。 IResponse 表示响应消息接口。 IRouteMessage 表示普通路由消息的接口，继承自请求接口。 IRouteMessageHandler 表示路由消息处理器的接口，处理特定类型的路由消息。 IRouteRequest 普通路由请求接口，继承自普通路由消息接口。 IRouteResponse 普通路由响应接口，继承自响应接口。 ISingleCollectionRoot Entity保存到数据库的时候会根据子组件设置分离存储特性分表存储在不同的集合表中 ISingleton 定义一个单例接口，表示可以被初始化并在销毁时进行处理。 ISupportedDataBase Entity支持数据库 ISupportedMultiEntity 支持再一个组件里添加多个同类型组件 ISupportedSingleCollection 定义实体支持单一集合存储的接口。当实体需要单独存储在一个集合中，并且在保存到数据库时不会与父组件一起保存在同一个集合中时，应实现此接口。 ISupportedTransfer Entity支持传送 IUpdateSingleton 定义一个可更新的单例接口，继承自 ISingleton。 IUpdateSystem 定义实体更新系统的接口。实体更新系统用于管理特定类型的实体，在每次更新时执行与该类型实体相关的逻辑。 枚举 KcpHeader NetActionType 不同类型的网络操作。 NetworkProtocolType 表示网络通信协议类型的枚举。 NetworkTarget 表示网络通信的目标类型的枚举。 NetworkType 表示网络类型的枚举。 RecyclableMemoryStreamManager.Events.MemoryStreamBufferType 缓冲区类型枚举。 RecyclableMemoryStreamManager.Events.MemoryStreamDiscardReason 丢弃缓冲区的可能原因枚举。 STaskStatus 表示异步任务的状态。 TimerType 枚举对象TimerType"
  },
  "reference/Unity.Mathematics.AffineTransform.html": {
    "href": "reference/Unity.Mathematics.AffineTransform.html",
    "title": "AffineTransform 结构 | Fantasy.Net API Reference",
    "keywords": "AffineTransform 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll An affine transformation type. public struct AffineTransform : IEquatable<AffineTransform>, IFormattable 实现 IEquatable<AffineTransform> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 AffineTransform(RigidTransform) Constructs an AffineTransform from a RigidTransform. public AffineTransform(RigidTransform rigid) 参数 rigid RigidTransform The RigidTransform. AffineTransform(float3, float3x3) Constructs an AffineTransform from a translation represented by float3 vector and a float3x3 matrix representing both rotation and scale. public AffineTransform(float3 translation, float3x3 rotationScale) 参数 translation float3 The translation vector. rotationScale float3x3 The rotation and scale matrix. AffineTransform(float3, quaternion) Constructs an AffineTransform from a translation represented by a float3 vector and rotation represented by a unit quaternion. public AffineTransform(float3 translation, quaternion rotation) 参数 translation float3 The translation vector. rotation quaternion The rotation quaternion. AffineTransform(float3, quaternion, float3) Constructs an AffineTransform from a translation represented by a float3 vector, rotation represented by a unit quaternion and scale represented by a float3 vector. public AffineTransform(float3 translation, quaternion rotation, float3 scale) 参数 translation float3 The translation vector. rotation quaternion The rotation quaternion. scale float3 The scale vector. AffineTransform(float3x3) Constructs an AffineTransform from float3x3 matrix representating both rotation and scale. public AffineTransform(float3x3 rotationScale) 参数 rotationScale float3x3 The rotation and scale matrix. AffineTransform(float3x4) Constructs an AffineTransform from a float3x4 matrix. public AffineTransform(float3x4 m) 参数 m float3x4 The float3x4 matrix. AffineTransform(float4x4) Constructs an AffineTransform from a float4x4 matrix. public AffineTransform(float4x4 m) 参数 m float4x4 The float4x4 matrix. 字段 identity An AffineTransform representing the identity transform. public static readonly AffineTransform identity 字段值 AffineTransform rs The rotation and scale part of the affine transformation. public float3x3 rs 字段值 float3x3 t The translation part of the affine transformation. public float3 t 字段值 float3 zero An AffineTransform zero value. public static readonly AffineTransform zero 字段值 AffineTransform 方法 Equals(object) Returns true if the AffineTransform is equal to a given AffineTransform, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(AffineTransform) Returns true if the AffineTransform is equal to a given AffineTransform, false otherwise. public bool Equals(AffineTransform rhs) 参数 rhs AffineTransform Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the AffineTransform. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the AffineTransform. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the AffineTransform using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 implicit operator float3x4(AffineTransform) Implicit float3x4 cast operator. public static implicit operator float3x4(AffineTransform m) 参数 m AffineTransform The AffineTransform. 返回 float3x4 The converted AffineTransform. implicit operator float4x4(AffineTransform) Implicit float4x4 cast operator. public static implicit operator float4x4(AffineTransform m) 参数 m AffineTransform The AffineTransform. 返回 float4x4 The converted AffineTransform."
  },
  "reference/Unity.Mathematics.Random.html": {
    "href": "reference/Unity.Mathematics.Random.html",
    "title": "Random 结构 | Fantasy.Net API Reference",
    "keywords": "Random 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll Random Number Generator based on xorshift. Designed for minimal state (32bits) to be easily embeddable into components. Core functionality is integer multiplication free to improve vectorization on less capable SIMD instruction sets. public struct Random 继承成员 ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Random(uint) Constructs a Random instance with a given seed value. The seed must be non-zero. public Random(uint seed) 参数 seed uint The seed to initialize with. 字段 state The random number generator state. It should not be zero. public uint state 字段值 uint 方法 CreateFromIndex(uint) Constructs a Random instance with an index that gets hashed. The index must not be uint.MaxValue. public static Random CreateFromIndex(uint index) 参数 index uint An index that will be hashed for Random creation. Must not be uint.MaxValue. 返回 Random Random created from an index. 示例 for (uint i = 0; i < 4096; ++i) { Random rand = Random.CreateFromIndex(i); // Random numbers drawn from loop iteration j will be very different // from every other loop iteration k. rand.NextUInt(); } 备注 Use this function when you expect to create several Random instances in a loop. InitState(uint) Initialized the state of the Random instance with a given seed value. The seed must be non-zero. public void InitState(uint seed = 1851936439) 参数 seed uint The seed to initialize with. NextBool() Returns a uniformly random bool value. public bool NextBool() 返回 bool A uniformly random boolean value. NextBool2() Returns a uniformly random bool2 value. public bool2 NextBool2() 返回 bool2 A uniformly random bool2 value. NextBool3() Returns a uniformly random bool3 value. public bool3 NextBool3() 返回 bool3 A uniformly random bool3 value. NextBool4() Returns a uniformly random bool4 value. public bool4 NextBool4() 返回 bool4 A uniformly random bool4 value. NextDouble() Returns a uniformly random double value in the interval [0, 1). public double NextDouble() 返回 double A uniformly random double value in the range [0, 1). NextDouble(double) Returns a uniformly random double value in the interval [0, max). public double NextDouble(double max) 参数 max double The maximum value to generate, exclusive. 返回 double A uniformly random double value in the range [0, max). NextDouble(double, double) Returns a uniformly random double value in the interval [min, max). public double NextDouble(double min, double max) 参数 min double The minimum value to generate, inclusive. max double The maximum value to generate, exclusive. 返回 double A uniformly random double value in the range [min, max). NextDouble2() Returns a uniformly random double2 value with all components in the interval [0, 1). public double2 NextDouble2() 返回 double2 A uniformly random double2 value in the range [0, 1). NextDouble2(double2) Returns a uniformly random double2 value with all components in the interval [0, max). public double2 NextDouble2(double2 max) 参数 max double2 The componentwise maximum value to generate, exclusive. 返回 double2 A uniformly random double2 value in the range [0, max). NextDouble2(double2, double2) Returns a uniformly random double2 value with all components in the interval [min, max). public double2 NextDouble2(double2 min, double2 max) 参数 min double2 The componentwise minimum value to generate, inclusive. max double2 The componentwise maximum value to generate, exclusive. 返回 double2 A uniformly random double2 value in the range [min, max). NextDouble2Direction() Returns a unit length double2 vector representing a uniformly random 2D direction. public double2 NextDouble2Direction() 返回 double2 A uniformly random unit length double2 vector. NextDouble3() Returns a uniformly random double3 value with all components in the interval [0, 1). public double3 NextDouble3() 返回 double3 A uniformly random double3 value in the range [0, 1). NextDouble3(double3) Returns a uniformly random double3 value with all components in the interval [0, max). public double3 NextDouble3(double3 max) 参数 max double3 The componentwise maximum value to generate, exclusive. 返回 double3 A uniformly random double3 value in the range [0, max). NextDouble3(double3, double3) Returns a uniformly random double3 value with all components in the interval [min, max). public double3 NextDouble3(double3 min, double3 max) 参数 min double3 The componentwise minimum value to generate, inclusive. max double3 The componentwise maximum value to generate, exclusive. 返回 double3 A uniformly random double3 value in the range [min, max). NextDouble3Direction() Returns a unit length double3 vector representing a uniformly random 3D direction. public double3 NextDouble3Direction() 返回 double3 A uniformly random unit length double3 vector. NextDouble4() Returns a uniformly random double4 value with all components in the interval [0, 1). public double4 NextDouble4() 返回 double4 A uniformly random double4 value in the range [0, 1). NextDouble4(double4) Returns a uniformly random double4 value with all components in the interval [0, max). public double4 NextDouble4(double4 max) 参数 max double4 The componentwise maximum value to generate, exclusive. 返回 double4 A uniformly random double4 value in the range [0, max). NextDouble4(double4, double4) Returns a uniformly random double4 value with all components in the interval [min, max). public double4 NextDouble4(double4 min, double4 max) 参数 min double4 The componentwise minimum value to generate, inclusive. max double4 The componentwise maximum value to generate, exclusive. 返回 double4 A uniformly random double4 value in the range [min, max). NextFloat() Returns a uniformly random float value in the interval [0, 1). public float NextFloat() 返回 float A uniformly random float value in the range [0, 1). NextFloat(float) Returns a uniformly random float value in the interval [0, max). public float NextFloat(float max) 参数 max float The maximum value to generate, exclusive. 返回 float A uniformly random float value in the range [0, max). NextFloat(float, float) Returns a uniformly random float value in the interval [min, max). public float NextFloat(float min, float max) 参数 min float The minimum value to generate, inclusive. max float The maximum value to generate, exclusive. 返回 float A uniformly random float value in the range [min, max). NextFloat2() Returns a uniformly random float2 value with all components in the interval [0, 1). public float2 NextFloat2() 返回 float2 A uniformly random float2 value in the range [0, 1). NextFloat2(float2) Returns a uniformly random float2 value with all components in the interval [0, max). public float2 NextFloat2(float2 max) 参数 max float2 The componentwise maximum value to generate, exclusive. 返回 float2 A uniformly random float2 value in the range [0, max). NextFloat2(float2, float2) Returns a uniformly random float2 value with all components in the interval [min, max). public float2 NextFloat2(float2 min, float2 max) 参数 min float2 The componentwise minimum value to generate, inclusive. max float2 The componentwise maximum value to generate, exclusive. 返回 float2 A uniformly random float2 value in the range [min, max). NextFloat2Direction() Returns a unit length float2 vector representing a uniformly random 2D direction. public float2 NextFloat2Direction() 返回 float2 A uniformly random unit length float2 vector. NextFloat3() Returns a uniformly random float3 value with all components in the interval [0, 1). public float3 NextFloat3() 返回 float3 A uniformly random float3 value in the range [0, 1). NextFloat3(float3) Returns a uniformly random float3 value with all components in the interval [0, max). public float3 NextFloat3(float3 max) 参数 max float3 The componentwise maximum value to generate, exclusive. 返回 float3 A uniformly random float3 value in the range [0, max). NextFloat3(float3, float3) Returns a uniformly random float3 value with all components in the interval [min, max). public float3 NextFloat3(float3 min, float3 max) 参数 min float3 The componentwise minimum value to generate, inclusive. max float3 The componentwise maximum value to generate, exclusive. 返回 float3 A uniformly random float3 value in the range [min, max). NextFloat3Direction() Returns a unit length float3 vector representing a uniformly random 3D direction. public float3 NextFloat3Direction() 返回 float3 A uniformly random unit length float3 vector. NextFloat4() Returns a uniformly random float4 value with all components in the interval [0, 1). public float4 NextFloat4() 返回 float4 A uniformly random float4 value in the range [0, 1). NextFloat4(float4) Returns a uniformly random float4 value with all components in the interval [0, max). public float4 NextFloat4(float4 max) 参数 max float4 The componentwise maximum value to generate, exclusive. 返回 float4 A uniformly random float4 value in the range [0, max). NextFloat4(float4, float4) Returns a uniformly random float4 value with all components in the interval [min, max). public float4 NextFloat4(float4 min, float4 max) 参数 min float4 The componentwise minimum value to generate, inclusive. max float4 The componentwise maximum value to generate, exclusive. 返回 float4 A uniformly random float4 value in the range [min, max). NextInt() Returns a uniformly random int value in the interval [-2147483647, 2147483647]. public int NextInt() 返回 int A uniformly random integer value. NextInt(int) Returns a uniformly random int value in the interval [0, max). public int NextInt(int max) 参数 max int The maximum value to generate, exclusive. 返回 int A uniformly random int value in the range [0, max). NextInt(int, int) Returns a uniformly random int value in the interval [min, max). public int NextInt(int min, int max) 参数 min int The minimum value to generate, inclusive. max int The maximum value to generate, exclusive. 返回 int A uniformly random integer between [min, max). NextInt2() Returns a uniformly random int2 value with all components in the interval [-2147483647, 2147483647]. public int2 NextInt2() 返回 int2 A uniformly random int2 value. NextInt2(int2) Returns a uniformly random int2 value with all components in the interval [0, max). public int2 NextInt2(int2 max) 参数 max int2 The componentwise maximum value to generate, exclusive. 返回 int2 A uniformly random int2 value with all components in the range [0, max). NextInt2(int2, int2) Returns a uniformly random int2 value with all components in the interval [min, max). public int2 NextInt2(int2 min, int2 max) 参数 min int2 The componentwise minimum value to generate, inclusive. max int2 The componentwise maximum value to generate, exclusive. 返回 int2 A uniformly random int2 between [min, max). NextInt3() Returns a uniformly random int3 value with all components in the interval [-2147483647, 2147483647]. public int3 NextInt3() 返回 int3 A uniformly random int3 value. NextInt3(int3) Returns a uniformly random int3 value with all components in the interval [0, max). public int3 NextInt3(int3 max) 参数 max int3 The componentwise maximum value to generate, exclusive. 返回 int3 A uniformly random int3 value with all components in the range [0, max). NextInt3(int3, int3) Returns a uniformly random int3 value with all components in the interval [min, max). public int3 NextInt3(int3 min, int3 max) 参数 min int3 The componentwise minimum value to generate, inclusive. max int3 The componentwise maximum value to generate, exclusive. 返回 int3 A uniformly random int3 between [min, max). NextInt4() Returns a uniformly random int4 value with all components in the interval [-2147483647, 2147483647]. public int4 NextInt4() 返回 int4 A uniformly random int4 value. NextInt4(int4) Returns a uniformly random int4 value with all components in the interval [0, max). public int4 NextInt4(int4 max) 参数 max int4 The componentwise maximum value to generate, exclusive. 返回 int4 A uniformly random int4 value with all components in the range [0, max). NextInt4(int4, int4) Returns a uniformly random int4 value with all components in the interval [min, max). public int4 NextInt4(int4 min, int4 max) 参数 min int4 The componentwise minimum value to generate, inclusive. max int4 The componentwise maximum value to generate, exclusive. 返回 int4 A uniformly random int4 between [min, max). NextQuaternionRotation() Returns a unit length quaternion representing a uniformly 3D rotation. public quaternion NextQuaternionRotation() 返回 quaternion A uniformly random unit length quaternion. NextUInt() Returns a uniformly random uint value in the interval [0, 4294967294]. public uint NextUInt() 返回 uint A uniformly random unsigned integer. NextUInt(uint) Returns a uniformly random uint value in the interval [0, max). public uint NextUInt(uint max) 参数 max uint The maximum value to generate, exclusive. 返回 uint A uniformly random unsigned integer in the range [0, max). NextUInt(uint, uint) Returns a uniformly random uint value in the interval [min, max). public uint NextUInt(uint min, uint max) 参数 min uint The minimum value to generate, inclusive. max uint The maximum value to generate, exclusive. 返回 uint A uniformly random unsigned integer in the range [min, max). NextUInt2() Returns a uniformly random uint2 value with all components in the interval [0, 4294967294]. public uint2 NextUInt2() 返回 uint2 A uniformly random uint2. NextUInt2(uint2) Returns a uniformly random uint2 value with all components in the interval [0, max). public uint2 NextUInt2(uint2 max) 参数 max uint2 The componentwise maximum value to generate, exclusive. 返回 uint2 A uniformly random uint2 in the range [0, max). NextUInt2(uint2, uint2) Returns a uniformly random uint2 value with all components in the interval [min, max). public uint2 NextUInt2(uint2 min, uint2 max) 参数 min uint2 The componentwise minimum value to generate, inclusive. max uint2 The componentwise maximum value to generate, exclusive. 返回 uint2 A uniformly random uint2 in the range [min, max). NextUInt3() Returns a uniformly random uint3 value with all components in the interval [0, 4294967294]. public uint3 NextUInt3() 返回 uint3 A uniformly random uint3. NextUInt3(uint3) Returns a uniformly random uint3 value with all components in the interval [0, max). public uint3 NextUInt3(uint3 max) 参数 max uint3 The componentwise maximum value to generate, exclusive. 返回 uint3 A uniformly random uint3 in the range [0, max). NextUInt3(uint3, uint3) Returns a uniformly random uint3 value with all components in the interval [min, max). public uint3 NextUInt3(uint3 min, uint3 max) 参数 min uint3 The componentwise minimum value to generate, inclusive. max uint3 The componentwise maximum value to generate, exclusive. 返回 uint3 A uniformly random uint3 in the range [min, max). NextUInt4() Returns a uniformly random uint4 value with all components in the interval [0, 4294967294]. public uint4 NextUInt4() 返回 uint4 A uniformly random uint4. NextUInt4(uint4) Returns a uniformly random uint4 value with all components in the interval [0, max). public uint4 NextUInt4(uint4 max) 参数 max uint4 The componentwise maximum value to generate, exclusive. 返回 uint4 A uniformly random uint4 in the range [0, max). NextUInt4(uint4, uint4) Returns a uniformly random uint4 value with all components in the interval [min, max). public uint4 NextUInt4(uint4 min, uint4 max) 参数 min uint4 The componentwise minimum value to generate, inclusive. max uint4 The componentwise maximum value to generate, exclusive. 返回 uint4 A uniformly random uint4 in the range [min, max)."
  },
  "reference/Unity.Mathematics.RigidTransform.html": {
    "href": "reference/Unity.Mathematics.RigidTransform.html",
    "title": "RigidTransform 结构 | Fantasy.Net API Reference",
    "keywords": "RigidTransform 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A rigid transformation type. public struct RigidTransform 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 RigidTransform(float3x3, float3) Constructs a RigidTransform from a rotation represented by a float3x3 matrix and a translation represented by a float3 vector. public RigidTransform(float3x3 rotation, float3 translation) 参数 rotation float3x3 The float3x3 rotation matrix. translation float3 The translation vector. RigidTransform(float4x4) Constructs a RigidTransform from a float4x4. Assumes the matrix is orthonormal. public RigidTransform(float4x4 transform) 参数 transform float4x4 The float4x4 transformation matrix, must be orthonormal. RigidTransform(quaternion, float3) Constructs a RigidTransform from a rotation represented by a unit quaternion and a translation represented by a float3 vector. public RigidTransform(quaternion rotation, float3 translation) 参数 rotation quaternion The quaternion rotation. translation float3 The translation vector. 字段 identity A RigidTransform representing the identity transform. public static readonly RigidTransform identity 字段值 RigidTransform pos The translation part of the rigid transformation. public float3 pos 字段值 float3 rot The rotation part of the rigid transformation. public quaternion rot 字段值 quaternion 方法 AxisAngle(float3, float) Returns a RigidTransform representing a rotation around a unit axis by an angle in radians. The rotation direction is clockwise when looking along the rotation axis towards the origin. public static RigidTransform AxisAngle(float3 axis, float angle) 参数 axis float3 The axis of rotation. angle float The rotation angle in radians. 返回 RigidTransform The RigidTransform from a rotation axis and angle of rotation. Equals(object) Returns true if the RigidTransform is equal to a given RigidTransform, false otherwise. public override bool Equals(object x) 参数 x object The object to compare with. 返回 bool True if the RigidTransform is equal to the input, false otherwise. Equals(RigidTransform) Returns true if the RigidTransform is equal to a given RigidTransform, false otherwise. public bool Equals(RigidTransform x) 参数 x RigidTransform The RigidTransform to compare with. 返回 bool True if the RigidTransform is equal to the input, false otherwise. Euler(float, float, float, RotationOrder) Returns a RigidTransform constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static RigidTransform Euler(float x, float y, float z, math.RotationOrder order = RotationOrder.Default) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. order math.RotationOrder The order in which the rotations are applied. 返回 RigidTransform The RigidTransform of the Euler angle transformation in the given rotation order. Euler(float3, RotationOrder) Returns a RigidTransform constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static RigidTransform Euler(float3 xyz, math.RotationOrder order = RotationOrder.Default) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. order math.RotationOrder The order in which the rotations are applied. 返回 RigidTransform The RigidTransform of the Euler angle transformation in the given rotation order. EulerXYZ(float, float, float) Returns a RigidTransform constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerXYZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in x-y-z order. EulerXYZ(float3) Returns a RigidTransform constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerXYZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in x-y-z order. EulerXZY(float, float, float) Returns a RigidTransform constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerXZY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in x-z-y order. EulerXZY(float3) Returns a RigidTransform constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerXZY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in x-z-y order. EulerYXZ(float, float, float) Returns a RigidTransform constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerYXZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in y-x-z order. EulerYXZ(float3) Returns a RigidTransform constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerYXZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in y-x-z order. EulerYZX(float, float, float) Returns a RigidTransform constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerYZX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in y-z-x order. EulerYZX(float3) Returns a RigidTransform constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerYZX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in y-z-x order. EulerZXY(float, float, float) Returns a RigidTransform constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static RigidTransform EulerZXY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in z-x-y order. EulerZXY(float3) Returns a RigidTransform constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static RigidTransform EulerZXY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in z-x-y order. EulerZYX(float, float, float) Returns a RigidTransform constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerZYX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in z-y-x order. EulerZYX(float3) Returns a RigidTransform constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static RigidTransform EulerZYX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 RigidTransform The RigidTransform of the Euler angle transformation in z-y-x order. GetHashCode() Returns a hash code for the RigidTransform. public override int GetHashCode() 返回 int The hash code of the RigidTransform. RotateX(float) Returns a RigidTransform that rotates around the x-axis by a given number of radians. public static RigidTransform RotateX(float angle) 参数 angle float The clockwise rotation angle when looking along the x-axis towards the origin in radians. 返回 RigidTransform The RigidTransform of rotating around the x-axis by the given angle. RotateY(float) Returns a RigidTransform that rotates around the y-axis by a given number of radians. public static RigidTransform RotateY(float angle) 参数 angle float The clockwise rotation angle when looking along the y-axis towards the origin in radians. 返回 RigidTransform The RigidTransform of rotating around the y-axis by the given angle. RotateZ(float) Returns a RigidTransform that rotates around the z-axis by a given number of radians. public static RigidTransform RotateZ(float angle) 参数 angle float The clockwise rotation angle when looking along the z-axis towards the origin in radians. 返回 RigidTransform The RigidTransform of rotating around the z-axis by the given angle. ToString() Returns a string representation of the RigidTransform. public override string ToString() 返回 string The string representation of the RigidTransform. ToString(string, IFormatProvider) Returns a string representation of the RigidTransform using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string The format string. formatProvider IFormatProvider The format provider to use during formatting. 返回 string The formatted string representation of the RigidTransform. Translate(float3) Returns a RigidTransform that translates by an amount specified by a float3 vector. public static RigidTransform Translate(float3 vector) 参数 vector float3 The translation vector. 返回 RigidTransform The RigidTransform that translates by the given translation vector."
  },
  "reference/Unity.Mathematics.bool2.html": {
    "href": "reference/Unity.Mathematics.bool2.html",
    "title": "bool2 结构 | Fantasy.Net API Reference",
    "keywords": "bool2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2 component vector of bools. public struct bool2 : IEquatable<bool2> 实现 IEquatable<bool2> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool2(bool) Constructs a bool2 vector from a single bool value by assigning it to every component. public bool2(bool v) 参数 v bool bool to convert to bool2 bool2(bool, bool) Constructs a bool2 vector from two bool values. public bool2(bool x, bool y) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. bool2(bool2) Constructs a bool2 vector from a bool2 vector. public bool2(bool2 xy) 参数 xy bool2 The constructed vector's xy components will be set to this value. 字段 x x component of the vector. public bool x 字段值 bool y y component of the vector. public bool y 字段值 bool 属性 this[int] Returns the bool element at a specified index. public bool this[int index] { get; set; } 参数 index int 属性值 bool 方法 Equals(object) Returns true if the bool2 is equal to a given bool2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool2) Returns true if the bool2 is equal to a given bool2, false otherwise. public bool Equals(bool2 rhs) 参数 rhs bool2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool2. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool2) Returns the result of a componentwise bitwise and operation on a bool value and a bool2 vector. public static bool2 operator &(bool lhs, bool2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool2 Right hand side bool2 to use to compute componentwise bitwise and. 返回 bool2 bool2 result of the componentwise bitwise and. operator &(bool2, bool) Returns the result of a componentwise bitwise and operation on a bool2 vector and a bool value. public static bool2 operator &(bool2 lhs, bool rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool2 bool2 result of the componentwise bitwise and. operator &(bool2, bool2) Returns the result of a componentwise bitwise and operation on two bool2 vectors. public static bool2 operator &(bool2 lhs, bool2 rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise bitwise and. rhs bool2 Right hand side bool2 to use to compute componentwise bitwise and. 返回 bool2 bool2 result of the componentwise bitwise and. operator |(bool, bool2) Returns the result of a componentwise bitwise or operation on a bool value and a bool2 vector. public static bool2 operator |(bool lhs, bool2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool2 Right hand side bool2 to use to compute componentwise bitwise or. 返回 bool2 bool2 result of the componentwise bitwise or. operator |(bool2, bool) Returns the result of a componentwise bitwise or operation on a bool2 vector and a bool value. public static bool2 operator |(bool2 lhs, bool rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool2 bool2 result of the componentwise bitwise or. operator |(bool2, bool2) Returns the result of a componentwise bitwise or operation on two bool2 vectors. public static bool2 operator |(bool2 lhs, bool2 rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise bitwise or. rhs bool2 Right hand side bool2 to use to compute componentwise bitwise or. 返回 bool2 bool2 result of the componentwise bitwise or. operator ==(bool, bool2) Returns the result of a componentwise equality operation on a bool value and a bool2 vector. public static bool2 operator ==(bool lhs, bool2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool2 Right hand side bool2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(bool2, bool) Returns the result of a componentwise equality operation on a bool2 vector and a bool value. public static bool2 operator ==(bool2 lhs, bool rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(bool2, bool2) Returns the result of a componentwise equality operation on two bool2 vectors. public static bool2 operator ==(bool2 lhs, bool2 rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise equality. rhs bool2 Right hand side bool2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ^(bool, bool2) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool2 vector. public static bool2 operator ^(bool lhs, bool2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool2 Right hand side bool2 to use to compute componentwise bitwise exclusive or. 返回 bool2 bool2 result of the componentwise bitwise exclusive or. operator ^(bool2, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool2 vector and a bool value. public static bool2 operator ^(bool2 lhs, bool rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool2 bool2 result of the componentwise bitwise exclusive or. operator ^(bool2, bool2) Returns the result of a componentwise bitwise exclusive or operation on two bool2 vectors. public static bool2 operator ^(bool2 lhs, bool2 rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise bitwise exclusive or. rhs bool2 Right hand side bool2 to use to compute componentwise bitwise exclusive or. 返回 bool2 bool2 result of the componentwise bitwise exclusive or. implicit operator bool2(bool) Implicitly converts a single bool value to a bool2 vector by assigning it to every component. public static implicit operator bool2(bool v) 参数 v bool bool to convert to bool2 返回 bool2 Converted value. operator !=(bool, bool2) Returns the result of a componentwise not equal operation on a bool value and a bool2 vector. public static bool2 operator !=(bool lhs, bool2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool2 Right hand side bool2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(bool2, bool) Returns the result of a componentwise not equal operation on a bool2 vector and a bool value. public static bool2 operator !=(bool2 lhs, bool rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(bool2, bool2) Returns the result of a componentwise not equal operation on two bool2 vectors. public static bool2 operator !=(bool2 lhs, bool2 rhs) 参数 lhs bool2 Left hand side bool2 to use to compute componentwise not equal. rhs bool2 Right hand side bool2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !(bool2) Returns the result of a componentwise not operation on a bool2 vector. public static bool2 operator !(bool2 val) 参数 val bool2 Value to use when computing the componentwise not. 返回 bool2 bool2 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool2x2.html": {
    "href": "reference/Unity.Mathematics.bool2x2.html",
    "title": "bool2x2 结构 | Fantasy.Net API Reference",
    "keywords": "bool2x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x2 matrix of bools. public struct bool2x2 : IEquatable<bool2x2> 实现 IEquatable<bool2x2> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool2x2(bool) Constructs a bool2x2 matrix from a single bool value by assigning it to every component. public bool2x2(bool v) 参数 v bool bool to convert to bool2x2 bool2x2(bool, bool, bool, bool) Constructs a bool2x2 matrix from 4 bool values given in row-major order. public bool2x2(bool m00, bool m01, bool m10, bool m11) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. bool2x2(bool2, bool2) Constructs a bool2x2 matrix from two bool2 vectors. public bool2x2(bool2 c0, bool2 c1) 参数 c0 bool2 The matrix column c0 will be set to this value. c1 bool2 The matrix column c1 will be set to this value. 字段 c0 Column 0 of the matrix. public bool2 c0 字段值 bool2 c1 Column 1 of the matrix. public bool2 c1 字段值 bool2 属性 this[int] Returns the bool2 element at a specified index. public ref bool2 this[int index] { get; } 参数 index int 属性值 bool2 方法 Equals(object) Returns true if the bool2x2 is equal to a given bool2x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool2x2) Returns true if the bool2x2 is equal to a given bool2x2, false otherwise. public bool Equals(bool2x2 rhs) 参数 rhs bool2x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool2x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool2x2. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool2x2) Returns the result of a componentwise bitwise and operation on a bool value and a bool2x2 matrix. public static bool2x2 operator &(bool lhs, bool2x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise bitwise and. 返回 bool2x2 bool2x2 result of the componentwise bitwise and. operator &(bool2x2, bool) Returns the result of a componentwise bitwise and operation on a bool2x2 matrix and a bool value. public static bool2x2 operator &(bool2x2 lhs, bool rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool2x2 bool2x2 result of the componentwise bitwise and. operator &(bool2x2, bool2x2) Returns the result of a componentwise bitwise and operation on two bool2x2 matrices. public static bool2x2 operator &(bool2x2 lhs, bool2x2 rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise bitwise and. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise bitwise and. 返回 bool2x2 bool2x2 result of the componentwise bitwise and. operator |(bool, bool2x2) Returns the result of a componentwise bitwise or operation on a bool value and a bool2x2 matrix. public static bool2x2 operator |(bool lhs, bool2x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise bitwise or. 返回 bool2x2 bool2x2 result of the componentwise bitwise or. operator |(bool2x2, bool) Returns the result of a componentwise bitwise or operation on a bool2x2 matrix and a bool value. public static bool2x2 operator |(bool2x2 lhs, bool rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool2x2 bool2x2 result of the componentwise bitwise or. operator |(bool2x2, bool2x2) Returns the result of a componentwise bitwise or operation on two bool2x2 matrices. public static bool2x2 operator |(bool2x2 lhs, bool2x2 rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise bitwise or. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise bitwise or. 返回 bool2x2 bool2x2 result of the componentwise bitwise or. operator ==(bool, bool2x2) Returns the result of a componentwise equality operation on a bool value and a bool2x2 matrix. public static bool2x2 operator ==(bool lhs, bool2x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(bool2x2, bool) Returns the result of a componentwise equality operation on a bool2x2 matrix and a bool value. public static bool2x2 operator ==(bool2x2 lhs, bool rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(bool2x2, bool2x2) Returns the result of a componentwise equality operation on two bool2x2 matrices. public static bool2x2 operator ==(bool2x2 lhs, bool2x2 rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise equality. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ^(bool, bool2x2) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool2x2 matrix. public static bool2x2 operator ^(bool lhs, bool2x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise bitwise exclusive or. 返回 bool2x2 bool2x2 result of the componentwise bitwise exclusive or. operator ^(bool2x2, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool2x2 matrix and a bool value. public static bool2x2 operator ^(bool2x2 lhs, bool rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool2x2 bool2x2 result of the componentwise bitwise exclusive or. operator ^(bool2x2, bool2x2) Returns the result of a componentwise bitwise exclusive or operation on two bool2x2 matrices. public static bool2x2 operator ^(bool2x2 lhs, bool2x2 rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise bitwise exclusive or. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise bitwise exclusive or. 返回 bool2x2 bool2x2 result of the componentwise bitwise exclusive or. implicit operator bool2x2(bool) Implicitly converts a single bool value to a bool2x2 matrix by assigning it to every component. public static implicit operator bool2x2(bool v) 参数 v bool bool to convert to bool2x2 返回 bool2x2 Converted value. operator !=(bool, bool2x2) Returns the result of a componentwise not equal operation on a bool value and a bool2x2 matrix. public static bool2x2 operator !=(bool lhs, bool2x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(bool2x2, bool) Returns the result of a componentwise not equal operation on a bool2x2 matrix and a bool value. public static bool2x2 operator !=(bool2x2 lhs, bool rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(bool2x2, bool2x2) Returns the result of a componentwise not equal operation on two bool2x2 matrices. public static bool2x2 operator !=(bool2x2 lhs, bool2x2 rhs) 参数 lhs bool2x2 Left hand side bool2x2 to use to compute componentwise not equal. rhs bool2x2 Right hand side bool2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !(bool2x2) Returns the result of a componentwise not operation on a bool2x2 matrix. public static bool2x2 operator !(bool2x2 val) 参数 val bool2x2 Value to use when computing the componentwise not. 返回 bool2x2 bool2x2 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool2x3.html": {
    "href": "reference/Unity.Mathematics.bool2x3.html",
    "title": "bool2x3 结构 | Fantasy.Net API Reference",
    "keywords": "bool2x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x3 matrix of bools. public struct bool2x3 : IEquatable<bool2x3> 实现 IEquatable<bool2x3> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool2x3(bool) Constructs a bool2x3 matrix from a single bool value by assigning it to every component. public bool2x3(bool v) 参数 v bool bool to convert to bool2x3 bool2x3(bool, bool, bool, bool, bool, bool) Constructs a bool2x3 matrix from 6 bool values given in row-major order. public bool2x3(bool m00, bool m01, bool m02, bool m10, bool m11, bool m12) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. bool2x3(bool2, bool2, bool2) Constructs a bool2x3 matrix from three bool2 vectors. public bool2x3(bool2 c0, bool2 c1, bool2 c2) 参数 c0 bool2 The matrix column c0 will be set to this value. c1 bool2 The matrix column c1 will be set to this value. c2 bool2 The matrix column c2 will be set to this value. 字段 c0 Column 0 of the matrix. public bool2 c0 字段值 bool2 c1 Column 1 of the matrix. public bool2 c1 字段值 bool2 c2 Column 2 of the matrix. public bool2 c2 字段值 bool2 属性 this[int] Returns the bool2 element at a specified index. public ref bool2 this[int index] { get; } 参数 index int 属性值 bool2 方法 Equals(object) Returns true if the bool2x3 is equal to a given bool2x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool2x3) Returns true if the bool2x3 is equal to a given bool2x3, false otherwise. public bool Equals(bool2x3 rhs) 参数 rhs bool2x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool2x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool2x3. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool2x3) Returns the result of a componentwise bitwise and operation on a bool value and a bool2x3 matrix. public static bool2x3 operator &(bool lhs, bool2x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise bitwise and. 返回 bool2x3 bool2x3 result of the componentwise bitwise and. operator &(bool2x3, bool) Returns the result of a componentwise bitwise and operation on a bool2x3 matrix and a bool value. public static bool2x3 operator &(bool2x3 lhs, bool rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool2x3 bool2x3 result of the componentwise bitwise and. operator &(bool2x3, bool2x3) Returns the result of a componentwise bitwise and operation on two bool2x3 matrices. public static bool2x3 operator &(bool2x3 lhs, bool2x3 rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise bitwise and. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise bitwise and. 返回 bool2x3 bool2x3 result of the componentwise bitwise and. operator |(bool, bool2x3) Returns the result of a componentwise bitwise or operation on a bool value and a bool2x3 matrix. public static bool2x3 operator |(bool lhs, bool2x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise bitwise or. 返回 bool2x3 bool2x3 result of the componentwise bitwise or. operator |(bool2x3, bool) Returns the result of a componentwise bitwise or operation on a bool2x3 matrix and a bool value. public static bool2x3 operator |(bool2x3 lhs, bool rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool2x3 bool2x3 result of the componentwise bitwise or. operator |(bool2x3, bool2x3) Returns the result of a componentwise bitwise or operation on two bool2x3 matrices. public static bool2x3 operator |(bool2x3 lhs, bool2x3 rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise bitwise or. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise bitwise or. 返回 bool2x3 bool2x3 result of the componentwise bitwise or. operator ==(bool, bool2x3) Returns the result of a componentwise equality operation on a bool value and a bool2x3 matrix. public static bool2x3 operator ==(bool lhs, bool2x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(bool2x3, bool) Returns the result of a componentwise equality operation on a bool2x3 matrix and a bool value. public static bool2x3 operator ==(bool2x3 lhs, bool rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(bool2x3, bool2x3) Returns the result of a componentwise equality operation on two bool2x3 matrices. public static bool2x3 operator ==(bool2x3 lhs, bool2x3 rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise equality. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ^(bool, bool2x3) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool2x3 matrix. public static bool2x3 operator ^(bool lhs, bool2x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise bitwise exclusive or. 返回 bool2x3 bool2x3 result of the componentwise bitwise exclusive or. operator ^(bool2x3, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool2x3 matrix and a bool value. public static bool2x3 operator ^(bool2x3 lhs, bool rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool2x3 bool2x3 result of the componentwise bitwise exclusive or. operator ^(bool2x3, bool2x3) Returns the result of a componentwise bitwise exclusive or operation on two bool2x3 matrices. public static bool2x3 operator ^(bool2x3 lhs, bool2x3 rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise bitwise exclusive or. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise bitwise exclusive or. 返回 bool2x3 bool2x3 result of the componentwise bitwise exclusive or. implicit operator bool2x3(bool) Implicitly converts a single bool value to a bool2x3 matrix by assigning it to every component. public static implicit operator bool2x3(bool v) 参数 v bool bool to convert to bool2x3 返回 bool2x3 Converted value. operator !=(bool, bool2x3) Returns the result of a componentwise not equal operation on a bool value and a bool2x3 matrix. public static bool2x3 operator !=(bool lhs, bool2x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(bool2x3, bool) Returns the result of a componentwise not equal operation on a bool2x3 matrix and a bool value. public static bool2x3 operator !=(bool2x3 lhs, bool rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(bool2x3, bool2x3) Returns the result of a componentwise not equal operation on two bool2x3 matrices. public static bool2x3 operator !=(bool2x3 lhs, bool2x3 rhs) 参数 lhs bool2x3 Left hand side bool2x3 to use to compute componentwise not equal. rhs bool2x3 Right hand side bool2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !(bool2x3) Returns the result of a componentwise not operation on a bool2x3 matrix. public static bool2x3 operator !(bool2x3 val) 参数 val bool2x3 Value to use when computing the componentwise not. 返回 bool2x3 bool2x3 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool2x4.html": {
    "href": "reference/Unity.Mathematics.bool2x4.html",
    "title": "bool2x4 结构 | Fantasy.Net API Reference",
    "keywords": "bool2x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x4 matrix of bools. public struct bool2x4 : IEquatable<bool2x4> 实现 IEquatable<bool2x4> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool2x4(bool) Constructs a bool2x4 matrix from a single bool value by assigning it to every component. public bool2x4(bool v) 参数 v bool bool to convert to bool2x4 bool2x4(bool, bool, bool, bool, bool, bool, bool, bool) Constructs a bool2x4 matrix from 8 bool values given in row-major order. public bool2x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m03 bool The matrix at row 0, column 3 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m13 bool The matrix at row 1, column 3 will be set to this value. bool2x4(bool2, bool2, bool2, bool2) Constructs a bool2x4 matrix from four bool2 vectors. public bool2x4(bool2 c0, bool2 c1, bool2 c2, bool2 c3) 参数 c0 bool2 The matrix column c0 will be set to this value. c1 bool2 The matrix column c1 will be set to this value. c2 bool2 The matrix column c2 will be set to this value. c3 bool2 The matrix column c3 will be set to this value. 字段 c0 Column 0 of the matrix. public bool2 c0 字段值 bool2 c1 Column 1 of the matrix. public bool2 c1 字段值 bool2 c2 Column 2 of the matrix. public bool2 c2 字段值 bool2 c3 Column 3 of the matrix. public bool2 c3 字段值 bool2 属性 this[int] Returns the bool2 element at a specified index. public ref bool2 this[int index] { get; } 参数 index int 属性值 bool2 方法 Equals(object) Returns true if the bool2x4 is equal to a given bool2x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool2x4) Returns true if the bool2x4 is equal to a given bool2x4, false otherwise. public bool Equals(bool2x4 rhs) 参数 rhs bool2x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool2x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool2x4. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool2x4) Returns the result of a componentwise bitwise and operation on a bool value and a bool2x4 matrix. public static bool2x4 operator &(bool lhs, bool2x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise bitwise and. 返回 bool2x4 bool2x4 result of the componentwise bitwise and. operator &(bool2x4, bool) Returns the result of a componentwise bitwise and operation on a bool2x4 matrix and a bool value. public static bool2x4 operator &(bool2x4 lhs, bool rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool2x4 bool2x4 result of the componentwise bitwise and. operator &(bool2x4, bool2x4) Returns the result of a componentwise bitwise and operation on two bool2x4 matrices. public static bool2x4 operator &(bool2x4 lhs, bool2x4 rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise bitwise and. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise bitwise and. 返回 bool2x4 bool2x4 result of the componentwise bitwise and. operator |(bool, bool2x4) Returns the result of a componentwise bitwise or operation on a bool value and a bool2x4 matrix. public static bool2x4 operator |(bool lhs, bool2x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise bitwise or. 返回 bool2x4 bool2x4 result of the componentwise bitwise or. operator |(bool2x4, bool) Returns the result of a componentwise bitwise or operation on a bool2x4 matrix and a bool value. public static bool2x4 operator |(bool2x4 lhs, bool rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool2x4 bool2x4 result of the componentwise bitwise or. operator |(bool2x4, bool2x4) Returns the result of a componentwise bitwise or operation on two bool2x4 matrices. public static bool2x4 operator |(bool2x4 lhs, bool2x4 rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise bitwise or. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise bitwise or. 返回 bool2x4 bool2x4 result of the componentwise bitwise or. operator ==(bool, bool2x4) Returns the result of a componentwise equality operation on a bool value and a bool2x4 matrix. public static bool2x4 operator ==(bool lhs, bool2x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(bool2x4, bool) Returns the result of a componentwise equality operation on a bool2x4 matrix and a bool value. public static bool2x4 operator ==(bool2x4 lhs, bool rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(bool2x4, bool2x4) Returns the result of a componentwise equality operation on two bool2x4 matrices. public static bool2x4 operator ==(bool2x4 lhs, bool2x4 rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise equality. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ^(bool, bool2x4) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool2x4 matrix. public static bool2x4 operator ^(bool lhs, bool2x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise bitwise exclusive or. 返回 bool2x4 bool2x4 result of the componentwise bitwise exclusive or. operator ^(bool2x4, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool2x4 matrix and a bool value. public static bool2x4 operator ^(bool2x4 lhs, bool rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool2x4 bool2x4 result of the componentwise bitwise exclusive or. operator ^(bool2x4, bool2x4) Returns the result of a componentwise bitwise exclusive or operation on two bool2x4 matrices. public static bool2x4 operator ^(bool2x4 lhs, bool2x4 rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise bitwise exclusive or. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise bitwise exclusive or. 返回 bool2x4 bool2x4 result of the componentwise bitwise exclusive or. implicit operator bool2x4(bool) Implicitly converts a single bool value to a bool2x4 matrix by assigning it to every component. public static implicit operator bool2x4(bool v) 参数 v bool bool to convert to bool2x4 返回 bool2x4 Converted value. operator !=(bool, bool2x4) Returns the result of a componentwise not equal operation on a bool value and a bool2x4 matrix. public static bool2x4 operator !=(bool lhs, bool2x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(bool2x4, bool) Returns the result of a componentwise not equal operation on a bool2x4 matrix and a bool value. public static bool2x4 operator !=(bool2x4 lhs, bool rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(bool2x4, bool2x4) Returns the result of a componentwise not equal operation on two bool2x4 matrices. public static bool2x4 operator !=(bool2x4 lhs, bool2x4 rhs) 参数 lhs bool2x4 Left hand side bool2x4 to use to compute componentwise not equal. rhs bool2x4 Right hand side bool2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !(bool2x4) Returns the result of a componentwise not operation on a bool2x4 matrix. public static bool2x4 operator !(bool2x4 val) 参数 val bool2x4 Value to use when computing the componentwise not. 返回 bool2x4 bool2x4 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool3.html": {
    "href": "reference/Unity.Mathematics.bool3.html",
    "title": "bool3 结构 | Fantasy.Net API Reference",
    "keywords": "bool3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3 component vector of bools. public struct bool3 : IEquatable<bool3> 实现 IEquatable<bool3> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool3(bool) Constructs a bool3 vector from a single bool value by assigning it to every component. public bool3(bool v) 参数 v bool bool to convert to bool3 bool3(bool, bool, bool) Constructs a bool3 vector from three bool values. public bool3(bool x, bool y, bool z) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. z bool The constructed vector's z component will be set to this value. bool3(bool, bool2) Constructs a bool3 vector from a bool value and a bool2 vector. public bool3(bool x, bool2 yz) 参数 x bool The constructed vector's x component will be set to this value. yz bool2 The constructed vector's yz components will be set to this value. bool3(bool2, bool) Constructs a bool3 vector from a bool2 vector and a bool value. public bool3(bool2 xy, bool z) 参数 xy bool2 The constructed vector's xy components will be set to this value. z bool The constructed vector's z component will be set to this value. bool3(bool3) Constructs a bool3 vector from a bool3 vector. public bool3(bool3 xyz) 参数 xyz bool3 The constructed vector's xyz components will be set to this value. 字段 x x component of the vector. public bool x 字段值 bool y y component of the vector. public bool y 字段值 bool z z component of the vector. public bool z 字段值 bool 属性 this[int] Returns the bool element at a specified index. public bool this[int index] { get; set; } 参数 index int 属性值 bool 方法 Equals(object) Returns true if the bool3 is equal to a given bool3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool3) Returns true if the bool3 is equal to a given bool3, false otherwise. public bool Equals(bool3 rhs) 参数 rhs bool3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool3. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool3) Returns the result of a componentwise bitwise and operation on a bool value and a bool3 vector. public static bool3 operator &(bool lhs, bool3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool3 Right hand side bool3 to use to compute componentwise bitwise and. 返回 bool3 bool3 result of the componentwise bitwise and. operator &(bool3, bool) Returns the result of a componentwise bitwise and operation on a bool3 vector and a bool value. public static bool3 operator &(bool3 lhs, bool rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool3 bool3 result of the componentwise bitwise and. operator &(bool3, bool3) Returns the result of a componentwise bitwise and operation on two bool3 vectors. public static bool3 operator &(bool3 lhs, bool3 rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise bitwise and. rhs bool3 Right hand side bool3 to use to compute componentwise bitwise and. 返回 bool3 bool3 result of the componentwise bitwise and. operator |(bool, bool3) Returns the result of a componentwise bitwise or operation on a bool value and a bool3 vector. public static bool3 operator |(bool lhs, bool3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool3 Right hand side bool3 to use to compute componentwise bitwise or. 返回 bool3 bool3 result of the componentwise bitwise or. operator |(bool3, bool) Returns the result of a componentwise bitwise or operation on a bool3 vector and a bool value. public static bool3 operator |(bool3 lhs, bool rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool3 bool3 result of the componentwise bitwise or. operator |(bool3, bool3) Returns the result of a componentwise bitwise or operation on two bool3 vectors. public static bool3 operator |(bool3 lhs, bool3 rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise bitwise or. rhs bool3 Right hand side bool3 to use to compute componentwise bitwise or. 返回 bool3 bool3 result of the componentwise bitwise or. operator ==(bool, bool3) Returns the result of a componentwise equality operation on a bool value and a bool3 vector. public static bool3 operator ==(bool lhs, bool3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool3 Right hand side bool3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(bool3, bool) Returns the result of a componentwise equality operation on a bool3 vector and a bool value. public static bool3 operator ==(bool3 lhs, bool rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(bool3, bool3) Returns the result of a componentwise equality operation on two bool3 vectors. public static bool3 operator ==(bool3 lhs, bool3 rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise equality. rhs bool3 Right hand side bool3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ^(bool, bool3) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool3 vector. public static bool3 operator ^(bool lhs, bool3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool3 Right hand side bool3 to use to compute componentwise bitwise exclusive or. 返回 bool3 bool3 result of the componentwise bitwise exclusive or. operator ^(bool3, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool3 vector and a bool value. public static bool3 operator ^(bool3 lhs, bool rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool3 bool3 result of the componentwise bitwise exclusive or. operator ^(bool3, bool3) Returns the result of a componentwise bitwise exclusive or operation on two bool3 vectors. public static bool3 operator ^(bool3 lhs, bool3 rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise bitwise exclusive or. rhs bool3 Right hand side bool3 to use to compute componentwise bitwise exclusive or. 返回 bool3 bool3 result of the componentwise bitwise exclusive or. implicit operator bool3(bool) Implicitly converts a single bool value to a bool3 vector by assigning it to every component. public static implicit operator bool3(bool v) 参数 v bool bool to convert to bool3 返回 bool3 Converted value. operator !=(bool, bool3) Returns the result of a componentwise not equal operation on a bool value and a bool3 vector. public static bool3 operator !=(bool lhs, bool3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool3 Right hand side bool3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(bool3, bool) Returns the result of a componentwise not equal operation on a bool3 vector and a bool value. public static bool3 operator !=(bool3 lhs, bool rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(bool3, bool3) Returns the result of a componentwise not equal operation on two bool3 vectors. public static bool3 operator !=(bool3 lhs, bool3 rhs) 参数 lhs bool3 Left hand side bool3 to use to compute componentwise not equal. rhs bool3 Right hand side bool3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !(bool3) Returns the result of a componentwise not operation on a bool3 vector. public static bool3 operator !(bool3 val) 参数 val bool3 Value to use when computing the componentwise not. 返回 bool3 bool3 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool3x2.html": {
    "href": "reference/Unity.Mathematics.bool3x2.html",
    "title": "bool3x2 结构 | Fantasy.Net API Reference",
    "keywords": "bool3x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x2 matrix of bools. public struct bool3x2 : IEquatable<bool3x2> 实现 IEquatable<bool3x2> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool3x2(bool) Constructs a bool3x2 matrix from a single bool value by assigning it to every component. public bool3x2(bool v) 参数 v bool bool to convert to bool3x2 bool3x2(bool, bool, bool, bool, bool, bool) Constructs a bool3x2 matrix from 6 bool values given in row-major order. public bool3x2(bool m00, bool m01, bool m10, bool m11, bool m20, bool m21) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. bool3x2(bool3, bool3) Constructs a bool3x2 matrix from two bool3 vectors. public bool3x2(bool3 c0, bool3 c1) 参数 c0 bool3 The matrix column c0 will be set to this value. c1 bool3 The matrix column c1 will be set to this value. 字段 c0 Column 0 of the matrix. public bool3 c0 字段值 bool3 c1 Column 1 of the matrix. public bool3 c1 字段值 bool3 属性 this[int] Returns the bool3 element at a specified index. public ref bool3 this[int index] { get; } 参数 index int 属性值 bool3 方法 Equals(object) Returns true if the bool3x2 is equal to a given bool3x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool3x2) Returns true if the bool3x2 is equal to a given bool3x2, false otherwise. public bool Equals(bool3x2 rhs) 参数 rhs bool3x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool3x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool3x2. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool3x2) Returns the result of a componentwise bitwise and operation on a bool value and a bool3x2 matrix. public static bool3x2 operator &(bool lhs, bool3x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise bitwise and. 返回 bool3x2 bool3x2 result of the componentwise bitwise and. operator &(bool3x2, bool) Returns the result of a componentwise bitwise and operation on a bool3x2 matrix and a bool value. public static bool3x2 operator &(bool3x2 lhs, bool rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool3x2 bool3x2 result of the componentwise bitwise and. operator &(bool3x2, bool3x2) Returns the result of a componentwise bitwise and operation on two bool3x2 matrices. public static bool3x2 operator &(bool3x2 lhs, bool3x2 rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise bitwise and. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise bitwise and. 返回 bool3x2 bool3x2 result of the componentwise bitwise and. operator |(bool, bool3x2) Returns the result of a componentwise bitwise or operation on a bool value and a bool3x2 matrix. public static bool3x2 operator |(bool lhs, bool3x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise bitwise or. 返回 bool3x2 bool3x2 result of the componentwise bitwise or. operator |(bool3x2, bool) Returns the result of a componentwise bitwise or operation on a bool3x2 matrix and a bool value. public static bool3x2 operator |(bool3x2 lhs, bool rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool3x2 bool3x2 result of the componentwise bitwise or. operator |(bool3x2, bool3x2) Returns the result of a componentwise bitwise or operation on two bool3x2 matrices. public static bool3x2 operator |(bool3x2 lhs, bool3x2 rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise bitwise or. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise bitwise or. 返回 bool3x2 bool3x2 result of the componentwise bitwise or. operator ==(bool, bool3x2) Returns the result of a componentwise equality operation on a bool value and a bool3x2 matrix. public static bool3x2 operator ==(bool lhs, bool3x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(bool3x2, bool) Returns the result of a componentwise equality operation on a bool3x2 matrix and a bool value. public static bool3x2 operator ==(bool3x2 lhs, bool rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(bool3x2, bool3x2) Returns the result of a componentwise equality operation on two bool3x2 matrices. public static bool3x2 operator ==(bool3x2 lhs, bool3x2 rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise equality. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ^(bool, bool3x2) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool3x2 matrix. public static bool3x2 operator ^(bool lhs, bool3x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise bitwise exclusive or. 返回 bool3x2 bool3x2 result of the componentwise bitwise exclusive or. operator ^(bool3x2, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool3x2 matrix and a bool value. public static bool3x2 operator ^(bool3x2 lhs, bool rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool3x2 bool3x2 result of the componentwise bitwise exclusive or. operator ^(bool3x2, bool3x2) Returns the result of a componentwise bitwise exclusive or operation on two bool3x2 matrices. public static bool3x2 operator ^(bool3x2 lhs, bool3x2 rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise bitwise exclusive or. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise bitwise exclusive or. 返回 bool3x2 bool3x2 result of the componentwise bitwise exclusive or. implicit operator bool3x2(bool) Implicitly converts a single bool value to a bool3x2 matrix by assigning it to every component. public static implicit operator bool3x2(bool v) 参数 v bool bool to convert to bool3x2 返回 bool3x2 Converted value. operator !=(bool, bool3x2) Returns the result of a componentwise not equal operation on a bool value and a bool3x2 matrix. public static bool3x2 operator !=(bool lhs, bool3x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(bool3x2, bool) Returns the result of a componentwise not equal operation on a bool3x2 matrix and a bool value. public static bool3x2 operator !=(bool3x2 lhs, bool rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(bool3x2, bool3x2) Returns the result of a componentwise not equal operation on two bool3x2 matrices. public static bool3x2 operator !=(bool3x2 lhs, bool3x2 rhs) 参数 lhs bool3x2 Left hand side bool3x2 to use to compute componentwise not equal. rhs bool3x2 Right hand side bool3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !(bool3x2) Returns the result of a componentwise not operation on a bool3x2 matrix. public static bool3x2 operator !(bool3x2 val) 参数 val bool3x2 Value to use when computing the componentwise not. 返回 bool3x2 bool3x2 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool3x3.html": {
    "href": "reference/Unity.Mathematics.bool3x3.html",
    "title": "bool3x3 结构 | Fantasy.Net API Reference",
    "keywords": "bool3x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x3 matrix of bools. public struct bool3x3 : IEquatable<bool3x3> 实现 IEquatable<bool3x3> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool3x3(bool) Constructs a bool3x3 matrix from a single bool value by assigning it to every component. public bool3x3(bool v) 参数 v bool bool to convert to bool3x3 bool3x3(bool, bool, bool, bool, bool, bool, bool, bool, bool) Constructs a bool3x3 matrix from 9 bool values given in row-major order. public bool3x3(bool m00, bool m01, bool m02, bool m10, bool m11, bool m12, bool m20, bool m21, bool m22) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. bool3x3(bool3, bool3, bool3) Constructs a bool3x3 matrix from three bool3 vectors. public bool3x3(bool3 c0, bool3 c1, bool3 c2) 参数 c0 bool3 The matrix column c0 will be set to this value. c1 bool3 The matrix column c1 will be set to this value. c2 bool3 The matrix column c2 will be set to this value. 字段 c0 Column 0 of the matrix. public bool3 c0 字段值 bool3 c1 Column 1 of the matrix. public bool3 c1 字段值 bool3 c2 Column 2 of the matrix. public bool3 c2 字段值 bool3 属性 this[int] Returns the bool3 element at a specified index. public ref bool3 this[int index] { get; } 参数 index int 属性值 bool3 方法 Equals(object) Returns true if the bool3x3 is equal to a given bool3x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool3x3) Returns true if the bool3x3 is equal to a given bool3x3, false otherwise. public bool Equals(bool3x3 rhs) 参数 rhs bool3x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool3x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool3x3. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool3x3) Returns the result of a componentwise bitwise and operation on a bool value and a bool3x3 matrix. public static bool3x3 operator &(bool lhs, bool3x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise bitwise and. 返回 bool3x3 bool3x3 result of the componentwise bitwise and. operator &(bool3x3, bool) Returns the result of a componentwise bitwise and operation on a bool3x3 matrix and a bool value. public static bool3x3 operator &(bool3x3 lhs, bool rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool3x3 bool3x3 result of the componentwise bitwise and. operator &(bool3x3, bool3x3) Returns the result of a componentwise bitwise and operation on two bool3x3 matrices. public static bool3x3 operator &(bool3x3 lhs, bool3x3 rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise bitwise and. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise bitwise and. 返回 bool3x3 bool3x3 result of the componentwise bitwise and. operator |(bool, bool3x3) Returns the result of a componentwise bitwise or operation on a bool value and a bool3x3 matrix. public static bool3x3 operator |(bool lhs, bool3x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise bitwise or. 返回 bool3x3 bool3x3 result of the componentwise bitwise or. operator |(bool3x3, bool) Returns the result of a componentwise bitwise or operation on a bool3x3 matrix and a bool value. public static bool3x3 operator |(bool3x3 lhs, bool rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool3x3 bool3x3 result of the componentwise bitwise or. operator |(bool3x3, bool3x3) Returns the result of a componentwise bitwise or operation on two bool3x3 matrices. public static bool3x3 operator |(bool3x3 lhs, bool3x3 rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise bitwise or. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise bitwise or. 返回 bool3x3 bool3x3 result of the componentwise bitwise or. operator ==(bool, bool3x3) Returns the result of a componentwise equality operation on a bool value and a bool3x3 matrix. public static bool3x3 operator ==(bool lhs, bool3x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(bool3x3, bool) Returns the result of a componentwise equality operation on a bool3x3 matrix and a bool value. public static bool3x3 operator ==(bool3x3 lhs, bool rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(bool3x3, bool3x3) Returns the result of a componentwise equality operation on two bool3x3 matrices. public static bool3x3 operator ==(bool3x3 lhs, bool3x3 rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise equality. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ^(bool, bool3x3) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool3x3 matrix. public static bool3x3 operator ^(bool lhs, bool3x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise bitwise exclusive or. 返回 bool3x3 bool3x3 result of the componentwise bitwise exclusive or. operator ^(bool3x3, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool3x3 matrix and a bool value. public static bool3x3 operator ^(bool3x3 lhs, bool rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool3x3 bool3x3 result of the componentwise bitwise exclusive or. operator ^(bool3x3, bool3x3) Returns the result of a componentwise bitwise exclusive or operation on two bool3x3 matrices. public static bool3x3 operator ^(bool3x3 lhs, bool3x3 rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise bitwise exclusive or. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise bitwise exclusive or. 返回 bool3x3 bool3x3 result of the componentwise bitwise exclusive or. implicit operator bool3x3(bool) Implicitly converts a single bool value to a bool3x3 matrix by assigning it to every component. public static implicit operator bool3x3(bool v) 参数 v bool bool to convert to bool3x3 返回 bool3x3 Converted value. operator !=(bool, bool3x3) Returns the result of a componentwise not equal operation on a bool value and a bool3x3 matrix. public static bool3x3 operator !=(bool lhs, bool3x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(bool3x3, bool) Returns the result of a componentwise not equal operation on a bool3x3 matrix and a bool value. public static bool3x3 operator !=(bool3x3 lhs, bool rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(bool3x3, bool3x3) Returns the result of a componentwise not equal operation on two bool3x3 matrices. public static bool3x3 operator !=(bool3x3 lhs, bool3x3 rhs) 参数 lhs bool3x3 Left hand side bool3x3 to use to compute componentwise not equal. rhs bool3x3 Right hand side bool3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !(bool3x3) Returns the result of a componentwise not operation on a bool3x3 matrix. public static bool3x3 operator !(bool3x3 val) 参数 val bool3x3 Value to use when computing the componentwise not. 返回 bool3x3 bool3x3 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool3x4.html": {
    "href": "reference/Unity.Mathematics.bool3x4.html",
    "title": "bool3x4 结构 | Fantasy.Net API Reference",
    "keywords": "bool3x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x4 matrix of bools. public struct bool3x4 : IEquatable<bool3x4> 实现 IEquatable<bool3x4> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool3x4(bool) Constructs a bool3x4 matrix from a single bool value by assigning it to every component. public bool3x4(bool v) 参数 v bool bool to convert to bool3x4 bool3x4(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Constructs a bool3x4 matrix from 12 bool values given in row-major order. public bool3x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13, bool m20, bool m21, bool m22, bool m23) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m03 bool The matrix at row 0, column 3 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m13 bool The matrix at row 1, column 3 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. m23 bool The matrix at row 2, column 3 will be set to this value. bool3x4(bool3, bool3, bool3, bool3) Constructs a bool3x4 matrix from four bool3 vectors. public bool3x4(bool3 c0, bool3 c1, bool3 c2, bool3 c3) 参数 c0 bool3 The matrix column c0 will be set to this value. c1 bool3 The matrix column c1 will be set to this value. c2 bool3 The matrix column c2 will be set to this value. c3 bool3 The matrix column c3 will be set to this value. 字段 c0 Column 0 of the matrix. public bool3 c0 字段值 bool3 c1 Column 1 of the matrix. public bool3 c1 字段值 bool3 c2 Column 2 of the matrix. public bool3 c2 字段值 bool3 c3 Column 3 of the matrix. public bool3 c3 字段值 bool3 属性 this[int] Returns the bool3 element at a specified index. public ref bool3 this[int index] { get; } 参数 index int 属性值 bool3 方法 Equals(object) Returns true if the bool3x4 is equal to a given bool3x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool3x4) Returns true if the bool3x4 is equal to a given bool3x4, false otherwise. public bool Equals(bool3x4 rhs) 参数 rhs bool3x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool3x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool3x4. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool3x4) Returns the result of a componentwise bitwise and operation on a bool value and a bool3x4 matrix. public static bool3x4 operator &(bool lhs, bool3x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise bitwise and. 返回 bool3x4 bool3x4 result of the componentwise bitwise and. operator &(bool3x4, bool) Returns the result of a componentwise bitwise and operation on a bool3x4 matrix and a bool value. public static bool3x4 operator &(bool3x4 lhs, bool rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool3x4 bool3x4 result of the componentwise bitwise and. operator &(bool3x4, bool3x4) Returns the result of a componentwise bitwise and operation on two bool3x4 matrices. public static bool3x4 operator &(bool3x4 lhs, bool3x4 rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise bitwise and. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise bitwise and. 返回 bool3x4 bool3x4 result of the componentwise bitwise and. operator |(bool, bool3x4) Returns the result of a componentwise bitwise or operation on a bool value and a bool3x4 matrix. public static bool3x4 operator |(bool lhs, bool3x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise bitwise or. 返回 bool3x4 bool3x4 result of the componentwise bitwise or. operator |(bool3x4, bool) Returns the result of a componentwise bitwise or operation on a bool3x4 matrix and a bool value. public static bool3x4 operator |(bool3x4 lhs, bool rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool3x4 bool3x4 result of the componentwise bitwise or. operator |(bool3x4, bool3x4) Returns the result of a componentwise bitwise or operation on two bool3x4 matrices. public static bool3x4 operator |(bool3x4 lhs, bool3x4 rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise bitwise or. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise bitwise or. 返回 bool3x4 bool3x4 result of the componentwise bitwise or. operator ==(bool, bool3x4) Returns the result of a componentwise equality operation on a bool value and a bool3x4 matrix. public static bool3x4 operator ==(bool lhs, bool3x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(bool3x4, bool) Returns the result of a componentwise equality operation on a bool3x4 matrix and a bool value. public static bool3x4 operator ==(bool3x4 lhs, bool rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(bool3x4, bool3x4) Returns the result of a componentwise equality operation on two bool3x4 matrices. public static bool3x4 operator ==(bool3x4 lhs, bool3x4 rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise equality. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ^(bool, bool3x4) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool3x4 matrix. public static bool3x4 operator ^(bool lhs, bool3x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise bitwise exclusive or. 返回 bool3x4 bool3x4 result of the componentwise bitwise exclusive or. operator ^(bool3x4, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool3x4 matrix and a bool value. public static bool3x4 operator ^(bool3x4 lhs, bool rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool3x4 bool3x4 result of the componentwise bitwise exclusive or. operator ^(bool3x4, bool3x4) Returns the result of a componentwise bitwise exclusive or operation on two bool3x4 matrices. public static bool3x4 operator ^(bool3x4 lhs, bool3x4 rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise bitwise exclusive or. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise bitwise exclusive or. 返回 bool3x4 bool3x4 result of the componentwise bitwise exclusive or. implicit operator bool3x4(bool) Implicitly converts a single bool value to a bool3x4 matrix by assigning it to every component. public static implicit operator bool3x4(bool v) 参数 v bool bool to convert to bool3x4 返回 bool3x4 Converted value. operator !=(bool, bool3x4) Returns the result of a componentwise not equal operation on a bool value and a bool3x4 matrix. public static bool3x4 operator !=(bool lhs, bool3x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(bool3x4, bool) Returns the result of a componentwise not equal operation on a bool3x4 matrix and a bool value. public static bool3x4 operator !=(bool3x4 lhs, bool rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(bool3x4, bool3x4) Returns the result of a componentwise not equal operation on two bool3x4 matrices. public static bool3x4 operator !=(bool3x4 lhs, bool3x4 rhs) 参数 lhs bool3x4 Left hand side bool3x4 to use to compute componentwise not equal. rhs bool3x4 Right hand side bool3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !(bool3x4) Returns the result of a componentwise not operation on a bool3x4 matrix. public static bool3x4 operator !(bool3x4 val) 参数 val bool3x4 Value to use when computing the componentwise not. 返回 bool3x4 bool3x4 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool4.html": {
    "href": "reference/Unity.Mathematics.bool4.html",
    "title": "bool4 结构 | Fantasy.Net API Reference",
    "keywords": "bool4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4 component vector of bools. public struct bool4 : IEquatable<bool4> 实现 IEquatable<bool4> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool4(bool) Constructs a bool4 vector from a single bool value by assigning it to every component. public bool4(bool v) 参数 v bool bool to convert to bool4 bool4(bool, bool, bool, bool) Constructs a bool4 vector from four bool values. public bool4(bool x, bool y, bool z, bool w) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. z bool The constructed vector's z component will be set to this value. w bool The constructed vector's w component will be set to this value. bool4(bool, bool, bool2) Constructs a bool4 vector from two bool values and a bool2 vector. public bool4(bool x, bool y, bool2 zw) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. zw bool2 The constructed vector's zw components will be set to this value. bool4(bool, bool2, bool) Constructs a bool4 vector from a bool value, a bool2 vector and a bool value. public bool4(bool x, bool2 yz, bool w) 参数 x bool The constructed vector's x component will be set to this value. yz bool2 The constructed vector's yz components will be set to this value. w bool The constructed vector's w component will be set to this value. bool4(bool, bool3) Constructs a bool4 vector from a bool value and a bool3 vector. public bool4(bool x, bool3 yzw) 参数 x bool The constructed vector's x component will be set to this value. yzw bool3 The constructed vector's yzw components will be set to this value. bool4(bool2, bool, bool) Constructs a bool4 vector from a bool2 vector and two bool values. public bool4(bool2 xy, bool z, bool w) 参数 xy bool2 The constructed vector's xy components will be set to this value. z bool The constructed vector's z component will be set to this value. w bool The constructed vector's w component will be set to this value. bool4(bool2, bool2) Constructs a bool4 vector from two bool2 vectors. public bool4(bool2 xy, bool2 zw) 参数 xy bool2 The constructed vector's xy components will be set to this value. zw bool2 The constructed vector's zw components will be set to this value. bool4(bool3, bool) Constructs a bool4 vector from a bool3 vector and a bool value. public bool4(bool3 xyz, bool w) 参数 xyz bool3 The constructed vector's xyz components will be set to this value. w bool The constructed vector's w component will be set to this value. bool4(bool4) Constructs a bool4 vector from a bool4 vector. public bool4(bool4 xyzw) 参数 xyzw bool4 The constructed vector's xyzw components will be set to this value. 字段 w w component of the vector. public bool w 字段值 bool x x component of the vector. public bool x 字段值 bool y y component of the vector. public bool y 字段值 bool z z component of the vector. public bool z 字段值 bool 属性 this[int] Returns the bool element at a specified index. public bool this[int index] { get; set; } 参数 index int 属性值 bool 方法 Equals(object) Returns true if the bool4 is equal to a given bool4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool4) Returns true if the bool4 is equal to a given bool4, false otherwise. public bool Equals(bool4 rhs) 参数 rhs bool4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool4. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool4) Returns the result of a componentwise bitwise and operation on a bool value and a bool4 vector. public static bool4 operator &(bool lhs, bool4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool4 Right hand side bool4 to use to compute componentwise bitwise and. 返回 bool4 bool4 result of the componentwise bitwise and. operator &(bool4, bool) Returns the result of a componentwise bitwise and operation on a bool4 vector and a bool value. public static bool4 operator &(bool4 lhs, bool rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool4 bool4 result of the componentwise bitwise and. operator &(bool4, bool4) Returns the result of a componentwise bitwise and operation on two bool4 vectors. public static bool4 operator &(bool4 lhs, bool4 rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise bitwise and. rhs bool4 Right hand side bool4 to use to compute componentwise bitwise and. 返回 bool4 bool4 result of the componentwise bitwise and. operator |(bool, bool4) Returns the result of a componentwise bitwise or operation on a bool value and a bool4 vector. public static bool4 operator |(bool lhs, bool4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool4 Right hand side bool4 to use to compute componentwise bitwise or. 返回 bool4 bool4 result of the componentwise bitwise or. operator |(bool4, bool) Returns the result of a componentwise bitwise or operation on a bool4 vector and a bool value. public static bool4 operator |(bool4 lhs, bool rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool4 bool4 result of the componentwise bitwise or. operator |(bool4, bool4) Returns the result of a componentwise bitwise or operation on two bool4 vectors. public static bool4 operator |(bool4 lhs, bool4 rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise bitwise or. rhs bool4 Right hand side bool4 to use to compute componentwise bitwise or. 返回 bool4 bool4 result of the componentwise bitwise or. operator ==(bool, bool4) Returns the result of a componentwise equality operation on a bool value and a bool4 vector. public static bool4 operator ==(bool lhs, bool4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool4 Right hand side bool4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(bool4, bool) Returns the result of a componentwise equality operation on a bool4 vector and a bool value. public static bool4 operator ==(bool4 lhs, bool rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(bool4, bool4) Returns the result of a componentwise equality operation on two bool4 vectors. public static bool4 operator ==(bool4 lhs, bool4 rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise equality. rhs bool4 Right hand side bool4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ^(bool, bool4) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool4 vector. public static bool4 operator ^(bool lhs, bool4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool4 Right hand side bool4 to use to compute componentwise bitwise exclusive or. 返回 bool4 bool4 result of the componentwise bitwise exclusive or. operator ^(bool4, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool4 vector and a bool value. public static bool4 operator ^(bool4 lhs, bool rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool4 bool4 result of the componentwise bitwise exclusive or. operator ^(bool4, bool4) Returns the result of a componentwise bitwise exclusive or operation on two bool4 vectors. public static bool4 operator ^(bool4 lhs, bool4 rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise bitwise exclusive or. rhs bool4 Right hand side bool4 to use to compute componentwise bitwise exclusive or. 返回 bool4 bool4 result of the componentwise bitwise exclusive or. implicit operator bool4(bool) Implicitly converts a single bool value to a bool4 vector by assigning it to every component. public static implicit operator bool4(bool v) 参数 v bool bool to convert to bool4 返回 bool4 Converted value. operator !=(bool, bool4) Returns the result of a componentwise not equal operation on a bool value and a bool4 vector. public static bool4 operator !=(bool lhs, bool4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool4 Right hand side bool4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(bool4, bool) Returns the result of a componentwise not equal operation on a bool4 vector and a bool value. public static bool4 operator !=(bool4 lhs, bool rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(bool4, bool4) Returns the result of a componentwise not equal operation on two bool4 vectors. public static bool4 operator !=(bool4 lhs, bool4 rhs) 参数 lhs bool4 Left hand side bool4 to use to compute componentwise not equal. rhs bool4 Right hand side bool4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !(bool4) Returns the result of a componentwise not operation on a bool4 vector. public static bool4 operator !(bool4 val) 参数 val bool4 Value to use when computing the componentwise not. 返回 bool4 bool4 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool4x2.html": {
    "href": "reference/Unity.Mathematics.bool4x2.html",
    "title": "bool4x2 结构 | Fantasy.Net API Reference",
    "keywords": "bool4x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x2 matrix of bools. public struct bool4x2 : IEquatable<bool4x2> 实现 IEquatable<bool4x2> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool4x2(bool) Constructs a bool4x2 matrix from a single bool value by assigning it to every component. public bool4x2(bool v) 参数 v bool bool to convert to bool4x2 bool4x2(bool, bool, bool, bool, bool, bool, bool, bool) Constructs a bool4x2 matrix from 8 bool values given in row-major order. public bool4x2(bool m00, bool m01, bool m10, bool m11, bool m20, bool m21, bool m30, bool m31) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m30 bool The matrix at row 3, column 0 will be set to this value. m31 bool The matrix at row 3, column 1 will be set to this value. bool4x2(bool4, bool4) Constructs a bool4x2 matrix from two bool4 vectors. public bool4x2(bool4 c0, bool4 c1) 参数 c0 bool4 The matrix column c0 will be set to this value. c1 bool4 The matrix column c1 will be set to this value. 字段 c0 Column 0 of the matrix. public bool4 c0 字段值 bool4 c1 Column 1 of the matrix. public bool4 c1 字段值 bool4 属性 this[int] Returns the bool4 element at a specified index. public ref bool4 this[int index] { get; } 参数 index int 属性值 bool4 方法 Equals(object) Returns true if the bool4x2 is equal to a given bool4x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool4x2) Returns true if the bool4x2 is equal to a given bool4x2, false otherwise. public bool Equals(bool4x2 rhs) 参数 rhs bool4x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool4x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool4x2. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool4x2) Returns the result of a componentwise bitwise and operation on a bool value and a bool4x2 matrix. public static bool4x2 operator &(bool lhs, bool4x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise bitwise and. 返回 bool4x2 bool4x2 result of the componentwise bitwise and. operator &(bool4x2, bool) Returns the result of a componentwise bitwise and operation on a bool4x2 matrix and a bool value. public static bool4x2 operator &(bool4x2 lhs, bool rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool4x2 bool4x2 result of the componentwise bitwise and. operator &(bool4x2, bool4x2) Returns the result of a componentwise bitwise and operation on two bool4x2 matrices. public static bool4x2 operator &(bool4x2 lhs, bool4x2 rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise bitwise and. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise bitwise and. 返回 bool4x2 bool4x2 result of the componentwise bitwise and. operator |(bool, bool4x2) Returns the result of a componentwise bitwise or operation on a bool value and a bool4x2 matrix. public static bool4x2 operator |(bool lhs, bool4x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise bitwise or. 返回 bool4x2 bool4x2 result of the componentwise bitwise or. operator |(bool4x2, bool) Returns the result of a componentwise bitwise or operation on a bool4x2 matrix and a bool value. public static bool4x2 operator |(bool4x2 lhs, bool rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool4x2 bool4x2 result of the componentwise bitwise or. operator |(bool4x2, bool4x2) Returns the result of a componentwise bitwise or operation on two bool4x2 matrices. public static bool4x2 operator |(bool4x2 lhs, bool4x2 rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise bitwise or. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise bitwise or. 返回 bool4x2 bool4x2 result of the componentwise bitwise or. operator ==(bool, bool4x2) Returns the result of a componentwise equality operation on a bool value and a bool4x2 matrix. public static bool4x2 operator ==(bool lhs, bool4x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(bool4x2, bool) Returns the result of a componentwise equality operation on a bool4x2 matrix and a bool value. public static bool4x2 operator ==(bool4x2 lhs, bool rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(bool4x2, bool4x2) Returns the result of a componentwise equality operation on two bool4x2 matrices. public static bool4x2 operator ==(bool4x2 lhs, bool4x2 rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise equality. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ^(bool, bool4x2) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool4x2 matrix. public static bool4x2 operator ^(bool lhs, bool4x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise bitwise exclusive or. 返回 bool4x2 bool4x2 result of the componentwise bitwise exclusive or. operator ^(bool4x2, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool4x2 matrix and a bool value. public static bool4x2 operator ^(bool4x2 lhs, bool rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool4x2 bool4x2 result of the componentwise bitwise exclusive or. operator ^(bool4x2, bool4x2) Returns the result of a componentwise bitwise exclusive or operation on two bool4x2 matrices. public static bool4x2 operator ^(bool4x2 lhs, bool4x2 rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise bitwise exclusive or. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise bitwise exclusive or. 返回 bool4x2 bool4x2 result of the componentwise bitwise exclusive or. implicit operator bool4x2(bool) Implicitly converts a single bool value to a bool4x2 matrix by assigning it to every component. public static implicit operator bool4x2(bool v) 参数 v bool bool to convert to bool4x2 返回 bool4x2 Converted value. operator !=(bool, bool4x2) Returns the result of a componentwise not equal operation on a bool value and a bool4x2 matrix. public static bool4x2 operator !=(bool lhs, bool4x2 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(bool4x2, bool) Returns the result of a componentwise not equal operation on a bool4x2 matrix and a bool value. public static bool4x2 operator !=(bool4x2 lhs, bool rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(bool4x2, bool4x2) Returns the result of a componentwise not equal operation on two bool4x2 matrices. public static bool4x2 operator !=(bool4x2 lhs, bool4x2 rhs) 参数 lhs bool4x2 Left hand side bool4x2 to use to compute componentwise not equal. rhs bool4x2 Right hand side bool4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !(bool4x2) Returns the result of a componentwise not operation on a bool4x2 matrix. public static bool4x2 operator !(bool4x2 val) 参数 val bool4x2 Value to use when computing the componentwise not. 返回 bool4x2 bool4x2 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool4x3.html": {
    "href": "reference/Unity.Mathematics.bool4x3.html",
    "title": "bool4x3 结构 | Fantasy.Net API Reference",
    "keywords": "bool4x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x3 matrix of bools. public struct bool4x3 : IEquatable<bool4x3> 实现 IEquatable<bool4x3> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool4x3(bool) Constructs a bool4x3 matrix from a single bool value by assigning it to every component. public bool4x3(bool v) 参数 v bool bool to convert to bool4x3 bool4x3(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Constructs a bool4x3 matrix from 12 bool values given in row-major order. public bool4x3(bool m00, bool m01, bool m02, bool m10, bool m11, bool m12, bool m20, bool m21, bool m22, bool m30, bool m31, bool m32) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. m30 bool The matrix at row 3, column 0 will be set to this value. m31 bool The matrix at row 3, column 1 will be set to this value. m32 bool The matrix at row 3, column 2 will be set to this value. bool4x3(bool4, bool4, bool4) Constructs a bool4x3 matrix from three bool4 vectors. public bool4x3(bool4 c0, bool4 c1, bool4 c2) 参数 c0 bool4 The matrix column c0 will be set to this value. c1 bool4 The matrix column c1 will be set to this value. c2 bool4 The matrix column c2 will be set to this value. 字段 c0 Column 0 of the matrix. public bool4 c0 字段值 bool4 c1 Column 1 of the matrix. public bool4 c1 字段值 bool4 c2 Column 2 of the matrix. public bool4 c2 字段值 bool4 属性 this[int] Returns the bool4 element at a specified index. public ref bool4 this[int index] { get; } 参数 index int 属性值 bool4 方法 Equals(object) Returns true if the bool4x3 is equal to a given bool4x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool4x3) Returns true if the bool4x3 is equal to a given bool4x3, false otherwise. public bool Equals(bool4x3 rhs) 参数 rhs bool4x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool4x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool4x3. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool4x3) Returns the result of a componentwise bitwise and operation on a bool value and a bool4x3 matrix. public static bool4x3 operator &(bool lhs, bool4x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise bitwise and. 返回 bool4x3 bool4x3 result of the componentwise bitwise and. operator &(bool4x3, bool) Returns the result of a componentwise bitwise and operation on a bool4x3 matrix and a bool value. public static bool4x3 operator &(bool4x3 lhs, bool rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool4x3 bool4x3 result of the componentwise bitwise and. operator &(bool4x3, bool4x3) Returns the result of a componentwise bitwise and operation on two bool4x3 matrices. public static bool4x3 operator &(bool4x3 lhs, bool4x3 rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise bitwise and. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise bitwise and. 返回 bool4x3 bool4x3 result of the componentwise bitwise and. operator |(bool, bool4x3) Returns the result of a componentwise bitwise or operation on a bool value and a bool4x3 matrix. public static bool4x3 operator |(bool lhs, bool4x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise bitwise or. 返回 bool4x3 bool4x3 result of the componentwise bitwise or. operator |(bool4x3, bool) Returns the result of a componentwise bitwise or operation on a bool4x3 matrix and a bool value. public static bool4x3 operator |(bool4x3 lhs, bool rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool4x3 bool4x3 result of the componentwise bitwise or. operator |(bool4x3, bool4x3) Returns the result of a componentwise bitwise or operation on two bool4x3 matrices. public static bool4x3 operator |(bool4x3 lhs, bool4x3 rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise bitwise or. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise bitwise or. 返回 bool4x3 bool4x3 result of the componentwise bitwise or. operator ==(bool, bool4x3) Returns the result of a componentwise equality operation on a bool value and a bool4x3 matrix. public static bool4x3 operator ==(bool lhs, bool4x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(bool4x3, bool) Returns the result of a componentwise equality operation on a bool4x3 matrix and a bool value. public static bool4x3 operator ==(bool4x3 lhs, bool rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(bool4x3, bool4x3) Returns the result of a componentwise equality operation on two bool4x3 matrices. public static bool4x3 operator ==(bool4x3 lhs, bool4x3 rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise equality. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ^(bool, bool4x3) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool4x3 matrix. public static bool4x3 operator ^(bool lhs, bool4x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise bitwise exclusive or. 返回 bool4x3 bool4x3 result of the componentwise bitwise exclusive or. operator ^(bool4x3, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool4x3 matrix and a bool value. public static bool4x3 operator ^(bool4x3 lhs, bool rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool4x3 bool4x3 result of the componentwise bitwise exclusive or. operator ^(bool4x3, bool4x3) Returns the result of a componentwise bitwise exclusive or operation on two bool4x3 matrices. public static bool4x3 operator ^(bool4x3 lhs, bool4x3 rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise bitwise exclusive or. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise bitwise exclusive or. 返回 bool4x3 bool4x3 result of the componentwise bitwise exclusive or. implicit operator bool4x3(bool) Implicitly converts a single bool value to a bool4x3 matrix by assigning it to every component. public static implicit operator bool4x3(bool v) 参数 v bool bool to convert to bool4x3 返回 bool4x3 Converted value. operator !=(bool, bool4x3) Returns the result of a componentwise not equal operation on a bool value and a bool4x3 matrix. public static bool4x3 operator !=(bool lhs, bool4x3 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(bool4x3, bool) Returns the result of a componentwise not equal operation on a bool4x3 matrix and a bool value. public static bool4x3 operator !=(bool4x3 lhs, bool rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(bool4x3, bool4x3) Returns the result of a componentwise not equal operation on two bool4x3 matrices. public static bool4x3 operator !=(bool4x3 lhs, bool4x3 rhs) 参数 lhs bool4x3 Left hand side bool4x3 to use to compute componentwise not equal. rhs bool4x3 Right hand side bool4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !(bool4x3) Returns the result of a componentwise not operation on a bool4x3 matrix. public static bool4x3 operator !(bool4x3 val) 参数 val bool4x3 Value to use when computing the componentwise not. 返回 bool4x3 bool4x3 result of the componentwise not."
  },
  "reference/Unity.Mathematics.bool4x4.html": {
    "href": "reference/Unity.Mathematics.bool4x4.html",
    "title": "bool4x4 结构 | Fantasy.Net API Reference",
    "keywords": "bool4x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x4 matrix of bools. public struct bool4x4 : IEquatable<bool4x4> 实现 IEquatable<bool4x4> 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 bool4x4(bool) Constructs a bool4x4 matrix from a single bool value by assigning it to every component. public bool4x4(bool v) 参数 v bool bool to convert to bool4x4 bool4x4(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Constructs a bool4x4 matrix from 16 bool values given in row-major order. public bool4x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13, bool m20, bool m21, bool m22, bool m23, bool m30, bool m31, bool m32, bool m33) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m03 bool The matrix at row 0, column 3 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m13 bool The matrix at row 1, column 3 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. m23 bool The matrix at row 2, column 3 will be set to this value. m30 bool The matrix at row 3, column 0 will be set to this value. m31 bool The matrix at row 3, column 1 will be set to this value. m32 bool The matrix at row 3, column 2 will be set to this value. m33 bool The matrix at row 3, column 3 will be set to this value. bool4x4(bool4, bool4, bool4, bool4) Constructs a bool4x4 matrix from four bool4 vectors. public bool4x4(bool4 c0, bool4 c1, bool4 c2, bool4 c3) 参数 c0 bool4 The matrix column c0 will be set to this value. c1 bool4 The matrix column c1 will be set to this value. c2 bool4 The matrix column c2 will be set to this value. c3 bool4 The matrix column c3 will be set to this value. 字段 c0 Column 0 of the matrix. public bool4 c0 字段值 bool4 c1 Column 1 of the matrix. public bool4 c1 字段值 bool4 c2 Column 2 of the matrix. public bool4 c2 字段值 bool4 c3 Column 3 of the matrix. public bool4 c3 字段值 bool4 属性 this[int] Returns the bool4 element at a specified index. public ref bool4 this[int index] { get; } 参数 index int 属性值 bool4 方法 Equals(object) Returns true if the bool4x4 is equal to a given bool4x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(bool4x4) Returns true if the bool4x4 is equal to a given bool4x4, false otherwise. public bool Equals(bool4x4 rhs) 参数 rhs bool4x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the bool4x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the bool4x4. public override string ToString() 返回 string String representation of the value. 运算符 operator &(bool, bool4x4) Returns the result of a componentwise bitwise and operation on a bool value and a bool4x4 matrix. public static bool4x4 operator &(bool lhs, bool4x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise and. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise bitwise and. 返回 bool4x4 bool4x4 result of the componentwise bitwise and. operator &(bool4x4, bool) Returns the result of a componentwise bitwise and operation on a bool4x4 matrix and a bool value. public static bool4x4 operator &(bool4x4 lhs, bool rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise bitwise and. rhs bool Right hand side bool to use to compute componentwise bitwise and. 返回 bool4x4 bool4x4 result of the componentwise bitwise and. operator &(bool4x4, bool4x4) Returns the result of a componentwise bitwise and operation on two bool4x4 matrices. public static bool4x4 operator &(bool4x4 lhs, bool4x4 rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise bitwise and. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise bitwise and. 返回 bool4x4 bool4x4 result of the componentwise bitwise and. operator |(bool, bool4x4) Returns the result of a componentwise bitwise or operation on a bool value and a bool4x4 matrix. public static bool4x4 operator |(bool lhs, bool4x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise or. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise bitwise or. 返回 bool4x4 bool4x4 result of the componentwise bitwise or. operator |(bool4x4, bool) Returns the result of a componentwise bitwise or operation on a bool4x4 matrix and a bool value. public static bool4x4 operator |(bool4x4 lhs, bool rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise bitwise or. rhs bool Right hand side bool to use to compute componentwise bitwise or. 返回 bool4x4 bool4x4 result of the componentwise bitwise or. operator |(bool4x4, bool4x4) Returns the result of a componentwise bitwise or operation on two bool4x4 matrices. public static bool4x4 operator |(bool4x4 lhs, bool4x4 rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise bitwise or. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise bitwise or. 返回 bool4x4 bool4x4 result of the componentwise bitwise or. operator ==(bool, bool4x4) Returns the result of a componentwise equality operation on a bool value and a bool4x4 matrix. public static bool4x4 operator ==(bool lhs, bool4x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise equality. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(bool4x4, bool) Returns the result of a componentwise equality operation on a bool4x4 matrix and a bool value. public static bool4x4 operator ==(bool4x4 lhs, bool rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise equality. rhs bool Right hand side bool to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(bool4x4, bool4x4) Returns the result of a componentwise equality operation on two bool4x4 matrices. public static bool4x4 operator ==(bool4x4 lhs, bool4x4 rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise equality. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ^(bool, bool4x4) Returns the result of a componentwise bitwise exclusive or operation on a bool value and a bool4x4 matrix. public static bool4x4 operator ^(bool lhs, bool4x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise bitwise exclusive or. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise bitwise exclusive or. 返回 bool4x4 bool4x4 result of the componentwise bitwise exclusive or. operator ^(bool4x4, bool) Returns the result of a componentwise bitwise exclusive or operation on a bool4x4 matrix and a bool value. public static bool4x4 operator ^(bool4x4 lhs, bool rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise bitwise exclusive or. rhs bool Right hand side bool to use to compute componentwise bitwise exclusive or. 返回 bool4x4 bool4x4 result of the componentwise bitwise exclusive or. operator ^(bool4x4, bool4x4) Returns the result of a componentwise bitwise exclusive or operation on two bool4x4 matrices. public static bool4x4 operator ^(bool4x4 lhs, bool4x4 rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise bitwise exclusive or. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise bitwise exclusive or. 返回 bool4x4 bool4x4 result of the componentwise bitwise exclusive or. implicit operator bool4x4(bool) Implicitly converts a single bool value to a bool4x4 matrix by assigning it to every component. public static implicit operator bool4x4(bool v) 参数 v bool bool to convert to bool4x4 返回 bool4x4 Converted value. operator !=(bool, bool4x4) Returns the result of a componentwise not equal operation on a bool value and a bool4x4 matrix. public static bool4x4 operator !=(bool lhs, bool4x4 rhs) 参数 lhs bool Left hand side bool to use to compute componentwise not equal. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(bool4x4, bool) Returns the result of a componentwise not equal operation on a bool4x4 matrix and a bool value. public static bool4x4 operator !=(bool4x4 lhs, bool rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise not equal. rhs bool Right hand side bool to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(bool4x4, bool4x4) Returns the result of a componentwise not equal operation on two bool4x4 matrices. public static bool4x4 operator !=(bool4x4 lhs, bool4x4 rhs) 参数 lhs bool4x4 Left hand side bool4x4 to use to compute componentwise not equal. rhs bool4x4 Right hand side bool4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !(bool4x4) Returns the result of a componentwise not operation on a bool4x4 matrix. public static bool4x4 operator !(bool4x4 val) 参数 val bool4x4 Value to use when computing the componentwise not. 返回 bool4x4 bool4x4 result of the componentwise not."
  },
  "reference/Unity.Mathematics.double2.html": {
    "href": "reference/Unity.Mathematics.double2.html",
    "title": "double2 结构 | Fantasy.Net API Reference",
    "keywords": "double2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2 component vector of doubles. public struct double2 : IEquatable<double2>, IFormattable 实现 IEquatable<double2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double2(bool) Constructs a double2 vector from a single bool value by converting it to double and assigning it to every component. public double2(bool v) 参数 v bool bool to convert to double2 double2(double) Constructs a double2 vector from a single double value by assigning it to every component. public double2(double v) 参数 v double double to convert to double2 double2(double, double) Constructs a double2 vector from two double values. public double2(double x, double y) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. double2(int) Constructs a double2 vector from a single int value by converting it to double and assigning it to every component. public double2(int v) 参数 v int int to convert to double2 double2(float) Constructs a double2 vector from a single float value by converting it to double and assigning it to every component. public double2(float v) 参数 v float float to convert to double2 double2(uint) Constructs a double2 vector from a single uint value by converting it to double and assigning it to every component. public double2(uint v) 参数 v uint uint to convert to double2 double2(bool2) Constructs a double2 vector from a bool2 vector by componentwise conversion. public double2(bool2 v) 参数 v bool2 bool2 to convert to double2 double2(double2) Constructs a double2 vector from a double2 vector. public double2(double2 xy) 参数 xy double2 The constructed vector's xy components will be set to this value. double2(float2) Constructs a double2 vector from a float2 vector by componentwise conversion. public double2(float2 v) 参数 v float2 float2 to convert to double2 double2(half) Constructs a double2 vector from a single half value by converting it to double and assigning it to every component. public double2(half v) 参数 v half half to convert to double2 double2(half2) Constructs a double2 vector from a half2 vector by componentwise conversion. public double2(half2 v) 参数 v half2 half2 to convert to double2 double2(int2) Constructs a double2 vector from a int2 vector by componentwise conversion. public double2(int2 v) 参数 v int2 int2 to convert to double2 double2(uint2) Constructs a double2 vector from a uint2 vector by componentwise conversion. public double2(uint2 v) 参数 v uint2 uint2 to convert to double2 字段 x x component of the vector. public double x 字段值 double y y component of the vector. public double y 字段值 double zero double2 zero value. public static readonly double2 zero 字段值 double2 属性 this[int] Returns the double element at a specified index. public double this[int index] { get; set; } 参数 index int 属性值 double 方法 Equals(object) Returns true if the double2 is equal to a given double2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double2) Returns true if the double2 is equal to a given double2, false otherwise. public bool Equals(double2 rhs) 参数 rhs double2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double2) Returns the result of a componentwise addition operation on a double value and a double2 vector. public static double2 operator +(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double2 Right hand side double2 to use to compute componentwise addition. 返回 double2 double2 result of the componentwise addition. operator +(double2, double) Returns the result of a componentwise addition operation on a double2 vector and a double value. public static double2 operator +(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double2 double2 result of the componentwise addition. operator +(double2, double2) Returns the result of a componentwise addition operation on two double2 vectors. public static double2 operator +(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise addition. rhs double2 Right hand side double2 to use to compute componentwise addition. 返回 double2 double2 result of the componentwise addition. operator --(double2) Returns the result of a componentwise decrement operation on a double2 vector. public static double2 operator --(double2 val) 参数 val double2 Value to use when computing the componentwise decrement. 返回 double2 double2 result of the componentwise decrement. operator /(double, double2) Returns the result of a componentwise division operation on a double value and a double2 vector. public static double2 operator /(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double2 Right hand side double2 to use to compute componentwise division. 返回 double2 double2 result of the componentwise division. operator /(double2, double) Returns the result of a componentwise division operation on a double2 vector and a double value. public static double2 operator /(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double2 double2 result of the componentwise division. operator /(double2, double2) Returns the result of a componentwise division operation on two double2 vectors. public static double2 operator /(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise division. rhs double2 Right hand side double2 to use to compute componentwise division. 返回 double2 double2 result of the componentwise division. operator ==(double, double2) Returns the result of a componentwise equality operation on a double value and a double2 vector. public static bool2 operator ==(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double2 Right hand side double2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(double2, double) Returns the result of a componentwise equality operation on a double2 vector and a double value. public static bool2 operator ==(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(double2, double2) Returns the result of a componentwise equality operation on two double2 vectors. public static bool2 operator ==(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise equality. rhs double2 Right hand side double2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. explicit operator double2(bool) Explicitly converts a single bool value to a double2 vector by converting it to double and assigning it to every component. public static explicit operator double2(bool v) 参数 v bool bool to convert to double2 返回 double2 Converted value. explicit operator double2(bool2) Explicitly converts a bool2 vector to a double2 vector by componentwise conversion. public static explicit operator double2(bool2 v) 参数 v bool2 bool2 to convert to double2 返回 double2 Converted value. operator >(double, double2) Returns the result of a componentwise greater than operation on a double value and a double2 vector. public static bool2 operator >(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double2 Right hand side double2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(double2, double) Returns the result of a componentwise greater than operation on a double2 vector and a double value. public static bool2 operator >(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(double2, double2) Returns the result of a componentwise greater than operation on two double2 vectors. public static bool2 operator >(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise greater than. rhs double2 Right hand side double2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >=(double, double2) Returns the result of a componentwise greater or equal operation on a double value and a double2 vector. public static bool2 operator >=(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double2 Right hand side double2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(double2, double) Returns the result of a componentwise greater or equal operation on a double2 vector and a double value. public static bool2 operator >=(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(double2, double2) Returns the result of a componentwise greater or equal operation on two double2 vectors. public static bool2 operator >=(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise greater or equal. rhs double2 Right hand side double2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. implicit operator double2(double) Implicitly converts a single double value to a double2 vector by assigning it to every component. public static implicit operator double2(double v) 参数 v double double to convert to double2 返回 double2 Converted value. implicit operator double2(int) Implicitly converts a single int value to a double2 vector by converting it to double and assigning it to every component. public static implicit operator double2(int v) 参数 v int int to convert to double2 返回 double2 Converted value. implicit operator double2(float) Implicitly converts a single float value to a double2 vector by converting it to double and assigning it to every component. public static implicit operator double2(float v) 参数 v float float to convert to double2 返回 double2 Converted value. implicit operator double2(uint) Implicitly converts a single uint value to a double2 vector by converting it to double and assigning it to every component. public static implicit operator double2(uint v) 参数 v uint uint to convert to double2 返回 double2 Converted value. implicit operator double2(float2) Implicitly converts a float2 vector to a double2 vector by componentwise conversion. public static implicit operator double2(float2 v) 参数 v float2 float2 to convert to double2 返回 double2 Converted value. implicit operator double2(half) Implicitly converts a single half value to a double2 vector by converting it to double and assigning it to every component. public static implicit operator double2(half v) 参数 v half half to convert to double2 返回 double2 Converted value. implicit operator double2(half2) Implicitly converts a half2 vector to a double2 vector by componentwise conversion. public static implicit operator double2(half2 v) 参数 v half2 half2 to convert to double2 返回 double2 Converted value. implicit operator double2(int2) Implicitly converts a int2 vector to a double2 vector by componentwise conversion. public static implicit operator double2(int2 v) 参数 v int2 int2 to convert to double2 返回 double2 Converted value. implicit operator double2(uint2) Implicitly converts a uint2 vector to a double2 vector by componentwise conversion. public static implicit operator double2(uint2 v) 参数 v uint2 uint2 to convert to double2 返回 double2 Converted value. operator ++(double2) Returns the result of a componentwise increment operation on a double2 vector. public static double2 operator ++(double2 val) 参数 val double2 Value to use when computing the componentwise increment. 返回 double2 double2 result of the componentwise increment. operator !=(double, double2) Returns the result of a componentwise not equal operation on a double value and a double2 vector. public static bool2 operator !=(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double2 Right hand side double2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(double2, double) Returns the result of a componentwise not equal operation on a double2 vector and a double value. public static bool2 operator !=(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(double2, double2) Returns the result of a componentwise not equal operation on two double2 vectors. public static bool2 operator !=(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise not equal. rhs double2 Right hand side double2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator <(double, double2) Returns the result of a componentwise less than operation on a double value and a double2 vector. public static bool2 operator <(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double2 Right hand side double2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(double2, double) Returns the result of a componentwise less than operation on a double2 vector and a double value. public static bool2 operator <(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(double2, double2) Returns the result of a componentwise less than operation on two double2 vectors. public static bool2 operator <(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise less than. rhs double2 Right hand side double2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <=(double, double2) Returns the result of a componentwise less or equal operation on a double value and a double2 vector. public static bool2 operator <=(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double2 Right hand side double2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(double2, double) Returns the result of a componentwise less or equal operation on a double2 vector and a double value. public static bool2 operator <=(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(double2, double2) Returns the result of a componentwise less or equal operation on two double2 vectors. public static bool2 operator <=(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise less or equal. rhs double2 Right hand side double2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator %(double, double2) Returns the result of a componentwise modulus operation on a double value and a double2 vector. public static double2 operator %(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double2 Right hand side double2 to use to compute componentwise modulus. 返回 double2 double2 result of the componentwise modulus. operator %(double2, double) Returns the result of a componentwise modulus operation on a double2 vector and a double value. public static double2 operator %(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double2 double2 result of the componentwise modulus. operator %(double2, double2) Returns the result of a componentwise modulus operation on two double2 vectors. public static double2 operator %(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise modulus. rhs double2 Right hand side double2 to use to compute componentwise modulus. 返回 double2 double2 result of the componentwise modulus. operator *(double, double2) Returns the result of a componentwise multiplication operation on a double value and a double2 vector. public static double2 operator *(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double2 Right hand side double2 to use to compute componentwise multiplication. 返回 double2 double2 result of the componentwise multiplication. operator *(double2, double) Returns the result of a componentwise multiplication operation on a double2 vector and a double value. public static double2 operator *(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double2 double2 result of the componentwise multiplication. operator *(double2, double2) Returns the result of a componentwise multiplication operation on two double2 vectors. public static double2 operator *(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise multiplication. rhs double2 Right hand side double2 to use to compute componentwise multiplication. 返回 double2 double2 result of the componentwise multiplication. operator -(double, double2) Returns the result of a componentwise subtraction operation on a double value and a double2 vector. public static double2 operator -(double lhs, double2 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double2 Right hand side double2 to use to compute componentwise subtraction. 返回 double2 double2 result of the componentwise subtraction. operator -(double2, double) Returns the result of a componentwise subtraction operation on a double2 vector and a double value. public static double2 operator -(double2 lhs, double rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double2 double2 result of the componentwise subtraction. operator -(double2, double2) Returns the result of a componentwise subtraction operation on two double2 vectors. public static double2 operator -(double2 lhs, double2 rhs) 参数 lhs double2 Left hand side double2 to use to compute componentwise subtraction. rhs double2 Right hand side double2 to use to compute componentwise subtraction. 返回 double2 double2 result of the componentwise subtraction. operator -(double2) Returns the result of a componentwise unary minus operation on a double2 vector. public static double2 operator -(double2 val) 参数 val double2 Value to use when computing the componentwise unary minus. 返回 double2 double2 result of the componentwise unary minus. operator +(double2) Returns the result of a componentwise unary plus operation on a double2 vector. public static double2 operator +(double2 val) 参数 val double2 Value to use when computing the componentwise unary plus. 返回 double2 double2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double2x2.html": {
    "href": "reference/Unity.Mathematics.double2x2.html",
    "title": "double2x2 结构 | Fantasy.Net API Reference",
    "keywords": "double2x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x2 matrix of doubles. public struct double2x2 : IEquatable<double2x2>, IFormattable 实现 IEquatable<double2x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double2x2(bool) Constructs a double2x2 matrix from a single bool value by converting it to double and assigning it to every component. public double2x2(bool v) 参数 v bool bool to convert to double2x2 double2x2(double) Constructs a double2x2 matrix from a single double value by assigning it to every component. public double2x2(double v) 参数 v double double to convert to double2x2 double2x2(double, double, double, double) Constructs a double2x2 matrix from 4 double values given in row-major order. public double2x2(double m00, double m01, double m10, double m11) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. double2x2(int) Constructs a double2x2 matrix from a single int value by converting it to double and assigning it to every component. public double2x2(int v) 参数 v int int to convert to double2x2 double2x2(float) Constructs a double2x2 matrix from a single float value by converting it to double and assigning it to every component. public double2x2(float v) 参数 v float float to convert to double2x2 double2x2(uint) Constructs a double2x2 matrix from a single uint value by converting it to double and assigning it to every component. public double2x2(uint v) 参数 v uint uint to convert to double2x2 double2x2(bool2x2) Constructs a double2x2 matrix from a bool2x2 matrix by componentwise conversion. public double2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to double2x2 double2x2(double2, double2) Constructs a double2x2 matrix from two double2 vectors. public double2x2(double2 c0, double2 c1) 参数 c0 double2 The matrix column c0 will be set to this value. c1 double2 The matrix column c1 will be set to this value. double2x2(float2x2) Constructs a double2x2 matrix from a float2x2 matrix by componentwise conversion. public double2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to double2x2 double2x2(int2x2) Constructs a double2x2 matrix from a int2x2 matrix by componentwise conversion. public double2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to double2x2 double2x2(uint2x2) Constructs a double2x2 matrix from a uint2x2 matrix by componentwise conversion. public double2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to double2x2 字段 c0 Column 0 of the matrix. public double2 c0 字段值 double2 c1 Column 1 of the matrix. public double2 c1 字段值 double2 identity double2x2 identity transform. public static readonly double2x2 identity 字段值 double2x2 zero double2x2 zero value. public static readonly double2x2 zero 字段值 double2x2 属性 this[int] Returns the double2 element at a specified index. public ref double2 this[int index] { get; } 参数 index int 属性值 double2 方法 Equals(object) Returns true if the double2x2 is equal to a given double2x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double2x2) Returns true if the double2x2 is equal to a given double2x2, false otherwise. public bool Equals(double2x2 rhs) 参数 rhs double2x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double2x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double2x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double2x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double2x2) Returns the result of a componentwise addition operation on a double value and a double2x2 matrix. public static double2x2 operator +(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double2x2 Right hand side double2x2 to use to compute componentwise addition. 返回 double2x2 double2x2 result of the componentwise addition. operator +(double2x2, double) Returns the result of a componentwise addition operation on a double2x2 matrix and a double value. public static double2x2 operator +(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double2x2 double2x2 result of the componentwise addition. operator +(double2x2, double2x2) Returns the result of a componentwise addition operation on two double2x2 matrices. public static double2x2 operator +(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise addition. rhs double2x2 Right hand side double2x2 to use to compute componentwise addition. 返回 double2x2 double2x2 result of the componentwise addition. operator --(double2x2) Returns the result of a componentwise decrement operation on a double2x2 matrix. public static double2x2 operator --(double2x2 val) 参数 val double2x2 Value to use when computing the componentwise decrement. 返回 double2x2 double2x2 result of the componentwise decrement. operator /(double, double2x2) Returns the result of a componentwise division operation on a double value and a double2x2 matrix. public static double2x2 operator /(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double2x2 Right hand side double2x2 to use to compute componentwise division. 返回 double2x2 double2x2 result of the componentwise division. operator /(double2x2, double) Returns the result of a componentwise division operation on a double2x2 matrix and a double value. public static double2x2 operator /(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double2x2 double2x2 result of the componentwise division. operator /(double2x2, double2x2) Returns the result of a componentwise division operation on two double2x2 matrices. public static double2x2 operator /(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise division. rhs double2x2 Right hand side double2x2 to use to compute componentwise division. 返回 double2x2 double2x2 result of the componentwise division. operator ==(double, double2x2) Returns the result of a componentwise equality operation on a double value and a double2x2 matrix. public static bool2x2 operator ==(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double2x2 Right hand side double2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(double2x2, double) Returns the result of a componentwise equality operation on a double2x2 matrix and a double value. public static bool2x2 operator ==(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(double2x2, double2x2) Returns the result of a componentwise equality operation on two double2x2 matrices. public static bool2x2 operator ==(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise equality. rhs double2x2 Right hand side double2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. explicit operator double2x2(bool) Explicitly converts a single bool value to a double2x2 matrix by converting it to double and assigning it to every component. public static explicit operator double2x2(bool v) 参数 v bool bool to convert to double2x2 返回 double2x2 Converted value. explicit operator double2x2(bool2x2) Explicitly converts a bool2x2 matrix to a double2x2 matrix by componentwise conversion. public static explicit operator double2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to double2x2 返回 double2x2 Converted value. operator >(double, double2x2) Returns the result of a componentwise greater than operation on a double value and a double2x2 matrix. public static bool2x2 operator >(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double2x2 Right hand side double2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(double2x2, double) Returns the result of a componentwise greater than operation on a double2x2 matrix and a double value. public static bool2x2 operator >(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(double2x2, double2x2) Returns the result of a componentwise greater than operation on two double2x2 matrices. public static bool2x2 operator >(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise greater than. rhs double2x2 Right hand side double2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >=(double, double2x2) Returns the result of a componentwise greater or equal operation on a double value and a double2x2 matrix. public static bool2x2 operator >=(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double2x2 Right hand side double2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(double2x2, double) Returns the result of a componentwise greater or equal operation on a double2x2 matrix and a double value. public static bool2x2 operator >=(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(double2x2, double2x2) Returns the result of a componentwise greater or equal operation on two double2x2 matrices. public static bool2x2 operator >=(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise greater or equal. rhs double2x2 Right hand side double2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. implicit operator double2x2(double) Implicitly converts a single double value to a double2x2 matrix by assigning it to every component. public static implicit operator double2x2(double v) 参数 v double double to convert to double2x2 返回 double2x2 Converted value. implicit operator double2x2(int) Implicitly converts a single int value to a double2x2 matrix by converting it to double and assigning it to every component. public static implicit operator double2x2(int v) 参数 v int int to convert to double2x2 返回 double2x2 Converted value. implicit operator double2x2(float) Implicitly converts a single float value to a double2x2 matrix by converting it to double and assigning it to every component. public static implicit operator double2x2(float v) 参数 v float float to convert to double2x2 返回 double2x2 Converted value. implicit operator double2x2(uint) Implicitly converts a single uint value to a double2x2 matrix by converting it to double and assigning it to every component. public static implicit operator double2x2(uint v) 参数 v uint uint to convert to double2x2 返回 double2x2 Converted value. implicit operator double2x2(float2x2) Implicitly converts a float2x2 matrix to a double2x2 matrix by componentwise conversion. public static implicit operator double2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to double2x2 返回 double2x2 Converted value. implicit operator double2x2(int2x2) Implicitly converts a int2x2 matrix to a double2x2 matrix by componentwise conversion. public static implicit operator double2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to double2x2 返回 double2x2 Converted value. implicit operator double2x2(uint2x2) Implicitly converts a uint2x2 matrix to a double2x2 matrix by componentwise conversion. public static implicit operator double2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to double2x2 返回 double2x2 Converted value. operator ++(double2x2) Returns the result of a componentwise increment operation on a double2x2 matrix. public static double2x2 operator ++(double2x2 val) 参数 val double2x2 Value to use when computing the componentwise increment. 返回 double2x2 double2x2 result of the componentwise increment. operator !=(double, double2x2) Returns the result of a componentwise not equal operation on a double value and a double2x2 matrix. public static bool2x2 operator !=(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double2x2 Right hand side double2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(double2x2, double) Returns the result of a componentwise not equal operation on a double2x2 matrix and a double value. public static bool2x2 operator !=(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(double2x2, double2x2) Returns the result of a componentwise not equal operation on two double2x2 matrices. public static bool2x2 operator !=(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise not equal. rhs double2x2 Right hand side double2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator <(double, double2x2) Returns the result of a componentwise less than operation on a double value and a double2x2 matrix. public static bool2x2 operator <(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double2x2 Right hand side double2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(double2x2, double) Returns the result of a componentwise less than operation on a double2x2 matrix and a double value. public static bool2x2 operator <(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(double2x2, double2x2) Returns the result of a componentwise less than operation on two double2x2 matrices. public static bool2x2 operator <(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise less than. rhs double2x2 Right hand side double2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <=(double, double2x2) Returns the result of a componentwise less or equal operation on a double value and a double2x2 matrix. public static bool2x2 operator <=(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double2x2 Right hand side double2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(double2x2, double) Returns the result of a componentwise less or equal operation on a double2x2 matrix and a double value. public static bool2x2 operator <=(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(double2x2, double2x2) Returns the result of a componentwise less or equal operation on two double2x2 matrices. public static bool2x2 operator <=(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise less or equal. rhs double2x2 Right hand side double2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator %(double, double2x2) Returns the result of a componentwise modulus operation on a double value and a double2x2 matrix. public static double2x2 operator %(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double2x2 Right hand side double2x2 to use to compute componentwise modulus. 返回 double2x2 double2x2 result of the componentwise modulus. operator %(double2x2, double) Returns the result of a componentwise modulus operation on a double2x2 matrix and a double value. public static double2x2 operator %(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double2x2 double2x2 result of the componentwise modulus. operator %(double2x2, double2x2) Returns the result of a componentwise modulus operation on two double2x2 matrices. public static double2x2 operator %(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise modulus. rhs double2x2 Right hand side double2x2 to use to compute componentwise modulus. 返回 double2x2 double2x2 result of the componentwise modulus. operator *(double, double2x2) Returns the result of a componentwise multiplication operation on a double value and a double2x2 matrix. public static double2x2 operator *(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double2x2 Right hand side double2x2 to use to compute componentwise multiplication. 返回 double2x2 double2x2 result of the componentwise multiplication. operator *(double2x2, double) Returns the result of a componentwise multiplication operation on a double2x2 matrix and a double value. public static double2x2 operator *(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double2x2 double2x2 result of the componentwise multiplication. operator *(double2x2, double2x2) Returns the result of a componentwise multiplication operation on two double2x2 matrices. public static double2x2 operator *(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise multiplication. rhs double2x2 Right hand side double2x2 to use to compute componentwise multiplication. 返回 double2x2 double2x2 result of the componentwise multiplication. operator -(double, double2x2) Returns the result of a componentwise subtraction operation on a double value and a double2x2 matrix. public static double2x2 operator -(double lhs, double2x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double2x2 Right hand side double2x2 to use to compute componentwise subtraction. 返回 double2x2 double2x2 result of the componentwise subtraction. operator -(double2x2, double) Returns the result of a componentwise subtraction operation on a double2x2 matrix and a double value. public static double2x2 operator -(double2x2 lhs, double rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double2x2 double2x2 result of the componentwise subtraction. operator -(double2x2, double2x2) Returns the result of a componentwise subtraction operation on two double2x2 matrices. public static double2x2 operator -(double2x2 lhs, double2x2 rhs) 参数 lhs double2x2 Left hand side double2x2 to use to compute componentwise subtraction. rhs double2x2 Right hand side double2x2 to use to compute componentwise subtraction. 返回 double2x2 double2x2 result of the componentwise subtraction. operator -(double2x2) Returns the result of a componentwise unary minus operation on a double2x2 matrix. public static double2x2 operator -(double2x2 val) 参数 val double2x2 Value to use when computing the componentwise unary minus. 返回 double2x2 double2x2 result of the componentwise unary minus. operator +(double2x2) Returns the result of a componentwise unary plus operation on a double2x2 matrix. public static double2x2 operator +(double2x2 val) 参数 val double2x2 Value to use when computing the componentwise unary plus. 返回 double2x2 double2x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double2x3.html": {
    "href": "reference/Unity.Mathematics.double2x3.html",
    "title": "double2x3 结构 | Fantasy.Net API Reference",
    "keywords": "double2x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x3 matrix of doubles. public struct double2x3 : IEquatable<double2x3>, IFormattable 实现 IEquatable<double2x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double2x3(bool) Constructs a double2x3 matrix from a single bool value by converting it to double and assigning it to every component. public double2x3(bool v) 参数 v bool bool to convert to double2x3 double2x3(double) Constructs a double2x3 matrix from a single double value by assigning it to every component. public double2x3(double v) 参数 v double double to convert to double2x3 double2x3(double, double, double, double, double, double) Constructs a double2x3 matrix from 6 double values given in row-major order. public double2x3(double m00, double m01, double m02, double m10, double m11, double m12) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. double2x3(int) Constructs a double2x3 matrix from a single int value by converting it to double and assigning it to every component. public double2x3(int v) 参数 v int int to convert to double2x3 double2x3(float) Constructs a double2x3 matrix from a single float value by converting it to double and assigning it to every component. public double2x3(float v) 参数 v float float to convert to double2x3 double2x3(uint) Constructs a double2x3 matrix from a single uint value by converting it to double and assigning it to every component. public double2x3(uint v) 参数 v uint uint to convert to double2x3 double2x3(bool2x3) Constructs a double2x3 matrix from a bool2x3 matrix by componentwise conversion. public double2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to double2x3 double2x3(double2, double2, double2) Constructs a double2x3 matrix from three double2 vectors. public double2x3(double2 c0, double2 c1, double2 c2) 参数 c0 double2 The matrix column c0 will be set to this value. c1 double2 The matrix column c1 will be set to this value. c2 double2 The matrix column c2 will be set to this value. double2x3(float2x3) Constructs a double2x3 matrix from a float2x3 matrix by componentwise conversion. public double2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to double2x3 double2x3(int2x3) Constructs a double2x3 matrix from a int2x3 matrix by componentwise conversion. public double2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to double2x3 double2x3(uint2x3) Constructs a double2x3 matrix from a uint2x3 matrix by componentwise conversion. public double2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to double2x3 字段 c0 Column 0 of the matrix. public double2 c0 字段值 double2 c1 Column 1 of the matrix. public double2 c1 字段值 double2 c2 Column 2 of the matrix. public double2 c2 字段值 double2 zero double2x3 zero value. public static readonly double2x3 zero 字段值 double2x3 属性 this[int] Returns the double2 element at a specified index. public ref double2 this[int index] { get; } 参数 index int 属性值 double2 方法 Equals(object) Returns true if the double2x3 is equal to a given double2x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double2x3) Returns true if the double2x3 is equal to a given double2x3, false otherwise. public bool Equals(double2x3 rhs) 参数 rhs double2x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double2x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double2x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double2x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double2x3) Returns the result of a componentwise addition operation on a double value and a double2x3 matrix. public static double2x3 operator +(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double2x3 Right hand side double2x3 to use to compute componentwise addition. 返回 double2x3 double2x3 result of the componentwise addition. operator +(double2x3, double) Returns the result of a componentwise addition operation on a double2x3 matrix and a double value. public static double2x3 operator +(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double2x3 double2x3 result of the componentwise addition. operator +(double2x3, double2x3) Returns the result of a componentwise addition operation on two double2x3 matrices. public static double2x3 operator +(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise addition. rhs double2x3 Right hand side double2x3 to use to compute componentwise addition. 返回 double2x3 double2x3 result of the componentwise addition. operator --(double2x3) Returns the result of a componentwise decrement operation on a double2x3 matrix. public static double2x3 operator --(double2x3 val) 参数 val double2x3 Value to use when computing the componentwise decrement. 返回 double2x3 double2x3 result of the componentwise decrement. operator /(double, double2x3) Returns the result of a componentwise division operation on a double value and a double2x3 matrix. public static double2x3 operator /(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double2x3 Right hand side double2x3 to use to compute componentwise division. 返回 double2x3 double2x3 result of the componentwise division. operator /(double2x3, double) Returns the result of a componentwise division operation on a double2x3 matrix and a double value. public static double2x3 operator /(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double2x3 double2x3 result of the componentwise division. operator /(double2x3, double2x3) Returns the result of a componentwise division operation on two double2x3 matrices. public static double2x3 operator /(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise division. rhs double2x3 Right hand side double2x3 to use to compute componentwise division. 返回 double2x3 double2x3 result of the componentwise division. operator ==(double, double2x3) Returns the result of a componentwise equality operation on a double value and a double2x3 matrix. public static bool2x3 operator ==(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double2x3 Right hand side double2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(double2x3, double) Returns the result of a componentwise equality operation on a double2x3 matrix and a double value. public static bool2x3 operator ==(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(double2x3, double2x3) Returns the result of a componentwise equality operation on two double2x3 matrices. public static bool2x3 operator ==(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise equality. rhs double2x3 Right hand side double2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. explicit operator double2x3(bool) Explicitly converts a single bool value to a double2x3 matrix by converting it to double and assigning it to every component. public static explicit operator double2x3(bool v) 参数 v bool bool to convert to double2x3 返回 double2x3 Converted value. explicit operator double2x3(bool2x3) Explicitly converts a bool2x3 matrix to a double2x3 matrix by componentwise conversion. public static explicit operator double2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to double2x3 返回 double2x3 Converted value. operator >(double, double2x3) Returns the result of a componentwise greater than operation on a double value and a double2x3 matrix. public static bool2x3 operator >(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double2x3 Right hand side double2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(double2x3, double) Returns the result of a componentwise greater than operation on a double2x3 matrix and a double value. public static bool2x3 operator >(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(double2x3, double2x3) Returns the result of a componentwise greater than operation on two double2x3 matrices. public static bool2x3 operator >(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise greater than. rhs double2x3 Right hand side double2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >=(double, double2x3) Returns the result of a componentwise greater or equal operation on a double value and a double2x3 matrix. public static bool2x3 operator >=(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double2x3 Right hand side double2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(double2x3, double) Returns the result of a componentwise greater or equal operation on a double2x3 matrix and a double value. public static bool2x3 operator >=(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(double2x3, double2x3) Returns the result of a componentwise greater or equal operation on two double2x3 matrices. public static bool2x3 operator >=(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise greater or equal. rhs double2x3 Right hand side double2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. implicit operator double2x3(double) Implicitly converts a single double value to a double2x3 matrix by assigning it to every component. public static implicit operator double2x3(double v) 参数 v double double to convert to double2x3 返回 double2x3 Converted value. implicit operator double2x3(int) Implicitly converts a single int value to a double2x3 matrix by converting it to double and assigning it to every component. public static implicit operator double2x3(int v) 参数 v int int to convert to double2x3 返回 double2x3 Converted value. implicit operator double2x3(float) Implicitly converts a single float value to a double2x3 matrix by converting it to double and assigning it to every component. public static implicit operator double2x3(float v) 参数 v float float to convert to double2x3 返回 double2x3 Converted value. implicit operator double2x3(uint) Implicitly converts a single uint value to a double2x3 matrix by converting it to double and assigning it to every component. public static implicit operator double2x3(uint v) 参数 v uint uint to convert to double2x3 返回 double2x3 Converted value. implicit operator double2x3(float2x3) Implicitly converts a float2x3 matrix to a double2x3 matrix by componentwise conversion. public static implicit operator double2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to double2x3 返回 double2x3 Converted value. implicit operator double2x3(int2x3) Implicitly converts a int2x3 matrix to a double2x3 matrix by componentwise conversion. public static implicit operator double2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to double2x3 返回 double2x3 Converted value. implicit operator double2x3(uint2x3) Implicitly converts a uint2x3 matrix to a double2x3 matrix by componentwise conversion. public static implicit operator double2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to double2x3 返回 double2x3 Converted value. operator ++(double2x3) Returns the result of a componentwise increment operation on a double2x3 matrix. public static double2x3 operator ++(double2x3 val) 参数 val double2x3 Value to use when computing the componentwise increment. 返回 double2x3 double2x3 result of the componentwise increment. operator !=(double, double2x3) Returns the result of a componentwise not equal operation on a double value and a double2x3 matrix. public static bool2x3 operator !=(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double2x3 Right hand side double2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(double2x3, double) Returns the result of a componentwise not equal operation on a double2x3 matrix and a double value. public static bool2x3 operator !=(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(double2x3, double2x3) Returns the result of a componentwise not equal operation on two double2x3 matrices. public static bool2x3 operator !=(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise not equal. rhs double2x3 Right hand side double2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator <(double, double2x3) Returns the result of a componentwise less than operation on a double value and a double2x3 matrix. public static bool2x3 operator <(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double2x3 Right hand side double2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(double2x3, double) Returns the result of a componentwise less than operation on a double2x3 matrix and a double value. public static bool2x3 operator <(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(double2x3, double2x3) Returns the result of a componentwise less than operation on two double2x3 matrices. public static bool2x3 operator <(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise less than. rhs double2x3 Right hand side double2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <=(double, double2x3) Returns the result of a componentwise less or equal operation on a double value and a double2x3 matrix. public static bool2x3 operator <=(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double2x3 Right hand side double2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(double2x3, double) Returns the result of a componentwise less or equal operation on a double2x3 matrix and a double value. public static bool2x3 operator <=(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(double2x3, double2x3) Returns the result of a componentwise less or equal operation on two double2x3 matrices. public static bool2x3 operator <=(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise less or equal. rhs double2x3 Right hand side double2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator %(double, double2x3) Returns the result of a componentwise modulus operation on a double value and a double2x3 matrix. public static double2x3 operator %(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double2x3 Right hand side double2x3 to use to compute componentwise modulus. 返回 double2x3 double2x3 result of the componentwise modulus. operator %(double2x3, double) Returns the result of a componentwise modulus operation on a double2x3 matrix and a double value. public static double2x3 operator %(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double2x3 double2x3 result of the componentwise modulus. operator %(double2x3, double2x3) Returns the result of a componentwise modulus operation on two double2x3 matrices. public static double2x3 operator %(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise modulus. rhs double2x3 Right hand side double2x3 to use to compute componentwise modulus. 返回 double2x3 double2x3 result of the componentwise modulus. operator *(double, double2x3) Returns the result of a componentwise multiplication operation on a double value and a double2x3 matrix. public static double2x3 operator *(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double2x3 Right hand side double2x3 to use to compute componentwise multiplication. 返回 double2x3 double2x3 result of the componentwise multiplication. operator *(double2x3, double) Returns the result of a componentwise multiplication operation on a double2x3 matrix and a double value. public static double2x3 operator *(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double2x3 double2x3 result of the componentwise multiplication. operator *(double2x3, double2x3) Returns the result of a componentwise multiplication operation on two double2x3 matrices. public static double2x3 operator *(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise multiplication. rhs double2x3 Right hand side double2x3 to use to compute componentwise multiplication. 返回 double2x3 double2x3 result of the componentwise multiplication. operator -(double, double2x3) Returns the result of a componentwise subtraction operation on a double value and a double2x3 matrix. public static double2x3 operator -(double lhs, double2x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double2x3 Right hand side double2x3 to use to compute componentwise subtraction. 返回 double2x3 double2x3 result of the componentwise subtraction. operator -(double2x3, double) Returns the result of a componentwise subtraction operation on a double2x3 matrix and a double value. public static double2x3 operator -(double2x3 lhs, double rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double2x3 double2x3 result of the componentwise subtraction. operator -(double2x3, double2x3) Returns the result of a componentwise subtraction operation on two double2x3 matrices. public static double2x3 operator -(double2x3 lhs, double2x3 rhs) 参数 lhs double2x3 Left hand side double2x3 to use to compute componentwise subtraction. rhs double2x3 Right hand side double2x3 to use to compute componentwise subtraction. 返回 double2x3 double2x3 result of the componentwise subtraction. operator -(double2x3) Returns the result of a componentwise unary minus operation on a double2x3 matrix. public static double2x3 operator -(double2x3 val) 参数 val double2x3 Value to use when computing the componentwise unary minus. 返回 double2x3 double2x3 result of the componentwise unary minus. operator +(double2x3) Returns the result of a componentwise unary plus operation on a double2x3 matrix. public static double2x3 operator +(double2x3 val) 参数 val double2x3 Value to use when computing the componentwise unary plus. 返回 double2x3 double2x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double2x4.html": {
    "href": "reference/Unity.Mathematics.double2x4.html",
    "title": "double2x4 结构 | Fantasy.Net API Reference",
    "keywords": "double2x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x4 matrix of doubles. public struct double2x4 : IEquatable<double2x4>, IFormattable 实现 IEquatable<double2x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double2x4(bool) Constructs a double2x4 matrix from a single bool value by converting it to double and assigning it to every component. public double2x4(bool v) 参数 v bool bool to convert to double2x4 double2x4(double) Constructs a double2x4 matrix from a single double value by assigning it to every component. public double2x4(double v) 参数 v double double to convert to double2x4 double2x4(double, double, double, double, double, double, double, double) Constructs a double2x4 matrix from 8 double values given in row-major order. public double2x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m03 double The matrix at row 0, column 3 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m13 double The matrix at row 1, column 3 will be set to this value. double2x4(int) Constructs a double2x4 matrix from a single int value by converting it to double and assigning it to every component. public double2x4(int v) 参数 v int int to convert to double2x4 double2x4(float) Constructs a double2x4 matrix from a single float value by converting it to double and assigning it to every component. public double2x4(float v) 参数 v float float to convert to double2x4 double2x4(uint) Constructs a double2x4 matrix from a single uint value by converting it to double and assigning it to every component. public double2x4(uint v) 参数 v uint uint to convert to double2x4 double2x4(bool2x4) Constructs a double2x4 matrix from a bool2x4 matrix by componentwise conversion. public double2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to double2x4 double2x4(double2, double2, double2, double2) Constructs a double2x4 matrix from four double2 vectors. public double2x4(double2 c0, double2 c1, double2 c2, double2 c3) 参数 c0 double2 The matrix column c0 will be set to this value. c1 double2 The matrix column c1 will be set to this value. c2 double2 The matrix column c2 will be set to this value. c3 double2 The matrix column c3 will be set to this value. double2x4(float2x4) Constructs a double2x4 matrix from a float2x4 matrix by componentwise conversion. public double2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to double2x4 double2x4(int2x4) Constructs a double2x4 matrix from a int2x4 matrix by componentwise conversion. public double2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to double2x4 double2x4(uint2x4) Constructs a double2x4 matrix from a uint2x4 matrix by componentwise conversion. public double2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to double2x4 字段 c0 Column 0 of the matrix. public double2 c0 字段值 double2 c1 Column 1 of the matrix. public double2 c1 字段值 double2 c2 Column 2 of the matrix. public double2 c2 字段值 double2 c3 Column 3 of the matrix. public double2 c3 字段值 double2 zero double2x4 zero value. public static readonly double2x4 zero 字段值 double2x4 属性 this[int] Returns the double2 element at a specified index. public ref double2 this[int index] { get; } 参数 index int 属性值 double2 方法 Equals(object) Returns true if the double2x4 is equal to a given double2x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double2x4) Returns true if the double2x4 is equal to a given double2x4, false otherwise. public bool Equals(double2x4 rhs) 参数 rhs double2x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double2x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double2x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double2x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double2x4) Returns the result of a componentwise addition operation on a double value and a double2x4 matrix. public static double2x4 operator +(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double2x4 Right hand side double2x4 to use to compute componentwise addition. 返回 double2x4 double2x4 result of the componentwise addition. operator +(double2x4, double) Returns the result of a componentwise addition operation on a double2x4 matrix and a double value. public static double2x4 operator +(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double2x4 double2x4 result of the componentwise addition. operator +(double2x4, double2x4) Returns the result of a componentwise addition operation on two double2x4 matrices. public static double2x4 operator +(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise addition. rhs double2x4 Right hand side double2x4 to use to compute componentwise addition. 返回 double2x4 double2x4 result of the componentwise addition. operator --(double2x4) Returns the result of a componentwise decrement operation on a double2x4 matrix. public static double2x4 operator --(double2x4 val) 参数 val double2x4 Value to use when computing the componentwise decrement. 返回 double2x4 double2x4 result of the componentwise decrement. operator /(double, double2x4) Returns the result of a componentwise division operation on a double value and a double2x4 matrix. public static double2x4 operator /(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double2x4 Right hand side double2x4 to use to compute componentwise division. 返回 double2x4 double2x4 result of the componentwise division. operator /(double2x4, double) Returns the result of a componentwise division operation on a double2x4 matrix and a double value. public static double2x4 operator /(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double2x4 double2x4 result of the componentwise division. operator /(double2x4, double2x4) Returns the result of a componentwise division operation on two double2x4 matrices. public static double2x4 operator /(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise division. rhs double2x4 Right hand side double2x4 to use to compute componentwise division. 返回 double2x4 double2x4 result of the componentwise division. operator ==(double, double2x4) Returns the result of a componentwise equality operation on a double value and a double2x4 matrix. public static bool2x4 operator ==(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double2x4 Right hand side double2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(double2x4, double) Returns the result of a componentwise equality operation on a double2x4 matrix and a double value. public static bool2x4 operator ==(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(double2x4, double2x4) Returns the result of a componentwise equality operation on two double2x4 matrices. public static bool2x4 operator ==(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise equality. rhs double2x4 Right hand side double2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. explicit operator double2x4(bool) Explicitly converts a single bool value to a double2x4 matrix by converting it to double and assigning it to every component. public static explicit operator double2x4(bool v) 参数 v bool bool to convert to double2x4 返回 double2x4 Converted value. explicit operator double2x4(bool2x4) Explicitly converts a bool2x4 matrix to a double2x4 matrix by componentwise conversion. public static explicit operator double2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to double2x4 返回 double2x4 Converted value. operator >(double, double2x4) Returns the result of a componentwise greater than operation on a double value and a double2x4 matrix. public static bool2x4 operator >(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double2x4 Right hand side double2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(double2x4, double) Returns the result of a componentwise greater than operation on a double2x4 matrix and a double value. public static bool2x4 operator >(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(double2x4, double2x4) Returns the result of a componentwise greater than operation on two double2x4 matrices. public static bool2x4 operator >(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise greater than. rhs double2x4 Right hand side double2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >=(double, double2x4) Returns the result of a componentwise greater or equal operation on a double value and a double2x4 matrix. public static bool2x4 operator >=(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double2x4 Right hand side double2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(double2x4, double) Returns the result of a componentwise greater or equal operation on a double2x4 matrix and a double value. public static bool2x4 operator >=(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(double2x4, double2x4) Returns the result of a componentwise greater or equal operation on two double2x4 matrices. public static bool2x4 operator >=(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise greater or equal. rhs double2x4 Right hand side double2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. implicit operator double2x4(double) Implicitly converts a single double value to a double2x4 matrix by assigning it to every component. public static implicit operator double2x4(double v) 参数 v double double to convert to double2x4 返回 double2x4 Converted value. implicit operator double2x4(int) Implicitly converts a single int value to a double2x4 matrix by converting it to double and assigning it to every component. public static implicit operator double2x4(int v) 参数 v int int to convert to double2x4 返回 double2x4 Converted value. implicit operator double2x4(float) Implicitly converts a single float value to a double2x4 matrix by converting it to double and assigning it to every component. public static implicit operator double2x4(float v) 参数 v float float to convert to double2x4 返回 double2x4 Converted value. implicit operator double2x4(uint) Implicitly converts a single uint value to a double2x4 matrix by converting it to double and assigning it to every component. public static implicit operator double2x4(uint v) 参数 v uint uint to convert to double2x4 返回 double2x4 Converted value. implicit operator double2x4(float2x4) Implicitly converts a float2x4 matrix to a double2x4 matrix by componentwise conversion. public static implicit operator double2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to double2x4 返回 double2x4 Converted value. implicit operator double2x4(int2x4) Implicitly converts a int2x4 matrix to a double2x4 matrix by componentwise conversion. public static implicit operator double2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to double2x4 返回 double2x4 Converted value. implicit operator double2x4(uint2x4) Implicitly converts a uint2x4 matrix to a double2x4 matrix by componentwise conversion. public static implicit operator double2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to double2x4 返回 double2x4 Converted value. operator ++(double2x4) Returns the result of a componentwise increment operation on a double2x4 matrix. public static double2x4 operator ++(double2x4 val) 参数 val double2x4 Value to use when computing the componentwise increment. 返回 double2x4 double2x4 result of the componentwise increment. operator !=(double, double2x4) Returns the result of a componentwise not equal operation on a double value and a double2x4 matrix. public static bool2x4 operator !=(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double2x4 Right hand side double2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(double2x4, double) Returns the result of a componentwise not equal operation on a double2x4 matrix and a double value. public static bool2x4 operator !=(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(double2x4, double2x4) Returns the result of a componentwise not equal operation on two double2x4 matrices. public static bool2x4 operator !=(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise not equal. rhs double2x4 Right hand side double2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator <(double, double2x4) Returns the result of a componentwise less than operation on a double value and a double2x4 matrix. public static bool2x4 operator <(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double2x4 Right hand side double2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(double2x4, double) Returns the result of a componentwise less than operation on a double2x4 matrix and a double value. public static bool2x4 operator <(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(double2x4, double2x4) Returns the result of a componentwise less than operation on two double2x4 matrices. public static bool2x4 operator <(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise less than. rhs double2x4 Right hand side double2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <=(double, double2x4) Returns the result of a componentwise less or equal operation on a double value and a double2x4 matrix. public static bool2x4 operator <=(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double2x4 Right hand side double2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(double2x4, double) Returns the result of a componentwise less or equal operation on a double2x4 matrix and a double value. public static bool2x4 operator <=(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(double2x4, double2x4) Returns the result of a componentwise less or equal operation on two double2x4 matrices. public static bool2x4 operator <=(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise less or equal. rhs double2x4 Right hand side double2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator %(double, double2x4) Returns the result of a componentwise modulus operation on a double value and a double2x4 matrix. public static double2x4 operator %(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double2x4 Right hand side double2x4 to use to compute componentwise modulus. 返回 double2x4 double2x4 result of the componentwise modulus. operator %(double2x4, double) Returns the result of a componentwise modulus operation on a double2x4 matrix and a double value. public static double2x4 operator %(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double2x4 double2x4 result of the componentwise modulus. operator %(double2x4, double2x4) Returns the result of a componentwise modulus operation on two double2x4 matrices. public static double2x4 operator %(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise modulus. rhs double2x4 Right hand side double2x4 to use to compute componentwise modulus. 返回 double2x4 double2x4 result of the componentwise modulus. operator *(double, double2x4) Returns the result of a componentwise multiplication operation on a double value and a double2x4 matrix. public static double2x4 operator *(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double2x4 Right hand side double2x4 to use to compute componentwise multiplication. 返回 double2x4 double2x4 result of the componentwise multiplication. operator *(double2x4, double) Returns the result of a componentwise multiplication operation on a double2x4 matrix and a double value. public static double2x4 operator *(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double2x4 double2x4 result of the componentwise multiplication. operator *(double2x4, double2x4) Returns the result of a componentwise multiplication operation on two double2x4 matrices. public static double2x4 operator *(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise multiplication. rhs double2x4 Right hand side double2x4 to use to compute componentwise multiplication. 返回 double2x4 double2x4 result of the componentwise multiplication. operator -(double, double2x4) Returns the result of a componentwise subtraction operation on a double value and a double2x4 matrix. public static double2x4 operator -(double lhs, double2x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double2x4 Right hand side double2x4 to use to compute componentwise subtraction. 返回 double2x4 double2x4 result of the componentwise subtraction. operator -(double2x4, double) Returns the result of a componentwise subtraction operation on a double2x4 matrix and a double value. public static double2x4 operator -(double2x4 lhs, double rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double2x4 double2x4 result of the componentwise subtraction. operator -(double2x4, double2x4) Returns the result of a componentwise subtraction operation on two double2x4 matrices. public static double2x4 operator -(double2x4 lhs, double2x4 rhs) 参数 lhs double2x4 Left hand side double2x4 to use to compute componentwise subtraction. rhs double2x4 Right hand side double2x4 to use to compute componentwise subtraction. 返回 double2x4 double2x4 result of the componentwise subtraction. operator -(double2x4) Returns the result of a componentwise unary minus operation on a double2x4 matrix. public static double2x4 operator -(double2x4 val) 参数 val double2x4 Value to use when computing the componentwise unary minus. 返回 double2x4 double2x4 result of the componentwise unary minus. operator +(double2x4) Returns the result of a componentwise unary plus operation on a double2x4 matrix. public static double2x4 operator +(double2x4 val) 参数 val double2x4 Value to use when computing the componentwise unary plus. 返回 double2x4 double2x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double3.html": {
    "href": "reference/Unity.Mathematics.double3.html",
    "title": "double3 结构 | Fantasy.Net API Reference",
    "keywords": "double3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3 component vector of doubles. public struct double3 : IEquatable<double3>, IFormattable 实现 IEquatable<double3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double3(bool) Constructs a double3 vector from a single bool value by converting it to double and assigning it to every component. public double3(bool v) 参数 v bool bool to convert to double3 double3(double) Constructs a double3 vector from a single double value by assigning it to every component. public double3(double v) 参数 v double double to convert to double3 double3(double, double, double) Constructs a double3 vector from three double values. public double3(double x, double y, double z) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. z double The constructed vector's z component will be set to this value. double3(double, double2) Constructs a double3 vector from a double value and a double2 vector. public double3(double x, double2 yz) 参数 x double The constructed vector's x component will be set to this value. yz double2 The constructed vector's yz components will be set to this value. double3(int) Constructs a double3 vector from a single int value by converting it to double and assigning it to every component. public double3(int v) 参数 v int int to convert to double3 double3(float) Constructs a double3 vector from a single float value by converting it to double and assigning it to every component. public double3(float v) 参数 v float float to convert to double3 double3(uint) Constructs a double3 vector from a single uint value by converting it to double and assigning it to every component. public double3(uint v) 参数 v uint uint to convert to double3 double3(bool3) Constructs a double3 vector from a bool3 vector by componentwise conversion. public double3(bool3 v) 参数 v bool3 bool3 to convert to double3 double3(double2, double) Constructs a double3 vector from a double2 vector and a double value. public double3(double2 xy, double z) 参数 xy double2 The constructed vector's xy components will be set to this value. z double The constructed vector's z component will be set to this value. double3(double3) Constructs a double3 vector from a double3 vector. public double3(double3 xyz) 参数 xyz double3 The constructed vector's xyz components will be set to this value. double3(float3) Constructs a double3 vector from a float3 vector by componentwise conversion. public double3(float3 v) 参数 v float3 float3 to convert to double3 double3(half) Constructs a double3 vector from a single half value by converting it to double and assigning it to every component. public double3(half v) 参数 v half half to convert to double3 double3(half3) Constructs a double3 vector from a half3 vector by componentwise conversion. public double3(half3 v) 参数 v half3 half3 to convert to double3 double3(int3) Constructs a double3 vector from a int3 vector by componentwise conversion. public double3(int3 v) 参数 v int3 int3 to convert to double3 double3(uint3) Constructs a double3 vector from a uint3 vector by componentwise conversion. public double3(uint3 v) 参数 v uint3 uint3 to convert to double3 字段 x x component of the vector. public double x 字段值 double y y component of the vector. public double y 字段值 double z z component of the vector. public double z 字段值 double zero double3 zero value. public static readonly double3 zero 字段值 double3 属性 this[int] Returns the double element at a specified index. public double this[int index] { get; set; } 参数 index int 属性值 double 方法 Equals(object) Returns true if the double3 is equal to a given double3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double3) Returns true if the double3 is equal to a given double3, false otherwise. public bool Equals(double3 rhs) 参数 rhs double3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double3) Returns the result of a componentwise addition operation on a double value and a double3 vector. public static double3 operator +(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double3 Right hand side double3 to use to compute componentwise addition. 返回 double3 double3 result of the componentwise addition. operator +(double3, double) Returns the result of a componentwise addition operation on a double3 vector and a double value. public static double3 operator +(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double3 double3 result of the componentwise addition. operator +(double3, double3) Returns the result of a componentwise addition operation on two double3 vectors. public static double3 operator +(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise addition. rhs double3 Right hand side double3 to use to compute componentwise addition. 返回 double3 double3 result of the componentwise addition. operator --(double3) Returns the result of a componentwise decrement operation on a double3 vector. public static double3 operator --(double3 val) 参数 val double3 Value to use when computing the componentwise decrement. 返回 double3 double3 result of the componentwise decrement. operator /(double, double3) Returns the result of a componentwise division operation on a double value and a double3 vector. public static double3 operator /(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double3 Right hand side double3 to use to compute componentwise division. 返回 double3 double3 result of the componentwise division. operator /(double3, double) Returns the result of a componentwise division operation on a double3 vector and a double value. public static double3 operator /(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double3 double3 result of the componentwise division. operator /(double3, double3) Returns the result of a componentwise division operation on two double3 vectors. public static double3 operator /(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise division. rhs double3 Right hand side double3 to use to compute componentwise division. 返回 double3 double3 result of the componentwise division. operator ==(double, double3) Returns the result of a componentwise equality operation on a double value and a double3 vector. public static bool3 operator ==(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double3 Right hand side double3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(double3, double) Returns the result of a componentwise equality operation on a double3 vector and a double value. public static bool3 operator ==(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(double3, double3) Returns the result of a componentwise equality operation on two double3 vectors. public static bool3 operator ==(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise equality. rhs double3 Right hand side double3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. explicit operator double3(bool) Explicitly converts a single bool value to a double3 vector by converting it to double and assigning it to every component. public static explicit operator double3(bool v) 参数 v bool bool to convert to double3 返回 double3 Converted value. explicit operator double3(bool3) Explicitly converts a bool3 vector to a double3 vector by componentwise conversion. public static explicit operator double3(bool3 v) 参数 v bool3 bool3 to convert to double3 返回 double3 Converted value. operator >(double, double3) Returns the result of a componentwise greater than operation on a double value and a double3 vector. public static bool3 operator >(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double3 Right hand side double3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(double3, double) Returns the result of a componentwise greater than operation on a double3 vector and a double value. public static bool3 operator >(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(double3, double3) Returns the result of a componentwise greater than operation on two double3 vectors. public static bool3 operator >(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise greater than. rhs double3 Right hand side double3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >=(double, double3) Returns the result of a componentwise greater or equal operation on a double value and a double3 vector. public static bool3 operator >=(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double3 Right hand side double3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(double3, double) Returns the result of a componentwise greater or equal operation on a double3 vector and a double value. public static bool3 operator >=(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(double3, double3) Returns the result of a componentwise greater or equal operation on two double3 vectors. public static bool3 operator >=(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise greater or equal. rhs double3 Right hand side double3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. implicit operator double3(double) Implicitly converts a single double value to a double3 vector by assigning it to every component. public static implicit operator double3(double v) 参数 v double double to convert to double3 返回 double3 Converted value. implicit operator double3(int) Implicitly converts a single int value to a double3 vector by converting it to double and assigning it to every component. public static implicit operator double3(int v) 参数 v int int to convert to double3 返回 double3 Converted value. implicit operator double3(float) Implicitly converts a single float value to a double3 vector by converting it to double and assigning it to every component. public static implicit operator double3(float v) 参数 v float float to convert to double3 返回 double3 Converted value. implicit operator double3(uint) Implicitly converts a single uint value to a double3 vector by converting it to double and assigning it to every component. public static implicit operator double3(uint v) 参数 v uint uint to convert to double3 返回 double3 Converted value. implicit operator double3(float3) Implicitly converts a float3 vector to a double3 vector by componentwise conversion. public static implicit operator double3(float3 v) 参数 v float3 float3 to convert to double3 返回 double3 Converted value. implicit operator double3(half) Implicitly converts a single half value to a double3 vector by converting it to double and assigning it to every component. public static implicit operator double3(half v) 参数 v half half to convert to double3 返回 double3 Converted value. implicit operator double3(half3) Implicitly converts a half3 vector to a double3 vector by componentwise conversion. public static implicit operator double3(half3 v) 参数 v half3 half3 to convert to double3 返回 double3 Converted value. implicit operator double3(int3) Implicitly converts a int3 vector to a double3 vector by componentwise conversion. public static implicit operator double3(int3 v) 参数 v int3 int3 to convert to double3 返回 double3 Converted value. implicit operator double3(uint3) Implicitly converts a uint3 vector to a double3 vector by componentwise conversion. public static implicit operator double3(uint3 v) 参数 v uint3 uint3 to convert to double3 返回 double3 Converted value. operator ++(double3) Returns the result of a componentwise increment operation on a double3 vector. public static double3 operator ++(double3 val) 参数 val double3 Value to use when computing the componentwise increment. 返回 double3 double3 result of the componentwise increment. operator !=(double, double3) Returns the result of a componentwise not equal operation on a double value and a double3 vector. public static bool3 operator !=(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double3 Right hand side double3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(double3, double) Returns the result of a componentwise not equal operation on a double3 vector and a double value. public static bool3 operator !=(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(double3, double3) Returns the result of a componentwise not equal operation on two double3 vectors. public static bool3 operator !=(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise not equal. rhs double3 Right hand side double3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator <(double, double3) Returns the result of a componentwise less than operation on a double value and a double3 vector. public static bool3 operator <(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double3 Right hand side double3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(double3, double) Returns the result of a componentwise less than operation on a double3 vector and a double value. public static bool3 operator <(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(double3, double3) Returns the result of a componentwise less than operation on two double3 vectors. public static bool3 operator <(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise less than. rhs double3 Right hand side double3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <=(double, double3) Returns the result of a componentwise less or equal operation on a double value and a double3 vector. public static bool3 operator <=(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double3 Right hand side double3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(double3, double) Returns the result of a componentwise less or equal operation on a double3 vector and a double value. public static bool3 operator <=(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(double3, double3) Returns the result of a componentwise less or equal operation on two double3 vectors. public static bool3 operator <=(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise less or equal. rhs double3 Right hand side double3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator %(double, double3) Returns the result of a componentwise modulus operation on a double value and a double3 vector. public static double3 operator %(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double3 Right hand side double3 to use to compute componentwise modulus. 返回 double3 double3 result of the componentwise modulus. operator %(double3, double) Returns the result of a componentwise modulus operation on a double3 vector and a double value. public static double3 operator %(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double3 double3 result of the componentwise modulus. operator %(double3, double3) Returns the result of a componentwise modulus operation on two double3 vectors. public static double3 operator %(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise modulus. rhs double3 Right hand side double3 to use to compute componentwise modulus. 返回 double3 double3 result of the componentwise modulus. operator *(double, double3) Returns the result of a componentwise multiplication operation on a double value and a double3 vector. public static double3 operator *(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double3 Right hand side double3 to use to compute componentwise multiplication. 返回 double3 double3 result of the componentwise multiplication. operator *(double3, double) Returns the result of a componentwise multiplication operation on a double3 vector and a double value. public static double3 operator *(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double3 double3 result of the componentwise multiplication. operator *(double3, double3) Returns the result of a componentwise multiplication operation on two double3 vectors. public static double3 operator *(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise multiplication. rhs double3 Right hand side double3 to use to compute componentwise multiplication. 返回 double3 double3 result of the componentwise multiplication. operator -(double, double3) Returns the result of a componentwise subtraction operation on a double value and a double3 vector. public static double3 operator -(double lhs, double3 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double3 Right hand side double3 to use to compute componentwise subtraction. 返回 double3 double3 result of the componentwise subtraction. operator -(double3, double) Returns the result of a componentwise subtraction operation on a double3 vector and a double value. public static double3 operator -(double3 lhs, double rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double3 double3 result of the componentwise subtraction. operator -(double3, double3) Returns the result of a componentwise subtraction operation on two double3 vectors. public static double3 operator -(double3 lhs, double3 rhs) 参数 lhs double3 Left hand side double3 to use to compute componentwise subtraction. rhs double3 Right hand side double3 to use to compute componentwise subtraction. 返回 double3 double3 result of the componentwise subtraction. operator -(double3) Returns the result of a componentwise unary minus operation on a double3 vector. public static double3 operator -(double3 val) 参数 val double3 Value to use when computing the componentwise unary minus. 返回 double3 double3 result of the componentwise unary minus. operator +(double3) Returns the result of a componentwise unary plus operation on a double3 vector. public static double3 operator +(double3 val) 参数 val double3 Value to use when computing the componentwise unary plus. 返回 double3 double3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double3x2.html": {
    "href": "reference/Unity.Mathematics.double3x2.html",
    "title": "double3x2 结构 | Fantasy.Net API Reference",
    "keywords": "double3x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x2 matrix of doubles. public struct double3x2 : IEquatable<double3x2>, IFormattable 实现 IEquatable<double3x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double3x2(bool) Constructs a double3x2 matrix from a single bool value by converting it to double and assigning it to every component. public double3x2(bool v) 参数 v bool bool to convert to double3x2 double3x2(double) Constructs a double3x2 matrix from a single double value by assigning it to every component. public double3x2(double v) 参数 v double double to convert to double3x2 double3x2(double, double, double, double, double, double) Constructs a double3x2 matrix from 6 double values given in row-major order. public double3x2(double m00, double m01, double m10, double m11, double m20, double m21) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. double3x2(int) Constructs a double3x2 matrix from a single int value by converting it to double and assigning it to every component. public double3x2(int v) 参数 v int int to convert to double3x2 double3x2(float) Constructs a double3x2 matrix from a single float value by converting it to double and assigning it to every component. public double3x2(float v) 参数 v float float to convert to double3x2 double3x2(uint) Constructs a double3x2 matrix from a single uint value by converting it to double and assigning it to every component. public double3x2(uint v) 参数 v uint uint to convert to double3x2 double3x2(bool3x2) Constructs a double3x2 matrix from a bool3x2 matrix by componentwise conversion. public double3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to double3x2 double3x2(double3, double3) Constructs a double3x2 matrix from two double3 vectors. public double3x2(double3 c0, double3 c1) 参数 c0 double3 The matrix column c0 will be set to this value. c1 double3 The matrix column c1 will be set to this value. double3x2(float3x2) Constructs a double3x2 matrix from a float3x2 matrix by componentwise conversion. public double3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to double3x2 double3x2(int3x2) Constructs a double3x2 matrix from a int3x2 matrix by componentwise conversion. public double3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to double3x2 double3x2(uint3x2) Constructs a double3x2 matrix from a uint3x2 matrix by componentwise conversion. public double3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to double3x2 字段 c0 Column 0 of the matrix. public double3 c0 字段值 double3 c1 Column 1 of the matrix. public double3 c1 字段值 double3 zero double3x2 zero value. public static readonly double3x2 zero 字段值 double3x2 属性 this[int] Returns the double3 element at a specified index. public ref double3 this[int index] { get; } 参数 index int 属性值 double3 方法 Equals(object) Returns true if the double3x2 is equal to a given double3x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double3x2) Returns true if the double3x2 is equal to a given double3x2, false otherwise. public bool Equals(double3x2 rhs) 参数 rhs double3x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double3x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double3x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double3x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double3x2) Returns the result of a componentwise addition operation on a double value and a double3x2 matrix. public static double3x2 operator +(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double3x2 Right hand side double3x2 to use to compute componentwise addition. 返回 double3x2 double3x2 result of the componentwise addition. operator +(double3x2, double) Returns the result of a componentwise addition operation on a double3x2 matrix and a double value. public static double3x2 operator +(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double3x2 double3x2 result of the componentwise addition. operator +(double3x2, double3x2) Returns the result of a componentwise addition operation on two double3x2 matrices. public static double3x2 operator +(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise addition. rhs double3x2 Right hand side double3x2 to use to compute componentwise addition. 返回 double3x2 double3x2 result of the componentwise addition. operator --(double3x2) Returns the result of a componentwise decrement operation on a double3x2 matrix. public static double3x2 operator --(double3x2 val) 参数 val double3x2 Value to use when computing the componentwise decrement. 返回 double3x2 double3x2 result of the componentwise decrement. operator /(double, double3x2) Returns the result of a componentwise division operation on a double value and a double3x2 matrix. public static double3x2 operator /(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double3x2 Right hand side double3x2 to use to compute componentwise division. 返回 double3x2 double3x2 result of the componentwise division. operator /(double3x2, double) Returns the result of a componentwise division operation on a double3x2 matrix and a double value. public static double3x2 operator /(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double3x2 double3x2 result of the componentwise division. operator /(double3x2, double3x2) Returns the result of a componentwise division operation on two double3x2 matrices. public static double3x2 operator /(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise division. rhs double3x2 Right hand side double3x2 to use to compute componentwise division. 返回 double3x2 double3x2 result of the componentwise division. operator ==(double, double3x2) Returns the result of a componentwise equality operation on a double value and a double3x2 matrix. public static bool3x2 operator ==(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double3x2 Right hand side double3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(double3x2, double) Returns the result of a componentwise equality operation on a double3x2 matrix and a double value. public static bool3x2 operator ==(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(double3x2, double3x2) Returns the result of a componentwise equality operation on two double3x2 matrices. public static bool3x2 operator ==(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise equality. rhs double3x2 Right hand side double3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. explicit operator double3x2(bool) Explicitly converts a single bool value to a double3x2 matrix by converting it to double and assigning it to every component. public static explicit operator double3x2(bool v) 参数 v bool bool to convert to double3x2 返回 double3x2 Converted value. explicit operator double3x2(bool3x2) Explicitly converts a bool3x2 matrix to a double3x2 matrix by componentwise conversion. public static explicit operator double3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to double3x2 返回 double3x2 Converted value. operator >(double, double3x2) Returns the result of a componentwise greater than operation on a double value and a double3x2 matrix. public static bool3x2 operator >(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double3x2 Right hand side double3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(double3x2, double) Returns the result of a componentwise greater than operation on a double3x2 matrix and a double value. public static bool3x2 operator >(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(double3x2, double3x2) Returns the result of a componentwise greater than operation on two double3x2 matrices. public static bool3x2 operator >(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise greater than. rhs double3x2 Right hand side double3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >=(double, double3x2) Returns the result of a componentwise greater or equal operation on a double value and a double3x2 matrix. public static bool3x2 operator >=(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double3x2 Right hand side double3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(double3x2, double) Returns the result of a componentwise greater or equal operation on a double3x2 matrix and a double value. public static bool3x2 operator >=(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(double3x2, double3x2) Returns the result of a componentwise greater or equal operation on two double3x2 matrices. public static bool3x2 operator >=(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise greater or equal. rhs double3x2 Right hand side double3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. implicit operator double3x2(double) Implicitly converts a single double value to a double3x2 matrix by assigning it to every component. public static implicit operator double3x2(double v) 参数 v double double to convert to double3x2 返回 double3x2 Converted value. implicit operator double3x2(int) Implicitly converts a single int value to a double3x2 matrix by converting it to double and assigning it to every component. public static implicit operator double3x2(int v) 参数 v int int to convert to double3x2 返回 double3x2 Converted value. implicit operator double3x2(float) Implicitly converts a single float value to a double3x2 matrix by converting it to double and assigning it to every component. public static implicit operator double3x2(float v) 参数 v float float to convert to double3x2 返回 double3x2 Converted value. implicit operator double3x2(uint) Implicitly converts a single uint value to a double3x2 matrix by converting it to double and assigning it to every component. public static implicit operator double3x2(uint v) 参数 v uint uint to convert to double3x2 返回 double3x2 Converted value. implicit operator double3x2(float3x2) Implicitly converts a float3x2 matrix to a double3x2 matrix by componentwise conversion. public static implicit operator double3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to double3x2 返回 double3x2 Converted value. implicit operator double3x2(int3x2) Implicitly converts a int3x2 matrix to a double3x2 matrix by componentwise conversion. public static implicit operator double3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to double3x2 返回 double3x2 Converted value. implicit operator double3x2(uint3x2) Implicitly converts a uint3x2 matrix to a double3x2 matrix by componentwise conversion. public static implicit operator double3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to double3x2 返回 double3x2 Converted value. operator ++(double3x2) Returns the result of a componentwise increment operation on a double3x2 matrix. public static double3x2 operator ++(double3x2 val) 参数 val double3x2 Value to use when computing the componentwise increment. 返回 double3x2 double3x2 result of the componentwise increment. operator !=(double, double3x2) Returns the result of a componentwise not equal operation on a double value and a double3x2 matrix. public static bool3x2 operator !=(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double3x2 Right hand side double3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(double3x2, double) Returns the result of a componentwise not equal operation on a double3x2 matrix and a double value. public static bool3x2 operator !=(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(double3x2, double3x2) Returns the result of a componentwise not equal operation on two double3x2 matrices. public static bool3x2 operator !=(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise not equal. rhs double3x2 Right hand side double3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator <(double, double3x2) Returns the result of a componentwise less than operation on a double value and a double3x2 matrix. public static bool3x2 operator <(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double3x2 Right hand side double3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(double3x2, double) Returns the result of a componentwise less than operation on a double3x2 matrix and a double value. public static bool3x2 operator <(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(double3x2, double3x2) Returns the result of a componentwise less than operation on two double3x2 matrices. public static bool3x2 operator <(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise less than. rhs double3x2 Right hand side double3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <=(double, double3x2) Returns the result of a componentwise less or equal operation on a double value and a double3x2 matrix. public static bool3x2 operator <=(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double3x2 Right hand side double3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(double3x2, double) Returns the result of a componentwise less or equal operation on a double3x2 matrix and a double value. public static bool3x2 operator <=(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(double3x2, double3x2) Returns the result of a componentwise less or equal operation on two double3x2 matrices. public static bool3x2 operator <=(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise less or equal. rhs double3x2 Right hand side double3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator %(double, double3x2) Returns the result of a componentwise modulus operation on a double value and a double3x2 matrix. public static double3x2 operator %(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double3x2 Right hand side double3x2 to use to compute componentwise modulus. 返回 double3x2 double3x2 result of the componentwise modulus. operator %(double3x2, double) Returns the result of a componentwise modulus operation on a double3x2 matrix and a double value. public static double3x2 operator %(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double3x2 double3x2 result of the componentwise modulus. operator %(double3x2, double3x2) Returns the result of a componentwise modulus operation on two double3x2 matrices. public static double3x2 operator %(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise modulus. rhs double3x2 Right hand side double3x2 to use to compute componentwise modulus. 返回 double3x2 double3x2 result of the componentwise modulus. operator *(double, double3x2) Returns the result of a componentwise multiplication operation on a double value and a double3x2 matrix. public static double3x2 operator *(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double3x2 Right hand side double3x2 to use to compute componentwise multiplication. 返回 double3x2 double3x2 result of the componentwise multiplication. operator *(double3x2, double) Returns the result of a componentwise multiplication operation on a double3x2 matrix and a double value. public static double3x2 operator *(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double3x2 double3x2 result of the componentwise multiplication. operator *(double3x2, double3x2) Returns the result of a componentwise multiplication operation on two double3x2 matrices. public static double3x2 operator *(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise multiplication. rhs double3x2 Right hand side double3x2 to use to compute componentwise multiplication. 返回 double3x2 double3x2 result of the componentwise multiplication. operator -(double, double3x2) Returns the result of a componentwise subtraction operation on a double value and a double3x2 matrix. public static double3x2 operator -(double lhs, double3x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double3x2 Right hand side double3x2 to use to compute componentwise subtraction. 返回 double3x2 double3x2 result of the componentwise subtraction. operator -(double3x2, double) Returns the result of a componentwise subtraction operation on a double3x2 matrix and a double value. public static double3x2 operator -(double3x2 lhs, double rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double3x2 double3x2 result of the componentwise subtraction. operator -(double3x2, double3x2) Returns the result of a componentwise subtraction operation on two double3x2 matrices. public static double3x2 operator -(double3x2 lhs, double3x2 rhs) 参数 lhs double3x2 Left hand side double3x2 to use to compute componentwise subtraction. rhs double3x2 Right hand side double3x2 to use to compute componentwise subtraction. 返回 double3x2 double3x2 result of the componentwise subtraction. operator -(double3x2) Returns the result of a componentwise unary minus operation on a double3x2 matrix. public static double3x2 operator -(double3x2 val) 参数 val double3x2 Value to use when computing the componentwise unary minus. 返回 double3x2 double3x2 result of the componentwise unary minus. operator +(double3x2) Returns the result of a componentwise unary plus operation on a double3x2 matrix. public static double3x2 operator +(double3x2 val) 参数 val double3x2 Value to use when computing the componentwise unary plus. 返回 double3x2 double3x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double3x3.html": {
    "href": "reference/Unity.Mathematics.double3x3.html",
    "title": "double3x3 结构 | Fantasy.Net API Reference",
    "keywords": "double3x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x3 matrix of doubles. public struct double3x3 : IEquatable<double3x3>, IFormattable 实现 IEquatable<double3x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double3x3(bool) Constructs a double3x3 matrix from a single bool value by converting it to double and assigning it to every component. public double3x3(bool v) 参数 v bool bool to convert to double3x3 double3x3(double) Constructs a double3x3 matrix from a single double value by assigning it to every component. public double3x3(double v) 参数 v double double to convert to double3x3 double3x3(double, double, double, double, double, double, double, double, double) Constructs a double3x3 matrix from 9 double values given in row-major order. public double3x3(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. double3x3(int) Constructs a double3x3 matrix from a single int value by converting it to double and assigning it to every component. public double3x3(int v) 参数 v int int to convert to double3x3 double3x3(float) Constructs a double3x3 matrix from a single float value by converting it to double and assigning it to every component. public double3x3(float v) 参数 v float float to convert to double3x3 double3x3(uint) Constructs a double3x3 matrix from a single uint value by converting it to double and assigning it to every component. public double3x3(uint v) 参数 v uint uint to convert to double3x3 double3x3(bool3x3) Constructs a double3x3 matrix from a bool3x3 matrix by componentwise conversion. public double3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to double3x3 double3x3(double3, double3, double3) Constructs a double3x3 matrix from three double3 vectors. public double3x3(double3 c0, double3 c1, double3 c2) 参数 c0 double3 The matrix column c0 will be set to this value. c1 double3 The matrix column c1 will be set to this value. c2 double3 The matrix column c2 will be set to this value. double3x3(float3x3) Constructs a double3x3 matrix from a float3x3 matrix by componentwise conversion. public double3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to double3x3 double3x3(int3x3) Constructs a double3x3 matrix from a int3x3 matrix by componentwise conversion. public double3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to double3x3 double3x3(uint3x3) Constructs a double3x3 matrix from a uint3x3 matrix by componentwise conversion. public double3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to double3x3 字段 c0 Column 0 of the matrix. public double3 c0 字段值 double3 c1 Column 1 of the matrix. public double3 c1 字段值 double3 c2 Column 2 of the matrix. public double3 c2 字段值 double3 identity double3x3 identity transform. public static readonly double3x3 identity 字段值 double3x3 zero double3x3 zero value. public static readonly double3x3 zero 字段值 double3x3 属性 this[int] Returns the double3 element at a specified index. public ref double3 this[int index] { get; } 参数 index int 属性值 double3 方法 Equals(object) Returns true if the double3x3 is equal to a given double3x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double3x3) Returns true if the double3x3 is equal to a given double3x3, false otherwise. public bool Equals(double3x3 rhs) 参数 rhs double3x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double3x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double3x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double3x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double3x3) Returns the result of a componentwise addition operation on a double value and a double3x3 matrix. public static double3x3 operator +(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double3x3 Right hand side double3x3 to use to compute componentwise addition. 返回 double3x3 double3x3 result of the componentwise addition. operator +(double3x3, double) Returns the result of a componentwise addition operation on a double3x3 matrix and a double value. public static double3x3 operator +(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double3x3 double3x3 result of the componentwise addition. operator +(double3x3, double3x3) Returns the result of a componentwise addition operation on two double3x3 matrices. public static double3x3 operator +(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise addition. rhs double3x3 Right hand side double3x3 to use to compute componentwise addition. 返回 double3x3 double3x3 result of the componentwise addition. operator --(double3x3) Returns the result of a componentwise decrement operation on a double3x3 matrix. public static double3x3 operator --(double3x3 val) 参数 val double3x3 Value to use when computing the componentwise decrement. 返回 double3x3 double3x3 result of the componentwise decrement. operator /(double, double3x3) Returns the result of a componentwise division operation on a double value and a double3x3 matrix. public static double3x3 operator /(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double3x3 Right hand side double3x3 to use to compute componentwise division. 返回 double3x3 double3x3 result of the componentwise division. operator /(double3x3, double) Returns the result of a componentwise division operation on a double3x3 matrix and a double value. public static double3x3 operator /(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double3x3 double3x3 result of the componentwise division. operator /(double3x3, double3x3) Returns the result of a componentwise division operation on two double3x3 matrices. public static double3x3 operator /(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise division. rhs double3x3 Right hand side double3x3 to use to compute componentwise division. 返回 double3x3 double3x3 result of the componentwise division. operator ==(double, double3x3) Returns the result of a componentwise equality operation on a double value and a double3x3 matrix. public static bool3x3 operator ==(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double3x3 Right hand side double3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(double3x3, double) Returns the result of a componentwise equality operation on a double3x3 matrix and a double value. public static bool3x3 operator ==(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(double3x3, double3x3) Returns the result of a componentwise equality operation on two double3x3 matrices. public static bool3x3 operator ==(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise equality. rhs double3x3 Right hand side double3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. explicit operator double3x3(bool) Explicitly converts a single bool value to a double3x3 matrix by converting it to double and assigning it to every component. public static explicit operator double3x3(bool v) 参数 v bool bool to convert to double3x3 返回 double3x3 Converted value. explicit operator double3x3(bool3x3) Explicitly converts a bool3x3 matrix to a double3x3 matrix by componentwise conversion. public static explicit operator double3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to double3x3 返回 double3x3 Converted value. operator >(double, double3x3) Returns the result of a componentwise greater than operation on a double value and a double3x3 matrix. public static bool3x3 operator >(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double3x3 Right hand side double3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(double3x3, double) Returns the result of a componentwise greater than operation on a double3x3 matrix and a double value. public static bool3x3 operator >(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(double3x3, double3x3) Returns the result of a componentwise greater than operation on two double3x3 matrices. public static bool3x3 operator >(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise greater than. rhs double3x3 Right hand side double3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >=(double, double3x3) Returns the result of a componentwise greater or equal operation on a double value and a double3x3 matrix. public static bool3x3 operator >=(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double3x3 Right hand side double3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(double3x3, double) Returns the result of a componentwise greater or equal operation on a double3x3 matrix and a double value. public static bool3x3 operator >=(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(double3x3, double3x3) Returns the result of a componentwise greater or equal operation on two double3x3 matrices. public static bool3x3 operator >=(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise greater or equal. rhs double3x3 Right hand side double3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. implicit operator double3x3(double) Implicitly converts a single double value to a double3x3 matrix by assigning it to every component. public static implicit operator double3x3(double v) 参数 v double double to convert to double3x3 返回 double3x3 Converted value. implicit operator double3x3(int) Implicitly converts a single int value to a double3x3 matrix by converting it to double and assigning it to every component. public static implicit operator double3x3(int v) 参数 v int int to convert to double3x3 返回 double3x3 Converted value. implicit operator double3x3(float) Implicitly converts a single float value to a double3x3 matrix by converting it to double and assigning it to every component. public static implicit operator double3x3(float v) 参数 v float float to convert to double3x3 返回 double3x3 Converted value. implicit operator double3x3(uint) Implicitly converts a single uint value to a double3x3 matrix by converting it to double and assigning it to every component. public static implicit operator double3x3(uint v) 参数 v uint uint to convert to double3x3 返回 double3x3 Converted value. implicit operator double3x3(float3x3) Implicitly converts a float3x3 matrix to a double3x3 matrix by componentwise conversion. public static implicit operator double3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to double3x3 返回 double3x3 Converted value. implicit operator double3x3(int3x3) Implicitly converts a int3x3 matrix to a double3x3 matrix by componentwise conversion. public static implicit operator double3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to double3x3 返回 double3x3 Converted value. implicit operator double3x3(uint3x3) Implicitly converts a uint3x3 matrix to a double3x3 matrix by componentwise conversion. public static implicit operator double3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to double3x3 返回 double3x3 Converted value. operator ++(double3x3) Returns the result of a componentwise increment operation on a double3x3 matrix. public static double3x3 operator ++(double3x3 val) 参数 val double3x3 Value to use when computing the componentwise increment. 返回 double3x3 double3x3 result of the componentwise increment. operator !=(double, double3x3) Returns the result of a componentwise not equal operation on a double value and a double3x3 matrix. public static bool3x3 operator !=(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double3x3 Right hand side double3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(double3x3, double) Returns the result of a componentwise not equal operation on a double3x3 matrix and a double value. public static bool3x3 operator !=(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(double3x3, double3x3) Returns the result of a componentwise not equal operation on two double3x3 matrices. public static bool3x3 operator !=(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise not equal. rhs double3x3 Right hand side double3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator <(double, double3x3) Returns the result of a componentwise less than operation on a double value and a double3x3 matrix. public static bool3x3 operator <(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double3x3 Right hand side double3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(double3x3, double) Returns the result of a componentwise less than operation on a double3x3 matrix and a double value. public static bool3x3 operator <(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(double3x3, double3x3) Returns the result of a componentwise less than operation on two double3x3 matrices. public static bool3x3 operator <(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise less than. rhs double3x3 Right hand side double3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <=(double, double3x3) Returns the result of a componentwise less or equal operation on a double value and a double3x3 matrix. public static bool3x3 operator <=(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double3x3 Right hand side double3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(double3x3, double) Returns the result of a componentwise less or equal operation on a double3x3 matrix and a double value. public static bool3x3 operator <=(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(double3x3, double3x3) Returns the result of a componentwise less or equal operation on two double3x3 matrices. public static bool3x3 operator <=(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise less or equal. rhs double3x3 Right hand side double3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator %(double, double3x3) Returns the result of a componentwise modulus operation on a double value and a double3x3 matrix. public static double3x3 operator %(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double3x3 Right hand side double3x3 to use to compute componentwise modulus. 返回 double3x3 double3x3 result of the componentwise modulus. operator %(double3x3, double) Returns the result of a componentwise modulus operation on a double3x3 matrix and a double value. public static double3x3 operator %(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double3x3 double3x3 result of the componentwise modulus. operator %(double3x3, double3x3) Returns the result of a componentwise modulus operation on two double3x3 matrices. public static double3x3 operator %(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise modulus. rhs double3x3 Right hand side double3x3 to use to compute componentwise modulus. 返回 double3x3 double3x3 result of the componentwise modulus. operator *(double, double3x3) Returns the result of a componentwise multiplication operation on a double value and a double3x3 matrix. public static double3x3 operator *(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double3x3 Right hand side double3x3 to use to compute componentwise multiplication. 返回 double3x3 double3x3 result of the componentwise multiplication. operator *(double3x3, double) Returns the result of a componentwise multiplication operation on a double3x3 matrix and a double value. public static double3x3 operator *(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double3x3 double3x3 result of the componentwise multiplication. operator *(double3x3, double3x3) Returns the result of a componentwise multiplication operation on two double3x3 matrices. public static double3x3 operator *(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise multiplication. rhs double3x3 Right hand side double3x3 to use to compute componentwise multiplication. 返回 double3x3 double3x3 result of the componentwise multiplication. operator -(double, double3x3) Returns the result of a componentwise subtraction operation on a double value and a double3x3 matrix. public static double3x3 operator -(double lhs, double3x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double3x3 Right hand side double3x3 to use to compute componentwise subtraction. 返回 double3x3 double3x3 result of the componentwise subtraction. operator -(double3x3, double) Returns the result of a componentwise subtraction operation on a double3x3 matrix and a double value. public static double3x3 operator -(double3x3 lhs, double rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double3x3 double3x3 result of the componentwise subtraction. operator -(double3x3, double3x3) Returns the result of a componentwise subtraction operation on two double3x3 matrices. public static double3x3 operator -(double3x3 lhs, double3x3 rhs) 参数 lhs double3x3 Left hand side double3x3 to use to compute componentwise subtraction. rhs double3x3 Right hand side double3x3 to use to compute componentwise subtraction. 返回 double3x3 double3x3 result of the componentwise subtraction. operator -(double3x3) Returns the result of a componentwise unary minus operation on a double3x3 matrix. public static double3x3 operator -(double3x3 val) 参数 val double3x3 Value to use when computing the componentwise unary minus. 返回 double3x3 double3x3 result of the componentwise unary minus. operator +(double3x3) Returns the result of a componentwise unary plus operation on a double3x3 matrix. public static double3x3 operator +(double3x3 val) 参数 val double3x3 Value to use when computing the componentwise unary plus. 返回 double3x3 double3x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double3x4.html": {
    "href": "reference/Unity.Mathematics.double3x4.html",
    "title": "double3x4 结构 | Fantasy.Net API Reference",
    "keywords": "double3x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x4 matrix of doubles. public struct double3x4 : IEquatable<double3x4>, IFormattable 实现 IEquatable<double3x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double3x4(bool) Constructs a double3x4 matrix from a single bool value by converting it to double and assigning it to every component. public double3x4(bool v) 参数 v bool bool to convert to double3x4 double3x4(double) Constructs a double3x4 matrix from a single double value by assigning it to every component. public double3x4(double v) 参数 v double double to convert to double3x4 double3x4(double, double, double, double, double, double, double, double, double, double, double, double) Constructs a double3x4 matrix from 12 double values given in row-major order. public double3x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m03 double The matrix at row 0, column 3 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m13 double The matrix at row 1, column 3 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. m23 double The matrix at row 2, column 3 will be set to this value. double3x4(int) Constructs a double3x4 matrix from a single int value by converting it to double and assigning it to every component. public double3x4(int v) 参数 v int int to convert to double3x4 double3x4(float) Constructs a double3x4 matrix from a single float value by converting it to double and assigning it to every component. public double3x4(float v) 参数 v float float to convert to double3x4 double3x4(uint) Constructs a double3x4 matrix from a single uint value by converting it to double and assigning it to every component. public double3x4(uint v) 参数 v uint uint to convert to double3x4 double3x4(bool3x4) Constructs a double3x4 matrix from a bool3x4 matrix by componentwise conversion. public double3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to double3x4 double3x4(double3, double3, double3, double3) Constructs a double3x4 matrix from four double3 vectors. public double3x4(double3 c0, double3 c1, double3 c2, double3 c3) 参数 c0 double3 The matrix column c0 will be set to this value. c1 double3 The matrix column c1 will be set to this value. c2 double3 The matrix column c2 will be set to this value. c3 double3 The matrix column c3 will be set to this value. double3x4(float3x4) Constructs a double3x4 matrix from a float3x4 matrix by componentwise conversion. public double3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to double3x4 double3x4(int3x4) Constructs a double3x4 matrix from a int3x4 matrix by componentwise conversion. public double3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to double3x4 double3x4(uint3x4) Constructs a double3x4 matrix from a uint3x4 matrix by componentwise conversion. public double3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to double3x4 字段 c0 Column 0 of the matrix. public double3 c0 字段值 double3 c1 Column 1 of the matrix. public double3 c1 字段值 double3 c2 Column 2 of the matrix. public double3 c2 字段值 double3 c3 Column 3 of the matrix. public double3 c3 字段值 double3 zero double3x4 zero value. public static readonly double3x4 zero 字段值 double3x4 属性 this[int] Returns the double3 element at a specified index. public ref double3 this[int index] { get; } 参数 index int 属性值 double3 方法 Equals(object) Returns true if the double3x4 is equal to a given double3x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double3x4) Returns true if the double3x4 is equal to a given double3x4, false otherwise. public bool Equals(double3x4 rhs) 参数 rhs double3x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double3x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double3x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double3x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double3x4) Returns the result of a componentwise addition operation on a double value and a double3x4 matrix. public static double3x4 operator +(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double3x4 Right hand side double3x4 to use to compute componentwise addition. 返回 double3x4 double3x4 result of the componentwise addition. operator +(double3x4, double) Returns the result of a componentwise addition operation on a double3x4 matrix and a double value. public static double3x4 operator +(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double3x4 double3x4 result of the componentwise addition. operator +(double3x4, double3x4) Returns the result of a componentwise addition operation on two double3x4 matrices. public static double3x4 operator +(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise addition. rhs double3x4 Right hand side double3x4 to use to compute componentwise addition. 返回 double3x4 double3x4 result of the componentwise addition. operator --(double3x4) Returns the result of a componentwise decrement operation on a double3x4 matrix. public static double3x4 operator --(double3x4 val) 参数 val double3x4 Value to use when computing the componentwise decrement. 返回 double3x4 double3x4 result of the componentwise decrement. operator /(double, double3x4) Returns the result of a componentwise division operation on a double value and a double3x4 matrix. public static double3x4 operator /(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double3x4 Right hand side double3x4 to use to compute componentwise division. 返回 double3x4 double3x4 result of the componentwise division. operator /(double3x4, double) Returns the result of a componentwise division operation on a double3x4 matrix and a double value. public static double3x4 operator /(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double3x4 double3x4 result of the componentwise division. operator /(double3x4, double3x4) Returns the result of a componentwise division operation on two double3x4 matrices. public static double3x4 operator /(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise division. rhs double3x4 Right hand side double3x4 to use to compute componentwise division. 返回 double3x4 double3x4 result of the componentwise division. operator ==(double, double3x4) Returns the result of a componentwise equality operation on a double value and a double3x4 matrix. public static bool3x4 operator ==(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double3x4 Right hand side double3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(double3x4, double) Returns the result of a componentwise equality operation on a double3x4 matrix and a double value. public static bool3x4 operator ==(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(double3x4, double3x4) Returns the result of a componentwise equality operation on two double3x4 matrices. public static bool3x4 operator ==(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise equality. rhs double3x4 Right hand side double3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. explicit operator double3x4(bool) Explicitly converts a single bool value to a double3x4 matrix by converting it to double and assigning it to every component. public static explicit operator double3x4(bool v) 参数 v bool bool to convert to double3x4 返回 double3x4 Converted value. explicit operator double3x4(bool3x4) Explicitly converts a bool3x4 matrix to a double3x4 matrix by componentwise conversion. public static explicit operator double3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to double3x4 返回 double3x4 Converted value. operator >(double, double3x4) Returns the result of a componentwise greater than operation on a double value and a double3x4 matrix. public static bool3x4 operator >(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double3x4 Right hand side double3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(double3x4, double) Returns the result of a componentwise greater than operation on a double3x4 matrix and a double value. public static bool3x4 operator >(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(double3x4, double3x4) Returns the result of a componentwise greater than operation on two double3x4 matrices. public static bool3x4 operator >(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise greater than. rhs double3x4 Right hand side double3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >=(double, double3x4) Returns the result of a componentwise greater or equal operation on a double value and a double3x4 matrix. public static bool3x4 operator >=(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double3x4 Right hand side double3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(double3x4, double) Returns the result of a componentwise greater or equal operation on a double3x4 matrix and a double value. public static bool3x4 operator >=(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(double3x4, double3x4) Returns the result of a componentwise greater or equal operation on two double3x4 matrices. public static bool3x4 operator >=(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise greater or equal. rhs double3x4 Right hand side double3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. implicit operator double3x4(double) Implicitly converts a single double value to a double3x4 matrix by assigning it to every component. public static implicit operator double3x4(double v) 参数 v double double to convert to double3x4 返回 double3x4 Converted value. implicit operator double3x4(int) Implicitly converts a single int value to a double3x4 matrix by converting it to double and assigning it to every component. public static implicit operator double3x4(int v) 参数 v int int to convert to double3x4 返回 double3x4 Converted value. implicit operator double3x4(float) Implicitly converts a single float value to a double3x4 matrix by converting it to double and assigning it to every component. public static implicit operator double3x4(float v) 参数 v float float to convert to double3x4 返回 double3x4 Converted value. implicit operator double3x4(uint) Implicitly converts a single uint value to a double3x4 matrix by converting it to double and assigning it to every component. public static implicit operator double3x4(uint v) 参数 v uint uint to convert to double3x4 返回 double3x4 Converted value. implicit operator double3x4(float3x4) Implicitly converts a float3x4 matrix to a double3x4 matrix by componentwise conversion. public static implicit operator double3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to double3x4 返回 double3x4 Converted value. implicit operator double3x4(int3x4) Implicitly converts a int3x4 matrix to a double3x4 matrix by componentwise conversion. public static implicit operator double3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to double3x4 返回 double3x4 Converted value. implicit operator double3x4(uint3x4) Implicitly converts a uint3x4 matrix to a double3x4 matrix by componentwise conversion. public static implicit operator double3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to double3x4 返回 double3x4 Converted value. operator ++(double3x4) Returns the result of a componentwise increment operation on a double3x4 matrix. public static double3x4 operator ++(double3x4 val) 参数 val double3x4 Value to use when computing the componentwise increment. 返回 double3x4 double3x4 result of the componentwise increment. operator !=(double, double3x4) Returns the result of a componentwise not equal operation on a double value and a double3x4 matrix. public static bool3x4 operator !=(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double3x4 Right hand side double3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(double3x4, double) Returns the result of a componentwise not equal operation on a double3x4 matrix and a double value. public static bool3x4 operator !=(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(double3x4, double3x4) Returns the result of a componentwise not equal operation on two double3x4 matrices. public static bool3x4 operator !=(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise not equal. rhs double3x4 Right hand side double3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator <(double, double3x4) Returns the result of a componentwise less than operation on a double value and a double3x4 matrix. public static bool3x4 operator <(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double3x4 Right hand side double3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(double3x4, double) Returns the result of a componentwise less than operation on a double3x4 matrix and a double value. public static bool3x4 operator <(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(double3x4, double3x4) Returns the result of a componentwise less than operation on two double3x4 matrices. public static bool3x4 operator <(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise less than. rhs double3x4 Right hand side double3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <=(double, double3x4) Returns the result of a componentwise less or equal operation on a double value and a double3x4 matrix. public static bool3x4 operator <=(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double3x4 Right hand side double3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(double3x4, double) Returns the result of a componentwise less or equal operation on a double3x4 matrix and a double value. public static bool3x4 operator <=(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(double3x4, double3x4) Returns the result of a componentwise less or equal operation on two double3x4 matrices. public static bool3x4 operator <=(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise less or equal. rhs double3x4 Right hand side double3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator %(double, double3x4) Returns the result of a componentwise modulus operation on a double value and a double3x4 matrix. public static double3x4 operator %(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double3x4 Right hand side double3x4 to use to compute componentwise modulus. 返回 double3x4 double3x4 result of the componentwise modulus. operator %(double3x4, double) Returns the result of a componentwise modulus operation on a double3x4 matrix and a double value. public static double3x4 operator %(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double3x4 double3x4 result of the componentwise modulus. operator %(double3x4, double3x4) Returns the result of a componentwise modulus operation on two double3x4 matrices. public static double3x4 operator %(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise modulus. rhs double3x4 Right hand side double3x4 to use to compute componentwise modulus. 返回 double3x4 double3x4 result of the componentwise modulus. operator *(double, double3x4) Returns the result of a componentwise multiplication operation on a double value and a double3x4 matrix. public static double3x4 operator *(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double3x4 Right hand side double3x4 to use to compute componentwise multiplication. 返回 double3x4 double3x4 result of the componentwise multiplication. operator *(double3x4, double) Returns the result of a componentwise multiplication operation on a double3x4 matrix and a double value. public static double3x4 operator *(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double3x4 double3x4 result of the componentwise multiplication. operator *(double3x4, double3x4) Returns the result of a componentwise multiplication operation on two double3x4 matrices. public static double3x4 operator *(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise multiplication. rhs double3x4 Right hand side double3x4 to use to compute componentwise multiplication. 返回 double3x4 double3x4 result of the componentwise multiplication. operator -(double, double3x4) Returns the result of a componentwise subtraction operation on a double value and a double3x4 matrix. public static double3x4 operator -(double lhs, double3x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double3x4 Right hand side double3x4 to use to compute componentwise subtraction. 返回 double3x4 double3x4 result of the componentwise subtraction. operator -(double3x4, double) Returns the result of a componentwise subtraction operation on a double3x4 matrix and a double value. public static double3x4 operator -(double3x4 lhs, double rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double3x4 double3x4 result of the componentwise subtraction. operator -(double3x4, double3x4) Returns the result of a componentwise subtraction operation on two double3x4 matrices. public static double3x4 operator -(double3x4 lhs, double3x4 rhs) 参数 lhs double3x4 Left hand side double3x4 to use to compute componentwise subtraction. rhs double3x4 Right hand side double3x4 to use to compute componentwise subtraction. 返回 double3x4 double3x4 result of the componentwise subtraction. operator -(double3x4) Returns the result of a componentwise unary minus operation on a double3x4 matrix. public static double3x4 operator -(double3x4 val) 参数 val double3x4 Value to use when computing the componentwise unary minus. 返回 double3x4 double3x4 result of the componentwise unary minus. operator +(double3x4) Returns the result of a componentwise unary plus operation on a double3x4 matrix. public static double3x4 operator +(double3x4 val) 参数 val double3x4 Value to use when computing the componentwise unary plus. 返回 double3x4 double3x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double4.html": {
    "href": "reference/Unity.Mathematics.double4.html",
    "title": "double4 结构 | Fantasy.Net API Reference",
    "keywords": "double4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4 component vector of doubles. public struct double4 : IEquatable<double4>, IFormattable 实现 IEquatable<double4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double4(bool) Constructs a double4 vector from a single bool value by converting it to double and assigning it to every component. public double4(bool v) 参数 v bool bool to convert to double4 double4(double) Constructs a double4 vector from a single double value by assigning it to every component. public double4(double v) 参数 v double double to convert to double4 double4(double, double, double, double) Constructs a double4 vector from four double values. public double4(double x, double y, double z, double w) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. z double The constructed vector's z component will be set to this value. w double The constructed vector's w component will be set to this value. double4(double, double, double2) Constructs a double4 vector from two double values and a double2 vector. public double4(double x, double y, double2 zw) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. zw double2 The constructed vector's zw components will be set to this value. double4(double, double2, double) Constructs a double4 vector from a double value, a double2 vector and a double value. public double4(double x, double2 yz, double w) 参数 x double The constructed vector's x component will be set to this value. yz double2 The constructed vector's yz components will be set to this value. w double The constructed vector's w component will be set to this value. double4(double, double3) Constructs a double4 vector from a double value and a double3 vector. public double4(double x, double3 yzw) 参数 x double The constructed vector's x component will be set to this value. yzw double3 The constructed vector's yzw components will be set to this value. double4(int) Constructs a double4 vector from a single int value by converting it to double and assigning it to every component. public double4(int v) 参数 v int int to convert to double4 double4(float) Constructs a double4 vector from a single float value by converting it to double and assigning it to every component. public double4(float v) 参数 v float float to convert to double4 double4(uint) Constructs a double4 vector from a single uint value by converting it to double and assigning it to every component. public double4(uint v) 参数 v uint uint to convert to double4 double4(bool4) Constructs a double4 vector from a bool4 vector by componentwise conversion. public double4(bool4 v) 参数 v bool4 bool4 to convert to double4 double4(double2, double, double) Constructs a double4 vector from a double2 vector and two double values. public double4(double2 xy, double z, double w) 参数 xy double2 The constructed vector's xy components will be set to this value. z double The constructed vector's z component will be set to this value. w double The constructed vector's w component will be set to this value. double4(double2, double2) Constructs a double4 vector from two double2 vectors. public double4(double2 xy, double2 zw) 参数 xy double2 The constructed vector's xy components will be set to this value. zw double2 The constructed vector's zw components will be set to this value. double4(double3, double) Constructs a double4 vector from a double3 vector and a double value. public double4(double3 xyz, double w) 参数 xyz double3 The constructed vector's xyz components will be set to this value. w double The constructed vector's w component will be set to this value. double4(double4) Constructs a double4 vector from a double4 vector. public double4(double4 xyzw) 参数 xyzw double4 The constructed vector's xyzw components will be set to this value. double4(float4) Constructs a double4 vector from a float4 vector by componentwise conversion. public double4(float4 v) 参数 v float4 float4 to convert to double4 double4(half) Constructs a double4 vector from a single half value by converting it to double and assigning it to every component. public double4(half v) 参数 v half half to convert to double4 double4(half4) Constructs a double4 vector from a half4 vector by componentwise conversion. public double4(half4 v) 参数 v half4 half4 to convert to double4 double4(int4) Constructs a double4 vector from a int4 vector by componentwise conversion. public double4(int4 v) 参数 v int4 int4 to convert to double4 double4(uint4) Constructs a double4 vector from a uint4 vector by componentwise conversion. public double4(uint4 v) 参数 v uint4 uint4 to convert to double4 字段 w w component of the vector. public double w 字段值 double x x component of the vector. public double x 字段值 double y y component of the vector. public double y 字段值 double z z component of the vector. public double z 字段值 double zero double4 zero value. public static readonly double4 zero 字段值 double4 属性 this[int] Returns the double element at a specified index. public double this[int index] { get; set; } 参数 index int 属性值 double 方法 Equals(object) Returns true if the double4 is equal to a given double4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double4) Returns true if the double4 is equal to a given double4, false otherwise. public bool Equals(double4 rhs) 参数 rhs double4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double4) Returns the result of a componentwise addition operation on a double value and a double4 vector. public static double4 operator +(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double4 Right hand side double4 to use to compute componentwise addition. 返回 double4 double4 result of the componentwise addition. operator +(double4, double) Returns the result of a componentwise addition operation on a double4 vector and a double value. public static double4 operator +(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double4 double4 result of the componentwise addition. operator +(double4, double4) Returns the result of a componentwise addition operation on two double4 vectors. public static double4 operator +(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise addition. rhs double4 Right hand side double4 to use to compute componentwise addition. 返回 double4 double4 result of the componentwise addition. operator --(double4) Returns the result of a componentwise decrement operation on a double4 vector. public static double4 operator --(double4 val) 参数 val double4 Value to use when computing the componentwise decrement. 返回 double4 double4 result of the componentwise decrement. operator /(double, double4) Returns the result of a componentwise division operation on a double value and a double4 vector. public static double4 operator /(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double4 Right hand side double4 to use to compute componentwise division. 返回 double4 double4 result of the componentwise division. operator /(double4, double) Returns the result of a componentwise division operation on a double4 vector and a double value. public static double4 operator /(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double4 double4 result of the componentwise division. operator /(double4, double4) Returns the result of a componentwise division operation on two double4 vectors. public static double4 operator /(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise division. rhs double4 Right hand side double4 to use to compute componentwise division. 返回 double4 double4 result of the componentwise division. operator ==(double, double4) Returns the result of a componentwise equality operation on a double value and a double4 vector. public static bool4 operator ==(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double4 Right hand side double4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(double4, double) Returns the result of a componentwise equality operation on a double4 vector and a double value. public static bool4 operator ==(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(double4, double4) Returns the result of a componentwise equality operation on two double4 vectors. public static bool4 operator ==(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise equality. rhs double4 Right hand side double4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. explicit operator double4(bool) Explicitly converts a single bool value to a double4 vector by converting it to double and assigning it to every component. public static explicit operator double4(bool v) 参数 v bool bool to convert to double4 返回 double4 Converted value. explicit operator double4(bool4) Explicitly converts a bool4 vector to a double4 vector by componentwise conversion. public static explicit operator double4(bool4 v) 参数 v bool4 bool4 to convert to double4 返回 double4 Converted value. operator >(double, double4) Returns the result of a componentwise greater than operation on a double value and a double4 vector. public static bool4 operator >(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double4 Right hand side double4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(double4, double) Returns the result of a componentwise greater than operation on a double4 vector and a double value. public static bool4 operator >(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(double4, double4) Returns the result of a componentwise greater than operation on two double4 vectors. public static bool4 operator >(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise greater than. rhs double4 Right hand side double4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >=(double, double4) Returns the result of a componentwise greater or equal operation on a double value and a double4 vector. public static bool4 operator >=(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double4 Right hand side double4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(double4, double) Returns the result of a componentwise greater or equal operation on a double4 vector and a double value. public static bool4 operator >=(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(double4, double4) Returns the result of a componentwise greater or equal operation on two double4 vectors. public static bool4 operator >=(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise greater or equal. rhs double4 Right hand side double4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. implicit operator double4(double) Implicitly converts a single double value to a double4 vector by assigning it to every component. public static implicit operator double4(double v) 参数 v double double to convert to double4 返回 double4 Converted value. implicit operator double4(int) Implicitly converts a single int value to a double4 vector by converting it to double and assigning it to every component. public static implicit operator double4(int v) 参数 v int int to convert to double4 返回 double4 Converted value. implicit operator double4(float) Implicitly converts a single float value to a double4 vector by converting it to double and assigning it to every component. public static implicit operator double4(float v) 参数 v float float to convert to double4 返回 double4 Converted value. implicit operator double4(uint) Implicitly converts a single uint value to a double4 vector by converting it to double and assigning it to every component. public static implicit operator double4(uint v) 参数 v uint uint to convert to double4 返回 double4 Converted value. implicit operator double4(float4) Implicitly converts a float4 vector to a double4 vector by componentwise conversion. public static implicit operator double4(float4 v) 参数 v float4 float4 to convert to double4 返回 double4 Converted value. implicit operator double4(half) Implicitly converts a single half value to a double4 vector by converting it to double and assigning it to every component. public static implicit operator double4(half v) 参数 v half half to convert to double4 返回 double4 Converted value. implicit operator double4(half4) Implicitly converts a half4 vector to a double4 vector by componentwise conversion. public static implicit operator double4(half4 v) 参数 v half4 half4 to convert to double4 返回 double4 Converted value. implicit operator double4(int4) Implicitly converts a int4 vector to a double4 vector by componentwise conversion. public static implicit operator double4(int4 v) 参数 v int4 int4 to convert to double4 返回 double4 Converted value. implicit operator double4(uint4) Implicitly converts a uint4 vector to a double4 vector by componentwise conversion. public static implicit operator double4(uint4 v) 参数 v uint4 uint4 to convert to double4 返回 double4 Converted value. operator ++(double4) Returns the result of a componentwise increment operation on a double4 vector. public static double4 operator ++(double4 val) 参数 val double4 Value to use when computing the componentwise increment. 返回 double4 double4 result of the componentwise increment. operator !=(double, double4) Returns the result of a componentwise not equal operation on a double value and a double4 vector. public static bool4 operator !=(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double4 Right hand side double4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(double4, double) Returns the result of a componentwise not equal operation on a double4 vector and a double value. public static bool4 operator !=(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(double4, double4) Returns the result of a componentwise not equal operation on two double4 vectors. public static bool4 operator !=(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise not equal. rhs double4 Right hand side double4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator <(double, double4) Returns the result of a componentwise less than operation on a double value and a double4 vector. public static bool4 operator <(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double4 Right hand side double4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(double4, double) Returns the result of a componentwise less than operation on a double4 vector and a double value. public static bool4 operator <(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(double4, double4) Returns the result of a componentwise less than operation on two double4 vectors. public static bool4 operator <(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise less than. rhs double4 Right hand side double4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <=(double, double4) Returns the result of a componentwise less or equal operation on a double value and a double4 vector. public static bool4 operator <=(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double4 Right hand side double4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(double4, double) Returns the result of a componentwise less or equal operation on a double4 vector and a double value. public static bool4 operator <=(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(double4, double4) Returns the result of a componentwise less or equal operation on two double4 vectors. public static bool4 operator <=(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise less or equal. rhs double4 Right hand side double4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator %(double, double4) Returns the result of a componentwise modulus operation on a double value and a double4 vector. public static double4 operator %(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double4 Right hand side double4 to use to compute componentwise modulus. 返回 double4 double4 result of the componentwise modulus. operator %(double4, double) Returns the result of a componentwise modulus operation on a double4 vector and a double value. public static double4 operator %(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double4 double4 result of the componentwise modulus. operator %(double4, double4) Returns the result of a componentwise modulus operation on two double4 vectors. public static double4 operator %(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise modulus. rhs double4 Right hand side double4 to use to compute componentwise modulus. 返回 double4 double4 result of the componentwise modulus. operator *(double, double4) Returns the result of a componentwise multiplication operation on a double value and a double4 vector. public static double4 operator *(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double4 Right hand side double4 to use to compute componentwise multiplication. 返回 double4 double4 result of the componentwise multiplication. operator *(double4, double) Returns the result of a componentwise multiplication operation on a double4 vector and a double value. public static double4 operator *(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double4 double4 result of the componentwise multiplication. operator *(double4, double4) Returns the result of a componentwise multiplication operation on two double4 vectors. public static double4 operator *(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise multiplication. rhs double4 Right hand side double4 to use to compute componentwise multiplication. 返回 double4 double4 result of the componentwise multiplication. operator -(double, double4) Returns the result of a componentwise subtraction operation on a double value and a double4 vector. public static double4 operator -(double lhs, double4 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double4 Right hand side double4 to use to compute componentwise subtraction. 返回 double4 double4 result of the componentwise subtraction. operator -(double4, double) Returns the result of a componentwise subtraction operation on a double4 vector and a double value. public static double4 operator -(double4 lhs, double rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double4 double4 result of the componentwise subtraction. operator -(double4, double4) Returns the result of a componentwise subtraction operation on two double4 vectors. public static double4 operator -(double4 lhs, double4 rhs) 参数 lhs double4 Left hand side double4 to use to compute componentwise subtraction. rhs double4 Right hand side double4 to use to compute componentwise subtraction. 返回 double4 double4 result of the componentwise subtraction. operator -(double4) Returns the result of a componentwise unary minus operation on a double4 vector. public static double4 operator -(double4 val) 参数 val double4 Value to use when computing the componentwise unary minus. 返回 double4 double4 result of the componentwise unary minus. operator +(double4) Returns the result of a componentwise unary plus operation on a double4 vector. public static double4 operator +(double4 val) 参数 val double4 Value to use when computing the componentwise unary plus. 返回 double4 double4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double4x2.html": {
    "href": "reference/Unity.Mathematics.double4x2.html",
    "title": "double4x2 结构 | Fantasy.Net API Reference",
    "keywords": "double4x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x2 matrix of doubles. public struct double4x2 : IEquatable<double4x2>, IFormattable 实现 IEquatable<double4x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double4x2(bool) Constructs a double4x2 matrix from a single bool value by converting it to double and assigning it to every component. public double4x2(bool v) 参数 v bool bool to convert to double4x2 double4x2(double) Constructs a double4x2 matrix from a single double value by assigning it to every component. public double4x2(double v) 参数 v double double to convert to double4x2 double4x2(double, double, double, double, double, double, double, double) Constructs a double4x2 matrix from 8 double values given in row-major order. public double4x2(double m00, double m01, double m10, double m11, double m20, double m21, double m30, double m31) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m30 double The matrix at row 3, column 0 will be set to this value. m31 double The matrix at row 3, column 1 will be set to this value. double4x2(int) Constructs a double4x2 matrix from a single int value by converting it to double and assigning it to every component. public double4x2(int v) 参数 v int int to convert to double4x2 double4x2(float) Constructs a double4x2 matrix from a single float value by converting it to double and assigning it to every component. public double4x2(float v) 参数 v float float to convert to double4x2 double4x2(uint) Constructs a double4x2 matrix from a single uint value by converting it to double and assigning it to every component. public double4x2(uint v) 参数 v uint uint to convert to double4x2 double4x2(bool4x2) Constructs a double4x2 matrix from a bool4x2 matrix by componentwise conversion. public double4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to double4x2 double4x2(double4, double4) Constructs a double4x2 matrix from two double4 vectors. public double4x2(double4 c0, double4 c1) 参数 c0 double4 The matrix column c0 will be set to this value. c1 double4 The matrix column c1 will be set to this value. double4x2(float4x2) Constructs a double4x2 matrix from a float4x2 matrix by componentwise conversion. public double4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to double4x2 double4x2(int4x2) Constructs a double4x2 matrix from a int4x2 matrix by componentwise conversion. public double4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to double4x2 double4x2(uint4x2) Constructs a double4x2 matrix from a uint4x2 matrix by componentwise conversion. public double4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to double4x2 字段 c0 Column 0 of the matrix. public double4 c0 字段值 double4 c1 Column 1 of the matrix. public double4 c1 字段值 double4 zero double4x2 zero value. public static readonly double4x2 zero 字段值 double4x2 属性 this[int] Returns the double4 element at a specified index. public ref double4 this[int index] { get; } 参数 index int 属性值 double4 方法 Equals(object) Returns true if the double4x2 is equal to a given double4x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double4x2) Returns true if the double4x2 is equal to a given double4x2, false otherwise. public bool Equals(double4x2 rhs) 参数 rhs double4x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double4x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double4x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double4x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double4x2) Returns the result of a componentwise addition operation on a double value and a double4x2 matrix. public static double4x2 operator +(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double4x2 Right hand side double4x2 to use to compute componentwise addition. 返回 double4x2 double4x2 result of the componentwise addition. operator +(double4x2, double) Returns the result of a componentwise addition operation on a double4x2 matrix and a double value. public static double4x2 operator +(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double4x2 double4x2 result of the componentwise addition. operator +(double4x2, double4x2) Returns the result of a componentwise addition operation on two double4x2 matrices. public static double4x2 operator +(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise addition. rhs double4x2 Right hand side double4x2 to use to compute componentwise addition. 返回 double4x2 double4x2 result of the componentwise addition. operator --(double4x2) Returns the result of a componentwise decrement operation on a double4x2 matrix. public static double4x2 operator --(double4x2 val) 参数 val double4x2 Value to use when computing the componentwise decrement. 返回 double4x2 double4x2 result of the componentwise decrement. operator /(double, double4x2) Returns the result of a componentwise division operation on a double value and a double4x2 matrix. public static double4x2 operator /(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double4x2 Right hand side double4x2 to use to compute componentwise division. 返回 double4x2 double4x2 result of the componentwise division. operator /(double4x2, double) Returns the result of a componentwise division operation on a double4x2 matrix and a double value. public static double4x2 operator /(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double4x2 double4x2 result of the componentwise division. operator /(double4x2, double4x2) Returns the result of a componentwise division operation on two double4x2 matrices. public static double4x2 operator /(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise division. rhs double4x2 Right hand side double4x2 to use to compute componentwise division. 返回 double4x2 double4x2 result of the componentwise division. operator ==(double, double4x2) Returns the result of a componentwise equality operation on a double value and a double4x2 matrix. public static bool4x2 operator ==(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double4x2 Right hand side double4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(double4x2, double) Returns the result of a componentwise equality operation on a double4x2 matrix and a double value. public static bool4x2 operator ==(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(double4x2, double4x2) Returns the result of a componentwise equality operation on two double4x2 matrices. public static bool4x2 operator ==(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise equality. rhs double4x2 Right hand side double4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. explicit operator double4x2(bool) Explicitly converts a single bool value to a double4x2 matrix by converting it to double and assigning it to every component. public static explicit operator double4x2(bool v) 参数 v bool bool to convert to double4x2 返回 double4x2 Converted value. explicit operator double4x2(bool4x2) Explicitly converts a bool4x2 matrix to a double4x2 matrix by componentwise conversion. public static explicit operator double4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to double4x2 返回 double4x2 Converted value. operator >(double, double4x2) Returns the result of a componentwise greater than operation on a double value and a double4x2 matrix. public static bool4x2 operator >(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double4x2 Right hand side double4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(double4x2, double) Returns the result of a componentwise greater than operation on a double4x2 matrix and a double value. public static bool4x2 operator >(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(double4x2, double4x2) Returns the result of a componentwise greater than operation on two double4x2 matrices. public static bool4x2 operator >(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise greater than. rhs double4x2 Right hand side double4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >=(double, double4x2) Returns the result of a componentwise greater or equal operation on a double value and a double4x2 matrix. public static bool4x2 operator >=(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double4x2 Right hand side double4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(double4x2, double) Returns the result of a componentwise greater or equal operation on a double4x2 matrix and a double value. public static bool4x2 operator >=(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(double4x2, double4x2) Returns the result of a componentwise greater or equal operation on two double4x2 matrices. public static bool4x2 operator >=(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise greater or equal. rhs double4x2 Right hand side double4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. implicit operator double4x2(double) Implicitly converts a single double value to a double4x2 matrix by assigning it to every component. public static implicit operator double4x2(double v) 参数 v double double to convert to double4x2 返回 double4x2 Converted value. implicit operator double4x2(int) Implicitly converts a single int value to a double4x2 matrix by converting it to double and assigning it to every component. public static implicit operator double4x2(int v) 参数 v int int to convert to double4x2 返回 double4x2 Converted value. implicit operator double4x2(float) Implicitly converts a single float value to a double4x2 matrix by converting it to double and assigning it to every component. public static implicit operator double4x2(float v) 参数 v float float to convert to double4x2 返回 double4x2 Converted value. implicit operator double4x2(uint) Implicitly converts a single uint value to a double4x2 matrix by converting it to double and assigning it to every component. public static implicit operator double4x2(uint v) 参数 v uint uint to convert to double4x2 返回 double4x2 Converted value. implicit operator double4x2(float4x2) Implicitly converts a float4x2 matrix to a double4x2 matrix by componentwise conversion. public static implicit operator double4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to double4x2 返回 double4x2 Converted value. implicit operator double4x2(int4x2) Implicitly converts a int4x2 matrix to a double4x2 matrix by componentwise conversion. public static implicit operator double4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to double4x2 返回 double4x2 Converted value. implicit operator double4x2(uint4x2) Implicitly converts a uint4x2 matrix to a double4x2 matrix by componentwise conversion. public static implicit operator double4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to double4x2 返回 double4x2 Converted value. operator ++(double4x2) Returns the result of a componentwise increment operation on a double4x2 matrix. public static double4x2 operator ++(double4x2 val) 参数 val double4x2 Value to use when computing the componentwise increment. 返回 double4x2 double4x2 result of the componentwise increment. operator !=(double, double4x2) Returns the result of a componentwise not equal operation on a double value and a double4x2 matrix. public static bool4x2 operator !=(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double4x2 Right hand side double4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(double4x2, double) Returns the result of a componentwise not equal operation on a double4x2 matrix and a double value. public static bool4x2 operator !=(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(double4x2, double4x2) Returns the result of a componentwise not equal operation on two double4x2 matrices. public static bool4x2 operator !=(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise not equal. rhs double4x2 Right hand side double4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator <(double, double4x2) Returns the result of a componentwise less than operation on a double value and a double4x2 matrix. public static bool4x2 operator <(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double4x2 Right hand side double4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(double4x2, double) Returns the result of a componentwise less than operation on a double4x2 matrix and a double value. public static bool4x2 operator <(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(double4x2, double4x2) Returns the result of a componentwise less than operation on two double4x2 matrices. public static bool4x2 operator <(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise less than. rhs double4x2 Right hand side double4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <=(double, double4x2) Returns the result of a componentwise less or equal operation on a double value and a double4x2 matrix. public static bool4x2 operator <=(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double4x2 Right hand side double4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(double4x2, double) Returns the result of a componentwise less or equal operation on a double4x2 matrix and a double value. public static bool4x2 operator <=(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(double4x2, double4x2) Returns the result of a componentwise less or equal operation on two double4x2 matrices. public static bool4x2 operator <=(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise less or equal. rhs double4x2 Right hand side double4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator %(double, double4x2) Returns the result of a componentwise modulus operation on a double value and a double4x2 matrix. public static double4x2 operator %(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double4x2 Right hand side double4x2 to use to compute componentwise modulus. 返回 double4x2 double4x2 result of the componentwise modulus. operator %(double4x2, double) Returns the result of a componentwise modulus operation on a double4x2 matrix and a double value. public static double4x2 operator %(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double4x2 double4x2 result of the componentwise modulus. operator %(double4x2, double4x2) Returns the result of a componentwise modulus operation on two double4x2 matrices. public static double4x2 operator %(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise modulus. rhs double4x2 Right hand side double4x2 to use to compute componentwise modulus. 返回 double4x2 double4x2 result of the componentwise modulus. operator *(double, double4x2) Returns the result of a componentwise multiplication operation on a double value and a double4x2 matrix. public static double4x2 operator *(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double4x2 Right hand side double4x2 to use to compute componentwise multiplication. 返回 double4x2 double4x2 result of the componentwise multiplication. operator *(double4x2, double) Returns the result of a componentwise multiplication operation on a double4x2 matrix and a double value. public static double4x2 operator *(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double4x2 double4x2 result of the componentwise multiplication. operator *(double4x2, double4x2) Returns the result of a componentwise multiplication operation on two double4x2 matrices. public static double4x2 operator *(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise multiplication. rhs double4x2 Right hand side double4x2 to use to compute componentwise multiplication. 返回 double4x2 double4x2 result of the componentwise multiplication. operator -(double, double4x2) Returns the result of a componentwise subtraction operation on a double value and a double4x2 matrix. public static double4x2 operator -(double lhs, double4x2 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double4x2 Right hand side double4x2 to use to compute componentwise subtraction. 返回 double4x2 double4x2 result of the componentwise subtraction. operator -(double4x2, double) Returns the result of a componentwise subtraction operation on a double4x2 matrix and a double value. public static double4x2 operator -(double4x2 lhs, double rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double4x2 double4x2 result of the componentwise subtraction. operator -(double4x2, double4x2) Returns the result of a componentwise subtraction operation on two double4x2 matrices. public static double4x2 operator -(double4x2 lhs, double4x2 rhs) 参数 lhs double4x2 Left hand side double4x2 to use to compute componentwise subtraction. rhs double4x2 Right hand side double4x2 to use to compute componentwise subtraction. 返回 double4x2 double4x2 result of the componentwise subtraction. operator -(double4x2) Returns the result of a componentwise unary minus operation on a double4x2 matrix. public static double4x2 operator -(double4x2 val) 参数 val double4x2 Value to use when computing the componentwise unary minus. 返回 double4x2 double4x2 result of the componentwise unary minus. operator +(double4x2) Returns the result of a componentwise unary plus operation on a double4x2 matrix. public static double4x2 operator +(double4x2 val) 参数 val double4x2 Value to use when computing the componentwise unary plus. 返回 double4x2 double4x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double4x3.html": {
    "href": "reference/Unity.Mathematics.double4x3.html",
    "title": "double4x3 结构 | Fantasy.Net API Reference",
    "keywords": "double4x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x3 matrix of doubles. public struct double4x3 : IEquatable<double4x3>, IFormattable 实现 IEquatable<double4x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double4x3(bool) Constructs a double4x3 matrix from a single bool value by converting it to double and assigning it to every component. public double4x3(bool v) 参数 v bool bool to convert to double4x3 double4x3(double) Constructs a double4x3 matrix from a single double value by assigning it to every component. public double4x3(double v) 参数 v double double to convert to double4x3 double4x3(double, double, double, double, double, double, double, double, double, double, double, double) Constructs a double4x3 matrix from 12 double values given in row-major order. public double4x3(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22, double m30, double m31, double m32) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. m30 double The matrix at row 3, column 0 will be set to this value. m31 double The matrix at row 3, column 1 will be set to this value. m32 double The matrix at row 3, column 2 will be set to this value. double4x3(int) Constructs a double4x3 matrix from a single int value by converting it to double and assigning it to every component. public double4x3(int v) 参数 v int int to convert to double4x3 double4x3(float) Constructs a double4x3 matrix from a single float value by converting it to double and assigning it to every component. public double4x3(float v) 参数 v float float to convert to double4x3 double4x3(uint) Constructs a double4x3 matrix from a single uint value by converting it to double and assigning it to every component. public double4x3(uint v) 参数 v uint uint to convert to double4x3 double4x3(bool4x3) Constructs a double4x3 matrix from a bool4x3 matrix by componentwise conversion. public double4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to double4x3 double4x3(double4, double4, double4) Constructs a double4x3 matrix from three double4 vectors. public double4x3(double4 c0, double4 c1, double4 c2) 参数 c0 double4 The matrix column c0 will be set to this value. c1 double4 The matrix column c1 will be set to this value. c2 double4 The matrix column c2 will be set to this value. double4x3(float4x3) Constructs a double4x3 matrix from a float4x3 matrix by componentwise conversion. public double4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to double4x3 double4x3(int4x3) Constructs a double4x3 matrix from a int4x3 matrix by componentwise conversion. public double4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to double4x3 double4x3(uint4x3) Constructs a double4x3 matrix from a uint4x3 matrix by componentwise conversion. public double4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to double4x3 字段 c0 Column 0 of the matrix. public double4 c0 字段值 double4 c1 Column 1 of the matrix. public double4 c1 字段值 double4 c2 Column 2 of the matrix. public double4 c2 字段值 double4 zero double4x3 zero value. public static readonly double4x3 zero 字段值 double4x3 属性 this[int] Returns the double4 element at a specified index. public ref double4 this[int index] { get; } 参数 index int 属性值 double4 方法 Equals(object) Returns true if the double4x3 is equal to a given double4x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double4x3) Returns true if the double4x3 is equal to a given double4x3, false otherwise. public bool Equals(double4x3 rhs) 参数 rhs double4x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double4x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double4x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double4x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double4x3) Returns the result of a componentwise addition operation on a double value and a double4x3 matrix. public static double4x3 operator +(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double4x3 Right hand side double4x3 to use to compute componentwise addition. 返回 double4x3 double4x3 result of the componentwise addition. operator +(double4x3, double) Returns the result of a componentwise addition operation on a double4x3 matrix and a double value. public static double4x3 operator +(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double4x3 double4x3 result of the componentwise addition. operator +(double4x3, double4x3) Returns the result of a componentwise addition operation on two double4x3 matrices. public static double4x3 operator +(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise addition. rhs double4x3 Right hand side double4x3 to use to compute componentwise addition. 返回 double4x3 double4x3 result of the componentwise addition. operator --(double4x3) Returns the result of a componentwise decrement operation on a double4x3 matrix. public static double4x3 operator --(double4x3 val) 参数 val double4x3 Value to use when computing the componentwise decrement. 返回 double4x3 double4x3 result of the componentwise decrement. operator /(double, double4x3) Returns the result of a componentwise division operation on a double value and a double4x3 matrix. public static double4x3 operator /(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double4x3 Right hand side double4x3 to use to compute componentwise division. 返回 double4x3 double4x3 result of the componentwise division. operator /(double4x3, double) Returns the result of a componentwise division operation on a double4x3 matrix and a double value. public static double4x3 operator /(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double4x3 double4x3 result of the componentwise division. operator /(double4x3, double4x3) Returns the result of a componentwise division operation on two double4x3 matrices. public static double4x3 operator /(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise division. rhs double4x3 Right hand side double4x3 to use to compute componentwise division. 返回 double4x3 double4x3 result of the componentwise division. operator ==(double, double4x3) Returns the result of a componentwise equality operation on a double value and a double4x3 matrix. public static bool4x3 operator ==(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double4x3 Right hand side double4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(double4x3, double) Returns the result of a componentwise equality operation on a double4x3 matrix and a double value. public static bool4x3 operator ==(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(double4x3, double4x3) Returns the result of a componentwise equality operation on two double4x3 matrices. public static bool4x3 operator ==(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise equality. rhs double4x3 Right hand side double4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. explicit operator double4x3(bool) Explicitly converts a single bool value to a double4x3 matrix by converting it to double and assigning it to every component. public static explicit operator double4x3(bool v) 参数 v bool bool to convert to double4x3 返回 double4x3 Converted value. explicit operator double4x3(bool4x3) Explicitly converts a bool4x3 matrix to a double4x3 matrix by componentwise conversion. public static explicit operator double4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to double4x3 返回 double4x3 Converted value. operator >(double, double4x3) Returns the result of a componentwise greater than operation on a double value and a double4x3 matrix. public static bool4x3 operator >(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double4x3 Right hand side double4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(double4x3, double) Returns the result of a componentwise greater than operation on a double4x3 matrix and a double value. public static bool4x3 operator >(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(double4x3, double4x3) Returns the result of a componentwise greater than operation on two double4x3 matrices. public static bool4x3 operator >(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise greater than. rhs double4x3 Right hand side double4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >=(double, double4x3) Returns the result of a componentwise greater or equal operation on a double value and a double4x3 matrix. public static bool4x3 operator >=(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double4x3 Right hand side double4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(double4x3, double) Returns the result of a componentwise greater or equal operation on a double4x3 matrix and a double value. public static bool4x3 operator >=(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(double4x3, double4x3) Returns the result of a componentwise greater or equal operation on two double4x3 matrices. public static bool4x3 operator >=(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise greater or equal. rhs double4x3 Right hand side double4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. implicit operator double4x3(double) Implicitly converts a single double value to a double4x3 matrix by assigning it to every component. public static implicit operator double4x3(double v) 参数 v double double to convert to double4x3 返回 double4x3 Converted value. implicit operator double4x3(int) Implicitly converts a single int value to a double4x3 matrix by converting it to double and assigning it to every component. public static implicit operator double4x3(int v) 参数 v int int to convert to double4x3 返回 double4x3 Converted value. implicit operator double4x3(float) Implicitly converts a single float value to a double4x3 matrix by converting it to double and assigning it to every component. public static implicit operator double4x3(float v) 参数 v float float to convert to double4x3 返回 double4x3 Converted value. implicit operator double4x3(uint) Implicitly converts a single uint value to a double4x3 matrix by converting it to double and assigning it to every component. public static implicit operator double4x3(uint v) 参数 v uint uint to convert to double4x3 返回 double4x3 Converted value. implicit operator double4x3(float4x3) Implicitly converts a float4x3 matrix to a double4x3 matrix by componentwise conversion. public static implicit operator double4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to double4x3 返回 double4x3 Converted value. implicit operator double4x3(int4x3) Implicitly converts a int4x3 matrix to a double4x3 matrix by componentwise conversion. public static implicit operator double4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to double4x3 返回 double4x3 Converted value. implicit operator double4x3(uint4x3) Implicitly converts a uint4x3 matrix to a double4x3 matrix by componentwise conversion. public static implicit operator double4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to double4x3 返回 double4x3 Converted value. operator ++(double4x3) Returns the result of a componentwise increment operation on a double4x3 matrix. public static double4x3 operator ++(double4x3 val) 参数 val double4x3 Value to use when computing the componentwise increment. 返回 double4x3 double4x3 result of the componentwise increment. operator !=(double, double4x3) Returns the result of a componentwise not equal operation on a double value and a double4x3 matrix. public static bool4x3 operator !=(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double4x3 Right hand side double4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(double4x3, double) Returns the result of a componentwise not equal operation on a double4x3 matrix and a double value. public static bool4x3 operator !=(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(double4x3, double4x3) Returns the result of a componentwise not equal operation on two double4x3 matrices. public static bool4x3 operator !=(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise not equal. rhs double4x3 Right hand side double4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator <(double, double4x3) Returns the result of a componentwise less than operation on a double value and a double4x3 matrix. public static bool4x3 operator <(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double4x3 Right hand side double4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(double4x3, double) Returns the result of a componentwise less than operation on a double4x3 matrix and a double value. public static bool4x3 operator <(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(double4x3, double4x3) Returns the result of a componentwise less than operation on two double4x3 matrices. public static bool4x3 operator <(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise less than. rhs double4x3 Right hand side double4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <=(double, double4x3) Returns the result of a componentwise less or equal operation on a double value and a double4x3 matrix. public static bool4x3 operator <=(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double4x3 Right hand side double4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(double4x3, double) Returns the result of a componentwise less or equal operation on a double4x3 matrix and a double value. public static bool4x3 operator <=(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(double4x3, double4x3) Returns the result of a componentwise less or equal operation on two double4x3 matrices. public static bool4x3 operator <=(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise less or equal. rhs double4x3 Right hand side double4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator %(double, double4x3) Returns the result of a componentwise modulus operation on a double value and a double4x3 matrix. public static double4x3 operator %(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double4x3 Right hand side double4x3 to use to compute componentwise modulus. 返回 double4x3 double4x3 result of the componentwise modulus. operator %(double4x3, double) Returns the result of a componentwise modulus operation on a double4x3 matrix and a double value. public static double4x3 operator %(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double4x3 double4x3 result of the componentwise modulus. operator %(double4x3, double4x3) Returns the result of a componentwise modulus operation on two double4x3 matrices. public static double4x3 operator %(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise modulus. rhs double4x3 Right hand side double4x3 to use to compute componentwise modulus. 返回 double4x3 double4x3 result of the componentwise modulus. operator *(double, double4x3) Returns the result of a componentwise multiplication operation on a double value and a double4x3 matrix. public static double4x3 operator *(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double4x3 Right hand side double4x3 to use to compute componentwise multiplication. 返回 double4x3 double4x3 result of the componentwise multiplication. operator *(double4x3, double) Returns the result of a componentwise multiplication operation on a double4x3 matrix and a double value. public static double4x3 operator *(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double4x3 double4x3 result of the componentwise multiplication. operator *(double4x3, double4x3) Returns the result of a componentwise multiplication operation on two double4x3 matrices. public static double4x3 operator *(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise multiplication. rhs double4x3 Right hand side double4x3 to use to compute componentwise multiplication. 返回 double4x3 double4x3 result of the componentwise multiplication. operator -(double, double4x3) Returns the result of a componentwise subtraction operation on a double value and a double4x3 matrix. public static double4x3 operator -(double lhs, double4x3 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double4x3 Right hand side double4x3 to use to compute componentwise subtraction. 返回 double4x3 double4x3 result of the componentwise subtraction. operator -(double4x3, double) Returns the result of a componentwise subtraction operation on a double4x3 matrix and a double value. public static double4x3 operator -(double4x3 lhs, double rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double4x3 double4x3 result of the componentwise subtraction. operator -(double4x3, double4x3) Returns the result of a componentwise subtraction operation on two double4x3 matrices. public static double4x3 operator -(double4x3 lhs, double4x3 rhs) 参数 lhs double4x3 Left hand side double4x3 to use to compute componentwise subtraction. rhs double4x3 Right hand side double4x3 to use to compute componentwise subtraction. 返回 double4x3 double4x3 result of the componentwise subtraction. operator -(double4x3) Returns the result of a componentwise unary minus operation on a double4x3 matrix. public static double4x3 operator -(double4x3 val) 参数 val double4x3 Value to use when computing the componentwise unary minus. 返回 double4x3 double4x3 result of the componentwise unary minus. operator +(double4x3) Returns the result of a componentwise unary plus operation on a double4x3 matrix. public static double4x3 operator +(double4x3 val) 参数 val double4x3 Value to use when computing the componentwise unary plus. 返回 double4x3 double4x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.double4x4.html": {
    "href": "reference/Unity.Mathematics.double4x4.html",
    "title": "double4x4 结构 | Fantasy.Net API Reference",
    "keywords": "double4x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x4 matrix of doubles. public struct double4x4 : IEquatable<double4x4>, IFormattable 实现 IEquatable<double4x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 double4x4(bool) Constructs a double4x4 matrix from a single bool value by converting it to double and assigning it to every component. public double4x4(bool v) 参数 v bool bool to convert to double4x4 double4x4(double) Constructs a double4x4 matrix from a single double value by assigning it to every component. public double4x4(double v) 参数 v double double to convert to double4x4 double4x4(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double) Constructs a double4x4 matrix from 16 double values given in row-major order. public double4x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23, double m30, double m31, double m32, double m33) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m03 double The matrix at row 0, column 3 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m13 double The matrix at row 1, column 3 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. m23 double The matrix at row 2, column 3 will be set to this value. m30 double The matrix at row 3, column 0 will be set to this value. m31 double The matrix at row 3, column 1 will be set to this value. m32 double The matrix at row 3, column 2 will be set to this value. m33 double The matrix at row 3, column 3 will be set to this value. double4x4(int) Constructs a double4x4 matrix from a single int value by converting it to double and assigning it to every component. public double4x4(int v) 参数 v int int to convert to double4x4 double4x4(float) Constructs a double4x4 matrix from a single float value by converting it to double and assigning it to every component. public double4x4(float v) 参数 v float float to convert to double4x4 double4x4(uint) Constructs a double4x4 matrix from a single uint value by converting it to double and assigning it to every component. public double4x4(uint v) 参数 v uint uint to convert to double4x4 double4x4(bool4x4) Constructs a double4x4 matrix from a bool4x4 matrix by componentwise conversion. public double4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to double4x4 double4x4(double4, double4, double4, double4) Constructs a double4x4 matrix from four double4 vectors. public double4x4(double4 c0, double4 c1, double4 c2, double4 c3) 参数 c0 double4 The matrix column c0 will be set to this value. c1 double4 The matrix column c1 will be set to this value. c2 double4 The matrix column c2 will be set to this value. c3 double4 The matrix column c3 will be set to this value. double4x4(float4x4) Constructs a double4x4 matrix from a float4x4 matrix by componentwise conversion. public double4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to double4x4 double4x4(int4x4) Constructs a double4x4 matrix from a int4x4 matrix by componentwise conversion. public double4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to double4x4 double4x4(uint4x4) Constructs a double4x4 matrix from a uint4x4 matrix by componentwise conversion. public double4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to double4x4 字段 c0 Column 0 of the matrix. public double4 c0 字段值 double4 c1 Column 1 of the matrix. public double4 c1 字段值 double4 c2 Column 2 of the matrix. public double4 c2 字段值 double4 c3 Column 3 of the matrix. public double4 c3 字段值 double4 identity double4x4 identity transform. public static readonly double4x4 identity 字段值 double4x4 zero double4x4 zero value. public static readonly double4x4 zero 字段值 double4x4 属性 this[int] Returns the double4 element at a specified index. public ref double4 this[int index] { get; } 参数 index int 属性值 double4 方法 Equals(object) Returns true if the double4x4 is equal to a given double4x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(double4x4) Returns true if the double4x4 is equal to a given double4x4, false otherwise. public bool Equals(double4x4 rhs) 参数 rhs double4x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the double4x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the double4x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the double4x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(double, double4x4) Returns the result of a componentwise addition operation on a double value and a double4x4 matrix. public static double4x4 operator +(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise addition. rhs double4x4 Right hand side double4x4 to use to compute componentwise addition. 返回 double4x4 double4x4 result of the componentwise addition. operator +(double4x4, double) Returns the result of a componentwise addition operation on a double4x4 matrix and a double value. public static double4x4 operator +(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise addition. rhs double Right hand side double to use to compute componentwise addition. 返回 double4x4 double4x4 result of the componentwise addition. operator +(double4x4, double4x4) Returns the result of a componentwise addition operation on two double4x4 matrices. public static double4x4 operator +(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise addition. rhs double4x4 Right hand side double4x4 to use to compute componentwise addition. 返回 double4x4 double4x4 result of the componentwise addition. operator --(double4x4) Returns the result of a componentwise decrement operation on a double4x4 matrix. public static double4x4 operator --(double4x4 val) 参数 val double4x4 Value to use when computing the componentwise decrement. 返回 double4x4 double4x4 result of the componentwise decrement. operator /(double, double4x4) Returns the result of a componentwise division operation on a double value and a double4x4 matrix. public static double4x4 operator /(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise division. rhs double4x4 Right hand side double4x4 to use to compute componentwise division. 返回 double4x4 double4x4 result of the componentwise division. operator /(double4x4, double) Returns the result of a componentwise division operation on a double4x4 matrix and a double value. public static double4x4 operator /(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise division. rhs double Right hand side double to use to compute componentwise division. 返回 double4x4 double4x4 result of the componentwise division. operator /(double4x4, double4x4) Returns the result of a componentwise division operation on two double4x4 matrices. public static double4x4 operator /(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise division. rhs double4x4 Right hand side double4x4 to use to compute componentwise division. 返回 double4x4 double4x4 result of the componentwise division. operator ==(double, double4x4) Returns the result of a componentwise equality operation on a double value and a double4x4 matrix. public static bool4x4 operator ==(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise equality. rhs double4x4 Right hand side double4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(double4x4, double) Returns the result of a componentwise equality operation on a double4x4 matrix and a double value. public static bool4x4 operator ==(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise equality. rhs double Right hand side double to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(double4x4, double4x4) Returns the result of a componentwise equality operation on two double4x4 matrices. public static bool4x4 operator ==(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise equality. rhs double4x4 Right hand side double4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. explicit operator double4x4(bool) Explicitly converts a single bool value to a double4x4 matrix by converting it to double and assigning it to every component. public static explicit operator double4x4(bool v) 参数 v bool bool to convert to double4x4 返回 double4x4 Converted value. explicit operator double4x4(bool4x4) Explicitly converts a bool4x4 matrix to a double4x4 matrix by componentwise conversion. public static explicit operator double4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to double4x4 返回 double4x4 Converted value. operator >(double, double4x4) Returns the result of a componentwise greater than operation on a double value and a double4x4 matrix. public static bool4x4 operator >(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater than. rhs double4x4 Right hand side double4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(double4x4, double) Returns the result of a componentwise greater than operation on a double4x4 matrix and a double value. public static bool4x4 operator >(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise greater than. rhs double Right hand side double to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(double4x4, double4x4) Returns the result of a componentwise greater than operation on two double4x4 matrices. public static bool4x4 operator >(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise greater than. rhs double4x4 Right hand side double4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >=(double, double4x4) Returns the result of a componentwise greater or equal operation on a double value and a double4x4 matrix. public static bool4x4 operator >=(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise greater or equal. rhs double4x4 Right hand side double4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(double4x4, double) Returns the result of a componentwise greater or equal operation on a double4x4 matrix and a double value. public static bool4x4 operator >=(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise greater or equal. rhs double Right hand side double to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(double4x4, double4x4) Returns the result of a componentwise greater or equal operation on two double4x4 matrices. public static bool4x4 operator >=(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise greater or equal. rhs double4x4 Right hand side double4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. implicit operator double4x4(double) Implicitly converts a single double value to a double4x4 matrix by assigning it to every component. public static implicit operator double4x4(double v) 参数 v double double to convert to double4x4 返回 double4x4 Converted value. implicit operator double4x4(int) Implicitly converts a single int value to a double4x4 matrix by converting it to double and assigning it to every component. public static implicit operator double4x4(int v) 参数 v int int to convert to double4x4 返回 double4x4 Converted value. implicit operator double4x4(float) Implicitly converts a single float value to a double4x4 matrix by converting it to double and assigning it to every component. public static implicit operator double4x4(float v) 参数 v float float to convert to double4x4 返回 double4x4 Converted value. implicit operator double4x4(uint) Implicitly converts a single uint value to a double4x4 matrix by converting it to double and assigning it to every component. public static implicit operator double4x4(uint v) 参数 v uint uint to convert to double4x4 返回 double4x4 Converted value. implicit operator double4x4(float4x4) Implicitly converts a float4x4 matrix to a double4x4 matrix by componentwise conversion. public static implicit operator double4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to double4x4 返回 double4x4 Converted value. implicit operator double4x4(int4x4) Implicitly converts a int4x4 matrix to a double4x4 matrix by componentwise conversion. public static implicit operator double4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to double4x4 返回 double4x4 Converted value. implicit operator double4x4(uint4x4) Implicitly converts a uint4x4 matrix to a double4x4 matrix by componentwise conversion. public static implicit operator double4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to double4x4 返回 double4x4 Converted value. operator ++(double4x4) Returns the result of a componentwise increment operation on a double4x4 matrix. public static double4x4 operator ++(double4x4 val) 参数 val double4x4 Value to use when computing the componentwise increment. 返回 double4x4 double4x4 result of the componentwise increment. operator !=(double, double4x4) Returns the result of a componentwise not equal operation on a double value and a double4x4 matrix. public static bool4x4 operator !=(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise not equal. rhs double4x4 Right hand side double4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(double4x4, double) Returns the result of a componentwise not equal operation on a double4x4 matrix and a double value. public static bool4x4 operator !=(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise not equal. rhs double Right hand side double to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(double4x4, double4x4) Returns the result of a componentwise not equal operation on two double4x4 matrices. public static bool4x4 operator !=(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise not equal. rhs double4x4 Right hand side double4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator <(double, double4x4) Returns the result of a componentwise less than operation on a double value and a double4x4 matrix. public static bool4x4 operator <(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less than. rhs double4x4 Right hand side double4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(double4x4, double) Returns the result of a componentwise less than operation on a double4x4 matrix and a double value. public static bool4x4 operator <(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise less than. rhs double Right hand side double to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(double4x4, double4x4) Returns the result of a componentwise less than operation on two double4x4 matrices. public static bool4x4 operator <(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise less than. rhs double4x4 Right hand side double4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <=(double, double4x4) Returns the result of a componentwise less or equal operation on a double value and a double4x4 matrix. public static bool4x4 operator <=(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise less or equal. rhs double4x4 Right hand side double4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(double4x4, double) Returns the result of a componentwise less or equal operation on a double4x4 matrix and a double value. public static bool4x4 operator <=(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise less or equal. rhs double Right hand side double to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(double4x4, double4x4) Returns the result of a componentwise less or equal operation on two double4x4 matrices. public static bool4x4 operator <=(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise less or equal. rhs double4x4 Right hand side double4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator %(double, double4x4) Returns the result of a componentwise modulus operation on a double value and a double4x4 matrix. public static double4x4 operator %(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise modulus. rhs double4x4 Right hand side double4x4 to use to compute componentwise modulus. 返回 double4x4 double4x4 result of the componentwise modulus. operator %(double4x4, double) Returns the result of a componentwise modulus operation on a double4x4 matrix and a double value. public static double4x4 operator %(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise modulus. rhs double Right hand side double to use to compute componentwise modulus. 返回 double4x4 double4x4 result of the componentwise modulus. operator %(double4x4, double4x4) Returns the result of a componentwise modulus operation on two double4x4 matrices. public static double4x4 operator %(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise modulus. rhs double4x4 Right hand side double4x4 to use to compute componentwise modulus. 返回 double4x4 double4x4 result of the componentwise modulus. operator *(double, double4x4) Returns the result of a componentwise multiplication operation on a double value and a double4x4 matrix. public static double4x4 operator *(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise multiplication. rhs double4x4 Right hand side double4x4 to use to compute componentwise multiplication. 返回 double4x4 double4x4 result of the componentwise multiplication. operator *(double4x4, double) Returns the result of a componentwise multiplication operation on a double4x4 matrix and a double value. public static double4x4 operator *(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise multiplication. rhs double Right hand side double to use to compute componentwise multiplication. 返回 double4x4 double4x4 result of the componentwise multiplication. operator *(double4x4, double4x4) Returns the result of a componentwise multiplication operation on two double4x4 matrices. public static double4x4 operator *(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise multiplication. rhs double4x4 Right hand side double4x4 to use to compute componentwise multiplication. 返回 double4x4 double4x4 result of the componentwise multiplication. operator -(double, double4x4) Returns the result of a componentwise subtraction operation on a double value and a double4x4 matrix. public static double4x4 operator -(double lhs, double4x4 rhs) 参数 lhs double Left hand side double to use to compute componentwise subtraction. rhs double4x4 Right hand side double4x4 to use to compute componentwise subtraction. 返回 double4x4 double4x4 result of the componentwise subtraction. operator -(double4x4, double) Returns the result of a componentwise subtraction operation on a double4x4 matrix and a double value. public static double4x4 operator -(double4x4 lhs, double rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise subtraction. rhs double Right hand side double to use to compute componentwise subtraction. 返回 double4x4 double4x4 result of the componentwise subtraction. operator -(double4x4, double4x4) Returns the result of a componentwise subtraction operation on two double4x4 matrices. public static double4x4 operator -(double4x4 lhs, double4x4 rhs) 参数 lhs double4x4 Left hand side double4x4 to use to compute componentwise subtraction. rhs double4x4 Right hand side double4x4 to use to compute componentwise subtraction. 返回 double4x4 double4x4 result of the componentwise subtraction. operator -(double4x4) Returns the result of a componentwise unary minus operation on a double4x4 matrix. public static double4x4 operator -(double4x4 val) 参数 val double4x4 Value to use when computing the componentwise unary minus. 返回 double4x4 double4x4 result of the componentwise unary minus. operator +(double4x4) Returns the result of a componentwise unary plus operation on a double4x4 matrix. public static double4x4 operator +(double4x4 val) 参数 val double4x4 Value to use when computing the componentwise unary plus. 返回 double4x4 double4x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float2.html": {
    "href": "reference/Unity.Mathematics.float2.html",
    "title": "float2 结构 | Fantasy.Net API Reference",
    "keywords": "float2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2 component vector of floats. public struct float2 : IEquatable<float2>, IFormattable 实现 IEquatable<float2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float2(bool) Constructs a float2 vector from a single bool value by converting it to float and assigning it to every component. public float2(bool v) 参数 v bool bool to convert to float2 float2(double) Constructs a float2 vector from a single double value by converting it to float and assigning it to every component. public float2(double v) 参数 v double double to convert to float2 float2(int) Constructs a float2 vector from a single int value by converting it to float and assigning it to every component. public float2(int v) 参数 v int int to convert to float2 float2(float) Constructs a float2 vector from a single float value by assigning it to every component. public float2(float v) 参数 v float float to convert to float2 float2(float, float) Constructs a float2 vector from two float values. public float2(float x, float y) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. float2(uint) Constructs a float2 vector from a single uint value by converting it to float and assigning it to every component. public float2(uint v) 参数 v uint uint to convert to float2 float2(bool2) Constructs a float2 vector from a bool2 vector by componentwise conversion. public float2(bool2 v) 参数 v bool2 bool2 to convert to float2 float2(double2) Constructs a float2 vector from a double2 vector by componentwise conversion. public float2(double2 v) 参数 v double2 double2 to convert to float2 float2(float2) Constructs a float2 vector from a float2 vector. public float2(float2 xy) 参数 xy float2 The constructed vector's xy components will be set to this value. float2(half) Constructs a float2 vector from a single half value by converting it to float and assigning it to every component. public float2(half v) 参数 v half half to convert to float2 float2(half2) Constructs a float2 vector from a half2 vector by componentwise conversion. public float2(half2 v) 参数 v half2 half2 to convert to float2 float2(int2) Constructs a float2 vector from a int2 vector by componentwise conversion. public float2(int2 v) 参数 v int2 int2 to convert to float2 float2(uint2) Constructs a float2 vector from a uint2 vector by componentwise conversion. public float2(uint2 v) 参数 v uint2 uint2 to convert to float2 字段 x x component of the vector. public float x 字段值 float y y component of the vector. public float y 字段值 float zero float2 zero value. public static readonly float2 zero 字段值 float2 属性 this[int] Returns the float element at a specified index. public float this[int index] { get; set; } 参数 index int 属性值 float 方法 Equals(object) Returns true if the float2 is equal to a given float2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float2) Returns true if the float2 is equal to a given float2, false otherwise. public bool Equals(float2 rhs) 参数 rhs float2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float2) Returns the result of a componentwise addition operation on a float value and a float2 vector. public static float2 operator +(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float2 Right hand side float2 to use to compute componentwise addition. 返回 float2 float2 result of the componentwise addition. operator +(float2, float) Returns the result of a componentwise addition operation on a float2 vector and a float value. public static float2 operator +(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float2 float2 result of the componentwise addition. operator +(float2, float2) Returns the result of a componentwise addition operation on two float2 vectors. public static float2 operator +(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise addition. rhs float2 Right hand side float2 to use to compute componentwise addition. 返回 float2 float2 result of the componentwise addition. operator --(float2) Returns the result of a componentwise decrement operation on a float2 vector. public static float2 operator --(float2 val) 参数 val float2 Value to use when computing the componentwise decrement. 返回 float2 float2 result of the componentwise decrement. operator /(float, float2) Returns the result of a componentwise division operation on a float value and a float2 vector. public static float2 operator /(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float2 Right hand side float2 to use to compute componentwise division. 返回 float2 float2 result of the componentwise division. operator /(float2, float) Returns the result of a componentwise division operation on a float2 vector and a float value. public static float2 operator /(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float2 float2 result of the componentwise division. operator /(float2, float2) Returns the result of a componentwise division operation on two float2 vectors. public static float2 operator /(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise division. rhs float2 Right hand side float2 to use to compute componentwise division. 返回 float2 float2 result of the componentwise division. operator ==(float, float2) Returns the result of a componentwise equality operation on a float value and a float2 vector. public static bool2 operator ==(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float2 Right hand side float2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(float2, float) Returns the result of a componentwise equality operation on a float2 vector and a float value. public static bool2 operator ==(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(float2, float2) Returns the result of a componentwise equality operation on two float2 vectors. public static bool2 operator ==(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise equality. rhs float2 Right hand side float2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. explicit operator float2(bool) Explicitly converts a single bool value to a float2 vector by converting it to float and assigning it to every component. public static explicit operator float2(bool v) 参数 v bool bool to convert to float2 返回 float2 Converted value. explicit operator float2(double) Explicitly converts a single double value to a float2 vector by converting it to float and assigning it to every component. public static explicit operator float2(double v) 参数 v double double to convert to float2 返回 float2 Converted value. explicit operator float2(bool2) Explicitly converts a bool2 vector to a float2 vector by componentwise conversion. public static explicit operator float2(bool2 v) 参数 v bool2 bool2 to convert to float2 返回 float2 Converted value. explicit operator float2(double2) Explicitly converts a double2 vector to a float2 vector by componentwise conversion. public static explicit operator float2(double2 v) 参数 v double2 double2 to convert to float2 返回 float2 Converted value. operator >(float, float2) Returns the result of a componentwise greater than operation on a float value and a float2 vector. public static bool2 operator >(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float2 Right hand side float2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(float2, float) Returns the result of a componentwise greater than operation on a float2 vector and a float value. public static bool2 operator >(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(float2, float2) Returns the result of a componentwise greater than operation on two float2 vectors. public static bool2 operator >(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise greater than. rhs float2 Right hand side float2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >=(float, float2) Returns the result of a componentwise greater or equal operation on a float value and a float2 vector. public static bool2 operator >=(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float2 Right hand side float2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(float2, float) Returns the result of a componentwise greater or equal operation on a float2 vector and a float value. public static bool2 operator >=(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(float2, float2) Returns the result of a componentwise greater or equal operation on two float2 vectors. public static bool2 operator >=(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise greater or equal. rhs float2 Right hand side float2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. implicit operator float2(int) Implicitly converts a single int value to a float2 vector by converting it to float and assigning it to every component. public static implicit operator float2(int v) 参数 v int int to convert to float2 返回 float2 Converted value. implicit operator float2(float) Implicitly converts a single float value to a float2 vector by assigning it to every component. public static implicit operator float2(float v) 参数 v float float to convert to float2 返回 float2 Converted value. implicit operator float2(uint) Implicitly converts a single uint value to a float2 vector by converting it to float and assigning it to every component. public static implicit operator float2(uint v) 参数 v uint uint to convert to float2 返回 float2 Converted value. implicit operator float2(half) Implicitly converts a single half value to a float2 vector by converting it to float and assigning it to every component. public static implicit operator float2(half v) 参数 v half half to convert to float2 返回 float2 Converted value. implicit operator float2(half2) Implicitly converts a half2 vector to a float2 vector by componentwise conversion. public static implicit operator float2(half2 v) 参数 v half2 half2 to convert to float2 返回 float2 Converted value. implicit operator float2(int2) Implicitly converts a int2 vector to a float2 vector by componentwise conversion. public static implicit operator float2(int2 v) 参数 v int2 int2 to convert to float2 返回 float2 Converted value. implicit operator float2(uint2) Implicitly converts a uint2 vector to a float2 vector by componentwise conversion. public static implicit operator float2(uint2 v) 参数 v uint2 uint2 to convert to float2 返回 float2 Converted value. operator ++(float2) Returns the result of a componentwise increment operation on a float2 vector. public static float2 operator ++(float2 val) 参数 val float2 Value to use when computing the componentwise increment. 返回 float2 float2 result of the componentwise increment. operator !=(float, float2) Returns the result of a componentwise not equal operation on a float value and a float2 vector. public static bool2 operator !=(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float2 Right hand side float2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(float2, float) Returns the result of a componentwise not equal operation on a float2 vector and a float value. public static bool2 operator !=(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(float2, float2) Returns the result of a componentwise not equal operation on two float2 vectors. public static bool2 operator !=(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise not equal. rhs float2 Right hand side float2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator <(float, float2) Returns the result of a componentwise less than operation on a float value and a float2 vector. public static bool2 operator <(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float2 Right hand side float2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(float2, float) Returns the result of a componentwise less than operation on a float2 vector and a float value. public static bool2 operator <(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(float2, float2) Returns the result of a componentwise less than operation on two float2 vectors. public static bool2 operator <(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise less than. rhs float2 Right hand side float2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <=(float, float2) Returns the result of a componentwise less or equal operation on a float value and a float2 vector. public static bool2 operator <=(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float2 Right hand side float2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(float2, float) Returns the result of a componentwise less or equal operation on a float2 vector and a float value. public static bool2 operator <=(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(float2, float2) Returns the result of a componentwise less or equal operation on two float2 vectors. public static bool2 operator <=(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise less or equal. rhs float2 Right hand side float2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator %(float, float2) Returns the result of a componentwise modulus operation on a float value and a float2 vector. public static float2 operator %(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float2 Right hand side float2 to use to compute componentwise modulus. 返回 float2 float2 result of the componentwise modulus. operator %(float2, float) Returns the result of a componentwise modulus operation on a float2 vector and a float value. public static float2 operator %(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float2 float2 result of the componentwise modulus. operator %(float2, float2) Returns the result of a componentwise modulus operation on two float2 vectors. public static float2 operator %(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise modulus. rhs float2 Right hand side float2 to use to compute componentwise modulus. 返回 float2 float2 result of the componentwise modulus. operator *(float, float2) Returns the result of a componentwise multiplication operation on a float value and a float2 vector. public static float2 operator *(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float2 Right hand side float2 to use to compute componentwise multiplication. 返回 float2 float2 result of the componentwise multiplication. operator *(float2, float) Returns the result of a componentwise multiplication operation on a float2 vector and a float value. public static float2 operator *(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float2 float2 result of the componentwise multiplication. operator *(float2, float2) Returns the result of a componentwise multiplication operation on two float2 vectors. public static float2 operator *(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise multiplication. rhs float2 Right hand side float2 to use to compute componentwise multiplication. 返回 float2 float2 result of the componentwise multiplication. operator -(float, float2) Returns the result of a componentwise subtraction operation on a float value and a float2 vector. public static float2 operator -(float lhs, float2 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float2 Right hand side float2 to use to compute componentwise subtraction. 返回 float2 float2 result of the componentwise subtraction. operator -(float2, float) Returns the result of a componentwise subtraction operation on a float2 vector and a float value. public static float2 operator -(float2 lhs, float rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float2 float2 result of the componentwise subtraction. operator -(float2, float2) Returns the result of a componentwise subtraction operation on two float2 vectors. public static float2 operator -(float2 lhs, float2 rhs) 参数 lhs float2 Left hand side float2 to use to compute componentwise subtraction. rhs float2 Right hand side float2 to use to compute componentwise subtraction. 返回 float2 float2 result of the componentwise subtraction. operator -(float2) Returns the result of a componentwise unary minus operation on a float2 vector. public static float2 operator -(float2 val) 参数 val float2 Value to use when computing the componentwise unary minus. 返回 float2 float2 result of the componentwise unary minus. operator +(float2) Returns the result of a componentwise unary plus operation on a float2 vector. public static float2 operator +(float2 val) 参数 val float2 Value to use when computing the componentwise unary plus. 返回 float2 float2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float2x2.html": {
    "href": "reference/Unity.Mathematics.float2x2.html",
    "title": "float2x2 结构 | Fantasy.Net API Reference",
    "keywords": "float2x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x2 matrix of floats. public struct float2x2 : IEquatable<float2x2>, IFormattable 实现 IEquatable<float2x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float2x2(bool) Constructs a float2x2 matrix from a single bool value by converting it to float and assigning it to every component. public float2x2(bool v) 参数 v bool bool to convert to float2x2 float2x2(double) Constructs a float2x2 matrix from a single double value by converting it to float and assigning it to every component. public float2x2(double v) 参数 v double double to convert to float2x2 float2x2(int) Constructs a float2x2 matrix from a single int value by converting it to float and assigning it to every component. public float2x2(int v) 参数 v int int to convert to float2x2 float2x2(float) Constructs a float2x2 matrix from a single float value by assigning it to every component. public float2x2(float v) 参数 v float float to convert to float2x2 float2x2(float, float, float, float) Constructs a float2x2 matrix from 4 float values given in row-major order. public float2x2(float m00, float m01, float m10, float m11) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. float2x2(uint) Constructs a float2x2 matrix from a single uint value by converting it to float and assigning it to every component. public float2x2(uint v) 参数 v uint uint to convert to float2x2 float2x2(bool2x2) Constructs a float2x2 matrix from a bool2x2 matrix by componentwise conversion. public float2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to float2x2 float2x2(double2x2) Constructs a float2x2 matrix from a double2x2 matrix by componentwise conversion. public float2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to float2x2 float2x2(float2, float2) Constructs a float2x2 matrix from two float2 vectors. public float2x2(float2 c0, float2 c1) 参数 c0 float2 The matrix column c0 will be set to this value. c1 float2 The matrix column c1 will be set to this value. float2x2(int2x2) Constructs a float2x2 matrix from a int2x2 matrix by componentwise conversion. public float2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to float2x2 float2x2(uint2x2) Constructs a float2x2 matrix from a uint2x2 matrix by componentwise conversion. public float2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to float2x2 字段 c0 Column 0 of the matrix. public float2 c0 字段值 float2 c1 Column 1 of the matrix. public float2 c1 字段值 float2 identity float2x2 identity transform. public static readonly float2x2 identity 字段值 float2x2 zero float2x2 zero value. public static readonly float2x2 zero 字段值 float2x2 属性 this[int] Returns the float2 element at a specified index. public ref float2 this[int index] { get; } 参数 index int 属性值 float2 方法 Equals(object) Returns true if the float2x2 is equal to a given float2x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float2x2) Returns true if the float2x2 is equal to a given float2x2, false otherwise. public bool Equals(float2x2 rhs) 参数 rhs float2x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float2x2. public override int GetHashCode() 返回 int The computed hash code. Rotate(float) Computes a float2x2 matrix representing a counter-clockwise rotation by an angle in radians. public static float2x2 Rotate(float angle) 参数 angle float Rotation angle in radians. 返回 float2x2 Returns the 2x2 rotation matrix. 备注 A positive rotation angle will produce a counter-clockwise rotation and a negative rotation angle will produce a clockwise rotation. Scale(float) Returns a float2x2 matrix representing a uniform scaling of both axes by s. public static float2x2 Scale(float s) 参数 s float The scaling factor. 返回 float2x2 The float2x2 matrix representing uniform scale by s. Scale(float, float) Returns a float2x2 matrix representing a non-uniform axis scaling by x and y. public static float2x2 Scale(float x, float y) 参数 x float The x-axis scaling factor. y float The y-axis scaling factor. 返回 float2x2 The float2x2 matrix representing a non-uniform scale. Scale(float2) Returns a float2x2 matrix representing a non-uniform axis scaling by the components of the float2 vector v. public static float2x2 Scale(float2 v) 参数 v float2 The float2 containing the x and y axis scaling factors. 返回 float2x2 The float2x2 matrix representing a non-uniform scale. ToString() Returns a string representation of the float2x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float2x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float2x2) Returns the result of a componentwise addition operation on a float value and a float2x2 matrix. public static float2x2 operator +(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float2x2 Right hand side float2x2 to use to compute componentwise addition. 返回 float2x2 float2x2 result of the componentwise addition. operator +(float2x2, float) Returns the result of a componentwise addition operation on a float2x2 matrix and a float value. public static float2x2 operator +(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float2x2 float2x2 result of the componentwise addition. operator +(float2x2, float2x2) Returns the result of a componentwise addition operation on two float2x2 matrices. public static float2x2 operator +(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise addition. rhs float2x2 Right hand side float2x2 to use to compute componentwise addition. 返回 float2x2 float2x2 result of the componentwise addition. operator --(float2x2) Returns the result of a componentwise decrement operation on a float2x2 matrix. public static float2x2 operator --(float2x2 val) 参数 val float2x2 Value to use when computing the componentwise decrement. 返回 float2x2 float2x2 result of the componentwise decrement. operator /(float, float2x2) Returns the result of a componentwise division operation on a float value and a float2x2 matrix. public static float2x2 operator /(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float2x2 Right hand side float2x2 to use to compute componentwise division. 返回 float2x2 float2x2 result of the componentwise division. operator /(float2x2, float) Returns the result of a componentwise division operation on a float2x2 matrix and a float value. public static float2x2 operator /(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float2x2 float2x2 result of the componentwise division. operator /(float2x2, float2x2) Returns the result of a componentwise division operation on two float2x2 matrices. public static float2x2 operator /(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise division. rhs float2x2 Right hand side float2x2 to use to compute componentwise division. 返回 float2x2 float2x2 result of the componentwise division. operator ==(float, float2x2) Returns the result of a componentwise equality operation on a float value and a float2x2 matrix. public static bool2x2 operator ==(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float2x2 Right hand side float2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(float2x2, float) Returns the result of a componentwise equality operation on a float2x2 matrix and a float value. public static bool2x2 operator ==(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(float2x2, float2x2) Returns the result of a componentwise equality operation on two float2x2 matrices. public static bool2x2 operator ==(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise equality. rhs float2x2 Right hand side float2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. explicit operator float2x2(bool) Explicitly converts a single bool value to a float2x2 matrix by converting it to float and assigning it to every component. public static explicit operator float2x2(bool v) 参数 v bool bool to convert to float2x2 返回 float2x2 Converted value. explicit operator float2x2(double) Explicitly converts a single double value to a float2x2 matrix by converting it to float and assigning it to every component. public static explicit operator float2x2(double v) 参数 v double double to convert to float2x2 返回 float2x2 Converted value. explicit operator float2x2(bool2x2) Explicitly converts a bool2x2 matrix to a float2x2 matrix by componentwise conversion. public static explicit operator float2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to float2x2 返回 float2x2 Converted value. explicit operator float2x2(double2x2) Explicitly converts a double2x2 matrix to a float2x2 matrix by componentwise conversion. public static explicit operator float2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to float2x2 返回 float2x2 Converted value. operator >(float, float2x2) Returns the result of a componentwise greater than operation on a float value and a float2x2 matrix. public static bool2x2 operator >(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float2x2 Right hand side float2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(float2x2, float) Returns the result of a componentwise greater than operation on a float2x2 matrix and a float value. public static bool2x2 operator >(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(float2x2, float2x2) Returns the result of a componentwise greater than operation on two float2x2 matrices. public static bool2x2 operator >(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise greater than. rhs float2x2 Right hand side float2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >=(float, float2x2) Returns the result of a componentwise greater or equal operation on a float value and a float2x2 matrix. public static bool2x2 operator >=(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float2x2 Right hand side float2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(float2x2, float) Returns the result of a componentwise greater or equal operation on a float2x2 matrix and a float value. public static bool2x2 operator >=(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(float2x2, float2x2) Returns the result of a componentwise greater or equal operation on two float2x2 matrices. public static bool2x2 operator >=(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise greater or equal. rhs float2x2 Right hand side float2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. implicit operator float2x2(int) Implicitly converts a single int value to a float2x2 matrix by converting it to float and assigning it to every component. public static implicit operator float2x2(int v) 参数 v int int to convert to float2x2 返回 float2x2 Converted value. implicit operator float2x2(float) Implicitly converts a single float value to a float2x2 matrix by assigning it to every component. public static implicit operator float2x2(float v) 参数 v float float to convert to float2x2 返回 float2x2 Converted value. implicit operator float2x2(uint) Implicitly converts a single uint value to a float2x2 matrix by converting it to float and assigning it to every component. public static implicit operator float2x2(uint v) 参数 v uint uint to convert to float2x2 返回 float2x2 Converted value. implicit operator float2x2(int2x2) Implicitly converts a int2x2 matrix to a float2x2 matrix by componentwise conversion. public static implicit operator float2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to float2x2 返回 float2x2 Converted value. implicit operator float2x2(uint2x2) Implicitly converts a uint2x2 matrix to a float2x2 matrix by componentwise conversion. public static implicit operator float2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to float2x2 返回 float2x2 Converted value. operator ++(float2x2) Returns the result of a componentwise increment operation on a float2x2 matrix. public static float2x2 operator ++(float2x2 val) 参数 val float2x2 Value to use when computing the componentwise increment. 返回 float2x2 float2x2 result of the componentwise increment. operator !=(float, float2x2) Returns the result of a componentwise not equal operation on a float value and a float2x2 matrix. public static bool2x2 operator !=(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float2x2 Right hand side float2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(float2x2, float) Returns the result of a componentwise not equal operation on a float2x2 matrix and a float value. public static bool2x2 operator !=(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(float2x2, float2x2) Returns the result of a componentwise not equal operation on two float2x2 matrices. public static bool2x2 operator !=(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise not equal. rhs float2x2 Right hand side float2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator <(float, float2x2) Returns the result of a componentwise less than operation on a float value and a float2x2 matrix. public static bool2x2 operator <(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float2x2 Right hand side float2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(float2x2, float) Returns the result of a componentwise less than operation on a float2x2 matrix and a float value. public static bool2x2 operator <(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(float2x2, float2x2) Returns the result of a componentwise less than operation on two float2x2 matrices. public static bool2x2 operator <(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise less than. rhs float2x2 Right hand side float2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <=(float, float2x2) Returns the result of a componentwise less or equal operation on a float value and a float2x2 matrix. public static bool2x2 operator <=(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float2x2 Right hand side float2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(float2x2, float) Returns the result of a componentwise less or equal operation on a float2x2 matrix and a float value. public static bool2x2 operator <=(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(float2x2, float2x2) Returns the result of a componentwise less or equal operation on two float2x2 matrices. public static bool2x2 operator <=(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise less or equal. rhs float2x2 Right hand side float2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator %(float, float2x2) Returns the result of a componentwise modulus operation on a float value and a float2x2 matrix. public static float2x2 operator %(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float2x2 Right hand side float2x2 to use to compute componentwise modulus. 返回 float2x2 float2x2 result of the componentwise modulus. operator %(float2x2, float) Returns the result of a componentwise modulus operation on a float2x2 matrix and a float value. public static float2x2 operator %(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float2x2 float2x2 result of the componentwise modulus. operator %(float2x2, float2x2) Returns the result of a componentwise modulus operation on two float2x2 matrices. public static float2x2 operator %(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise modulus. rhs float2x2 Right hand side float2x2 to use to compute componentwise modulus. 返回 float2x2 float2x2 result of the componentwise modulus. operator *(float, float2x2) Returns the result of a componentwise multiplication operation on a float value and a float2x2 matrix. public static float2x2 operator *(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float2x2 Right hand side float2x2 to use to compute componentwise multiplication. 返回 float2x2 float2x2 result of the componentwise multiplication. operator *(float2x2, float) Returns the result of a componentwise multiplication operation on a float2x2 matrix and a float value. public static float2x2 operator *(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float2x2 float2x2 result of the componentwise multiplication. operator *(float2x2, float2x2) Returns the result of a componentwise multiplication operation on two float2x2 matrices. public static float2x2 operator *(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise multiplication. rhs float2x2 Right hand side float2x2 to use to compute componentwise multiplication. 返回 float2x2 float2x2 result of the componentwise multiplication. operator -(float, float2x2) Returns the result of a componentwise subtraction operation on a float value and a float2x2 matrix. public static float2x2 operator -(float lhs, float2x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float2x2 Right hand side float2x2 to use to compute componentwise subtraction. 返回 float2x2 float2x2 result of the componentwise subtraction. operator -(float2x2, float) Returns the result of a componentwise subtraction operation on a float2x2 matrix and a float value. public static float2x2 operator -(float2x2 lhs, float rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float2x2 float2x2 result of the componentwise subtraction. operator -(float2x2, float2x2) Returns the result of a componentwise subtraction operation on two float2x2 matrices. public static float2x2 operator -(float2x2 lhs, float2x2 rhs) 参数 lhs float2x2 Left hand side float2x2 to use to compute componentwise subtraction. rhs float2x2 Right hand side float2x2 to use to compute componentwise subtraction. 返回 float2x2 float2x2 result of the componentwise subtraction. operator -(float2x2) Returns the result of a componentwise unary minus operation on a float2x2 matrix. public static float2x2 operator -(float2x2 val) 参数 val float2x2 Value to use when computing the componentwise unary minus. 返回 float2x2 float2x2 result of the componentwise unary minus. operator +(float2x2) Returns the result of a componentwise unary plus operation on a float2x2 matrix. public static float2x2 operator +(float2x2 val) 参数 val float2x2 Value to use when computing the componentwise unary plus. 返回 float2x2 float2x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float2x3.html": {
    "href": "reference/Unity.Mathematics.float2x3.html",
    "title": "float2x3 结构 | Fantasy.Net API Reference",
    "keywords": "float2x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x3 matrix of floats. public struct float2x3 : IEquatable<float2x3>, IFormattable 实现 IEquatable<float2x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float2x3(bool) Constructs a float2x3 matrix from a single bool value by converting it to float and assigning it to every component. public float2x3(bool v) 参数 v bool bool to convert to float2x3 float2x3(double) Constructs a float2x3 matrix from a single double value by converting it to float and assigning it to every component. public float2x3(double v) 参数 v double double to convert to float2x3 float2x3(int) Constructs a float2x3 matrix from a single int value by converting it to float and assigning it to every component. public float2x3(int v) 参数 v int int to convert to float2x3 float2x3(float) Constructs a float2x3 matrix from a single float value by assigning it to every component. public float2x3(float v) 参数 v float float to convert to float2x3 float2x3(float, float, float, float, float, float) Constructs a float2x3 matrix from 6 float values given in row-major order. public float2x3(float m00, float m01, float m02, float m10, float m11, float m12) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. float2x3(uint) Constructs a float2x3 matrix from a single uint value by converting it to float and assigning it to every component. public float2x3(uint v) 参数 v uint uint to convert to float2x3 float2x3(bool2x3) Constructs a float2x3 matrix from a bool2x3 matrix by componentwise conversion. public float2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to float2x3 float2x3(double2x3) Constructs a float2x3 matrix from a double2x3 matrix by componentwise conversion. public float2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to float2x3 float2x3(float2, float2, float2) Constructs a float2x3 matrix from three float2 vectors. public float2x3(float2 c0, float2 c1, float2 c2) 参数 c0 float2 The matrix column c0 will be set to this value. c1 float2 The matrix column c1 will be set to this value. c2 float2 The matrix column c2 will be set to this value. float2x3(int2x3) Constructs a float2x3 matrix from a int2x3 matrix by componentwise conversion. public float2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to float2x3 float2x3(uint2x3) Constructs a float2x3 matrix from a uint2x3 matrix by componentwise conversion. public float2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to float2x3 字段 c0 Column 0 of the matrix. public float2 c0 字段值 float2 c1 Column 1 of the matrix. public float2 c1 字段值 float2 c2 Column 2 of the matrix. public float2 c2 字段值 float2 zero float2x3 zero value. public static readonly float2x3 zero 字段值 float2x3 属性 this[int] Returns the float2 element at a specified index. public ref float2 this[int index] { get; } 参数 index int 属性值 float2 方法 Equals(object) Returns true if the float2x3 is equal to a given float2x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float2x3) Returns true if the float2x3 is equal to a given float2x3, false otherwise. public bool Equals(float2x3 rhs) 参数 rhs float2x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float2x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float2x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float2x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float2x3) Returns the result of a componentwise addition operation on a float value and a float2x3 matrix. public static float2x3 operator +(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float2x3 Right hand side float2x3 to use to compute componentwise addition. 返回 float2x3 float2x3 result of the componentwise addition. operator +(float2x3, float) Returns the result of a componentwise addition operation on a float2x3 matrix and a float value. public static float2x3 operator +(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float2x3 float2x3 result of the componentwise addition. operator +(float2x3, float2x3) Returns the result of a componentwise addition operation on two float2x3 matrices. public static float2x3 operator +(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise addition. rhs float2x3 Right hand side float2x3 to use to compute componentwise addition. 返回 float2x3 float2x3 result of the componentwise addition. operator --(float2x3) Returns the result of a componentwise decrement operation on a float2x3 matrix. public static float2x3 operator --(float2x3 val) 参数 val float2x3 Value to use when computing the componentwise decrement. 返回 float2x3 float2x3 result of the componentwise decrement. operator /(float, float2x3) Returns the result of a componentwise division operation on a float value and a float2x3 matrix. public static float2x3 operator /(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float2x3 Right hand side float2x3 to use to compute componentwise division. 返回 float2x3 float2x3 result of the componentwise division. operator /(float2x3, float) Returns the result of a componentwise division operation on a float2x3 matrix and a float value. public static float2x3 operator /(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float2x3 float2x3 result of the componentwise division. operator /(float2x3, float2x3) Returns the result of a componentwise division operation on two float2x3 matrices. public static float2x3 operator /(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise division. rhs float2x3 Right hand side float2x3 to use to compute componentwise division. 返回 float2x3 float2x3 result of the componentwise division. operator ==(float, float2x3) Returns the result of a componentwise equality operation on a float value and a float2x3 matrix. public static bool2x3 operator ==(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float2x3 Right hand side float2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(float2x3, float) Returns the result of a componentwise equality operation on a float2x3 matrix and a float value. public static bool2x3 operator ==(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(float2x3, float2x3) Returns the result of a componentwise equality operation on two float2x3 matrices. public static bool2x3 operator ==(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise equality. rhs float2x3 Right hand side float2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. explicit operator float2x3(bool) Explicitly converts a single bool value to a float2x3 matrix by converting it to float and assigning it to every component. public static explicit operator float2x3(bool v) 参数 v bool bool to convert to float2x3 返回 float2x3 Converted value. explicit operator float2x3(double) Explicitly converts a single double value to a float2x3 matrix by converting it to float and assigning it to every component. public static explicit operator float2x3(double v) 参数 v double double to convert to float2x3 返回 float2x3 Converted value. explicit operator float2x3(bool2x3) Explicitly converts a bool2x3 matrix to a float2x3 matrix by componentwise conversion. public static explicit operator float2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to float2x3 返回 float2x3 Converted value. explicit operator float2x3(double2x3) Explicitly converts a double2x3 matrix to a float2x3 matrix by componentwise conversion. public static explicit operator float2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to float2x3 返回 float2x3 Converted value. operator >(float, float2x3) Returns the result of a componentwise greater than operation on a float value and a float2x3 matrix. public static bool2x3 operator >(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float2x3 Right hand side float2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(float2x3, float) Returns the result of a componentwise greater than operation on a float2x3 matrix and a float value. public static bool2x3 operator >(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(float2x3, float2x3) Returns the result of a componentwise greater than operation on two float2x3 matrices. public static bool2x3 operator >(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise greater than. rhs float2x3 Right hand side float2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >=(float, float2x3) Returns the result of a componentwise greater or equal operation on a float value and a float2x3 matrix. public static bool2x3 operator >=(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float2x3 Right hand side float2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(float2x3, float) Returns the result of a componentwise greater or equal operation on a float2x3 matrix and a float value. public static bool2x3 operator >=(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(float2x3, float2x3) Returns the result of a componentwise greater or equal operation on two float2x3 matrices. public static bool2x3 operator >=(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise greater or equal. rhs float2x3 Right hand side float2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. implicit operator float2x3(int) Implicitly converts a single int value to a float2x3 matrix by converting it to float and assigning it to every component. public static implicit operator float2x3(int v) 参数 v int int to convert to float2x3 返回 float2x3 Converted value. implicit operator float2x3(float) Implicitly converts a single float value to a float2x3 matrix by assigning it to every component. public static implicit operator float2x3(float v) 参数 v float float to convert to float2x3 返回 float2x3 Converted value. implicit operator float2x3(uint) Implicitly converts a single uint value to a float2x3 matrix by converting it to float and assigning it to every component. public static implicit operator float2x3(uint v) 参数 v uint uint to convert to float2x3 返回 float2x3 Converted value. implicit operator float2x3(int2x3) Implicitly converts a int2x3 matrix to a float2x3 matrix by componentwise conversion. public static implicit operator float2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to float2x3 返回 float2x3 Converted value. implicit operator float2x3(uint2x3) Implicitly converts a uint2x3 matrix to a float2x3 matrix by componentwise conversion. public static implicit operator float2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to float2x3 返回 float2x3 Converted value. operator ++(float2x3) Returns the result of a componentwise increment operation on a float2x3 matrix. public static float2x3 operator ++(float2x3 val) 参数 val float2x3 Value to use when computing the componentwise increment. 返回 float2x3 float2x3 result of the componentwise increment. operator !=(float, float2x3) Returns the result of a componentwise not equal operation on a float value and a float2x3 matrix. public static bool2x3 operator !=(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float2x3 Right hand side float2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(float2x3, float) Returns the result of a componentwise not equal operation on a float2x3 matrix and a float value. public static bool2x3 operator !=(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(float2x3, float2x3) Returns the result of a componentwise not equal operation on two float2x3 matrices. public static bool2x3 operator !=(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise not equal. rhs float2x3 Right hand side float2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator <(float, float2x3) Returns the result of a componentwise less than operation on a float value and a float2x3 matrix. public static bool2x3 operator <(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float2x3 Right hand side float2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(float2x3, float) Returns the result of a componentwise less than operation on a float2x3 matrix and a float value. public static bool2x3 operator <(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(float2x3, float2x3) Returns the result of a componentwise less than operation on two float2x3 matrices. public static bool2x3 operator <(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise less than. rhs float2x3 Right hand side float2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <=(float, float2x3) Returns the result of a componentwise less or equal operation on a float value and a float2x3 matrix. public static bool2x3 operator <=(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float2x3 Right hand side float2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(float2x3, float) Returns the result of a componentwise less or equal operation on a float2x3 matrix and a float value. public static bool2x3 operator <=(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(float2x3, float2x3) Returns the result of a componentwise less or equal operation on two float2x3 matrices. public static bool2x3 operator <=(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise less or equal. rhs float2x3 Right hand side float2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator %(float, float2x3) Returns the result of a componentwise modulus operation on a float value and a float2x3 matrix. public static float2x3 operator %(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float2x3 Right hand side float2x3 to use to compute componentwise modulus. 返回 float2x3 float2x3 result of the componentwise modulus. operator %(float2x3, float) Returns the result of a componentwise modulus operation on a float2x3 matrix and a float value. public static float2x3 operator %(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float2x3 float2x3 result of the componentwise modulus. operator %(float2x3, float2x3) Returns the result of a componentwise modulus operation on two float2x3 matrices. public static float2x3 operator %(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise modulus. rhs float2x3 Right hand side float2x3 to use to compute componentwise modulus. 返回 float2x3 float2x3 result of the componentwise modulus. operator *(float, float2x3) Returns the result of a componentwise multiplication operation on a float value and a float2x3 matrix. public static float2x3 operator *(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float2x3 Right hand side float2x3 to use to compute componentwise multiplication. 返回 float2x3 float2x3 result of the componentwise multiplication. operator *(float2x3, float) Returns the result of a componentwise multiplication operation on a float2x3 matrix and a float value. public static float2x3 operator *(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float2x3 float2x3 result of the componentwise multiplication. operator *(float2x3, float2x3) Returns the result of a componentwise multiplication operation on two float2x3 matrices. public static float2x3 operator *(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise multiplication. rhs float2x3 Right hand side float2x3 to use to compute componentwise multiplication. 返回 float2x3 float2x3 result of the componentwise multiplication. operator -(float, float2x3) Returns the result of a componentwise subtraction operation on a float value and a float2x3 matrix. public static float2x3 operator -(float lhs, float2x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float2x3 Right hand side float2x3 to use to compute componentwise subtraction. 返回 float2x3 float2x3 result of the componentwise subtraction. operator -(float2x3, float) Returns the result of a componentwise subtraction operation on a float2x3 matrix and a float value. public static float2x3 operator -(float2x3 lhs, float rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float2x3 float2x3 result of the componentwise subtraction. operator -(float2x3, float2x3) Returns the result of a componentwise subtraction operation on two float2x3 matrices. public static float2x3 operator -(float2x3 lhs, float2x3 rhs) 参数 lhs float2x3 Left hand side float2x3 to use to compute componentwise subtraction. rhs float2x3 Right hand side float2x3 to use to compute componentwise subtraction. 返回 float2x3 float2x3 result of the componentwise subtraction. operator -(float2x3) Returns the result of a componentwise unary minus operation on a float2x3 matrix. public static float2x3 operator -(float2x3 val) 参数 val float2x3 Value to use when computing the componentwise unary minus. 返回 float2x3 float2x3 result of the componentwise unary minus. operator +(float2x3) Returns the result of a componentwise unary plus operation on a float2x3 matrix. public static float2x3 operator +(float2x3 val) 参数 val float2x3 Value to use when computing the componentwise unary plus. 返回 float2x3 float2x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float2x4.html": {
    "href": "reference/Unity.Mathematics.float2x4.html",
    "title": "float2x4 结构 | Fantasy.Net API Reference",
    "keywords": "float2x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x4 matrix of floats. public struct float2x4 : IEquatable<float2x4>, IFormattable 实现 IEquatable<float2x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float2x4(bool) Constructs a float2x4 matrix from a single bool value by converting it to float and assigning it to every component. public float2x4(bool v) 参数 v bool bool to convert to float2x4 float2x4(double) Constructs a float2x4 matrix from a single double value by converting it to float and assigning it to every component. public float2x4(double v) 参数 v double double to convert to float2x4 float2x4(int) Constructs a float2x4 matrix from a single int value by converting it to float and assigning it to every component. public float2x4(int v) 参数 v int int to convert to float2x4 float2x4(float) Constructs a float2x4 matrix from a single float value by assigning it to every component. public float2x4(float v) 参数 v float float to convert to float2x4 float2x4(float, float, float, float, float, float, float, float) Constructs a float2x4 matrix from 8 float values given in row-major order. public float2x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m03 float The matrix at row 0, column 3 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m13 float The matrix at row 1, column 3 will be set to this value. float2x4(uint) Constructs a float2x4 matrix from a single uint value by converting it to float and assigning it to every component. public float2x4(uint v) 参数 v uint uint to convert to float2x4 float2x4(bool2x4) Constructs a float2x4 matrix from a bool2x4 matrix by componentwise conversion. public float2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to float2x4 float2x4(double2x4) Constructs a float2x4 matrix from a double2x4 matrix by componentwise conversion. public float2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to float2x4 float2x4(float2, float2, float2, float2) Constructs a float2x4 matrix from four float2 vectors. public float2x4(float2 c0, float2 c1, float2 c2, float2 c3) 参数 c0 float2 The matrix column c0 will be set to this value. c1 float2 The matrix column c1 will be set to this value. c2 float2 The matrix column c2 will be set to this value. c3 float2 The matrix column c3 will be set to this value. float2x4(int2x4) Constructs a float2x4 matrix from a int2x4 matrix by componentwise conversion. public float2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to float2x4 float2x4(uint2x4) Constructs a float2x4 matrix from a uint2x4 matrix by componentwise conversion. public float2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to float2x4 字段 c0 Column 0 of the matrix. public float2 c0 字段值 float2 c1 Column 1 of the matrix. public float2 c1 字段值 float2 c2 Column 2 of the matrix. public float2 c2 字段值 float2 c3 Column 3 of the matrix. public float2 c3 字段值 float2 zero float2x4 zero value. public static readonly float2x4 zero 字段值 float2x4 属性 this[int] Returns the float2 element at a specified index. public ref float2 this[int index] { get; } 参数 index int 属性值 float2 方法 Equals(object) Returns true if the float2x4 is equal to a given float2x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float2x4) Returns true if the float2x4 is equal to a given float2x4, false otherwise. public bool Equals(float2x4 rhs) 参数 rhs float2x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float2x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float2x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float2x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float2x4) Returns the result of a componentwise addition operation on a float value and a float2x4 matrix. public static float2x4 operator +(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float2x4 Right hand side float2x4 to use to compute componentwise addition. 返回 float2x4 float2x4 result of the componentwise addition. operator +(float2x4, float) Returns the result of a componentwise addition operation on a float2x4 matrix and a float value. public static float2x4 operator +(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float2x4 float2x4 result of the componentwise addition. operator +(float2x4, float2x4) Returns the result of a componentwise addition operation on two float2x4 matrices. public static float2x4 operator +(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise addition. rhs float2x4 Right hand side float2x4 to use to compute componentwise addition. 返回 float2x4 float2x4 result of the componentwise addition. operator --(float2x4) Returns the result of a componentwise decrement operation on a float2x4 matrix. public static float2x4 operator --(float2x4 val) 参数 val float2x4 Value to use when computing the componentwise decrement. 返回 float2x4 float2x4 result of the componentwise decrement. operator /(float, float2x4) Returns the result of a componentwise division operation on a float value and a float2x4 matrix. public static float2x4 operator /(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float2x4 Right hand side float2x4 to use to compute componentwise division. 返回 float2x4 float2x4 result of the componentwise division. operator /(float2x4, float) Returns the result of a componentwise division operation on a float2x4 matrix and a float value. public static float2x4 operator /(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float2x4 float2x4 result of the componentwise division. operator /(float2x4, float2x4) Returns the result of a componentwise division operation on two float2x4 matrices. public static float2x4 operator /(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise division. rhs float2x4 Right hand side float2x4 to use to compute componentwise division. 返回 float2x4 float2x4 result of the componentwise division. operator ==(float, float2x4) Returns the result of a componentwise equality operation on a float value and a float2x4 matrix. public static bool2x4 operator ==(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float2x4 Right hand side float2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(float2x4, float) Returns the result of a componentwise equality operation on a float2x4 matrix and a float value. public static bool2x4 operator ==(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(float2x4, float2x4) Returns the result of a componentwise equality operation on two float2x4 matrices. public static bool2x4 operator ==(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise equality. rhs float2x4 Right hand side float2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. explicit operator float2x4(bool) Explicitly converts a single bool value to a float2x4 matrix by converting it to float and assigning it to every component. public static explicit operator float2x4(bool v) 参数 v bool bool to convert to float2x4 返回 float2x4 Converted value. explicit operator float2x4(double) Explicitly converts a single double value to a float2x4 matrix by converting it to float and assigning it to every component. public static explicit operator float2x4(double v) 参数 v double double to convert to float2x4 返回 float2x4 Converted value. explicit operator float2x4(bool2x4) Explicitly converts a bool2x4 matrix to a float2x4 matrix by componentwise conversion. public static explicit operator float2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to float2x4 返回 float2x4 Converted value. explicit operator float2x4(double2x4) Explicitly converts a double2x4 matrix to a float2x4 matrix by componentwise conversion. public static explicit operator float2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to float2x4 返回 float2x4 Converted value. operator >(float, float2x4) Returns the result of a componentwise greater than operation on a float value and a float2x4 matrix. public static bool2x4 operator >(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float2x4 Right hand side float2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(float2x4, float) Returns the result of a componentwise greater than operation on a float2x4 matrix and a float value. public static bool2x4 operator >(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(float2x4, float2x4) Returns the result of a componentwise greater than operation on two float2x4 matrices. public static bool2x4 operator >(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise greater than. rhs float2x4 Right hand side float2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >=(float, float2x4) Returns the result of a componentwise greater or equal operation on a float value and a float2x4 matrix. public static bool2x4 operator >=(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float2x4 Right hand side float2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(float2x4, float) Returns the result of a componentwise greater or equal operation on a float2x4 matrix and a float value. public static bool2x4 operator >=(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(float2x4, float2x4) Returns the result of a componentwise greater or equal operation on two float2x4 matrices. public static bool2x4 operator >=(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise greater or equal. rhs float2x4 Right hand side float2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. implicit operator float2x4(int) Implicitly converts a single int value to a float2x4 matrix by converting it to float and assigning it to every component. public static implicit operator float2x4(int v) 参数 v int int to convert to float2x4 返回 float2x4 Converted value. implicit operator float2x4(float) Implicitly converts a single float value to a float2x4 matrix by assigning it to every component. public static implicit operator float2x4(float v) 参数 v float float to convert to float2x4 返回 float2x4 Converted value. implicit operator float2x4(uint) Implicitly converts a single uint value to a float2x4 matrix by converting it to float and assigning it to every component. public static implicit operator float2x4(uint v) 参数 v uint uint to convert to float2x4 返回 float2x4 Converted value. implicit operator float2x4(int2x4) Implicitly converts a int2x4 matrix to a float2x4 matrix by componentwise conversion. public static implicit operator float2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to float2x4 返回 float2x4 Converted value. implicit operator float2x4(uint2x4) Implicitly converts a uint2x4 matrix to a float2x4 matrix by componentwise conversion. public static implicit operator float2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to float2x4 返回 float2x4 Converted value. operator ++(float2x4) Returns the result of a componentwise increment operation on a float2x4 matrix. public static float2x4 operator ++(float2x4 val) 参数 val float2x4 Value to use when computing the componentwise increment. 返回 float2x4 float2x4 result of the componentwise increment. operator !=(float, float2x4) Returns the result of a componentwise not equal operation on a float value and a float2x4 matrix. public static bool2x4 operator !=(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float2x4 Right hand side float2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(float2x4, float) Returns the result of a componentwise not equal operation on a float2x4 matrix and a float value. public static bool2x4 operator !=(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(float2x4, float2x4) Returns the result of a componentwise not equal operation on two float2x4 matrices. public static bool2x4 operator !=(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise not equal. rhs float2x4 Right hand side float2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator <(float, float2x4) Returns the result of a componentwise less than operation on a float value and a float2x4 matrix. public static bool2x4 operator <(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float2x4 Right hand side float2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(float2x4, float) Returns the result of a componentwise less than operation on a float2x4 matrix and a float value. public static bool2x4 operator <(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(float2x4, float2x4) Returns the result of a componentwise less than operation on two float2x4 matrices. public static bool2x4 operator <(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise less than. rhs float2x4 Right hand side float2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <=(float, float2x4) Returns the result of a componentwise less or equal operation on a float value and a float2x4 matrix. public static bool2x4 operator <=(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float2x4 Right hand side float2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(float2x4, float) Returns the result of a componentwise less or equal operation on a float2x4 matrix and a float value. public static bool2x4 operator <=(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(float2x4, float2x4) Returns the result of a componentwise less or equal operation on two float2x4 matrices. public static bool2x4 operator <=(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise less or equal. rhs float2x4 Right hand side float2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator %(float, float2x4) Returns the result of a componentwise modulus operation on a float value and a float2x4 matrix. public static float2x4 operator %(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float2x4 Right hand side float2x4 to use to compute componentwise modulus. 返回 float2x4 float2x4 result of the componentwise modulus. operator %(float2x4, float) Returns the result of a componentwise modulus operation on a float2x4 matrix and a float value. public static float2x4 operator %(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float2x4 float2x4 result of the componentwise modulus. operator %(float2x4, float2x4) Returns the result of a componentwise modulus operation on two float2x4 matrices. public static float2x4 operator %(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise modulus. rhs float2x4 Right hand side float2x4 to use to compute componentwise modulus. 返回 float2x4 float2x4 result of the componentwise modulus. operator *(float, float2x4) Returns the result of a componentwise multiplication operation on a float value and a float2x4 matrix. public static float2x4 operator *(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float2x4 Right hand side float2x4 to use to compute componentwise multiplication. 返回 float2x4 float2x4 result of the componentwise multiplication. operator *(float2x4, float) Returns the result of a componentwise multiplication operation on a float2x4 matrix and a float value. public static float2x4 operator *(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float2x4 float2x4 result of the componentwise multiplication. operator *(float2x4, float2x4) Returns the result of a componentwise multiplication operation on two float2x4 matrices. public static float2x4 operator *(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise multiplication. rhs float2x4 Right hand side float2x4 to use to compute componentwise multiplication. 返回 float2x4 float2x4 result of the componentwise multiplication. operator -(float, float2x4) Returns the result of a componentwise subtraction operation on a float value and a float2x4 matrix. public static float2x4 operator -(float lhs, float2x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float2x4 Right hand side float2x4 to use to compute componentwise subtraction. 返回 float2x4 float2x4 result of the componentwise subtraction. operator -(float2x4, float) Returns the result of a componentwise subtraction operation on a float2x4 matrix and a float value. public static float2x4 operator -(float2x4 lhs, float rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float2x4 float2x4 result of the componentwise subtraction. operator -(float2x4, float2x4) Returns the result of a componentwise subtraction operation on two float2x4 matrices. public static float2x4 operator -(float2x4 lhs, float2x4 rhs) 参数 lhs float2x4 Left hand side float2x4 to use to compute componentwise subtraction. rhs float2x4 Right hand side float2x4 to use to compute componentwise subtraction. 返回 float2x4 float2x4 result of the componentwise subtraction. operator -(float2x4) Returns the result of a componentwise unary minus operation on a float2x4 matrix. public static float2x4 operator -(float2x4 val) 参数 val float2x4 Value to use when computing the componentwise unary minus. 返回 float2x4 float2x4 result of the componentwise unary minus. operator +(float2x4) Returns the result of a componentwise unary plus operation on a float2x4 matrix. public static float2x4 operator +(float2x4 val) 参数 val float2x4 Value to use when computing the componentwise unary plus. 返回 float2x4 float2x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float3.html": {
    "href": "reference/Unity.Mathematics.float3.html",
    "title": "float3 结构 | Fantasy.Net API Reference",
    "keywords": "float3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3 component vector of floats. public struct float3 : IEquatable<float3>, IFormattable 实现 IEquatable<float3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float3(bool) Constructs a float3 vector from a single bool value by converting it to float and assigning it to every component. public float3(bool v) 参数 v bool bool to convert to float3 float3(double) Constructs a float3 vector from a single double value by converting it to float and assigning it to every component. public float3(double v) 参数 v double double to convert to float3 float3(int) Constructs a float3 vector from a single int value by converting it to float and assigning it to every component. public float3(int v) 参数 v int int to convert to float3 float3(float) Constructs a float3 vector from a single float value by assigning it to every component. public float3(float v) 参数 v float float to convert to float3 float3(float, float, float) Constructs a float3 vector from three float values. public float3(float x, float y, float z) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. z float The constructed vector's z component will be set to this value. float3(float, float2) Constructs a float3 vector from a float value and a float2 vector. public float3(float x, float2 yz) 参数 x float The constructed vector's x component will be set to this value. yz float2 The constructed vector's yz components will be set to this value. float3(uint) Constructs a float3 vector from a single uint value by converting it to float and assigning it to every component. public float3(uint v) 参数 v uint uint to convert to float3 float3(bool3) Constructs a float3 vector from a bool3 vector by componentwise conversion. public float3(bool3 v) 参数 v bool3 bool3 to convert to float3 float3(double3) Constructs a float3 vector from a double3 vector by componentwise conversion. public float3(double3 v) 参数 v double3 double3 to convert to float3 float3(float2, float) Constructs a float3 vector from a float2 vector and a float value. public float3(float2 xy, float z) 参数 xy float2 The constructed vector's xy components will be set to this value. z float The constructed vector's z component will be set to this value. float3(float3) Constructs a float3 vector from a float3 vector. public float3(float3 xyz) 参数 xyz float3 The constructed vector's xyz components will be set to this value. float3(half) Constructs a float3 vector from a single half value by converting it to float and assigning it to every component. public float3(half v) 参数 v half half to convert to float3 float3(half3) Constructs a float3 vector from a half3 vector by componentwise conversion. public float3(half3 v) 参数 v half3 half3 to convert to float3 float3(int3) Constructs a float3 vector from a int3 vector by componentwise conversion. public float3(int3 v) 参数 v int3 int3 to convert to float3 float3(uint3) Constructs a float3 vector from a uint3 vector by componentwise conversion. public float3(uint3 v) 参数 v uint3 uint3 to convert to float3 字段 x x component of the vector. public float x 字段值 float y y component of the vector. public float y 字段值 float z z component of the vector. public float z 字段值 float zero float3 zero value. public static readonly float3 zero 字段值 float3 属性 this[int] Returns the float element at a specified index. public float this[int index] { get; set; } 参数 index int 属性值 float 方法 Equals(object) Returns true if the float3 is equal to a given float3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float3) Returns true if the float3 is equal to a given float3, false otherwise. public bool Equals(float3 rhs) 参数 rhs float3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float3) Returns the result of a componentwise addition operation on a float value and a float3 vector. public static float3 operator +(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float3 Right hand side float3 to use to compute componentwise addition. 返回 float3 float3 result of the componentwise addition. operator +(float3, float) Returns the result of a componentwise addition operation on a float3 vector and a float value. public static float3 operator +(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float3 float3 result of the componentwise addition. operator +(float3, float3) Returns the result of a componentwise addition operation on two float3 vectors. public static float3 operator +(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise addition. rhs float3 Right hand side float3 to use to compute componentwise addition. 返回 float3 float3 result of the componentwise addition. operator --(float3) Returns the result of a componentwise decrement operation on a float3 vector. public static float3 operator --(float3 val) 参数 val float3 Value to use when computing the componentwise decrement. 返回 float3 float3 result of the componentwise decrement. operator /(float, float3) Returns the result of a componentwise division operation on a float value and a float3 vector. public static float3 operator /(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float3 Right hand side float3 to use to compute componentwise division. 返回 float3 float3 result of the componentwise division. operator /(float3, float) Returns the result of a componentwise division operation on a float3 vector and a float value. public static float3 operator /(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float3 float3 result of the componentwise division. operator /(float3, float3) Returns the result of a componentwise division operation on two float3 vectors. public static float3 operator /(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise division. rhs float3 Right hand side float3 to use to compute componentwise division. 返回 float3 float3 result of the componentwise division. operator ==(float, float3) Returns the result of a componentwise equality operation on a float value and a float3 vector. public static bool3 operator ==(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float3 Right hand side float3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(float3, float) Returns the result of a componentwise equality operation on a float3 vector and a float value. public static bool3 operator ==(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(float3, float3) Returns the result of a componentwise equality operation on two float3 vectors. public static bool3 operator ==(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise equality. rhs float3 Right hand side float3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. explicit operator float3(bool) Explicitly converts a single bool value to a float3 vector by converting it to float and assigning it to every component. public static explicit operator float3(bool v) 参数 v bool bool to convert to float3 返回 float3 Converted value. explicit operator float3(double) Explicitly converts a single double value to a float3 vector by converting it to float and assigning it to every component. public static explicit operator float3(double v) 参数 v double double to convert to float3 返回 float3 Converted value. explicit operator float3(bool3) Explicitly converts a bool3 vector to a float3 vector by componentwise conversion. public static explicit operator float3(bool3 v) 参数 v bool3 bool3 to convert to float3 返回 float3 Converted value. explicit operator float3(double3) Explicitly converts a double3 vector to a float3 vector by componentwise conversion. public static explicit operator float3(double3 v) 参数 v double3 double3 to convert to float3 返回 float3 Converted value. operator >(float, float3) Returns the result of a componentwise greater than operation on a float value and a float3 vector. public static bool3 operator >(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float3 Right hand side float3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(float3, float) Returns the result of a componentwise greater than operation on a float3 vector and a float value. public static bool3 operator >(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(float3, float3) Returns the result of a componentwise greater than operation on two float3 vectors. public static bool3 operator >(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise greater than. rhs float3 Right hand side float3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >=(float, float3) Returns the result of a componentwise greater or equal operation on a float value and a float3 vector. public static bool3 operator >=(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float3 Right hand side float3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(float3, float) Returns the result of a componentwise greater or equal operation on a float3 vector and a float value. public static bool3 operator >=(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(float3, float3) Returns the result of a componentwise greater or equal operation on two float3 vectors. public static bool3 operator >=(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise greater or equal. rhs float3 Right hand side float3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. implicit operator float3(int) Implicitly converts a single int value to a float3 vector by converting it to float and assigning it to every component. public static implicit operator float3(int v) 参数 v int int to convert to float3 返回 float3 Converted value. implicit operator float3(float) Implicitly converts a single float value to a float3 vector by assigning it to every component. public static implicit operator float3(float v) 参数 v float float to convert to float3 返回 float3 Converted value. implicit operator float3(uint) Implicitly converts a single uint value to a float3 vector by converting it to float and assigning it to every component. public static implicit operator float3(uint v) 参数 v uint uint to convert to float3 返回 float3 Converted value. implicit operator float3(half) Implicitly converts a single half value to a float3 vector by converting it to float and assigning it to every component. public static implicit operator float3(half v) 参数 v half half to convert to float3 返回 float3 Converted value. implicit operator float3(half3) Implicitly converts a half3 vector to a float3 vector by componentwise conversion. public static implicit operator float3(half3 v) 参数 v half3 half3 to convert to float3 返回 float3 Converted value. implicit operator float3(int3) Implicitly converts a int3 vector to a float3 vector by componentwise conversion. public static implicit operator float3(int3 v) 参数 v int3 int3 to convert to float3 返回 float3 Converted value. implicit operator float3(uint3) Implicitly converts a uint3 vector to a float3 vector by componentwise conversion. public static implicit operator float3(uint3 v) 参数 v uint3 uint3 to convert to float3 返回 float3 Converted value. operator ++(float3) Returns the result of a componentwise increment operation on a float3 vector. public static float3 operator ++(float3 val) 参数 val float3 Value to use when computing the componentwise increment. 返回 float3 float3 result of the componentwise increment. operator !=(float, float3) Returns the result of a componentwise not equal operation on a float value and a float3 vector. public static bool3 operator !=(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float3 Right hand side float3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(float3, float) Returns the result of a componentwise not equal operation on a float3 vector and a float value. public static bool3 operator !=(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(float3, float3) Returns the result of a componentwise not equal operation on two float3 vectors. public static bool3 operator !=(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise not equal. rhs float3 Right hand side float3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator <(float, float3) Returns the result of a componentwise less than operation on a float value and a float3 vector. public static bool3 operator <(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float3 Right hand side float3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(float3, float) Returns the result of a componentwise less than operation on a float3 vector and a float value. public static bool3 operator <(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(float3, float3) Returns the result of a componentwise less than operation on two float3 vectors. public static bool3 operator <(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise less than. rhs float3 Right hand side float3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <=(float, float3) Returns the result of a componentwise less or equal operation on a float value and a float3 vector. public static bool3 operator <=(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float3 Right hand side float3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(float3, float) Returns the result of a componentwise less or equal operation on a float3 vector and a float value. public static bool3 operator <=(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(float3, float3) Returns the result of a componentwise less or equal operation on two float3 vectors. public static bool3 operator <=(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise less or equal. rhs float3 Right hand side float3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator %(float, float3) Returns the result of a componentwise modulus operation on a float value and a float3 vector. public static float3 operator %(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float3 Right hand side float3 to use to compute componentwise modulus. 返回 float3 float3 result of the componentwise modulus. operator %(float3, float) Returns the result of a componentwise modulus operation on a float3 vector and a float value. public static float3 operator %(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float3 float3 result of the componentwise modulus. operator %(float3, float3) Returns the result of a componentwise modulus operation on two float3 vectors. public static float3 operator %(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise modulus. rhs float3 Right hand side float3 to use to compute componentwise modulus. 返回 float3 float3 result of the componentwise modulus. operator *(float, float3) Returns the result of a componentwise multiplication operation on a float value and a float3 vector. public static float3 operator *(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float3 Right hand side float3 to use to compute componentwise multiplication. 返回 float3 float3 result of the componentwise multiplication. operator *(float3, float) Returns the result of a componentwise multiplication operation on a float3 vector and a float value. public static float3 operator *(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float3 float3 result of the componentwise multiplication. operator *(float3, float3) Returns the result of a componentwise multiplication operation on two float3 vectors. public static float3 operator *(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise multiplication. rhs float3 Right hand side float3 to use to compute componentwise multiplication. 返回 float3 float3 result of the componentwise multiplication. operator -(float, float3) Returns the result of a componentwise subtraction operation on a float value and a float3 vector. public static float3 operator -(float lhs, float3 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float3 Right hand side float3 to use to compute componentwise subtraction. 返回 float3 float3 result of the componentwise subtraction. operator -(float3, float) Returns the result of a componentwise subtraction operation on a float3 vector and a float value. public static float3 operator -(float3 lhs, float rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float3 float3 result of the componentwise subtraction. operator -(float3, float3) Returns the result of a componentwise subtraction operation on two float3 vectors. public static float3 operator -(float3 lhs, float3 rhs) 参数 lhs float3 Left hand side float3 to use to compute componentwise subtraction. rhs float3 Right hand side float3 to use to compute componentwise subtraction. 返回 float3 float3 result of the componentwise subtraction. operator -(float3) Returns the result of a componentwise unary minus operation on a float3 vector. public static float3 operator -(float3 val) 参数 val float3 Value to use when computing the componentwise unary minus. 返回 float3 float3 result of the componentwise unary minus. operator +(float3) Returns the result of a componentwise unary plus operation on a float3 vector. public static float3 operator +(float3 val) 参数 val float3 Value to use when computing the componentwise unary plus. 返回 float3 float3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float3x2.html": {
    "href": "reference/Unity.Mathematics.float3x2.html",
    "title": "float3x2 结构 | Fantasy.Net API Reference",
    "keywords": "float3x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x2 matrix of floats. public struct float3x2 : IEquatable<float3x2>, IFormattable 实现 IEquatable<float3x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float3x2(bool) Constructs a float3x2 matrix from a single bool value by converting it to float and assigning it to every component. public float3x2(bool v) 参数 v bool bool to convert to float3x2 float3x2(double) Constructs a float3x2 matrix from a single double value by converting it to float and assigning it to every component. public float3x2(double v) 参数 v double double to convert to float3x2 float3x2(int) Constructs a float3x2 matrix from a single int value by converting it to float and assigning it to every component. public float3x2(int v) 参数 v int int to convert to float3x2 float3x2(float) Constructs a float3x2 matrix from a single float value by assigning it to every component. public float3x2(float v) 参数 v float float to convert to float3x2 float3x2(float, float, float, float, float, float) Constructs a float3x2 matrix from 6 float values given in row-major order. public float3x2(float m00, float m01, float m10, float m11, float m20, float m21) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. float3x2(uint) Constructs a float3x2 matrix from a single uint value by converting it to float and assigning it to every component. public float3x2(uint v) 参数 v uint uint to convert to float3x2 float3x2(bool3x2) Constructs a float3x2 matrix from a bool3x2 matrix by componentwise conversion. public float3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to float3x2 float3x2(double3x2) Constructs a float3x2 matrix from a double3x2 matrix by componentwise conversion. public float3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to float3x2 float3x2(float3, float3) Constructs a float3x2 matrix from two float3 vectors. public float3x2(float3 c0, float3 c1) 参数 c0 float3 The matrix column c0 will be set to this value. c1 float3 The matrix column c1 will be set to this value. float3x2(int3x2) Constructs a float3x2 matrix from a int3x2 matrix by componentwise conversion. public float3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to float3x2 float3x2(uint3x2) Constructs a float3x2 matrix from a uint3x2 matrix by componentwise conversion. public float3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to float3x2 字段 c0 Column 0 of the matrix. public float3 c0 字段值 float3 c1 Column 1 of the matrix. public float3 c1 字段值 float3 zero float3x2 zero value. public static readonly float3x2 zero 字段值 float3x2 属性 this[int] Returns the float3 element at a specified index. public ref float3 this[int index] { get; } 参数 index int 属性值 float3 方法 Equals(object) Returns true if the float3x2 is equal to a given float3x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float3x2) Returns true if the float3x2 is equal to a given float3x2, false otherwise. public bool Equals(float3x2 rhs) 参数 rhs float3x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float3x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float3x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float3x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float3x2) Returns the result of a componentwise addition operation on a float value and a float3x2 matrix. public static float3x2 operator +(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float3x2 Right hand side float3x2 to use to compute componentwise addition. 返回 float3x2 float3x2 result of the componentwise addition. operator +(float3x2, float) Returns the result of a componentwise addition operation on a float3x2 matrix and a float value. public static float3x2 operator +(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float3x2 float3x2 result of the componentwise addition. operator +(float3x2, float3x2) Returns the result of a componentwise addition operation on two float3x2 matrices. public static float3x2 operator +(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise addition. rhs float3x2 Right hand side float3x2 to use to compute componentwise addition. 返回 float3x2 float3x2 result of the componentwise addition. operator --(float3x2) Returns the result of a componentwise decrement operation on a float3x2 matrix. public static float3x2 operator --(float3x2 val) 参数 val float3x2 Value to use when computing the componentwise decrement. 返回 float3x2 float3x2 result of the componentwise decrement. operator /(float, float3x2) Returns the result of a componentwise division operation on a float value and a float3x2 matrix. public static float3x2 operator /(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float3x2 Right hand side float3x2 to use to compute componentwise division. 返回 float3x2 float3x2 result of the componentwise division. operator /(float3x2, float) Returns the result of a componentwise division operation on a float3x2 matrix and a float value. public static float3x2 operator /(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float3x2 float3x2 result of the componentwise division. operator /(float3x2, float3x2) Returns the result of a componentwise division operation on two float3x2 matrices. public static float3x2 operator /(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise division. rhs float3x2 Right hand side float3x2 to use to compute componentwise division. 返回 float3x2 float3x2 result of the componentwise division. operator ==(float, float3x2) Returns the result of a componentwise equality operation on a float value and a float3x2 matrix. public static bool3x2 operator ==(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float3x2 Right hand side float3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(float3x2, float) Returns the result of a componentwise equality operation on a float3x2 matrix and a float value. public static bool3x2 operator ==(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(float3x2, float3x2) Returns the result of a componentwise equality operation on two float3x2 matrices. public static bool3x2 operator ==(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise equality. rhs float3x2 Right hand side float3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. explicit operator float3x2(bool) Explicitly converts a single bool value to a float3x2 matrix by converting it to float and assigning it to every component. public static explicit operator float3x2(bool v) 参数 v bool bool to convert to float3x2 返回 float3x2 Converted value. explicit operator float3x2(double) Explicitly converts a single double value to a float3x2 matrix by converting it to float and assigning it to every component. public static explicit operator float3x2(double v) 参数 v double double to convert to float3x2 返回 float3x2 Converted value. explicit operator float3x2(bool3x2) Explicitly converts a bool3x2 matrix to a float3x2 matrix by componentwise conversion. public static explicit operator float3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to float3x2 返回 float3x2 Converted value. explicit operator float3x2(double3x2) Explicitly converts a double3x2 matrix to a float3x2 matrix by componentwise conversion. public static explicit operator float3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to float3x2 返回 float3x2 Converted value. operator >(float, float3x2) Returns the result of a componentwise greater than operation on a float value and a float3x2 matrix. public static bool3x2 operator >(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float3x2 Right hand side float3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(float3x2, float) Returns the result of a componentwise greater than operation on a float3x2 matrix and a float value. public static bool3x2 operator >(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(float3x2, float3x2) Returns the result of a componentwise greater than operation on two float3x2 matrices. public static bool3x2 operator >(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise greater than. rhs float3x2 Right hand side float3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >=(float, float3x2) Returns the result of a componentwise greater or equal operation on a float value and a float3x2 matrix. public static bool3x2 operator >=(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float3x2 Right hand side float3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(float3x2, float) Returns the result of a componentwise greater or equal operation on a float3x2 matrix and a float value. public static bool3x2 operator >=(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(float3x2, float3x2) Returns the result of a componentwise greater or equal operation on two float3x2 matrices. public static bool3x2 operator >=(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise greater or equal. rhs float3x2 Right hand side float3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. implicit operator float3x2(int) Implicitly converts a single int value to a float3x2 matrix by converting it to float and assigning it to every component. public static implicit operator float3x2(int v) 参数 v int int to convert to float3x2 返回 float3x2 Converted value. implicit operator float3x2(float) Implicitly converts a single float value to a float3x2 matrix by assigning it to every component. public static implicit operator float3x2(float v) 参数 v float float to convert to float3x2 返回 float3x2 Converted value. implicit operator float3x2(uint) Implicitly converts a single uint value to a float3x2 matrix by converting it to float and assigning it to every component. public static implicit operator float3x2(uint v) 参数 v uint uint to convert to float3x2 返回 float3x2 Converted value. implicit operator float3x2(int3x2) Implicitly converts a int3x2 matrix to a float3x2 matrix by componentwise conversion. public static implicit operator float3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to float3x2 返回 float3x2 Converted value. implicit operator float3x2(uint3x2) Implicitly converts a uint3x2 matrix to a float3x2 matrix by componentwise conversion. public static implicit operator float3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to float3x2 返回 float3x2 Converted value. operator ++(float3x2) Returns the result of a componentwise increment operation on a float3x2 matrix. public static float3x2 operator ++(float3x2 val) 参数 val float3x2 Value to use when computing the componentwise increment. 返回 float3x2 float3x2 result of the componentwise increment. operator !=(float, float3x2) Returns the result of a componentwise not equal operation on a float value and a float3x2 matrix. public static bool3x2 operator !=(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float3x2 Right hand side float3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(float3x2, float) Returns the result of a componentwise not equal operation on a float3x2 matrix and a float value. public static bool3x2 operator !=(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(float3x2, float3x2) Returns the result of a componentwise not equal operation on two float3x2 matrices. public static bool3x2 operator !=(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise not equal. rhs float3x2 Right hand side float3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator <(float, float3x2) Returns the result of a componentwise less than operation on a float value and a float3x2 matrix. public static bool3x2 operator <(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float3x2 Right hand side float3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(float3x2, float) Returns the result of a componentwise less than operation on a float3x2 matrix and a float value. public static bool3x2 operator <(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(float3x2, float3x2) Returns the result of a componentwise less than operation on two float3x2 matrices. public static bool3x2 operator <(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise less than. rhs float3x2 Right hand side float3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <=(float, float3x2) Returns the result of a componentwise less or equal operation on a float value and a float3x2 matrix. public static bool3x2 operator <=(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float3x2 Right hand side float3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(float3x2, float) Returns the result of a componentwise less or equal operation on a float3x2 matrix and a float value. public static bool3x2 operator <=(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(float3x2, float3x2) Returns the result of a componentwise less or equal operation on two float3x2 matrices. public static bool3x2 operator <=(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise less or equal. rhs float3x2 Right hand side float3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator %(float, float3x2) Returns the result of a componentwise modulus operation on a float value and a float3x2 matrix. public static float3x2 operator %(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float3x2 Right hand side float3x2 to use to compute componentwise modulus. 返回 float3x2 float3x2 result of the componentwise modulus. operator %(float3x2, float) Returns the result of a componentwise modulus operation on a float3x2 matrix and a float value. public static float3x2 operator %(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float3x2 float3x2 result of the componentwise modulus. operator %(float3x2, float3x2) Returns the result of a componentwise modulus operation on two float3x2 matrices. public static float3x2 operator %(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise modulus. rhs float3x2 Right hand side float3x2 to use to compute componentwise modulus. 返回 float3x2 float3x2 result of the componentwise modulus. operator *(float, float3x2) Returns the result of a componentwise multiplication operation on a float value and a float3x2 matrix. public static float3x2 operator *(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float3x2 Right hand side float3x2 to use to compute componentwise multiplication. 返回 float3x2 float3x2 result of the componentwise multiplication. operator *(float3x2, float) Returns the result of a componentwise multiplication operation on a float3x2 matrix and a float value. public static float3x2 operator *(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float3x2 float3x2 result of the componentwise multiplication. operator *(float3x2, float3x2) Returns the result of a componentwise multiplication operation on two float3x2 matrices. public static float3x2 operator *(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise multiplication. rhs float3x2 Right hand side float3x2 to use to compute componentwise multiplication. 返回 float3x2 float3x2 result of the componentwise multiplication. operator -(float, float3x2) Returns the result of a componentwise subtraction operation on a float value and a float3x2 matrix. public static float3x2 operator -(float lhs, float3x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float3x2 Right hand side float3x2 to use to compute componentwise subtraction. 返回 float3x2 float3x2 result of the componentwise subtraction. operator -(float3x2, float) Returns the result of a componentwise subtraction operation on a float3x2 matrix and a float value. public static float3x2 operator -(float3x2 lhs, float rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float3x2 float3x2 result of the componentwise subtraction. operator -(float3x2, float3x2) Returns the result of a componentwise subtraction operation on two float3x2 matrices. public static float3x2 operator -(float3x2 lhs, float3x2 rhs) 参数 lhs float3x2 Left hand side float3x2 to use to compute componentwise subtraction. rhs float3x2 Right hand side float3x2 to use to compute componentwise subtraction. 返回 float3x2 float3x2 result of the componentwise subtraction. operator -(float3x2) Returns the result of a componentwise unary minus operation on a float3x2 matrix. public static float3x2 operator -(float3x2 val) 参数 val float3x2 Value to use when computing the componentwise unary minus. 返回 float3x2 float3x2 result of the componentwise unary minus. operator +(float3x2) Returns the result of a componentwise unary plus operation on a float3x2 matrix. public static float3x2 operator +(float3x2 val) 参数 val float3x2 Value to use when computing the componentwise unary plus. 返回 float3x2 float3x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float3x3.html": {
    "href": "reference/Unity.Mathematics.float3x3.html",
    "title": "float3x3 结构 | Fantasy.Net API Reference",
    "keywords": "float3x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x3 matrix of floats. public struct float3x3 : IEquatable<float3x3>, IFormattable 实现 IEquatable<float3x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float3x3(bool) Constructs a float3x3 matrix from a single bool value by converting it to float and assigning it to every component. public float3x3(bool v) 参数 v bool bool to convert to float3x3 float3x3(double) Constructs a float3x3 matrix from a single double value by converting it to float and assigning it to every component. public float3x3(double v) 参数 v double double to convert to float3x3 float3x3(int) Constructs a float3x3 matrix from a single int value by converting it to float and assigning it to every component. public float3x3(int v) 参数 v int int to convert to float3x3 float3x3(float) Constructs a float3x3 matrix from a single float value by assigning it to every component. public float3x3(float v) 参数 v float float to convert to float3x3 float3x3(float, float, float, float, float, float, float, float, float) Constructs a float3x3 matrix from 9 float values given in row-major order. public float3x3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. float3x3(uint) Constructs a float3x3 matrix from a single uint value by converting it to float and assigning it to every component. public float3x3(uint v) 参数 v uint uint to convert to float3x3 float3x3(bool3x3) Constructs a float3x3 matrix from a bool3x3 matrix by componentwise conversion. public float3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to float3x3 float3x3(double3x3) Constructs a float3x3 matrix from a double3x3 matrix by componentwise conversion. public float3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to float3x3 float3x3(float3, float3, float3) Constructs a float3x3 matrix from three float3 vectors. public float3x3(float3 c0, float3 c1, float3 c2) 参数 c0 float3 The matrix column c0 will be set to this value. c1 float3 The matrix column c1 will be set to this value. c2 float3 The matrix column c2 will be set to this value. float3x3(float4x4) Constructs a float3x3 from the upper left 3x3 of a float4x4. public float3x3(float4x4 f4x4) 参数 f4x4 float4x4 float4x4 to extract a float3x3 from. float3x3(int3x3) Constructs a float3x3 matrix from a int3x3 matrix by componentwise conversion. public float3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to float3x3 float3x3(quaternion) Constructs a float3x3 matrix from a unit quaternion. public float3x3(quaternion q) 参数 q quaternion The quaternion rotation. float3x3(uint3x3) Constructs a float3x3 matrix from a uint3x3 matrix by componentwise conversion. public float3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to float3x3 字段 c0 Column 0 of the matrix. public float3 c0 字段值 float3 c1 Column 1 of the matrix. public float3 c1 字段值 float3 c2 Column 2 of the matrix. public float3 c2 字段值 float3 identity float3x3 identity transform. public static readonly float3x3 identity 字段值 float3x3 zero float3x3 zero value. public static readonly float3x3 zero 字段值 float3x3 属性 this[int] Returns the float3 element at a specified index. public ref float3 this[int index] { get; } 参数 index int 属性值 float3 方法 AxisAngle(float3, float) Returns a float3x3 matrix representing a rotation around a unit axis by an angle in radians. The rotation direction is clockwise when looking along the rotation axis towards the origin. public static float3x3 AxisAngle(float3 axis, float angle) 参数 axis float3 The rotation axis. angle float The angle of rotation in radians. 返回 float3x3 The float3x3 matrix representing the rotation around an axis. Equals(object) Returns true if the float3x3 is equal to a given float3x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float3x3) Returns true if the float3x3 is equal to a given float3x3, false otherwise. public bool Equals(float3x3 rhs) 参数 rhs float3x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Euler(float, float, float, RotationOrder) Returns a float3x3 rotation matrix constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static float3x3 Euler(float x, float y, float z, math.RotationOrder order = RotationOrder.Default) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. order math.RotationOrder The order in which the rotations are applied. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in the given order. Euler(float3, RotationOrder) Returns a float3x3 rotation matrix constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static float3x3 Euler(float3 xyz, math.RotationOrder order = RotationOrder.Default) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. order math.RotationOrder The order in which the rotations are applied. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in the given order. EulerXYZ(float, float, float) Returns a float3x3 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerXYZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in x-y-z order. EulerXYZ(float3) Returns a float3x3 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerXYZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in x-y-z order. EulerXZY(float, float, float) Returns a float3x3 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerXZY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in x-z-y order. EulerXZY(float3) Returns a float3x3 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerXZY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in x-z-y order. EulerYXZ(float, float, float) Returns a float3x3 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerYXZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in y-x-z order. EulerYXZ(float3) Returns a float3x3 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerYXZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in y-x-z order. EulerYZX(float, float, float) Returns a float3x3 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerYZX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in y-z-x order. EulerYZX(float3) Returns a float3x3 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerYZX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in y-z-x order. EulerZXY(float, float, float) Returns a float3x3 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static float3x3 EulerZXY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in z-x-y order. EulerZXY(float3) Returns a float3x3 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static float3x3 EulerZXY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in z-x-y order. EulerZYX(float, float, float) Returns a float3x3 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerZYX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in z-y-x order. EulerZYX(float3) Returns a float3x3 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3x3 EulerZYX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float3x3 The float3x3 rotation matrix representing the rotation by Euler angles in z-y-x order. GetHashCode() Returns a hash code for the float3x3. public override int GetHashCode() 返回 int The computed hash code. LookRotation(float3, float3) Returns a float3x3 view rotation matrix given a unit length forward vector and a unit length up vector. The two input vectors are assumed to be unit length and not collinear. If these assumptions are not met use float3x3.LookRotationSafe instead. public static float3x3 LookRotation(float3 forward, float3 up) 参数 forward float3 The forward vector to align the center of view with. up float3 The up vector to point top of view toward. 返回 float3x3 The float3x3 view rotation matrix. LookRotationSafe(float3, float3) Returns a float3x3 view rotation matrix given a forward vector and an up vector. The two input vectors are not assumed to be unit length. If the magnitude of either of the vectors is so extreme that the calculation cannot be carried out reliably or the vectors are collinear, the identity will be returned instead. public static float3x3 LookRotationSafe(float3 forward, float3 up) 参数 forward float3 The forward vector to align the center of view with. up float3 The up vector to point top of view toward. 返回 float3x3 The float3x3 view rotation matrix or the identity matrix. RotateX(float) Returns a float3x3 matrix that rotates around the x-axis by a given number of radians. public static float3x3 RotateX(float angle) 参数 angle float The clockwise rotation angle when looking along the x-axis towards the origin in radians. 返回 float3x3 The float3x3 rotation matrix representing a rotation around the x-axis. RotateY(float) Returns a float3x3 matrix that rotates around the y-axis by a given number of radians. public static float3x3 RotateY(float angle) 参数 angle float The clockwise rotation angle when looking along the y-axis towards the origin in radians. 返回 float3x3 The float3x3 rotation matrix representing a rotation around the y-axis. RotateZ(float) Returns a float3x3 matrix that rotates around the z-axis by a given number of radians. public static float3x3 RotateZ(float angle) 参数 angle float The clockwise rotation angle when looking along the z-axis towards the origin in radians. 返回 float3x3 The float3x3 rotation matrix representing a rotation around the z-axis. Scale(float) Returns a float3x3 matrix representing a uniform scaling of all axes by s. public static float3x3 Scale(float s) 参数 s float The uniform scaling factor. 返回 float3x3 The float3x3 matrix representing a uniform scale. Scale(float, float, float) Returns a float3x3 matrix representing a non-uniform axis scaling by x, y and z. public static float3x3 Scale(float x, float y, float z) 参数 x float The x-axis scaling factor. y float The y-axis scaling factor. z float The z-axis scaling factor. 返回 float3x3 The float3x3 rotation matrix representing a non-uniform scale. Scale(float3) Returns a float3x3 matrix representing a non-uniform axis scaling by the components of the float3 vector v. public static float3x3 Scale(float3 v) 参数 v float3 The vector containing non-uniform scaling factors. 返回 float3x3 The float3x3 rotation matrix representing a non-uniform scale. ToString() Returns a string representation of the float3x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float3x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float3x3) Returns the result of a componentwise addition operation on a float value and a float3x3 matrix. public static float3x3 operator +(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float3x3 Right hand side float3x3 to use to compute componentwise addition. 返回 float3x3 float3x3 result of the componentwise addition. operator +(float3x3, float) Returns the result of a componentwise addition operation on a float3x3 matrix and a float value. public static float3x3 operator +(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float3x3 float3x3 result of the componentwise addition. operator +(float3x3, float3x3) Returns the result of a componentwise addition operation on two float3x3 matrices. public static float3x3 operator +(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise addition. rhs float3x3 Right hand side float3x3 to use to compute componentwise addition. 返回 float3x3 float3x3 result of the componentwise addition. operator --(float3x3) Returns the result of a componentwise decrement operation on a float3x3 matrix. public static float3x3 operator --(float3x3 val) 参数 val float3x3 Value to use when computing the componentwise decrement. 返回 float3x3 float3x3 result of the componentwise decrement. operator /(float, float3x3) Returns the result of a componentwise division operation on a float value and a float3x3 matrix. public static float3x3 operator /(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float3x3 Right hand side float3x3 to use to compute componentwise division. 返回 float3x3 float3x3 result of the componentwise division. operator /(float3x3, float) Returns the result of a componentwise division operation on a float3x3 matrix and a float value. public static float3x3 operator /(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float3x3 float3x3 result of the componentwise division. operator /(float3x3, float3x3) Returns the result of a componentwise division operation on two float3x3 matrices. public static float3x3 operator /(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise division. rhs float3x3 Right hand side float3x3 to use to compute componentwise division. 返回 float3x3 float3x3 result of the componentwise division. operator ==(float, float3x3) Returns the result of a componentwise equality operation on a float value and a float3x3 matrix. public static bool3x3 operator ==(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float3x3 Right hand side float3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(float3x3, float) Returns the result of a componentwise equality operation on a float3x3 matrix and a float value. public static bool3x3 operator ==(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(float3x3, float3x3) Returns the result of a componentwise equality operation on two float3x3 matrices. public static bool3x3 operator ==(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise equality. rhs float3x3 Right hand side float3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. explicit operator float3x3(bool) Explicitly converts a single bool value to a float3x3 matrix by converting it to float and assigning it to every component. public static explicit operator float3x3(bool v) 参数 v bool bool to convert to float3x3 返回 float3x3 Converted value. explicit operator float3x3(double) Explicitly converts a single double value to a float3x3 matrix by converting it to float and assigning it to every component. public static explicit operator float3x3(double v) 参数 v double double to convert to float3x3 返回 float3x3 Converted value. explicit operator float3x3(bool3x3) Explicitly converts a bool3x3 matrix to a float3x3 matrix by componentwise conversion. public static explicit operator float3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to float3x3 返回 float3x3 Converted value. explicit operator float3x3(double3x3) Explicitly converts a double3x3 matrix to a float3x3 matrix by componentwise conversion. public static explicit operator float3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to float3x3 返回 float3x3 Converted value. explicit operator float3x3(float4x4) Converts a float4x4 to a float3x3. public static explicit operator float3x3(float4x4 f4x4) 参数 f4x4 float4x4 The float4x4 to convert to a float3x3. 返回 float3x3 The float3x3 constructed from the upper left 3x3 of the input float4x4 matrix. operator >(float, float3x3) Returns the result of a componentwise greater than operation on a float value and a float3x3 matrix. public static bool3x3 operator >(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float3x3 Right hand side float3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(float3x3, float) Returns the result of a componentwise greater than operation on a float3x3 matrix and a float value. public static bool3x3 operator >(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(float3x3, float3x3) Returns the result of a componentwise greater than operation on two float3x3 matrices. public static bool3x3 operator >(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise greater than. rhs float3x3 Right hand side float3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >=(float, float3x3) Returns the result of a componentwise greater or equal operation on a float value and a float3x3 matrix. public static bool3x3 operator >=(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float3x3 Right hand side float3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(float3x3, float) Returns the result of a componentwise greater or equal operation on a float3x3 matrix and a float value. public static bool3x3 operator >=(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(float3x3, float3x3) Returns the result of a componentwise greater or equal operation on two float3x3 matrices. public static bool3x3 operator >=(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise greater or equal. rhs float3x3 Right hand side float3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. implicit operator float3x3(int) Implicitly converts a single int value to a float3x3 matrix by converting it to float and assigning it to every component. public static implicit operator float3x3(int v) 参数 v int int to convert to float3x3 返回 float3x3 Converted value. implicit operator float3x3(float) Implicitly converts a single float value to a float3x3 matrix by assigning it to every component. public static implicit operator float3x3(float v) 参数 v float float to convert to float3x3 返回 float3x3 Converted value. implicit operator float3x3(uint) Implicitly converts a single uint value to a float3x3 matrix by converting it to float and assigning it to every component. public static implicit operator float3x3(uint v) 参数 v uint uint to convert to float3x3 返回 float3x3 Converted value. implicit operator float3x3(int3x3) Implicitly converts a int3x3 matrix to a float3x3 matrix by componentwise conversion. public static implicit operator float3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to float3x3 返回 float3x3 Converted value. implicit operator float3x3(uint3x3) Implicitly converts a uint3x3 matrix to a float3x3 matrix by componentwise conversion. public static implicit operator float3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to float3x3 返回 float3x3 Converted value. operator ++(float3x3) Returns the result of a componentwise increment operation on a float3x3 matrix. public static float3x3 operator ++(float3x3 val) 参数 val float3x3 Value to use when computing the componentwise increment. 返回 float3x3 float3x3 result of the componentwise increment. operator !=(float, float3x3) Returns the result of a componentwise not equal operation on a float value and a float3x3 matrix. public static bool3x3 operator !=(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float3x3 Right hand side float3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(float3x3, float) Returns the result of a componentwise not equal operation on a float3x3 matrix and a float value. public static bool3x3 operator !=(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(float3x3, float3x3) Returns the result of a componentwise not equal operation on two float3x3 matrices. public static bool3x3 operator !=(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise not equal. rhs float3x3 Right hand side float3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator <(float, float3x3) Returns the result of a componentwise less than operation on a float value and a float3x3 matrix. public static bool3x3 operator <(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float3x3 Right hand side float3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(float3x3, float) Returns the result of a componentwise less than operation on a float3x3 matrix and a float value. public static bool3x3 operator <(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(float3x3, float3x3) Returns the result of a componentwise less than operation on two float3x3 matrices. public static bool3x3 operator <(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise less than. rhs float3x3 Right hand side float3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <=(float, float3x3) Returns the result of a componentwise less or equal operation on a float value and a float3x3 matrix. public static bool3x3 operator <=(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float3x3 Right hand side float3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(float3x3, float) Returns the result of a componentwise less or equal operation on a float3x3 matrix and a float value. public static bool3x3 operator <=(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(float3x3, float3x3) Returns the result of a componentwise less or equal operation on two float3x3 matrices. public static bool3x3 operator <=(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise less or equal. rhs float3x3 Right hand side float3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator %(float, float3x3) Returns the result of a componentwise modulus operation on a float value and a float3x3 matrix. public static float3x3 operator %(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float3x3 Right hand side float3x3 to use to compute componentwise modulus. 返回 float3x3 float3x3 result of the componentwise modulus. operator %(float3x3, float) Returns the result of a componentwise modulus operation on a float3x3 matrix and a float value. public static float3x3 operator %(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float3x3 float3x3 result of the componentwise modulus. operator %(float3x3, float3x3) Returns the result of a componentwise modulus operation on two float3x3 matrices. public static float3x3 operator %(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise modulus. rhs float3x3 Right hand side float3x3 to use to compute componentwise modulus. 返回 float3x3 float3x3 result of the componentwise modulus. operator *(float, float3x3) Returns the result of a componentwise multiplication operation on a float value and a float3x3 matrix. public static float3x3 operator *(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float3x3 Right hand side float3x3 to use to compute componentwise multiplication. 返回 float3x3 float3x3 result of the componentwise multiplication. operator *(float3x3, float) Returns the result of a componentwise multiplication operation on a float3x3 matrix and a float value. public static float3x3 operator *(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float3x3 float3x3 result of the componentwise multiplication. operator *(float3x3, float3x3) Returns the result of a componentwise multiplication operation on two float3x3 matrices. public static float3x3 operator *(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise multiplication. rhs float3x3 Right hand side float3x3 to use to compute componentwise multiplication. 返回 float3x3 float3x3 result of the componentwise multiplication. operator -(float, float3x3) Returns the result of a componentwise subtraction operation on a float value and a float3x3 matrix. public static float3x3 operator -(float lhs, float3x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float3x3 Right hand side float3x3 to use to compute componentwise subtraction. 返回 float3x3 float3x3 result of the componentwise subtraction. operator -(float3x3, float) Returns the result of a componentwise subtraction operation on a float3x3 matrix and a float value. public static float3x3 operator -(float3x3 lhs, float rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float3x3 float3x3 result of the componentwise subtraction. operator -(float3x3, float3x3) Returns the result of a componentwise subtraction operation on two float3x3 matrices. public static float3x3 operator -(float3x3 lhs, float3x3 rhs) 参数 lhs float3x3 Left hand side float3x3 to use to compute componentwise subtraction. rhs float3x3 Right hand side float3x3 to use to compute componentwise subtraction. 返回 float3x3 float3x3 result of the componentwise subtraction. operator -(float3x3) Returns the result of a componentwise unary minus operation on a float3x3 matrix. public static float3x3 operator -(float3x3 val) 参数 val float3x3 Value to use when computing the componentwise unary minus. 返回 float3x3 float3x3 result of the componentwise unary minus. operator +(float3x3) Returns the result of a componentwise unary plus operation on a float3x3 matrix. public static float3x3 operator +(float3x3 val) 参数 val float3x3 Value to use when computing the componentwise unary plus. 返回 float3x3 float3x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float3x4.html": {
    "href": "reference/Unity.Mathematics.float3x4.html",
    "title": "float3x4 结构 | Fantasy.Net API Reference",
    "keywords": "float3x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x4 matrix of floats. public struct float3x4 : IEquatable<float3x4>, IFormattable 实现 IEquatable<float3x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float3x4(bool) Constructs a float3x4 matrix from a single bool value by converting it to float and assigning it to every component. public float3x4(bool v) 参数 v bool bool to convert to float3x4 float3x4(double) Constructs a float3x4 matrix from a single double value by converting it to float and assigning it to every component. public float3x4(double v) 参数 v double double to convert to float3x4 float3x4(int) Constructs a float3x4 matrix from a single int value by converting it to float and assigning it to every component. public float3x4(int v) 参数 v int int to convert to float3x4 float3x4(float) Constructs a float3x4 matrix from a single float value by assigning it to every component. public float3x4(float v) 参数 v float float to convert to float3x4 float3x4(float, float, float, float, float, float, float, float, float, float, float, float) Constructs a float3x4 matrix from 12 float values given in row-major order. public float3x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m03 float The matrix at row 0, column 3 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m13 float The matrix at row 1, column 3 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. m23 float The matrix at row 2, column 3 will be set to this value. float3x4(uint) Constructs a float3x4 matrix from a single uint value by converting it to float and assigning it to every component. public float3x4(uint v) 参数 v uint uint to convert to float3x4 float3x4(bool3x4) Constructs a float3x4 matrix from a bool3x4 matrix by componentwise conversion. public float3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to float3x4 float3x4(double3x4) Constructs a float3x4 matrix from a double3x4 matrix by componentwise conversion. public float3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to float3x4 float3x4(float3, float3, float3, float3) Constructs a float3x4 matrix from four float3 vectors. public float3x4(float3 c0, float3 c1, float3 c2, float3 c3) 参数 c0 float3 The matrix column c0 will be set to this value. c1 float3 The matrix column c1 will be set to this value. c2 float3 The matrix column c2 will be set to this value. c3 float3 The matrix column c3 will be set to this value. float3x4(int3x4) Constructs a float3x4 matrix from a int3x4 matrix by componentwise conversion. public float3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to float3x4 float3x4(uint3x4) Constructs a float3x4 matrix from a uint3x4 matrix by componentwise conversion. public float3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to float3x4 字段 c0 Column 0 of the matrix. public float3 c0 字段值 float3 c1 Column 1 of the matrix. public float3 c1 字段值 float3 c2 Column 2 of the matrix. public float3 c2 字段值 float3 c3 Column 3 of the matrix. public float3 c3 字段值 float3 zero float3x4 zero value. public static readonly float3x4 zero 字段值 float3x4 属性 this[int] Returns the float3 element at a specified index. public ref float3 this[int index] { get; } 参数 index int 属性值 float3 方法 Equals(object) Returns true if the float3x4 is equal to a given float3x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float3x4) Returns true if the float3x4 is equal to a given float3x4, false otherwise. public bool Equals(float3x4 rhs) 参数 rhs float3x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float3x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float3x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float3x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float3x4) Returns the result of a componentwise addition operation on a float value and a float3x4 matrix. public static float3x4 operator +(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float3x4 Right hand side float3x4 to use to compute componentwise addition. 返回 float3x4 float3x4 result of the componentwise addition. operator +(float3x4, float) Returns the result of a componentwise addition operation on a float3x4 matrix and a float value. public static float3x4 operator +(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float3x4 float3x4 result of the componentwise addition. operator +(float3x4, float3x4) Returns the result of a componentwise addition operation on two float3x4 matrices. public static float3x4 operator +(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise addition. rhs float3x4 Right hand side float3x4 to use to compute componentwise addition. 返回 float3x4 float3x4 result of the componentwise addition. operator --(float3x4) Returns the result of a componentwise decrement operation on a float3x4 matrix. public static float3x4 operator --(float3x4 val) 参数 val float3x4 Value to use when computing the componentwise decrement. 返回 float3x4 float3x4 result of the componentwise decrement. operator /(float, float3x4) Returns the result of a componentwise division operation on a float value and a float3x4 matrix. public static float3x4 operator /(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float3x4 Right hand side float3x4 to use to compute componentwise division. 返回 float3x4 float3x4 result of the componentwise division. operator /(float3x4, float) Returns the result of a componentwise division operation on a float3x4 matrix and a float value. public static float3x4 operator /(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float3x4 float3x4 result of the componentwise division. operator /(float3x4, float3x4) Returns the result of a componentwise division operation on two float3x4 matrices. public static float3x4 operator /(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise division. rhs float3x4 Right hand side float3x4 to use to compute componentwise division. 返回 float3x4 float3x4 result of the componentwise division. operator ==(float, float3x4) Returns the result of a componentwise equality operation on a float value and a float3x4 matrix. public static bool3x4 operator ==(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float3x4 Right hand side float3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(float3x4, float) Returns the result of a componentwise equality operation on a float3x4 matrix and a float value. public static bool3x4 operator ==(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(float3x4, float3x4) Returns the result of a componentwise equality operation on two float3x4 matrices. public static bool3x4 operator ==(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise equality. rhs float3x4 Right hand side float3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. explicit operator float3x4(bool) Explicitly converts a single bool value to a float3x4 matrix by converting it to float and assigning it to every component. public static explicit operator float3x4(bool v) 参数 v bool bool to convert to float3x4 返回 float3x4 Converted value. explicit operator float3x4(double) Explicitly converts a single double value to a float3x4 matrix by converting it to float and assigning it to every component. public static explicit operator float3x4(double v) 参数 v double double to convert to float3x4 返回 float3x4 Converted value. explicit operator float3x4(bool3x4) Explicitly converts a bool3x4 matrix to a float3x4 matrix by componentwise conversion. public static explicit operator float3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to float3x4 返回 float3x4 Converted value. explicit operator float3x4(double3x4) Explicitly converts a double3x4 matrix to a float3x4 matrix by componentwise conversion. public static explicit operator float3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to float3x4 返回 float3x4 Converted value. operator >(float, float3x4) Returns the result of a componentwise greater than operation on a float value and a float3x4 matrix. public static bool3x4 operator >(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float3x4 Right hand side float3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(float3x4, float) Returns the result of a componentwise greater than operation on a float3x4 matrix and a float value. public static bool3x4 operator >(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(float3x4, float3x4) Returns the result of a componentwise greater than operation on two float3x4 matrices. public static bool3x4 operator >(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise greater than. rhs float3x4 Right hand side float3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >=(float, float3x4) Returns the result of a componentwise greater or equal operation on a float value and a float3x4 matrix. public static bool3x4 operator >=(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float3x4 Right hand side float3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(float3x4, float) Returns the result of a componentwise greater or equal operation on a float3x4 matrix and a float value. public static bool3x4 operator >=(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(float3x4, float3x4) Returns the result of a componentwise greater or equal operation on two float3x4 matrices. public static bool3x4 operator >=(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise greater or equal. rhs float3x4 Right hand side float3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. implicit operator float3x4(int) Implicitly converts a single int value to a float3x4 matrix by converting it to float and assigning it to every component. public static implicit operator float3x4(int v) 参数 v int int to convert to float3x4 返回 float3x4 Converted value. implicit operator float3x4(float) Implicitly converts a single float value to a float3x4 matrix by assigning it to every component. public static implicit operator float3x4(float v) 参数 v float float to convert to float3x4 返回 float3x4 Converted value. implicit operator float3x4(uint) Implicitly converts a single uint value to a float3x4 matrix by converting it to float and assigning it to every component. public static implicit operator float3x4(uint v) 参数 v uint uint to convert to float3x4 返回 float3x4 Converted value. implicit operator float3x4(int3x4) Implicitly converts a int3x4 matrix to a float3x4 matrix by componentwise conversion. public static implicit operator float3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to float3x4 返回 float3x4 Converted value. implicit operator float3x4(uint3x4) Implicitly converts a uint3x4 matrix to a float3x4 matrix by componentwise conversion. public static implicit operator float3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to float3x4 返回 float3x4 Converted value. operator ++(float3x4) Returns the result of a componentwise increment operation on a float3x4 matrix. public static float3x4 operator ++(float3x4 val) 参数 val float3x4 Value to use when computing the componentwise increment. 返回 float3x4 float3x4 result of the componentwise increment. operator !=(float, float3x4) Returns the result of a componentwise not equal operation on a float value and a float3x4 matrix. public static bool3x4 operator !=(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float3x4 Right hand side float3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(float3x4, float) Returns the result of a componentwise not equal operation on a float3x4 matrix and a float value. public static bool3x4 operator !=(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(float3x4, float3x4) Returns the result of a componentwise not equal operation on two float3x4 matrices. public static bool3x4 operator !=(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise not equal. rhs float3x4 Right hand side float3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator <(float, float3x4) Returns the result of a componentwise less than operation on a float value and a float3x4 matrix. public static bool3x4 operator <(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float3x4 Right hand side float3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(float3x4, float) Returns the result of a componentwise less than operation on a float3x4 matrix and a float value. public static bool3x4 operator <(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(float3x4, float3x4) Returns the result of a componentwise less than operation on two float3x4 matrices. public static bool3x4 operator <(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise less than. rhs float3x4 Right hand side float3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <=(float, float3x4) Returns the result of a componentwise less or equal operation on a float value and a float3x4 matrix. public static bool3x4 operator <=(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float3x4 Right hand side float3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(float3x4, float) Returns the result of a componentwise less or equal operation on a float3x4 matrix and a float value. public static bool3x4 operator <=(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(float3x4, float3x4) Returns the result of a componentwise less or equal operation on two float3x4 matrices. public static bool3x4 operator <=(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise less or equal. rhs float3x4 Right hand side float3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator %(float, float3x4) Returns the result of a componentwise modulus operation on a float value and a float3x4 matrix. public static float3x4 operator %(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float3x4 Right hand side float3x4 to use to compute componentwise modulus. 返回 float3x4 float3x4 result of the componentwise modulus. operator %(float3x4, float) Returns the result of a componentwise modulus operation on a float3x4 matrix and a float value. public static float3x4 operator %(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float3x4 float3x4 result of the componentwise modulus. operator %(float3x4, float3x4) Returns the result of a componentwise modulus operation on two float3x4 matrices. public static float3x4 operator %(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise modulus. rhs float3x4 Right hand side float3x4 to use to compute componentwise modulus. 返回 float3x4 float3x4 result of the componentwise modulus. operator *(float, float3x4) Returns the result of a componentwise multiplication operation on a float value and a float3x4 matrix. public static float3x4 operator *(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float3x4 Right hand side float3x4 to use to compute componentwise multiplication. 返回 float3x4 float3x4 result of the componentwise multiplication. operator *(float3x4, float) Returns the result of a componentwise multiplication operation on a float3x4 matrix and a float value. public static float3x4 operator *(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float3x4 float3x4 result of the componentwise multiplication. operator *(float3x4, float3x4) Returns the result of a componentwise multiplication operation on two float3x4 matrices. public static float3x4 operator *(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise multiplication. rhs float3x4 Right hand side float3x4 to use to compute componentwise multiplication. 返回 float3x4 float3x4 result of the componentwise multiplication. operator -(float, float3x4) Returns the result of a componentwise subtraction operation on a float value and a float3x4 matrix. public static float3x4 operator -(float lhs, float3x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float3x4 Right hand side float3x4 to use to compute componentwise subtraction. 返回 float3x4 float3x4 result of the componentwise subtraction. operator -(float3x4, float) Returns the result of a componentwise subtraction operation on a float3x4 matrix and a float value. public static float3x4 operator -(float3x4 lhs, float rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float3x4 float3x4 result of the componentwise subtraction. operator -(float3x4, float3x4) Returns the result of a componentwise subtraction operation on two float3x4 matrices. public static float3x4 operator -(float3x4 lhs, float3x4 rhs) 参数 lhs float3x4 Left hand side float3x4 to use to compute componentwise subtraction. rhs float3x4 Right hand side float3x4 to use to compute componentwise subtraction. 返回 float3x4 float3x4 result of the componentwise subtraction. operator -(float3x4) Returns the result of a componentwise unary minus operation on a float3x4 matrix. public static float3x4 operator -(float3x4 val) 参数 val float3x4 Value to use when computing the componentwise unary minus. 返回 float3x4 float3x4 result of the componentwise unary minus. operator +(float3x4) Returns the result of a componentwise unary plus operation on a float3x4 matrix. public static float3x4 operator +(float3x4 val) 参数 val float3x4 Value to use when computing the componentwise unary plus. 返回 float3x4 float3x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float4.html": {
    "href": "reference/Unity.Mathematics.float4.html",
    "title": "float4 结构 | Fantasy.Net API Reference",
    "keywords": "float4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4 component vector of floats. public struct float4 : IEquatable<float4>, IFormattable 实现 IEquatable<float4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float4(bool) Constructs a float4 vector from a single bool value by converting it to float and assigning it to every component. public float4(bool v) 参数 v bool bool to convert to float4 float4(double) Constructs a float4 vector from a single double value by converting it to float and assigning it to every component. public float4(double v) 参数 v double double to convert to float4 float4(int) Constructs a float4 vector from a single int value by converting it to float and assigning it to every component. public float4(int v) 参数 v int int to convert to float4 float4(float) Constructs a float4 vector from a single float value by assigning it to every component. public float4(float v) 参数 v float float to convert to float4 float4(float, float, float, float) Constructs a float4 vector from four float values. public float4(float x, float y, float z, float w) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. z float The constructed vector's z component will be set to this value. w float The constructed vector's w component will be set to this value. float4(float, float, float2) Constructs a float4 vector from two float values and a float2 vector. public float4(float x, float y, float2 zw) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. zw float2 The constructed vector's zw components will be set to this value. float4(float, float2, float) Constructs a float4 vector from a float value, a float2 vector and a float value. public float4(float x, float2 yz, float w) 参数 x float The constructed vector's x component will be set to this value. yz float2 The constructed vector's yz components will be set to this value. w float The constructed vector's w component will be set to this value. float4(float, float3) Constructs a float4 vector from a float value and a float3 vector. public float4(float x, float3 yzw) 参数 x float The constructed vector's x component will be set to this value. yzw float3 The constructed vector's yzw components will be set to this value. float4(uint) Constructs a float4 vector from a single uint value by converting it to float and assigning it to every component. public float4(uint v) 参数 v uint uint to convert to float4 float4(bool4) Constructs a float4 vector from a bool4 vector by componentwise conversion. public float4(bool4 v) 参数 v bool4 bool4 to convert to float4 float4(double4) Constructs a float4 vector from a double4 vector by componentwise conversion. public float4(double4 v) 参数 v double4 double4 to convert to float4 float4(float2, float, float) Constructs a float4 vector from a float2 vector and two float values. public float4(float2 xy, float z, float w) 参数 xy float2 The constructed vector's xy components will be set to this value. z float The constructed vector's z component will be set to this value. w float The constructed vector's w component will be set to this value. float4(float2, float2) Constructs a float4 vector from two float2 vectors. public float4(float2 xy, float2 zw) 参数 xy float2 The constructed vector's xy components will be set to this value. zw float2 The constructed vector's zw components will be set to this value. float4(float3, float) Constructs a float4 vector from a float3 vector and a float value. public float4(float3 xyz, float w) 参数 xyz float3 The constructed vector's xyz components will be set to this value. w float The constructed vector's w component will be set to this value. float4(float4) Constructs a float4 vector from a float4 vector. public float4(float4 xyzw) 参数 xyzw float4 The constructed vector's xyzw components will be set to this value. float4(half) Constructs a float4 vector from a single half value by converting it to float and assigning it to every component. public float4(half v) 参数 v half half to convert to float4 float4(half4) Constructs a float4 vector from a half4 vector by componentwise conversion. public float4(half4 v) 参数 v half4 half4 to convert to float4 float4(int4) Constructs a float4 vector from a int4 vector by componentwise conversion. public float4(int4 v) 参数 v int4 int4 to convert to float4 float4(uint4) Constructs a float4 vector from a uint4 vector by componentwise conversion. public float4(uint4 v) 参数 v uint4 uint4 to convert to float4 字段 w w component of the vector. public float w 字段值 float x x component of the vector. public float x 字段值 float y y component of the vector. public float y 字段值 float z z component of the vector. public float z 字段值 float zero float4 zero value. public static readonly float4 zero 字段值 float4 属性 this[int] Returns the float element at a specified index. public float this[int index] { get; set; } 参数 index int 属性值 float 方法 Equals(object) Returns true if the float4 is equal to a given float4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float4) Returns true if the float4 is equal to a given float4, false otherwise. public bool Equals(float4 rhs) 参数 rhs float4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float4) Returns the result of a componentwise addition operation on a float value and a float4 vector. public static float4 operator +(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float4 Right hand side float4 to use to compute componentwise addition. 返回 float4 float4 result of the componentwise addition. operator +(float4, float) Returns the result of a componentwise addition operation on a float4 vector and a float value. public static float4 operator +(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float4 float4 result of the componentwise addition. operator +(float4, float4) Returns the result of a componentwise addition operation on two float4 vectors. public static float4 operator +(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise addition. rhs float4 Right hand side float4 to use to compute componentwise addition. 返回 float4 float4 result of the componentwise addition. operator --(float4) Returns the result of a componentwise decrement operation on a float4 vector. public static float4 operator --(float4 val) 参数 val float4 Value to use when computing the componentwise decrement. 返回 float4 float4 result of the componentwise decrement. operator /(float, float4) Returns the result of a componentwise division operation on a float value and a float4 vector. public static float4 operator /(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float4 Right hand side float4 to use to compute componentwise division. 返回 float4 float4 result of the componentwise division. operator /(float4, float) Returns the result of a componentwise division operation on a float4 vector and a float value. public static float4 operator /(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float4 float4 result of the componentwise division. operator /(float4, float4) Returns the result of a componentwise division operation on two float4 vectors. public static float4 operator /(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise division. rhs float4 Right hand side float4 to use to compute componentwise division. 返回 float4 float4 result of the componentwise division. operator ==(float, float4) Returns the result of a componentwise equality operation on a float value and a float4 vector. public static bool4 operator ==(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float4 Right hand side float4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(float4, float) Returns the result of a componentwise equality operation on a float4 vector and a float value. public static bool4 operator ==(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(float4, float4) Returns the result of a componentwise equality operation on two float4 vectors. public static bool4 operator ==(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise equality. rhs float4 Right hand side float4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. explicit operator float4(bool) Explicitly converts a single bool value to a float4 vector by converting it to float and assigning it to every component. public static explicit operator float4(bool v) 参数 v bool bool to convert to float4 返回 float4 Converted value. explicit operator float4(double) Explicitly converts a single double value to a float4 vector by converting it to float and assigning it to every component. public static explicit operator float4(double v) 参数 v double double to convert to float4 返回 float4 Converted value. explicit operator float4(bool4) Explicitly converts a bool4 vector to a float4 vector by componentwise conversion. public static explicit operator float4(bool4 v) 参数 v bool4 bool4 to convert to float4 返回 float4 Converted value. explicit operator float4(double4) Explicitly converts a double4 vector to a float4 vector by componentwise conversion. public static explicit operator float4(double4 v) 参数 v double4 double4 to convert to float4 返回 float4 Converted value. operator >(float, float4) Returns the result of a componentwise greater than operation on a float value and a float4 vector. public static bool4 operator >(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float4 Right hand side float4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(float4, float) Returns the result of a componentwise greater than operation on a float4 vector and a float value. public static bool4 operator >(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(float4, float4) Returns the result of a componentwise greater than operation on two float4 vectors. public static bool4 operator >(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise greater than. rhs float4 Right hand side float4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >=(float, float4) Returns the result of a componentwise greater or equal operation on a float value and a float4 vector. public static bool4 operator >=(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float4 Right hand side float4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(float4, float) Returns the result of a componentwise greater or equal operation on a float4 vector and a float value. public static bool4 operator >=(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(float4, float4) Returns the result of a componentwise greater or equal operation on two float4 vectors. public static bool4 operator >=(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise greater or equal. rhs float4 Right hand side float4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. implicit operator float4(int) Implicitly converts a single int value to a float4 vector by converting it to float and assigning it to every component. public static implicit operator float4(int v) 参数 v int int to convert to float4 返回 float4 Converted value. implicit operator float4(float) Implicitly converts a single float value to a float4 vector by assigning it to every component. public static implicit operator float4(float v) 参数 v float float to convert to float4 返回 float4 Converted value. implicit operator float4(uint) Implicitly converts a single uint value to a float4 vector by converting it to float and assigning it to every component. public static implicit operator float4(uint v) 参数 v uint uint to convert to float4 返回 float4 Converted value. implicit operator float4(half) Implicitly converts a single half value to a float4 vector by converting it to float and assigning it to every component. public static implicit operator float4(half v) 参数 v half half to convert to float4 返回 float4 Converted value. implicit operator float4(half4) Implicitly converts a half4 vector to a float4 vector by componentwise conversion. public static implicit operator float4(half4 v) 参数 v half4 half4 to convert to float4 返回 float4 Converted value. implicit operator float4(int4) Implicitly converts a int4 vector to a float4 vector by componentwise conversion. public static implicit operator float4(int4 v) 参数 v int4 int4 to convert to float4 返回 float4 Converted value. implicit operator float4(uint4) Implicitly converts a uint4 vector to a float4 vector by componentwise conversion. public static implicit operator float4(uint4 v) 参数 v uint4 uint4 to convert to float4 返回 float4 Converted value. operator ++(float4) Returns the result of a componentwise increment operation on a float4 vector. public static float4 operator ++(float4 val) 参数 val float4 Value to use when computing the componentwise increment. 返回 float4 float4 result of the componentwise increment. operator !=(float, float4) Returns the result of a componentwise not equal operation on a float value and a float4 vector. public static bool4 operator !=(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float4 Right hand side float4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(float4, float) Returns the result of a componentwise not equal operation on a float4 vector and a float value. public static bool4 operator !=(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(float4, float4) Returns the result of a componentwise not equal operation on two float4 vectors. public static bool4 operator !=(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise not equal. rhs float4 Right hand side float4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator <(float, float4) Returns the result of a componentwise less than operation on a float value and a float4 vector. public static bool4 operator <(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float4 Right hand side float4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(float4, float) Returns the result of a componentwise less than operation on a float4 vector and a float value. public static bool4 operator <(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(float4, float4) Returns the result of a componentwise less than operation on two float4 vectors. public static bool4 operator <(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise less than. rhs float4 Right hand side float4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <=(float, float4) Returns the result of a componentwise less or equal operation on a float value and a float4 vector. public static bool4 operator <=(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float4 Right hand side float4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(float4, float) Returns the result of a componentwise less or equal operation on a float4 vector and a float value. public static bool4 operator <=(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(float4, float4) Returns the result of a componentwise less or equal operation on two float4 vectors. public static bool4 operator <=(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise less or equal. rhs float4 Right hand side float4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator %(float, float4) Returns the result of a componentwise modulus operation on a float value and a float4 vector. public static float4 operator %(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float4 Right hand side float4 to use to compute componentwise modulus. 返回 float4 float4 result of the componentwise modulus. operator %(float4, float) Returns the result of a componentwise modulus operation on a float4 vector and a float value. public static float4 operator %(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float4 float4 result of the componentwise modulus. operator %(float4, float4) Returns the result of a componentwise modulus operation on two float4 vectors. public static float4 operator %(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise modulus. rhs float4 Right hand side float4 to use to compute componentwise modulus. 返回 float4 float4 result of the componentwise modulus. operator *(float, float4) Returns the result of a componentwise multiplication operation on a float value and a float4 vector. public static float4 operator *(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float4 Right hand side float4 to use to compute componentwise multiplication. 返回 float4 float4 result of the componentwise multiplication. operator *(float4, float) Returns the result of a componentwise multiplication operation on a float4 vector and a float value. public static float4 operator *(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float4 float4 result of the componentwise multiplication. operator *(float4, float4) Returns the result of a componentwise multiplication operation on two float4 vectors. public static float4 operator *(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise multiplication. rhs float4 Right hand side float4 to use to compute componentwise multiplication. 返回 float4 float4 result of the componentwise multiplication. operator -(float, float4) Returns the result of a componentwise subtraction operation on a float value and a float4 vector. public static float4 operator -(float lhs, float4 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float4 Right hand side float4 to use to compute componentwise subtraction. 返回 float4 float4 result of the componentwise subtraction. operator -(float4, float) Returns the result of a componentwise subtraction operation on a float4 vector and a float value. public static float4 operator -(float4 lhs, float rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float4 float4 result of the componentwise subtraction. operator -(float4, float4) Returns the result of a componentwise subtraction operation on two float4 vectors. public static float4 operator -(float4 lhs, float4 rhs) 参数 lhs float4 Left hand side float4 to use to compute componentwise subtraction. rhs float4 Right hand side float4 to use to compute componentwise subtraction. 返回 float4 float4 result of the componentwise subtraction. operator -(float4) Returns the result of a componentwise unary minus operation on a float4 vector. public static float4 operator -(float4 val) 参数 val float4 Value to use when computing the componentwise unary minus. 返回 float4 float4 result of the componentwise unary minus. operator +(float4) Returns the result of a componentwise unary plus operation on a float4 vector. public static float4 operator +(float4 val) 参数 val float4 Value to use when computing the componentwise unary plus. 返回 float4 float4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float4x2.html": {
    "href": "reference/Unity.Mathematics.float4x2.html",
    "title": "float4x2 结构 | Fantasy.Net API Reference",
    "keywords": "float4x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x2 matrix of floats. public struct float4x2 : IEquatable<float4x2>, IFormattable 实现 IEquatable<float4x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float4x2(bool) Constructs a float4x2 matrix from a single bool value by converting it to float and assigning it to every component. public float4x2(bool v) 参数 v bool bool to convert to float4x2 float4x2(double) Constructs a float4x2 matrix from a single double value by converting it to float and assigning it to every component. public float4x2(double v) 参数 v double double to convert to float4x2 float4x2(int) Constructs a float4x2 matrix from a single int value by converting it to float and assigning it to every component. public float4x2(int v) 参数 v int int to convert to float4x2 float4x2(float) Constructs a float4x2 matrix from a single float value by assigning it to every component. public float4x2(float v) 参数 v float float to convert to float4x2 float4x2(float, float, float, float, float, float, float, float) Constructs a float4x2 matrix from 8 float values given in row-major order. public float4x2(float m00, float m01, float m10, float m11, float m20, float m21, float m30, float m31) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m30 float The matrix at row 3, column 0 will be set to this value. m31 float The matrix at row 3, column 1 will be set to this value. float4x2(uint) Constructs a float4x2 matrix from a single uint value by converting it to float and assigning it to every component. public float4x2(uint v) 参数 v uint uint to convert to float4x2 float4x2(bool4x2) Constructs a float4x2 matrix from a bool4x2 matrix by componentwise conversion. public float4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to float4x2 float4x2(double4x2) Constructs a float4x2 matrix from a double4x2 matrix by componentwise conversion. public float4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to float4x2 float4x2(float4, float4) Constructs a float4x2 matrix from two float4 vectors. public float4x2(float4 c0, float4 c1) 参数 c0 float4 The matrix column c0 will be set to this value. c1 float4 The matrix column c1 will be set to this value. float4x2(int4x2) Constructs a float4x2 matrix from a int4x2 matrix by componentwise conversion. public float4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to float4x2 float4x2(uint4x2) Constructs a float4x2 matrix from a uint4x2 matrix by componentwise conversion. public float4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to float4x2 字段 c0 Column 0 of the matrix. public float4 c0 字段值 float4 c1 Column 1 of the matrix. public float4 c1 字段值 float4 zero float4x2 zero value. public static readonly float4x2 zero 字段值 float4x2 属性 this[int] Returns the float4 element at a specified index. public ref float4 this[int index] { get; } 参数 index int 属性值 float4 方法 Equals(object) Returns true if the float4x2 is equal to a given float4x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float4x2) Returns true if the float4x2 is equal to a given float4x2, false otherwise. public bool Equals(float4x2 rhs) 参数 rhs float4x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float4x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float4x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float4x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float4x2) Returns the result of a componentwise addition operation on a float value and a float4x2 matrix. public static float4x2 operator +(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float4x2 Right hand side float4x2 to use to compute componentwise addition. 返回 float4x2 float4x2 result of the componentwise addition. operator +(float4x2, float) Returns the result of a componentwise addition operation on a float4x2 matrix and a float value. public static float4x2 operator +(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float4x2 float4x2 result of the componentwise addition. operator +(float4x2, float4x2) Returns the result of a componentwise addition operation on two float4x2 matrices. public static float4x2 operator +(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise addition. rhs float4x2 Right hand side float4x2 to use to compute componentwise addition. 返回 float4x2 float4x2 result of the componentwise addition. operator --(float4x2) Returns the result of a componentwise decrement operation on a float4x2 matrix. public static float4x2 operator --(float4x2 val) 参数 val float4x2 Value to use when computing the componentwise decrement. 返回 float4x2 float4x2 result of the componentwise decrement. operator /(float, float4x2) Returns the result of a componentwise division operation on a float value and a float4x2 matrix. public static float4x2 operator /(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float4x2 Right hand side float4x2 to use to compute componentwise division. 返回 float4x2 float4x2 result of the componentwise division. operator /(float4x2, float) Returns the result of a componentwise division operation on a float4x2 matrix and a float value. public static float4x2 operator /(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float4x2 float4x2 result of the componentwise division. operator /(float4x2, float4x2) Returns the result of a componentwise division operation on two float4x2 matrices. public static float4x2 operator /(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise division. rhs float4x2 Right hand side float4x2 to use to compute componentwise division. 返回 float4x2 float4x2 result of the componentwise division. operator ==(float, float4x2) Returns the result of a componentwise equality operation on a float value and a float4x2 matrix. public static bool4x2 operator ==(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float4x2 Right hand side float4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(float4x2, float) Returns the result of a componentwise equality operation on a float4x2 matrix and a float value. public static bool4x2 operator ==(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(float4x2, float4x2) Returns the result of a componentwise equality operation on two float4x2 matrices. public static bool4x2 operator ==(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise equality. rhs float4x2 Right hand side float4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. explicit operator float4x2(bool) Explicitly converts a single bool value to a float4x2 matrix by converting it to float and assigning it to every component. public static explicit operator float4x2(bool v) 参数 v bool bool to convert to float4x2 返回 float4x2 Converted value. explicit operator float4x2(double) Explicitly converts a single double value to a float4x2 matrix by converting it to float and assigning it to every component. public static explicit operator float4x2(double v) 参数 v double double to convert to float4x2 返回 float4x2 Converted value. explicit operator float4x2(bool4x2) Explicitly converts a bool4x2 matrix to a float4x2 matrix by componentwise conversion. public static explicit operator float4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to float4x2 返回 float4x2 Converted value. explicit operator float4x2(double4x2) Explicitly converts a double4x2 matrix to a float4x2 matrix by componentwise conversion. public static explicit operator float4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to float4x2 返回 float4x2 Converted value. operator >(float, float4x2) Returns the result of a componentwise greater than operation on a float value and a float4x2 matrix. public static bool4x2 operator >(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float4x2 Right hand side float4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(float4x2, float) Returns the result of a componentwise greater than operation on a float4x2 matrix and a float value. public static bool4x2 operator >(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(float4x2, float4x2) Returns the result of a componentwise greater than operation on two float4x2 matrices. public static bool4x2 operator >(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise greater than. rhs float4x2 Right hand side float4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >=(float, float4x2) Returns the result of a componentwise greater or equal operation on a float value and a float4x2 matrix. public static bool4x2 operator >=(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float4x2 Right hand side float4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(float4x2, float) Returns the result of a componentwise greater or equal operation on a float4x2 matrix and a float value. public static bool4x2 operator >=(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(float4x2, float4x2) Returns the result of a componentwise greater or equal operation on two float4x2 matrices. public static bool4x2 operator >=(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise greater or equal. rhs float4x2 Right hand side float4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. implicit operator float4x2(int) Implicitly converts a single int value to a float4x2 matrix by converting it to float and assigning it to every component. public static implicit operator float4x2(int v) 参数 v int int to convert to float4x2 返回 float4x2 Converted value. implicit operator float4x2(float) Implicitly converts a single float value to a float4x2 matrix by assigning it to every component. public static implicit operator float4x2(float v) 参数 v float float to convert to float4x2 返回 float4x2 Converted value. implicit operator float4x2(uint) Implicitly converts a single uint value to a float4x2 matrix by converting it to float and assigning it to every component. public static implicit operator float4x2(uint v) 参数 v uint uint to convert to float4x2 返回 float4x2 Converted value. implicit operator float4x2(int4x2) Implicitly converts a int4x2 matrix to a float4x2 matrix by componentwise conversion. public static implicit operator float4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to float4x2 返回 float4x2 Converted value. implicit operator float4x2(uint4x2) Implicitly converts a uint4x2 matrix to a float4x2 matrix by componentwise conversion. public static implicit operator float4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to float4x2 返回 float4x2 Converted value. operator ++(float4x2) Returns the result of a componentwise increment operation on a float4x2 matrix. public static float4x2 operator ++(float4x2 val) 参数 val float4x2 Value to use when computing the componentwise increment. 返回 float4x2 float4x2 result of the componentwise increment. operator !=(float, float4x2) Returns the result of a componentwise not equal operation on a float value and a float4x2 matrix. public static bool4x2 operator !=(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float4x2 Right hand side float4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(float4x2, float) Returns the result of a componentwise not equal operation on a float4x2 matrix and a float value. public static bool4x2 operator !=(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(float4x2, float4x2) Returns the result of a componentwise not equal operation on two float4x2 matrices. public static bool4x2 operator !=(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise not equal. rhs float4x2 Right hand side float4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator <(float, float4x2) Returns the result of a componentwise less than operation on a float value and a float4x2 matrix. public static bool4x2 operator <(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float4x2 Right hand side float4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(float4x2, float) Returns the result of a componentwise less than operation on a float4x2 matrix and a float value. public static bool4x2 operator <(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(float4x2, float4x2) Returns the result of a componentwise less than operation on two float4x2 matrices. public static bool4x2 operator <(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise less than. rhs float4x2 Right hand side float4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <=(float, float4x2) Returns the result of a componentwise less or equal operation on a float value and a float4x2 matrix. public static bool4x2 operator <=(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float4x2 Right hand side float4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(float4x2, float) Returns the result of a componentwise less or equal operation on a float4x2 matrix and a float value. public static bool4x2 operator <=(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(float4x2, float4x2) Returns the result of a componentwise less or equal operation on two float4x2 matrices. public static bool4x2 operator <=(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise less or equal. rhs float4x2 Right hand side float4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator %(float, float4x2) Returns the result of a componentwise modulus operation on a float value and a float4x2 matrix. public static float4x2 operator %(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float4x2 Right hand side float4x2 to use to compute componentwise modulus. 返回 float4x2 float4x2 result of the componentwise modulus. operator %(float4x2, float) Returns the result of a componentwise modulus operation on a float4x2 matrix and a float value. public static float4x2 operator %(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float4x2 float4x2 result of the componentwise modulus. operator %(float4x2, float4x2) Returns the result of a componentwise modulus operation on two float4x2 matrices. public static float4x2 operator %(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise modulus. rhs float4x2 Right hand side float4x2 to use to compute componentwise modulus. 返回 float4x2 float4x2 result of the componentwise modulus. operator *(float, float4x2) Returns the result of a componentwise multiplication operation on a float value and a float4x2 matrix. public static float4x2 operator *(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float4x2 Right hand side float4x2 to use to compute componentwise multiplication. 返回 float4x2 float4x2 result of the componentwise multiplication. operator *(float4x2, float) Returns the result of a componentwise multiplication operation on a float4x2 matrix and a float value. public static float4x2 operator *(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float4x2 float4x2 result of the componentwise multiplication. operator *(float4x2, float4x2) Returns the result of a componentwise multiplication operation on two float4x2 matrices. public static float4x2 operator *(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise multiplication. rhs float4x2 Right hand side float4x2 to use to compute componentwise multiplication. 返回 float4x2 float4x2 result of the componentwise multiplication. operator -(float, float4x2) Returns the result of a componentwise subtraction operation on a float value and a float4x2 matrix. public static float4x2 operator -(float lhs, float4x2 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float4x2 Right hand side float4x2 to use to compute componentwise subtraction. 返回 float4x2 float4x2 result of the componentwise subtraction. operator -(float4x2, float) Returns the result of a componentwise subtraction operation on a float4x2 matrix and a float value. public static float4x2 operator -(float4x2 lhs, float rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float4x2 float4x2 result of the componentwise subtraction. operator -(float4x2, float4x2) Returns the result of a componentwise subtraction operation on two float4x2 matrices. public static float4x2 operator -(float4x2 lhs, float4x2 rhs) 参数 lhs float4x2 Left hand side float4x2 to use to compute componentwise subtraction. rhs float4x2 Right hand side float4x2 to use to compute componentwise subtraction. 返回 float4x2 float4x2 result of the componentwise subtraction. operator -(float4x2) Returns the result of a componentwise unary minus operation on a float4x2 matrix. public static float4x2 operator -(float4x2 val) 参数 val float4x2 Value to use when computing the componentwise unary minus. 返回 float4x2 float4x2 result of the componentwise unary minus. operator +(float4x2) Returns the result of a componentwise unary plus operation on a float4x2 matrix. public static float4x2 operator +(float4x2 val) 参数 val float4x2 Value to use when computing the componentwise unary plus. 返回 float4x2 float4x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float4x3.html": {
    "href": "reference/Unity.Mathematics.float4x3.html",
    "title": "float4x3 结构 | Fantasy.Net API Reference",
    "keywords": "float4x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x3 matrix of floats. public struct float4x3 : IEquatable<float4x3>, IFormattable 实现 IEquatable<float4x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float4x3(bool) Constructs a float4x3 matrix from a single bool value by converting it to float and assigning it to every component. public float4x3(bool v) 参数 v bool bool to convert to float4x3 float4x3(double) Constructs a float4x3 matrix from a single double value by converting it to float and assigning it to every component. public float4x3(double v) 参数 v double double to convert to float4x3 float4x3(int) Constructs a float4x3 matrix from a single int value by converting it to float and assigning it to every component. public float4x3(int v) 参数 v int int to convert to float4x3 float4x3(float) Constructs a float4x3 matrix from a single float value by assigning it to every component. public float4x3(float v) 参数 v float float to convert to float4x3 float4x3(float, float, float, float, float, float, float, float, float, float, float, float) Constructs a float4x3 matrix from 12 float values given in row-major order. public float4x3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22, float m30, float m31, float m32) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. m30 float The matrix at row 3, column 0 will be set to this value. m31 float The matrix at row 3, column 1 will be set to this value. m32 float The matrix at row 3, column 2 will be set to this value. float4x3(uint) Constructs a float4x3 matrix from a single uint value by converting it to float and assigning it to every component. public float4x3(uint v) 参数 v uint uint to convert to float4x3 float4x3(bool4x3) Constructs a float4x3 matrix from a bool4x3 matrix by componentwise conversion. public float4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to float4x3 float4x3(double4x3) Constructs a float4x3 matrix from a double4x3 matrix by componentwise conversion. public float4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to float4x3 float4x3(float4, float4, float4) Constructs a float4x3 matrix from three float4 vectors. public float4x3(float4 c0, float4 c1, float4 c2) 参数 c0 float4 The matrix column c0 will be set to this value. c1 float4 The matrix column c1 will be set to this value. c2 float4 The matrix column c2 will be set to this value. float4x3(int4x3) Constructs a float4x3 matrix from a int4x3 matrix by componentwise conversion. public float4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to float4x3 float4x3(uint4x3) Constructs a float4x3 matrix from a uint4x3 matrix by componentwise conversion. public float4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to float4x3 字段 c0 Column 0 of the matrix. public float4 c0 字段值 float4 c1 Column 1 of the matrix. public float4 c1 字段值 float4 c2 Column 2 of the matrix. public float4 c2 字段值 float4 zero float4x3 zero value. public static readonly float4x3 zero 字段值 float4x3 属性 this[int] Returns the float4 element at a specified index. public ref float4 this[int index] { get; } 参数 index int 属性值 float4 方法 Equals(object) Returns true if the float4x3 is equal to a given float4x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float4x3) Returns true if the float4x3 is equal to a given float4x3, false otherwise. public bool Equals(float4x3 rhs) 参数 rhs float4x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the float4x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the float4x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float4x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(float, float4x3) Returns the result of a componentwise addition operation on a float value and a float4x3 matrix. public static float4x3 operator +(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float4x3 Right hand side float4x3 to use to compute componentwise addition. 返回 float4x3 float4x3 result of the componentwise addition. operator +(float4x3, float) Returns the result of a componentwise addition operation on a float4x3 matrix and a float value. public static float4x3 operator +(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float4x3 float4x3 result of the componentwise addition. operator +(float4x3, float4x3) Returns the result of a componentwise addition operation on two float4x3 matrices. public static float4x3 operator +(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise addition. rhs float4x3 Right hand side float4x3 to use to compute componentwise addition. 返回 float4x3 float4x3 result of the componentwise addition. operator --(float4x3) Returns the result of a componentwise decrement operation on a float4x3 matrix. public static float4x3 operator --(float4x3 val) 参数 val float4x3 Value to use when computing the componentwise decrement. 返回 float4x3 float4x3 result of the componentwise decrement. operator /(float, float4x3) Returns the result of a componentwise division operation on a float value and a float4x3 matrix. public static float4x3 operator /(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float4x3 Right hand side float4x3 to use to compute componentwise division. 返回 float4x3 float4x3 result of the componentwise division. operator /(float4x3, float) Returns the result of a componentwise division operation on a float4x3 matrix and a float value. public static float4x3 operator /(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float4x3 float4x3 result of the componentwise division. operator /(float4x3, float4x3) Returns the result of a componentwise division operation on two float4x3 matrices. public static float4x3 operator /(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise division. rhs float4x3 Right hand side float4x3 to use to compute componentwise division. 返回 float4x3 float4x3 result of the componentwise division. operator ==(float, float4x3) Returns the result of a componentwise equality operation on a float value and a float4x3 matrix. public static bool4x3 operator ==(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float4x3 Right hand side float4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(float4x3, float) Returns the result of a componentwise equality operation on a float4x3 matrix and a float value. public static bool4x3 operator ==(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(float4x3, float4x3) Returns the result of a componentwise equality operation on two float4x3 matrices. public static bool4x3 operator ==(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise equality. rhs float4x3 Right hand side float4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. explicit operator float4x3(bool) Explicitly converts a single bool value to a float4x3 matrix by converting it to float and assigning it to every component. public static explicit operator float4x3(bool v) 参数 v bool bool to convert to float4x3 返回 float4x3 Converted value. explicit operator float4x3(double) Explicitly converts a single double value to a float4x3 matrix by converting it to float and assigning it to every component. public static explicit operator float4x3(double v) 参数 v double double to convert to float4x3 返回 float4x3 Converted value. explicit operator float4x3(bool4x3) Explicitly converts a bool4x3 matrix to a float4x3 matrix by componentwise conversion. public static explicit operator float4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to float4x3 返回 float4x3 Converted value. explicit operator float4x3(double4x3) Explicitly converts a double4x3 matrix to a float4x3 matrix by componentwise conversion. public static explicit operator float4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to float4x3 返回 float4x3 Converted value. operator >(float, float4x3) Returns the result of a componentwise greater than operation on a float value and a float4x3 matrix. public static bool4x3 operator >(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float4x3 Right hand side float4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(float4x3, float) Returns the result of a componentwise greater than operation on a float4x3 matrix and a float value. public static bool4x3 operator >(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(float4x3, float4x3) Returns the result of a componentwise greater than operation on two float4x3 matrices. public static bool4x3 operator >(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise greater than. rhs float4x3 Right hand side float4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >=(float, float4x3) Returns the result of a componentwise greater or equal operation on a float value and a float4x3 matrix. public static bool4x3 operator >=(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float4x3 Right hand side float4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(float4x3, float) Returns the result of a componentwise greater or equal operation on a float4x3 matrix and a float value. public static bool4x3 operator >=(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(float4x3, float4x3) Returns the result of a componentwise greater or equal operation on two float4x3 matrices. public static bool4x3 operator >=(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise greater or equal. rhs float4x3 Right hand side float4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. implicit operator float4x3(int) Implicitly converts a single int value to a float4x3 matrix by converting it to float and assigning it to every component. public static implicit operator float4x3(int v) 参数 v int int to convert to float4x3 返回 float4x3 Converted value. implicit operator float4x3(float) Implicitly converts a single float value to a float4x3 matrix by assigning it to every component. public static implicit operator float4x3(float v) 参数 v float float to convert to float4x3 返回 float4x3 Converted value. implicit operator float4x3(uint) Implicitly converts a single uint value to a float4x3 matrix by converting it to float and assigning it to every component. public static implicit operator float4x3(uint v) 参数 v uint uint to convert to float4x3 返回 float4x3 Converted value. implicit operator float4x3(int4x3) Implicitly converts a int4x3 matrix to a float4x3 matrix by componentwise conversion. public static implicit operator float4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to float4x3 返回 float4x3 Converted value. implicit operator float4x3(uint4x3) Implicitly converts a uint4x3 matrix to a float4x3 matrix by componentwise conversion. public static implicit operator float4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to float4x3 返回 float4x3 Converted value. operator ++(float4x3) Returns the result of a componentwise increment operation on a float4x3 matrix. public static float4x3 operator ++(float4x3 val) 参数 val float4x3 Value to use when computing the componentwise increment. 返回 float4x3 float4x3 result of the componentwise increment. operator !=(float, float4x3) Returns the result of a componentwise not equal operation on a float value and a float4x3 matrix. public static bool4x3 operator !=(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float4x3 Right hand side float4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(float4x3, float) Returns the result of a componentwise not equal operation on a float4x3 matrix and a float value. public static bool4x3 operator !=(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(float4x3, float4x3) Returns the result of a componentwise not equal operation on two float4x3 matrices. public static bool4x3 operator !=(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise not equal. rhs float4x3 Right hand side float4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator <(float, float4x3) Returns the result of a componentwise less than operation on a float value and a float4x3 matrix. public static bool4x3 operator <(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float4x3 Right hand side float4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(float4x3, float) Returns the result of a componentwise less than operation on a float4x3 matrix and a float value. public static bool4x3 operator <(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(float4x3, float4x3) Returns the result of a componentwise less than operation on two float4x3 matrices. public static bool4x3 operator <(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise less than. rhs float4x3 Right hand side float4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <=(float, float4x3) Returns the result of a componentwise less or equal operation on a float value and a float4x3 matrix. public static bool4x3 operator <=(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float4x3 Right hand side float4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(float4x3, float) Returns the result of a componentwise less or equal operation on a float4x3 matrix and a float value. public static bool4x3 operator <=(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(float4x3, float4x3) Returns the result of a componentwise less or equal operation on two float4x3 matrices. public static bool4x3 operator <=(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise less or equal. rhs float4x3 Right hand side float4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator %(float, float4x3) Returns the result of a componentwise modulus operation on a float value and a float4x3 matrix. public static float4x3 operator %(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float4x3 Right hand side float4x3 to use to compute componentwise modulus. 返回 float4x3 float4x3 result of the componentwise modulus. operator %(float4x3, float) Returns the result of a componentwise modulus operation on a float4x3 matrix and a float value. public static float4x3 operator %(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float4x3 float4x3 result of the componentwise modulus. operator %(float4x3, float4x3) Returns the result of a componentwise modulus operation on two float4x3 matrices. public static float4x3 operator %(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise modulus. rhs float4x3 Right hand side float4x3 to use to compute componentwise modulus. 返回 float4x3 float4x3 result of the componentwise modulus. operator *(float, float4x3) Returns the result of a componentwise multiplication operation on a float value and a float4x3 matrix. public static float4x3 operator *(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float4x3 Right hand side float4x3 to use to compute componentwise multiplication. 返回 float4x3 float4x3 result of the componentwise multiplication. operator *(float4x3, float) Returns the result of a componentwise multiplication operation on a float4x3 matrix and a float value. public static float4x3 operator *(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float4x3 float4x3 result of the componentwise multiplication. operator *(float4x3, float4x3) Returns the result of a componentwise multiplication operation on two float4x3 matrices. public static float4x3 operator *(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise multiplication. rhs float4x3 Right hand side float4x3 to use to compute componentwise multiplication. 返回 float4x3 float4x3 result of the componentwise multiplication. operator -(float, float4x3) Returns the result of a componentwise subtraction operation on a float value and a float4x3 matrix. public static float4x3 operator -(float lhs, float4x3 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float4x3 Right hand side float4x3 to use to compute componentwise subtraction. 返回 float4x3 float4x3 result of the componentwise subtraction. operator -(float4x3, float) Returns the result of a componentwise subtraction operation on a float4x3 matrix and a float value. public static float4x3 operator -(float4x3 lhs, float rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float4x3 float4x3 result of the componentwise subtraction. operator -(float4x3, float4x3) Returns the result of a componentwise subtraction operation on two float4x3 matrices. public static float4x3 operator -(float4x3 lhs, float4x3 rhs) 参数 lhs float4x3 Left hand side float4x3 to use to compute componentwise subtraction. rhs float4x3 Right hand side float4x3 to use to compute componentwise subtraction. 返回 float4x3 float4x3 result of the componentwise subtraction. operator -(float4x3) Returns the result of a componentwise unary minus operation on a float4x3 matrix. public static float4x3 operator -(float4x3 val) 参数 val float4x3 Value to use when computing the componentwise unary minus. 返回 float4x3 float4x3 result of the componentwise unary minus. operator +(float4x3) Returns the result of a componentwise unary plus operation on a float4x3 matrix. public static float4x3 operator +(float4x3 val) 参数 val float4x3 Value to use when computing the componentwise unary plus. 返回 float4x3 float4x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.float4x4.html": {
    "href": "reference/Unity.Mathematics.float4x4.html",
    "title": "float4x4 结构 | Fantasy.Net API Reference",
    "keywords": "float4x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x4 matrix of floats. public struct float4x4 : IEquatable<float4x4>, IFormattable 实现 IEquatable<float4x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 float4x4(bool) Constructs a float4x4 matrix from a single bool value by converting it to float and assigning it to every component. public float4x4(bool v) 参数 v bool bool to convert to float4x4 float4x4(double) Constructs a float4x4 matrix from a single double value by converting it to float and assigning it to every component. public float4x4(double v) 参数 v double double to convert to float4x4 float4x4(int) Constructs a float4x4 matrix from a single int value by converting it to float and assigning it to every component. public float4x4(int v) 参数 v int int to convert to float4x4 float4x4(float) Constructs a float4x4 matrix from a single float value by assigning it to every component. public float4x4(float v) 参数 v float float to convert to float4x4 float4x4(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) Constructs a float4x4 matrix from 16 float values given in row-major order. public float4x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m03 float The matrix at row 0, column 3 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m13 float The matrix at row 1, column 3 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. m23 float The matrix at row 2, column 3 will be set to this value. m30 float The matrix at row 3, column 0 will be set to this value. m31 float The matrix at row 3, column 1 will be set to this value. m32 float The matrix at row 3, column 2 will be set to this value. m33 float The matrix at row 3, column 3 will be set to this value. float4x4(uint) Constructs a float4x4 matrix from a single uint value by converting it to float and assigning it to every component. public float4x4(uint v) 参数 v uint uint to convert to float4x4 float4x4(RigidTransform) Constructs a float4x4 from a RigidTransform. public float4x4(RigidTransform transform) 参数 transform RigidTransform The RigidTransform. float4x4(bool4x4) Constructs a float4x4 matrix from a bool4x4 matrix by componentwise conversion. public float4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to float4x4 float4x4(double4x4) Constructs a float4x4 matrix from a double4x4 matrix by componentwise conversion. public float4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to float4x4 float4x4(float3x3, float3) Constructs a float4x4 from a float3x3 rotation matrix and a float3 translation vector. public float4x4(float3x3 rotation, float3 translation) 参数 rotation float3x3 The float3x3 rotation matrix. translation float3 The translation vector. float4x4(float4, float4, float4, float4) Constructs a float4x4 matrix from four float4 vectors. public float4x4(float4 c0, float4 c1, float4 c2, float4 c3) 参数 c0 float4 The matrix column c0 will be set to this value. c1 float4 The matrix column c1 will be set to this value. c2 float4 The matrix column c2 will be set to this value. c3 float4 The matrix column c3 will be set to this value. float4x4(int4x4) Constructs a float4x4 matrix from a int4x4 matrix by componentwise conversion. public float4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to float4x4 float4x4(quaternion, float3) Constructs a float4x4 from a quaternion and a float3 translation vector. public float4x4(quaternion rotation, float3 translation) 参数 rotation quaternion The quaternion rotation. translation float3 The translation vector. float4x4(uint4x4) Constructs a float4x4 matrix from a uint4x4 matrix by componentwise conversion. public float4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to float4x4 字段 c0 Column 0 of the matrix. public float4 c0 字段值 float4 c1 Column 1 of the matrix. public float4 c1 字段值 float4 c2 Column 2 of the matrix. public float4 c2 字段值 float4 c3 Column 3 of the matrix. public float4 c3 字段值 float4 identity float4x4 identity transform. public static readonly float4x4 identity 字段值 float4x4 zero float4x4 zero value. public static readonly float4x4 zero 字段值 float4x4 属性 this[int] Returns the float4 element at a specified index. public ref float4 this[int index] { get; } 参数 index int 属性值 float4 方法 AxisAngle(float3, float) Returns a float4x4 matrix representing a rotation around a unit axis by an angle in radians. The rotation direction is clockwise when looking along the rotation axis towards the origin. public static float4x4 AxisAngle(float3 axis, float angle) 参数 axis float3 The axis of rotation. angle float The angle of rotation in radians. 返回 float4x4 The float4x4 matrix representing the rotation about an axis. Equals(object) Returns true if the float4x4 is equal to a given float4x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(float4x4) Returns true if the float4x4 is equal to a given float4x4, false otherwise. public bool Equals(float4x4 rhs) 参数 rhs float4x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Euler(float, float, float, RotationOrder) Returns a float4x4 rotation matrix constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static float4x4 Euler(float x, float y, float z, math.RotationOrder order = RotationOrder.Default) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. order math.RotationOrder The order in which the rotations are applied. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in given order. Euler(float3, RotationOrder) Returns a float4x4 constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static float4x4 Euler(float3 xyz, math.RotationOrder order = RotationOrder.Default) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. order math.RotationOrder The order in which the rotations are applied. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in given order. EulerXYZ(float, float, float) Returns a float4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerXYZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in x-y-z order. EulerXYZ(float3) Returns a float4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerXYZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in x-y-z order. EulerXZY(float, float, float) Returns a float4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerXZY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in x-z-y order. EulerXZY(float3) Returns a float4x4 rotation matrix constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerXZY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in x-z-y order. EulerYXZ(float, float, float) Returns a float4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerYXZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in y-x-z order. EulerYXZ(float3) Returns a float4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerYXZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in y-x-z order. EulerYZX(float, float, float) Returns a float4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerYZX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in y-z-x order. EulerYZX(float3) Returns a float4x4 rotation matrix constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerYZX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in y-z-x order. EulerZXY(float, float, float) Returns a float4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static float4x4 EulerZXY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in z-x-y order. EulerZXY(float3) Returns a float4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static float4x4 EulerZXY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in z-x-y order. EulerZYX(float, float, float) Returns a float4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerZYX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in z-y-x order. EulerZYX(float3) Returns a float4x4 rotation matrix constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float4x4 EulerZYX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 float4x4 The float4x4 rotation matrix of the Euler angle rotation in z-y-x order. GetHashCode() Returns a hash code for the float4x4. public override int GetHashCode() 返回 int The computed hash code. LookAt(float3, float3, float3) Returns a float4x4 view matrix given an eye position, a target point and a unit length up vector. The up vector is assumed to be unit length, the eye and target points are assumed to be distinct and the vector between them is assumes to be collinear with the up vector. If these assumptions are not met use float4x4.LookRotationSafe instead. public static float4x4 LookAt(float3 eye, float3 target, float3 up) 参数 eye float3 The eye position. target float3 The view target position. up float3 The eye up direction. 返回 float4x4 The float4x4 view matrix. Ortho(float, float, float, float) Returns a float4x4 centered orthographic projection matrix. public static float4x4 Ortho(float width, float height, float near, float far) 参数 width float The width of the view volume. height float The height of the view volume. near float The distance to the near plane. far float The distance to the far plane. 返回 float4x4 The float4x4 centered orthographic projection matrix. OrthoOffCenter(float, float, float, float, float, float) Returns a float4x4 off-center orthographic projection matrix. public static float4x4 OrthoOffCenter(float left, float right, float bottom, float top, float near, float far) 参数 left float The minimum x-coordinate of the view volume. right float The maximum x-coordinate of the view volume. bottom float The minimum y-coordinate of the view volume. top float The minimum y-coordinate of the view volume. near float The distance to the near plane. far float The distance to the far plane. 返回 float4x4 The float4x4 off-center orthographic projection matrix. PerspectiveFov(float, float, float, float) Returns a float4x4 perspective projection matrix based on field of view. public static float4x4 PerspectiveFov(float verticalFov, float aspect, float near, float far) 参数 verticalFov float Vertical Field of view in radians. aspect float X:Y aspect ratio. near float Distance to near plane. Must be greater than zero. far float Distance to far plane. Must be greater than zero. 返回 float4x4 The float4x4 perspective projection matrix. PerspectiveOffCenter(float, float, float, float, float, float) Returns a float4x4 off-center perspective projection matrix. public static float4x4 PerspectiveOffCenter(float left, float right, float bottom, float top, float near, float far) 参数 left float The x-coordinate of the left side of the clipping frustum at the near plane. right float The x-coordinate of the right side of the clipping frustum at the near plane. bottom float The y-coordinate of the bottom side of the clipping frustum at the near plane. top float The y-coordinate of the top side of the clipping frustum at the near plane. near float Distance to the near plane. Must be greater than zero. far float Distance to the far plane. Must be greater than zero. 返回 float4x4 The float4x4 off-center perspective projection matrix. RotateX(float) Returns a float4x4 matrix that rotates around the x-axis by a given number of radians. public static float4x4 RotateX(float angle) 参数 angle float The clockwise rotation angle when looking along the x-axis towards the origin in radians. 返回 float4x4 The float4x4 rotation matrix that rotates around the x-axis. RotateY(float) Returns a float4x4 matrix that rotates around the y-axis by a given number of radians. public static float4x4 RotateY(float angle) 参数 angle float The clockwise rotation angle when looking along the y-axis towards the origin in radians. 返回 float4x4 The float4x4 rotation matrix that rotates around the y-axis. RotateZ(float) Returns a float4x4 matrix that rotates around the z-axis by a given number of radians. public static float4x4 RotateZ(float angle) 参数 angle float The clockwise rotation angle when looking along the z-axis towards the origin in radians. 返回 float4x4 The float4x4 rotation matrix that rotates around the z-axis. Scale(float) Returns a float4x4 scale matrix given 3 axis scales. public static float4x4 Scale(float s) 参数 s float The uniform scaling factor. 返回 float4x4 The float4x4 matrix that represents a uniform scale. Scale(float, float, float) Returns a float4x4 scale matrix given a float3 vector containing the 3 axis scales. public static float4x4 Scale(float x, float y, float z) 参数 x float The x-axis scaling factor. y float The y-axis scaling factor. z float The z-axis scaling factor. 返回 float4x4 The float4x4 matrix that represents a non-uniform scale. Scale(float3) Returns a float4x4 scale matrix given a float3 vector containing the 3 axis scales. public static float4x4 Scale(float3 scales) 参数 scales float3 The vector containing scale factors for each axis. 返回 float4x4 The float4x4 matrix that represents a non-uniform scale. TRS(float3, quaternion, float3) Returns a float4x4 matrix representing a combined scale-, rotation- and translation transform. Equivalent to mul(translationTransform, mul(rotationTransform, scaleTransform)). public static float4x4 TRS(float3 translation, quaternion rotation, float3 scale) 参数 translation float3 The translation vector. rotation quaternion The quaternion rotation. scale float3 The scaling factors of each axis. 返回 float4x4 The float4x4 matrix representing the translation, rotation, and scale by the inputs. ToString() Returns a string representation of the float4x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the float4x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. Translate(float3) Returns a float4x4 translation matrix given a float3 translation vector. public static float4x4 Translate(float3 vector) 参数 vector float3 The translation vector. 返回 float4x4 The float4x4 translation matrix. 运算符 operator +(float, float4x4) Returns the result of a componentwise addition operation on a float value and a float4x4 matrix. public static float4x4 operator +(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise addition. rhs float4x4 Right hand side float4x4 to use to compute componentwise addition. 返回 float4x4 float4x4 result of the componentwise addition. operator +(float4x4, float) Returns the result of a componentwise addition operation on a float4x4 matrix and a float value. public static float4x4 operator +(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise addition. rhs float Right hand side float to use to compute componentwise addition. 返回 float4x4 float4x4 result of the componentwise addition. operator +(float4x4, float4x4) Returns the result of a componentwise addition operation on two float4x4 matrices. public static float4x4 operator +(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise addition. rhs float4x4 Right hand side float4x4 to use to compute componentwise addition. 返回 float4x4 float4x4 result of the componentwise addition. operator --(float4x4) Returns the result of a componentwise decrement operation on a float4x4 matrix. public static float4x4 operator --(float4x4 val) 参数 val float4x4 Value to use when computing the componentwise decrement. 返回 float4x4 float4x4 result of the componentwise decrement. operator /(float, float4x4) Returns the result of a componentwise division operation on a float value and a float4x4 matrix. public static float4x4 operator /(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise division. rhs float4x4 Right hand side float4x4 to use to compute componentwise division. 返回 float4x4 float4x4 result of the componentwise division. operator /(float4x4, float) Returns the result of a componentwise division operation on a float4x4 matrix and a float value. public static float4x4 operator /(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise division. rhs float Right hand side float to use to compute componentwise division. 返回 float4x4 float4x4 result of the componentwise division. operator /(float4x4, float4x4) Returns the result of a componentwise division operation on two float4x4 matrices. public static float4x4 operator /(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise division. rhs float4x4 Right hand side float4x4 to use to compute componentwise division. 返回 float4x4 float4x4 result of the componentwise division. operator ==(float, float4x4) Returns the result of a componentwise equality operation on a float value and a float4x4 matrix. public static bool4x4 operator ==(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise equality. rhs float4x4 Right hand side float4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(float4x4, float) Returns the result of a componentwise equality operation on a float4x4 matrix and a float value. public static bool4x4 operator ==(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise equality. rhs float Right hand side float to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(float4x4, float4x4) Returns the result of a componentwise equality operation on two float4x4 matrices. public static bool4x4 operator ==(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise equality. rhs float4x4 Right hand side float4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. explicit operator float4x4(bool) Explicitly converts a single bool value to a float4x4 matrix by converting it to float and assigning it to every component. public static explicit operator float4x4(bool v) 参数 v bool bool to convert to float4x4 返回 float4x4 Converted value. explicit operator float4x4(double) Explicitly converts a single double value to a float4x4 matrix by converting it to float and assigning it to every component. public static explicit operator float4x4(double v) 参数 v double double to convert to float4x4 返回 float4x4 Converted value. explicit operator float4x4(bool4x4) Explicitly converts a bool4x4 matrix to a float4x4 matrix by componentwise conversion. public static explicit operator float4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to float4x4 返回 float4x4 Converted value. explicit operator float4x4(double4x4) Explicitly converts a double4x4 matrix to a float4x4 matrix by componentwise conversion. public static explicit operator float4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to float4x4 返回 float4x4 Converted value. operator >(float, float4x4) Returns the result of a componentwise greater than operation on a float value and a float4x4 matrix. public static bool4x4 operator >(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater than. rhs float4x4 Right hand side float4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(float4x4, float) Returns the result of a componentwise greater than operation on a float4x4 matrix and a float value. public static bool4x4 operator >(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise greater than. rhs float Right hand side float to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(float4x4, float4x4) Returns the result of a componentwise greater than operation on two float4x4 matrices. public static bool4x4 operator >(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise greater than. rhs float4x4 Right hand side float4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >=(float, float4x4) Returns the result of a componentwise greater or equal operation on a float value and a float4x4 matrix. public static bool4x4 operator >=(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise greater or equal. rhs float4x4 Right hand side float4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(float4x4, float) Returns the result of a componentwise greater or equal operation on a float4x4 matrix and a float value. public static bool4x4 operator >=(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise greater or equal. rhs float Right hand side float to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(float4x4, float4x4) Returns the result of a componentwise greater or equal operation on two float4x4 matrices. public static bool4x4 operator >=(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise greater or equal. rhs float4x4 Right hand side float4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. implicit operator float4x4(int) Implicitly converts a single int value to a float4x4 matrix by converting it to float and assigning it to every component. public static implicit operator float4x4(int v) 参数 v int int to convert to float4x4 返回 float4x4 Converted value. implicit operator float4x4(float) Implicitly converts a single float value to a float4x4 matrix by assigning it to every component. public static implicit operator float4x4(float v) 参数 v float float to convert to float4x4 返回 float4x4 Converted value. implicit operator float4x4(uint) Implicitly converts a single uint value to a float4x4 matrix by converting it to float and assigning it to every component. public static implicit operator float4x4(uint v) 参数 v uint uint to convert to float4x4 返回 float4x4 Converted value. implicit operator float4x4(int4x4) Implicitly converts a int4x4 matrix to a float4x4 matrix by componentwise conversion. public static implicit operator float4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to float4x4 返回 float4x4 Converted value. implicit operator float4x4(uint4x4) Implicitly converts a uint4x4 matrix to a float4x4 matrix by componentwise conversion. public static implicit operator float4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to float4x4 返回 float4x4 Converted value. operator ++(float4x4) Returns the result of a componentwise increment operation on a float4x4 matrix. public static float4x4 operator ++(float4x4 val) 参数 val float4x4 Value to use when computing the componentwise increment. 返回 float4x4 float4x4 result of the componentwise increment. operator !=(float, float4x4) Returns the result of a componentwise not equal operation on a float value and a float4x4 matrix. public static bool4x4 operator !=(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise not equal. rhs float4x4 Right hand side float4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(float4x4, float) Returns the result of a componentwise not equal operation on a float4x4 matrix and a float value. public static bool4x4 operator !=(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise not equal. rhs float Right hand side float to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(float4x4, float4x4) Returns the result of a componentwise not equal operation on two float4x4 matrices. public static bool4x4 operator !=(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise not equal. rhs float4x4 Right hand side float4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator <(float, float4x4) Returns the result of a componentwise less than operation on a float value and a float4x4 matrix. public static bool4x4 operator <(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less than. rhs float4x4 Right hand side float4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(float4x4, float) Returns the result of a componentwise less than operation on a float4x4 matrix and a float value. public static bool4x4 operator <(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise less than. rhs float Right hand side float to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(float4x4, float4x4) Returns the result of a componentwise less than operation on two float4x4 matrices. public static bool4x4 operator <(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise less than. rhs float4x4 Right hand side float4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <=(float, float4x4) Returns the result of a componentwise less or equal operation on a float value and a float4x4 matrix. public static bool4x4 operator <=(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise less or equal. rhs float4x4 Right hand side float4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(float4x4, float) Returns the result of a componentwise less or equal operation on a float4x4 matrix and a float value. public static bool4x4 operator <=(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise less or equal. rhs float Right hand side float to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(float4x4, float4x4) Returns the result of a componentwise less or equal operation on two float4x4 matrices. public static bool4x4 operator <=(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise less or equal. rhs float4x4 Right hand side float4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator %(float, float4x4) Returns the result of a componentwise modulus operation on a float value and a float4x4 matrix. public static float4x4 operator %(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise modulus. rhs float4x4 Right hand side float4x4 to use to compute componentwise modulus. 返回 float4x4 float4x4 result of the componentwise modulus. operator %(float4x4, float) Returns the result of a componentwise modulus operation on a float4x4 matrix and a float value. public static float4x4 operator %(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise modulus. rhs float Right hand side float to use to compute componentwise modulus. 返回 float4x4 float4x4 result of the componentwise modulus. operator %(float4x4, float4x4) Returns the result of a componentwise modulus operation on two float4x4 matrices. public static float4x4 operator %(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise modulus. rhs float4x4 Right hand side float4x4 to use to compute componentwise modulus. 返回 float4x4 float4x4 result of the componentwise modulus. operator *(float, float4x4) Returns the result of a componentwise multiplication operation on a float value and a float4x4 matrix. public static float4x4 operator *(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise multiplication. rhs float4x4 Right hand side float4x4 to use to compute componentwise multiplication. 返回 float4x4 float4x4 result of the componentwise multiplication. operator *(float4x4, float) Returns the result of a componentwise multiplication operation on a float4x4 matrix and a float value. public static float4x4 operator *(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise multiplication. rhs float Right hand side float to use to compute componentwise multiplication. 返回 float4x4 float4x4 result of the componentwise multiplication. operator *(float4x4, float4x4) Returns the result of a componentwise multiplication operation on two float4x4 matrices. public static float4x4 operator *(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise multiplication. rhs float4x4 Right hand side float4x4 to use to compute componentwise multiplication. 返回 float4x4 float4x4 result of the componentwise multiplication. operator -(float, float4x4) Returns the result of a componentwise subtraction operation on a float value and a float4x4 matrix. public static float4x4 operator -(float lhs, float4x4 rhs) 参数 lhs float Left hand side float to use to compute componentwise subtraction. rhs float4x4 Right hand side float4x4 to use to compute componentwise subtraction. 返回 float4x4 float4x4 result of the componentwise subtraction. operator -(float4x4, float) Returns the result of a componentwise subtraction operation on a float4x4 matrix and a float value. public static float4x4 operator -(float4x4 lhs, float rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise subtraction. rhs float Right hand side float to use to compute componentwise subtraction. 返回 float4x4 float4x4 result of the componentwise subtraction. operator -(float4x4, float4x4) Returns the result of a componentwise subtraction operation on two float4x4 matrices. public static float4x4 operator -(float4x4 lhs, float4x4 rhs) 参数 lhs float4x4 Left hand side float4x4 to use to compute componentwise subtraction. rhs float4x4 Right hand side float4x4 to use to compute componentwise subtraction. 返回 float4x4 float4x4 result of the componentwise subtraction. operator -(float4x4) Returns the result of a componentwise unary minus operation on a float4x4 matrix. public static float4x4 operator -(float4x4 val) 参数 val float4x4 Value to use when computing the componentwise unary minus. 返回 float4x4 float4x4 result of the componentwise unary minus. operator +(float4x4) Returns the result of a componentwise unary plus operation on a float4x4 matrix. public static float4x4 operator +(float4x4 val) 参数 val float4x4 Value to use when computing the componentwise unary plus. 返回 float4x4 float4x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.half.html": {
    "href": "reference/Unity.Mathematics.half.html",
    "title": "half 结构 | Fantasy.Net API Reference",
    "keywords": "half 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A half precision float that uses 16 bits instead of 32 bits. public struct half : IEquatable<half>, IFormattable 实现 IEquatable<half> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 half(double) Constructs a half value from a double value. public half(double v) 参数 v double The double precision float value to convert to half. half(float) Constructs a half value from a float value. public half(float v) 参数 v float The single precision float value to convert to half. half(half) Constructs a half value from a half value. public half(half x) 参数 x half The input half value to copy. 字段 value The raw 16 bit value of the half. public ushort value 字段值 ushort zero half zero value. public static readonly half zero 字段值 half 属性 MaxValue The maximum finite half value as a single precision float. public static float MaxValue { get; } 属性值 float MaxValueAsHalf The maximum finite half value as a half. public static half MaxValueAsHalf { get; } 属性值 half MinValue The minimum finite half value as a single precision float. public static float MinValue { get; } 属性值 float MinValueAsHalf The minimum finite half value as a half. public static half MinValueAsHalf { get; } 属性值 half 方法 Equals(object) Returns true if the half is equal to a given half, false otherwise. public override bool Equals(object o) 参数 o object Right hand side object to use in comparison. 返回 bool True if the object is of type half and is bitwise equivalent, false otherwise. Equals(half) Returns true if the half is bitwise equivalent to a given half, false otherwise. public bool Equals(half rhs) 参数 rhs half Right hand side half value to use in comparison. 返回 bool True if the half value is bitwise equivalent to the input, false otherwise. GetHashCode() Returns a hash code for the half. public override int GetHashCode() 返回 int The computed hash code of the half. ToString() Returns a string representation of the half. public override string ToString() 返回 string The string representation of the half. ToString(string, IFormatProvider) Returns a string representation of the half using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string The format string to use during string formatting. formatProvider IFormatProvider The format provider to use during string formatting. 返回 string The string representation of the half. 运算符 operator ==(half, half) Returns whether two half values are bitwise equivalent. public static bool operator ==(half lhs, half rhs) 参数 lhs half Left hand side half value to use in comparison. rhs half Right hand side half value to use in comparison. 返回 bool True if the two half values are bitwise equivalent, false otherwise. explicit operator half(double) Explicitly converts a double value to a half value. public static explicit operator half(double v) 参数 v double The double precision float value to convert to half. 返回 half The converted half value. explicit operator half(float) Explicitly converts a float value to a half value. public static explicit operator half(float v) 参数 v float The single precision float value to convert to half. 返回 half The converted half value. implicit operator double(half) Implicitly converts a half value to a double value. public static implicit operator double(half d) 参数 d half The half value to convert to double precision float. 返回 double The converted double precision float value. implicit operator float(half) Implicitly converts a half value to a float value. public static implicit operator float(half d) 参数 d half The half value to convert to a single precision float. 返回 float The converted single precision float value. operator !=(half, half) Returns whether two half values are not bitwise equivalent. public static bool operator !=(half lhs, half rhs) 参数 lhs half Left hand side half value to use in comparison. rhs half Right hand side half value to use in comparison. 返回 bool True if the two half values are not bitwise equivalent, false otherwise."
  },
  "reference/Unity.Mathematics.half2.html": {
    "href": "reference/Unity.Mathematics.half2.html",
    "title": "half2 结构 | Fantasy.Net API Reference",
    "keywords": "half2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2 component vector of halfs. public struct half2 : IEquatable<half2>, IFormattable 实现 IEquatable<half2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 half2(double) Constructs a half2 vector from a single double value by converting it to half and assigning it to every component. public half2(double v) 参数 v double double to convert to half2 half2(float) Constructs a half2 vector from a single float value by converting it to half and assigning it to every component. public half2(float v) 参数 v float float to convert to half2 half2(double2) Constructs a half2 vector from a double2 vector by componentwise conversion. public half2(double2 v) 参数 v double2 double2 to convert to half2 half2(float2) Constructs a half2 vector from a float2 vector by componentwise conversion. public half2(float2 v) 参数 v float2 float2 to convert to half2 half2(half) Constructs a half2 vector from a single half value by assigning it to every component. public half2(half v) 参数 v half half to convert to half2 half2(half, half) Constructs a half2 vector from two half values. public half2(half x, half y) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. half2(half2) Constructs a half2 vector from a half2 vector. public half2(half2 xy) 参数 xy half2 The constructed vector's xy components will be set to this value. 字段 x x component of the vector. public half x 字段值 half y y component of the vector. public half y 字段值 half zero half2 zero value. public static readonly half2 zero 字段值 half2 属性 this[int] Returns the half element at a specified index. public half this[int index] { get; set; } 参数 index int 属性值 half 方法 Equals(object) Returns true if the half2 is equal to a given half2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(half2) Returns true if the half2 is equal to a given half2, false otherwise. public bool Equals(half2 rhs) 参数 rhs half2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the half2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the half2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the half2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator ==(half, half2) Returns the result of a componentwise equality operation on a half value and a half2 vector. public static bool2 operator ==(half lhs, half2 rhs) 参数 lhs half Left hand side half to use to compute componentwise equality. rhs half2 Right hand side half2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(half2, half) Returns the result of a componentwise equality operation on a half2 vector and a half value. public static bool2 operator ==(half2 lhs, half rhs) 参数 lhs half2 Left hand side half2 to use to compute componentwise equality. rhs half Right hand side half to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(half2, half2) Returns the result of a componentwise equality operation on two half2 vectors. public static bool2 operator ==(half2 lhs, half2 rhs) 参数 lhs half2 Left hand side half2 to use to compute componentwise equality. rhs half2 Right hand side half2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. explicit operator half2(double) Explicitly converts a single double value to a half2 vector by converting it to half and assigning it to every component. public static explicit operator half2(double v) 参数 v double double to convert to half2 返回 half2 Converted value. explicit operator half2(float) Explicitly converts a single float value to a half2 vector by converting it to half and assigning it to every component. public static explicit operator half2(float v) 参数 v float float to convert to half2 返回 half2 Converted value. explicit operator half2(double2) Explicitly converts a double2 vector to a half2 vector by componentwise conversion. public static explicit operator half2(double2 v) 参数 v double2 double2 to convert to half2 返回 half2 Converted value. explicit operator half2(float2) Explicitly converts a float2 vector to a half2 vector by componentwise conversion. public static explicit operator half2(float2 v) 参数 v float2 float2 to convert to half2 返回 half2 Converted value. implicit operator half2(half) Implicitly converts a single half value to a half2 vector by assigning it to every component. public static implicit operator half2(half v) 参数 v half half to convert to half2 返回 half2 Converted value. operator !=(half, half2) Returns the result of a componentwise not equal operation on a half value and a half2 vector. public static bool2 operator !=(half lhs, half2 rhs) 参数 lhs half Left hand side half to use to compute componentwise not equal. rhs half2 Right hand side half2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(half2, half) Returns the result of a componentwise not equal operation on a half2 vector and a half value. public static bool2 operator !=(half2 lhs, half rhs) 参数 lhs half2 Left hand side half2 to use to compute componentwise not equal. rhs half Right hand side half to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(half2, half2) Returns the result of a componentwise not equal operation on two half2 vectors. public static bool2 operator !=(half2 lhs, half2 rhs) 参数 lhs half2 Left hand side half2 to use to compute componentwise not equal. rhs half2 Right hand side half2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal."
  },
  "reference/Unity.Mathematics.half3.html": {
    "href": "reference/Unity.Mathematics.half3.html",
    "title": "half3 结构 | Fantasy.Net API Reference",
    "keywords": "half3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3 component vector of halfs. public struct half3 : IEquatable<half3>, IFormattable 实现 IEquatable<half3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 half3(double) Constructs a half3 vector from a single double value by converting it to half and assigning it to every component. public half3(double v) 参数 v double double to convert to half3 half3(float) Constructs a half3 vector from a single float value by converting it to half and assigning it to every component. public half3(float v) 参数 v float float to convert to half3 half3(double3) Constructs a half3 vector from a double3 vector by componentwise conversion. public half3(double3 v) 参数 v double3 double3 to convert to half3 half3(float3) Constructs a half3 vector from a float3 vector by componentwise conversion. public half3(float3 v) 参数 v float3 float3 to convert to half3 half3(half) Constructs a half3 vector from a single half value by assigning it to every component. public half3(half v) 参数 v half half to convert to half3 half3(half, half, half) Constructs a half3 vector from three half values. public half3(half x, half y, half z) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. z half The constructed vector's z component will be set to this value. half3(half, half2) Constructs a half3 vector from a half value and a half2 vector. public half3(half x, half2 yz) 参数 x half The constructed vector's x component will be set to this value. yz half2 The constructed vector's yz components will be set to this value. half3(half2, half) Constructs a half3 vector from a half2 vector and a half value. public half3(half2 xy, half z) 参数 xy half2 The constructed vector's xy components will be set to this value. z half The constructed vector's z component will be set to this value. half3(half3) Constructs a half3 vector from a half3 vector. public half3(half3 xyz) 参数 xyz half3 The constructed vector's xyz components will be set to this value. 字段 x x component of the vector. public half x 字段值 half y y component of the vector. public half y 字段值 half z z component of the vector. public half z 字段值 half zero half3 zero value. public static readonly half3 zero 字段值 half3 属性 this[int] Returns the half element at a specified index. public half this[int index] { get; set; } 参数 index int 属性值 half 方法 Equals(object) Returns true if the half3 is equal to a given half3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(half3) Returns true if the half3 is equal to a given half3, false otherwise. public bool Equals(half3 rhs) 参数 rhs half3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the half3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the half3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the half3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator ==(half, half3) Returns the result of a componentwise equality operation on a half value and a half3 vector. public static bool3 operator ==(half lhs, half3 rhs) 参数 lhs half Left hand side half to use to compute componentwise equality. rhs half3 Right hand side half3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(half3, half) Returns the result of a componentwise equality operation on a half3 vector and a half value. public static bool3 operator ==(half3 lhs, half rhs) 参数 lhs half3 Left hand side half3 to use to compute componentwise equality. rhs half Right hand side half to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(half3, half3) Returns the result of a componentwise equality operation on two half3 vectors. public static bool3 operator ==(half3 lhs, half3 rhs) 参数 lhs half3 Left hand side half3 to use to compute componentwise equality. rhs half3 Right hand side half3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. explicit operator half3(double) Explicitly converts a single double value to a half3 vector by converting it to half and assigning it to every component. public static explicit operator half3(double v) 参数 v double double to convert to half3 返回 half3 Converted value. explicit operator half3(float) Explicitly converts a single float value to a half3 vector by converting it to half and assigning it to every component. public static explicit operator half3(float v) 参数 v float float to convert to half3 返回 half3 Converted value. explicit operator half3(double3) Explicitly converts a double3 vector to a half3 vector by componentwise conversion. public static explicit operator half3(double3 v) 参数 v double3 double3 to convert to half3 返回 half3 Converted value. explicit operator half3(float3) Explicitly converts a float3 vector to a half3 vector by componentwise conversion. public static explicit operator half3(float3 v) 参数 v float3 float3 to convert to half3 返回 half3 Converted value. implicit operator half3(half) Implicitly converts a single half value to a half3 vector by assigning it to every component. public static implicit operator half3(half v) 参数 v half half to convert to half3 返回 half3 Converted value. operator !=(half, half3) Returns the result of a componentwise not equal operation on a half value and a half3 vector. public static bool3 operator !=(half lhs, half3 rhs) 参数 lhs half Left hand side half to use to compute componentwise not equal. rhs half3 Right hand side half3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(half3, half) Returns the result of a componentwise not equal operation on a half3 vector and a half value. public static bool3 operator !=(half3 lhs, half rhs) 参数 lhs half3 Left hand side half3 to use to compute componentwise not equal. rhs half Right hand side half to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(half3, half3) Returns the result of a componentwise not equal operation on two half3 vectors. public static bool3 operator !=(half3 lhs, half3 rhs) 参数 lhs half3 Left hand side half3 to use to compute componentwise not equal. rhs half3 Right hand side half3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal."
  },
  "reference/Unity.Mathematics.half4.html": {
    "href": "reference/Unity.Mathematics.half4.html",
    "title": "half4 结构 | Fantasy.Net API Reference",
    "keywords": "half4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4 component vector of halfs. public struct half4 : IEquatable<half4>, IFormattable 实现 IEquatable<half4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 half4(double) Constructs a half4 vector from a single double value by converting it to half and assigning it to every component. public half4(double v) 参数 v double double to convert to half4 half4(float) Constructs a half4 vector from a single float value by converting it to half and assigning it to every component. public half4(float v) 参数 v float float to convert to half4 half4(double4) Constructs a half4 vector from a double4 vector by componentwise conversion. public half4(double4 v) 参数 v double4 double4 to convert to half4 half4(float4) Constructs a half4 vector from a float4 vector by componentwise conversion. public half4(float4 v) 参数 v float4 float4 to convert to half4 half4(half) Constructs a half4 vector from a single half value by assigning it to every component. public half4(half v) 参数 v half half to convert to half4 half4(half, half, half, half) Constructs a half4 vector from four half values. public half4(half x, half y, half z, half w) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. z half The constructed vector's z component will be set to this value. w half The constructed vector's w component will be set to this value. half4(half, half, half2) Constructs a half4 vector from two half values and a half2 vector. public half4(half x, half y, half2 zw) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. zw half2 The constructed vector's zw components will be set to this value. half4(half, half2, half) Constructs a half4 vector from a half value, a half2 vector and a half value. public half4(half x, half2 yz, half w) 参数 x half The constructed vector's x component will be set to this value. yz half2 The constructed vector's yz components will be set to this value. w half The constructed vector's w component will be set to this value. half4(half, half3) Constructs a half4 vector from a half value and a half3 vector. public half4(half x, half3 yzw) 参数 x half The constructed vector's x component will be set to this value. yzw half3 The constructed vector's yzw components will be set to this value. half4(half2, half, half) Constructs a half4 vector from a half2 vector and two half values. public half4(half2 xy, half z, half w) 参数 xy half2 The constructed vector's xy components will be set to this value. z half The constructed vector's z component will be set to this value. w half The constructed vector's w component will be set to this value. half4(half2, half2) Constructs a half4 vector from two half2 vectors. public half4(half2 xy, half2 zw) 参数 xy half2 The constructed vector's xy components will be set to this value. zw half2 The constructed vector's zw components will be set to this value. half4(half3, half) Constructs a half4 vector from a half3 vector and a half value. public half4(half3 xyz, half w) 参数 xyz half3 The constructed vector's xyz components will be set to this value. w half The constructed vector's w component will be set to this value. half4(half4) Constructs a half4 vector from a half4 vector. public half4(half4 xyzw) 参数 xyzw half4 The constructed vector's xyzw components will be set to this value. 字段 w w component of the vector. public half w 字段值 half x x component of the vector. public half x 字段值 half y y component of the vector. public half y 字段值 half z z component of the vector. public half z 字段值 half zero half4 zero value. public static readonly half4 zero 字段值 half4 属性 this[int] Returns the half element at a specified index. public half this[int index] { get; set; } 参数 index int 属性值 half 方法 Equals(object) Returns true if the half4 is equal to a given half4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(half4) Returns true if the half4 is equal to a given half4, false otherwise. public bool Equals(half4 rhs) 参数 rhs half4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the half4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the half4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the half4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator ==(half, half4) Returns the result of a componentwise equality operation on a half value and a half4 vector. public static bool4 operator ==(half lhs, half4 rhs) 参数 lhs half Left hand side half to use to compute componentwise equality. rhs half4 Right hand side half4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(half4, half) Returns the result of a componentwise equality operation on a half4 vector and a half value. public static bool4 operator ==(half4 lhs, half rhs) 参数 lhs half4 Left hand side half4 to use to compute componentwise equality. rhs half Right hand side half to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(half4, half4) Returns the result of a componentwise equality operation on two half4 vectors. public static bool4 operator ==(half4 lhs, half4 rhs) 参数 lhs half4 Left hand side half4 to use to compute componentwise equality. rhs half4 Right hand side half4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. explicit operator half4(double) Explicitly converts a single double value to a half4 vector by converting it to half and assigning it to every component. public static explicit operator half4(double v) 参数 v double double to convert to half4 返回 half4 Converted value. explicit operator half4(float) Explicitly converts a single float value to a half4 vector by converting it to half and assigning it to every component. public static explicit operator half4(float v) 参数 v float float to convert to half4 返回 half4 Converted value. explicit operator half4(double4) Explicitly converts a double4 vector to a half4 vector by componentwise conversion. public static explicit operator half4(double4 v) 参数 v double4 double4 to convert to half4 返回 half4 Converted value. explicit operator half4(float4) Explicitly converts a float4 vector to a half4 vector by componentwise conversion. public static explicit operator half4(float4 v) 参数 v float4 float4 to convert to half4 返回 half4 Converted value. implicit operator half4(half) Implicitly converts a single half value to a half4 vector by assigning it to every component. public static implicit operator half4(half v) 参数 v half half to convert to half4 返回 half4 Converted value. operator !=(half, half4) Returns the result of a componentwise not equal operation on a half value and a half4 vector. public static bool4 operator !=(half lhs, half4 rhs) 参数 lhs half Left hand side half to use to compute componentwise not equal. rhs half4 Right hand side half4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(half4, half) Returns the result of a componentwise not equal operation on a half4 vector and a half value. public static bool4 operator !=(half4 lhs, half rhs) 参数 lhs half4 Left hand side half4 to use to compute componentwise not equal. rhs half Right hand side half to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(half4, half4) Returns the result of a componentwise not equal operation on two half4 vectors. public static bool4 operator !=(half4 lhs, half4 rhs) 参数 lhs half4 Left hand side half4 to use to compute componentwise not equal. rhs half4 Right hand side half4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal."
  },
  "reference/Unity.Mathematics.html": {
    "href": "reference/Unity.Mathematics.html",
    "title": "Unity.Mathematics 命名空间 | Fantasy.Net API Reference",
    "keywords": "Unity.Mathematics 命名空间 类 math A static class to contain various math functions and constants. noise A static class containing noise functions. 结构 AffineTransform An affine transformation type. Random Random Number Generator based on xorshift. Designed for minimal state (32bits) to be easily embeddable into components. Core functionality is integer multiplication free to improve vectorization on less capable SIMD instruction sets. RigidTransform A rigid transformation type. bool2 A 2 component vector of bools. bool2x2 A 2x2 matrix of bools. bool2x3 A 2x3 matrix of bools. bool2x4 A 2x4 matrix of bools. bool3 A 3 component vector of bools. bool3x2 A 3x2 matrix of bools. bool3x3 A 3x3 matrix of bools. bool3x4 A 3x4 matrix of bools. bool4 A 4 component vector of bools. bool4x2 A 4x2 matrix of bools. bool4x3 A 4x3 matrix of bools. bool4x4 A 4x4 matrix of bools. double2 A 2 component vector of doubles. double2x2 A 2x2 matrix of doubles. double2x3 A 2x3 matrix of doubles. double2x4 A 2x4 matrix of doubles. double3 A 3 component vector of doubles. double3x2 A 3x2 matrix of doubles. double3x3 A 3x3 matrix of doubles. double3x4 A 3x4 matrix of doubles. double4 A 4 component vector of doubles. double4x2 A 4x2 matrix of doubles. double4x3 A 4x3 matrix of doubles. double4x4 A 4x4 matrix of doubles. float2 A 2 component vector of floats. float2x2 A 2x2 matrix of floats. float2x3 A 2x3 matrix of floats. float2x4 A 2x4 matrix of floats. float3 A 3 component vector of floats. float3x2 A 3x2 matrix of floats. float3x3 A 3x3 matrix of floats. float3x4 A 3x4 matrix of floats. float4 A 4 component vector of floats. float4x2 A 4x2 matrix of floats. float4x3 A 4x3 matrix of floats. float4x4 A 4x4 matrix of floats. half A half precision float that uses 16 bits instead of 32 bits. half2 A 2 component vector of halfs. half3 A 3 component vector of halfs. half4 A 4 component vector of halfs. int2 A 2 component vector of ints. int2x2 A 2x2 matrix of ints. int2x3 A 2x3 matrix of ints. int2x4 A 2x4 matrix of ints. int3 A 3 component vector of ints. int3x2 A 3x2 matrix of ints. int3x3 A 3x3 matrix of ints. int3x4 A 3x4 matrix of ints. int4 A 4 component vector of ints. int4x2 A 4x2 matrix of ints. int4x3 A 4x3 matrix of ints. int4x4 A 4x4 matrix of ints. quaternion A quaternion type for representing rotations. uint2 A 2 component vector of uints. uint2x2 A 2x2 matrix of uints. uint2x3 A 2x3 matrix of uints. uint2x4 A 2x4 matrix of uints. uint3 A 3 component vector of uints. uint3x2 A 3x2 matrix of uints. uint3x3 A 3x3 matrix of uints. uint3x4 A 3x4 matrix of uints. uint4 A 4 component vector of uints. uint4x2 A 4x2 matrix of uints. uint4x3 A 4x3 matrix of uints. uint4x4 A 4x4 matrix of uints. 枚举 math.RotationOrder Extrinsic rotation order. Specifies in which order rotations around the principal axes (x, y and z) are to be applied. math.ShuffleComponent Specifies a shuffle component."
  },
  "reference/Unity.Mathematics.int2.html": {
    "href": "reference/Unity.Mathematics.int2.html",
    "title": "int2 结构 | Fantasy.Net API Reference",
    "keywords": "int2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2 component vector of ints. public struct int2 : IEquatable<int2>, IFormattable 实现 IEquatable<int2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int2(bool) Constructs a int2 vector from a single bool value by converting it to int and assigning it to every component. public int2(bool v) 参数 v bool bool to convert to int2 int2(double) Constructs a int2 vector from a single double value by converting it to int and assigning it to every component. public int2(double v) 参数 v double double to convert to int2 int2(int) Constructs a int2 vector from a single int value by assigning it to every component. public int2(int v) 参数 v int int to convert to int2 int2(int, int) Constructs a int2 vector from two int values. public int2(int x, int y) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. int2(float) Constructs a int2 vector from a single float value by converting it to int and assigning it to every component. public int2(float v) 参数 v float float to convert to int2 int2(uint) Constructs a int2 vector from a single uint value by converting it to int and assigning it to every component. public int2(uint v) 参数 v uint uint to convert to int2 int2(bool2) Constructs a int2 vector from a bool2 vector by componentwise conversion. public int2(bool2 v) 参数 v bool2 bool2 to convert to int2 int2(double2) Constructs a int2 vector from a double2 vector by componentwise conversion. public int2(double2 v) 参数 v double2 double2 to convert to int2 int2(float2) Constructs a int2 vector from a float2 vector by componentwise conversion. public int2(float2 v) 参数 v float2 float2 to convert to int2 int2(int2) Constructs a int2 vector from an int2 vector. public int2(int2 xy) 参数 xy int2 The constructed vector's xy components will be set to this value. int2(uint2) Constructs a int2 vector from a uint2 vector by componentwise conversion. public int2(uint2 v) 参数 v uint2 uint2 to convert to int2 字段 x x component of the vector. public int x 字段值 int y y component of the vector. public int y 字段值 int zero int2 zero value. public static readonly int2 zero 字段值 int2 属性 this[int] Returns the int element at a specified index. public int this[int index] { get; set; } 参数 index int 属性值 int 方法 Equals(object) Returns true if the int2 is equal to a given int2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int2) Returns true if the int2 is equal to a given int2, false otherwise. public bool Equals(int2 rhs) 参数 rhs int2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int2) Returns the result of a componentwise addition operation on an int value and an int2 vector. public static int2 operator +(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int2 Right hand side int2 to use to compute componentwise addition. 返回 int2 int2 result of the componentwise addition. operator +(int2, int) Returns the result of a componentwise addition operation on an int2 vector and an int value. public static int2 operator +(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int2 int2 result of the componentwise addition. operator +(int2, int2) Returns the result of a componentwise addition operation on two int2 vectors. public static int2 operator +(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise addition. rhs int2 Right hand side int2 to use to compute componentwise addition. 返回 int2 int2 result of the componentwise addition. operator &(int, int2) Returns the result of a componentwise bitwise and operation on an int value and an int2 vector. public static int2 operator &(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int2 Right hand side int2 to use to compute componentwise bitwise and. 返回 int2 int2 result of the componentwise bitwise and. operator &(int2, int) Returns the result of a componentwise bitwise and operation on an int2 vector and an int value. public static int2 operator &(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int2 int2 result of the componentwise bitwise and. operator &(int2, int2) Returns the result of a componentwise bitwise and operation on two int2 vectors. public static int2 operator &(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise bitwise and. rhs int2 Right hand side int2 to use to compute componentwise bitwise and. 返回 int2 int2 result of the componentwise bitwise and. operator |(int, int2) Returns the result of a componentwise bitwise or operation on an int value and an int2 vector. public static int2 operator |(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int2 Right hand side int2 to use to compute componentwise bitwise or. 返回 int2 int2 result of the componentwise bitwise or. operator |(int2, int) Returns the result of a componentwise bitwise or operation on an int2 vector and an int value. public static int2 operator |(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int2 int2 result of the componentwise bitwise or. operator |(int2, int2) Returns the result of a componentwise bitwise or operation on two int2 vectors. public static int2 operator |(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise bitwise or. rhs int2 Right hand side int2 to use to compute componentwise bitwise or. 返回 int2 int2 result of the componentwise bitwise or. operator --(int2) Returns the result of a componentwise decrement operation on an int2 vector. public static int2 operator --(int2 val) 参数 val int2 Value to use when computing the componentwise decrement. 返回 int2 int2 result of the componentwise decrement. operator /(int, int2) Returns the result of a componentwise division operation on an int value and an int2 vector. public static int2 operator /(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int2 Right hand side int2 to use to compute componentwise division. 返回 int2 int2 result of the componentwise division. operator /(int2, int) Returns the result of a componentwise division operation on an int2 vector and an int value. public static int2 operator /(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int2 int2 result of the componentwise division. operator /(int2, int2) Returns the result of a componentwise division operation on two int2 vectors. public static int2 operator /(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise division. rhs int2 Right hand side int2 to use to compute componentwise division. 返回 int2 int2 result of the componentwise division. operator ==(int, int2) Returns the result of a componentwise equality operation on an int value and an int2 vector. public static bool2 operator ==(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int2 Right hand side int2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(int2, int) Returns the result of a componentwise equality operation on an int2 vector and an int value. public static bool2 operator ==(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(int2, int2) Returns the result of a componentwise equality operation on two int2 vectors. public static bool2 operator ==(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise equality. rhs int2 Right hand side int2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ^(int, int2) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int2 vector. public static int2 operator ^(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int2 Right hand side int2 to use to compute componentwise bitwise exclusive or. 返回 int2 int2 result of the componentwise bitwise exclusive or. operator ^(int2, int) Returns the result of a componentwise bitwise exclusive or operation on an int2 vector and an int value. public static int2 operator ^(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int2 int2 result of the componentwise bitwise exclusive or. operator ^(int2, int2) Returns the result of a componentwise bitwise exclusive or operation on two int2 vectors. public static int2 operator ^(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise bitwise exclusive or. rhs int2 Right hand side int2 to use to compute componentwise bitwise exclusive or. 返回 int2 int2 result of the componentwise bitwise exclusive or. explicit operator int2(bool) Explicitly converts a single bool value to a int2 vector by converting it to int and assigning it to every component. public static explicit operator int2(bool v) 参数 v bool bool to convert to int2 返回 int2 Converted value. explicit operator int2(double) Explicitly converts a single double value to a int2 vector by converting it to int and assigning it to every component. public static explicit operator int2(double v) 参数 v double double to convert to int2 返回 int2 Converted value. explicit operator int2(float) Explicitly converts a single float value to a int2 vector by converting it to int and assigning it to every component. public static explicit operator int2(float v) 参数 v float float to convert to int2 返回 int2 Converted value. explicit operator int2(uint) Explicitly converts a single uint value to a int2 vector by converting it to int and assigning it to every component. public static explicit operator int2(uint v) 参数 v uint uint to convert to int2 返回 int2 Converted value. explicit operator int2(bool2) Explicitly converts a bool2 vector to a int2 vector by componentwise conversion. public static explicit operator int2(bool2 v) 参数 v bool2 bool2 to convert to int2 返回 int2 Converted value. explicit operator int2(double2) Explicitly converts a double2 vector to a int2 vector by componentwise conversion. public static explicit operator int2(double2 v) 参数 v double2 double2 to convert to int2 返回 int2 Converted value. explicit operator int2(float2) Explicitly converts a float2 vector to a int2 vector by componentwise conversion. public static explicit operator int2(float2 v) 参数 v float2 float2 to convert to int2 返回 int2 Converted value. explicit operator int2(uint2) Explicitly converts a uint2 vector to a int2 vector by componentwise conversion. public static explicit operator int2(uint2 v) 参数 v uint2 uint2 to convert to int2 返回 int2 Converted value. operator >(int, int2) Returns the result of a componentwise greater than operation on an int value and an int2 vector. public static bool2 operator >(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int2 Right hand side int2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(int2, int) Returns the result of a componentwise greater than operation on an int2 vector and an int value. public static bool2 operator >(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(int2, int2) Returns the result of a componentwise greater than operation on two int2 vectors. public static bool2 operator >(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise greater than. rhs int2 Right hand side int2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >=(int, int2) Returns the result of a componentwise greater or equal operation on an int value and an int2 vector. public static bool2 operator >=(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int2 Right hand side int2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(int2, int) Returns the result of a componentwise greater or equal operation on an int2 vector and an int value. public static bool2 operator >=(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(int2, int2) Returns the result of a componentwise greater or equal operation on two int2 vectors. public static bool2 operator >=(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise greater or equal. rhs int2 Right hand side int2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. implicit operator int2(int) Implicitly converts a single int value to a int2 vector by assigning it to every component. public static implicit operator int2(int v) 参数 v int int to convert to int2 返回 int2 Converted value. operator ++(int2) Returns the result of a componentwise increment operation on an int2 vector. public static int2 operator ++(int2 val) 参数 val int2 Value to use when computing the componentwise increment. 返回 int2 int2 result of the componentwise increment. operator !=(int, int2) Returns the result of a componentwise not equal operation on an int value and an int2 vector. public static bool2 operator !=(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int2 Right hand side int2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(int2, int) Returns the result of a componentwise not equal operation on an int2 vector and an int value. public static bool2 operator !=(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(int2, int2) Returns the result of a componentwise not equal operation on two int2 vectors. public static bool2 operator !=(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise not equal. rhs int2 Right hand side int2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator <<(int2, int) Returns the result of a componentwise left shift operation on an int2 vector by a number of bits specified by a single int. public static int2 operator <<(int2 x, int n) 参数 x int2 The vector to left shift. n int The number of bits to left shift. 返回 int2 The result of the componentwise left shift. operator <(int, int2) Returns the result of a componentwise less than operation on an int value and an int2 vector. public static bool2 operator <(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int2 Right hand side int2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(int2, int) Returns the result of a componentwise less than operation on an int2 vector and an int value. public static bool2 operator <(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(int2, int2) Returns the result of a componentwise less than operation on two int2 vectors. public static bool2 operator <(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise less than. rhs int2 Right hand side int2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <=(int, int2) Returns the result of a componentwise less or equal operation on an int value and an int2 vector. public static bool2 operator <=(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int2 Right hand side int2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(int2, int) Returns the result of a componentwise less or equal operation on an int2 vector and an int value. public static bool2 operator <=(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(int2, int2) Returns the result of a componentwise less or equal operation on two int2 vectors. public static bool2 operator <=(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise less or equal. rhs int2 Right hand side int2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator %(int, int2) Returns the result of a componentwise modulus operation on an int value and an int2 vector. public static int2 operator %(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int2 Right hand side int2 to use to compute componentwise modulus. 返回 int2 int2 result of the componentwise modulus. operator %(int2, int) Returns the result of a componentwise modulus operation on an int2 vector and an int value. public static int2 operator %(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int2 int2 result of the componentwise modulus. operator %(int2, int2) Returns the result of a componentwise modulus operation on two int2 vectors. public static int2 operator %(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise modulus. rhs int2 Right hand side int2 to use to compute componentwise modulus. 返回 int2 int2 result of the componentwise modulus. operator *(int, int2) Returns the result of a componentwise multiplication operation on an int value and an int2 vector. public static int2 operator *(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int2 Right hand side int2 to use to compute componentwise multiplication. 返回 int2 int2 result of the componentwise multiplication. operator *(int2, int) Returns the result of a componentwise multiplication operation on an int2 vector and an int value. public static int2 operator *(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int2 int2 result of the componentwise multiplication. operator *(int2, int2) Returns the result of a componentwise multiplication operation on two int2 vectors. public static int2 operator *(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise multiplication. rhs int2 Right hand side int2 to use to compute componentwise multiplication. 返回 int2 int2 result of the componentwise multiplication. operator ~(int2) Returns the result of a componentwise bitwise not operation on an int2 vector. public static int2 operator ~(int2 val) 参数 val int2 Value to use when computing the componentwise bitwise not. 返回 int2 int2 result of the componentwise bitwise not. operator >>(int2, int) Returns the result of a componentwise right shift operation on an int2 vector by a number of bits specified by a single int. public static int2 operator >>(int2 x, int n) 参数 x int2 The vector to right shift. n int The number of bits to right shift. 返回 int2 The result of the componentwise right shift. operator -(int, int2) Returns the result of a componentwise subtraction operation on an int value and an int2 vector. public static int2 operator -(int lhs, int2 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int2 Right hand side int2 to use to compute componentwise subtraction. 返回 int2 int2 result of the componentwise subtraction. operator -(int2, int) Returns the result of a componentwise subtraction operation on an int2 vector and an int value. public static int2 operator -(int2 lhs, int rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int2 int2 result of the componentwise subtraction. operator -(int2, int2) Returns the result of a componentwise subtraction operation on two int2 vectors. public static int2 operator -(int2 lhs, int2 rhs) 参数 lhs int2 Left hand side int2 to use to compute componentwise subtraction. rhs int2 Right hand side int2 to use to compute componentwise subtraction. 返回 int2 int2 result of the componentwise subtraction. operator -(int2) Returns the result of a componentwise unary minus operation on an int2 vector. public static int2 operator -(int2 val) 参数 val int2 Value to use when computing the componentwise unary minus. 返回 int2 int2 result of the componentwise unary minus. operator +(int2) Returns the result of a componentwise unary plus operation on an int2 vector. public static int2 operator +(int2 val) 参数 val int2 Value to use when computing the componentwise unary plus. 返回 int2 int2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int2x2.html": {
    "href": "reference/Unity.Mathematics.int2x2.html",
    "title": "int2x2 结构 | Fantasy.Net API Reference",
    "keywords": "int2x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x2 matrix of ints. public struct int2x2 : IEquatable<int2x2>, IFormattable 实现 IEquatable<int2x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int2x2(bool) Constructs a int2x2 matrix from a single bool value by converting it to int and assigning it to every component. public int2x2(bool v) 参数 v bool bool to convert to int2x2 int2x2(double) Constructs a int2x2 matrix from a single double value by converting it to int and assigning it to every component. public int2x2(double v) 参数 v double double to convert to int2x2 int2x2(int) Constructs a int2x2 matrix from a single int value by assigning it to every component. public int2x2(int v) 参数 v int int to convert to int2x2 int2x2(int, int, int, int) Constructs a int2x2 matrix from 4 int values given in row-major order. public int2x2(int m00, int m01, int m10, int m11) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. int2x2(float) Constructs a int2x2 matrix from a single float value by converting it to int and assigning it to every component. public int2x2(float v) 参数 v float float to convert to int2x2 int2x2(uint) Constructs a int2x2 matrix from a single uint value by converting it to int and assigning it to every component. public int2x2(uint v) 参数 v uint uint to convert to int2x2 int2x2(bool2x2) Constructs a int2x2 matrix from a bool2x2 matrix by componentwise conversion. public int2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to int2x2 int2x2(double2x2) Constructs a int2x2 matrix from a double2x2 matrix by componentwise conversion. public int2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to int2x2 int2x2(float2x2) Constructs a int2x2 matrix from a float2x2 matrix by componentwise conversion. public int2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to int2x2 int2x2(int2, int2) Constructs a int2x2 matrix from two int2 vectors. public int2x2(int2 c0, int2 c1) 参数 c0 int2 The matrix column c0 will be set to this value. c1 int2 The matrix column c1 will be set to this value. int2x2(uint2x2) Constructs a int2x2 matrix from a uint2x2 matrix by componentwise conversion. public int2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to int2x2 字段 c0 Column 0 of the matrix. public int2 c0 字段值 int2 c1 Column 1 of the matrix. public int2 c1 字段值 int2 identity int2x2 identity transform. public static readonly int2x2 identity 字段值 int2x2 zero int2x2 zero value. public static readonly int2x2 zero 字段值 int2x2 属性 this[int] Returns the int2 element at a specified index. public ref int2 this[int index] { get; } 参数 index int 属性值 int2 方法 Equals(object) Returns true if the int2x2 is equal to a given int2x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int2x2) Returns true if the int2x2 is equal to a given int2x2, false otherwise. public bool Equals(int2x2 rhs) 参数 rhs int2x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int2x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int2x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int2x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int2x2) Returns the result of a componentwise addition operation on an int value and an int2x2 matrix. public static int2x2 operator +(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int2x2 Right hand side int2x2 to use to compute componentwise addition. 返回 int2x2 int2x2 result of the componentwise addition. operator +(int2x2, int) Returns the result of a componentwise addition operation on an int2x2 matrix and an int value. public static int2x2 operator +(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int2x2 int2x2 result of the componentwise addition. operator +(int2x2, int2x2) Returns the result of a componentwise addition operation on two int2x2 matrices. public static int2x2 operator +(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise addition. rhs int2x2 Right hand side int2x2 to use to compute componentwise addition. 返回 int2x2 int2x2 result of the componentwise addition. operator &(int, int2x2) Returns the result of a componentwise bitwise and operation on an int value and an int2x2 matrix. public static int2x2 operator &(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int2x2 Right hand side int2x2 to use to compute componentwise bitwise and. 返回 int2x2 int2x2 result of the componentwise bitwise and. operator &(int2x2, int) Returns the result of a componentwise bitwise and operation on an int2x2 matrix and an int value. public static int2x2 operator &(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int2x2 int2x2 result of the componentwise bitwise and. operator &(int2x2, int2x2) Returns the result of a componentwise bitwise and operation on two int2x2 matrices. public static int2x2 operator &(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise bitwise and. rhs int2x2 Right hand side int2x2 to use to compute componentwise bitwise and. 返回 int2x2 int2x2 result of the componentwise bitwise and. operator |(int, int2x2) Returns the result of a componentwise bitwise or operation on an int value and an int2x2 matrix. public static int2x2 operator |(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int2x2 Right hand side int2x2 to use to compute componentwise bitwise or. 返回 int2x2 int2x2 result of the componentwise bitwise or. operator |(int2x2, int) Returns the result of a componentwise bitwise or operation on an int2x2 matrix and an int value. public static int2x2 operator |(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int2x2 int2x2 result of the componentwise bitwise or. operator |(int2x2, int2x2) Returns the result of a componentwise bitwise or operation on two int2x2 matrices. public static int2x2 operator |(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise bitwise or. rhs int2x2 Right hand side int2x2 to use to compute componentwise bitwise or. 返回 int2x2 int2x2 result of the componentwise bitwise or. operator --(int2x2) Returns the result of a componentwise decrement operation on an int2x2 matrix. public static int2x2 operator --(int2x2 val) 参数 val int2x2 Value to use when computing the componentwise decrement. 返回 int2x2 int2x2 result of the componentwise decrement. operator /(int, int2x2) Returns the result of a componentwise division operation on an int value and an int2x2 matrix. public static int2x2 operator /(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int2x2 Right hand side int2x2 to use to compute componentwise division. 返回 int2x2 int2x2 result of the componentwise division. operator /(int2x2, int) Returns the result of a componentwise division operation on an int2x2 matrix and an int value. public static int2x2 operator /(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int2x2 int2x2 result of the componentwise division. operator /(int2x2, int2x2) Returns the result of a componentwise division operation on two int2x2 matrices. public static int2x2 operator /(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise division. rhs int2x2 Right hand side int2x2 to use to compute componentwise division. 返回 int2x2 int2x2 result of the componentwise division. operator ==(int, int2x2) Returns the result of a componentwise equality operation on an int value and an int2x2 matrix. public static bool2x2 operator ==(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int2x2 Right hand side int2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(int2x2, int) Returns the result of a componentwise equality operation on an int2x2 matrix and an int value. public static bool2x2 operator ==(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(int2x2, int2x2) Returns the result of a componentwise equality operation on two int2x2 matrices. public static bool2x2 operator ==(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise equality. rhs int2x2 Right hand side int2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ^(int, int2x2) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int2x2 matrix. public static int2x2 operator ^(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int2x2 Right hand side int2x2 to use to compute componentwise bitwise exclusive or. 返回 int2x2 int2x2 result of the componentwise bitwise exclusive or. operator ^(int2x2, int) Returns the result of a componentwise bitwise exclusive or operation on an int2x2 matrix and an int value. public static int2x2 operator ^(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int2x2 int2x2 result of the componentwise bitwise exclusive or. operator ^(int2x2, int2x2) Returns the result of a componentwise bitwise exclusive or operation on two int2x2 matrices. public static int2x2 operator ^(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise bitwise exclusive or. rhs int2x2 Right hand side int2x2 to use to compute componentwise bitwise exclusive or. 返回 int2x2 int2x2 result of the componentwise bitwise exclusive or. explicit operator int2x2(bool) Explicitly converts a single bool value to a int2x2 matrix by converting it to int and assigning it to every component. public static explicit operator int2x2(bool v) 参数 v bool bool to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(double) Explicitly converts a single double value to a int2x2 matrix by converting it to int and assigning it to every component. public static explicit operator int2x2(double v) 参数 v double double to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(float) Explicitly converts a single float value to a int2x2 matrix by converting it to int and assigning it to every component. public static explicit operator int2x2(float v) 参数 v float float to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(uint) Explicitly converts a single uint value to a int2x2 matrix by converting it to int and assigning it to every component. public static explicit operator int2x2(uint v) 参数 v uint uint to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(bool2x2) Explicitly converts a bool2x2 matrix to a int2x2 matrix by componentwise conversion. public static explicit operator int2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(double2x2) Explicitly converts a double2x2 matrix to a int2x2 matrix by componentwise conversion. public static explicit operator int2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(float2x2) Explicitly converts a float2x2 matrix to a int2x2 matrix by componentwise conversion. public static explicit operator int2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to int2x2 返回 int2x2 Converted value. explicit operator int2x2(uint2x2) Explicitly converts a uint2x2 matrix to a int2x2 matrix by componentwise conversion. public static explicit operator int2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to int2x2 返回 int2x2 Converted value. operator >(int, int2x2) Returns the result of a componentwise greater than operation on an int value and an int2x2 matrix. public static bool2x2 operator >(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int2x2 Right hand side int2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(int2x2, int) Returns the result of a componentwise greater than operation on an int2x2 matrix and an int value. public static bool2x2 operator >(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(int2x2, int2x2) Returns the result of a componentwise greater than operation on two int2x2 matrices. public static bool2x2 operator >(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise greater than. rhs int2x2 Right hand side int2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >=(int, int2x2) Returns the result of a componentwise greater or equal operation on an int value and an int2x2 matrix. public static bool2x2 operator >=(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int2x2 Right hand side int2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(int2x2, int) Returns the result of a componentwise greater or equal operation on an int2x2 matrix and an int value. public static bool2x2 operator >=(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(int2x2, int2x2) Returns the result of a componentwise greater or equal operation on two int2x2 matrices. public static bool2x2 operator >=(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise greater or equal. rhs int2x2 Right hand side int2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. implicit operator int2x2(int) Implicitly converts a single int value to a int2x2 matrix by assigning it to every component. public static implicit operator int2x2(int v) 参数 v int int to convert to int2x2 返回 int2x2 Converted value. operator ++(int2x2) Returns the result of a componentwise increment operation on an int2x2 matrix. public static int2x2 operator ++(int2x2 val) 参数 val int2x2 Value to use when computing the componentwise increment. 返回 int2x2 int2x2 result of the componentwise increment. operator !=(int, int2x2) Returns the result of a componentwise not equal operation on an int value and an int2x2 matrix. public static bool2x2 operator !=(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int2x2 Right hand side int2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(int2x2, int) Returns the result of a componentwise not equal operation on an int2x2 matrix and an int value. public static bool2x2 operator !=(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(int2x2, int2x2) Returns the result of a componentwise not equal operation on two int2x2 matrices. public static bool2x2 operator !=(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise not equal. rhs int2x2 Right hand side int2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator <<(int2x2, int) Returns the result of a componentwise left shift operation on an int2x2 matrix by a number of bits specified by a single int. public static int2x2 operator <<(int2x2 x, int n) 参数 x int2x2 The matrix to left shift. n int The number of bits to left shift. 返回 int2x2 The result of the componentwise left shift. operator <(int, int2x2) Returns the result of a componentwise less than operation on an int value and an int2x2 matrix. public static bool2x2 operator <(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int2x2 Right hand side int2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(int2x2, int) Returns the result of a componentwise less than operation on an int2x2 matrix and an int value. public static bool2x2 operator <(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(int2x2, int2x2) Returns the result of a componentwise less than operation on two int2x2 matrices. public static bool2x2 operator <(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise less than. rhs int2x2 Right hand side int2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <=(int, int2x2) Returns the result of a componentwise less or equal operation on an int value and an int2x2 matrix. public static bool2x2 operator <=(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int2x2 Right hand side int2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(int2x2, int) Returns the result of a componentwise less or equal operation on an int2x2 matrix and an int value. public static bool2x2 operator <=(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(int2x2, int2x2) Returns the result of a componentwise less or equal operation on two int2x2 matrices. public static bool2x2 operator <=(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise less or equal. rhs int2x2 Right hand side int2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator %(int, int2x2) Returns the result of a componentwise modulus operation on an int value and an int2x2 matrix. public static int2x2 operator %(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int2x2 Right hand side int2x2 to use to compute componentwise modulus. 返回 int2x2 int2x2 result of the componentwise modulus. operator %(int2x2, int) Returns the result of a componentwise modulus operation on an int2x2 matrix and an int value. public static int2x2 operator %(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int2x2 int2x2 result of the componentwise modulus. operator %(int2x2, int2x2) Returns the result of a componentwise modulus operation on two int2x2 matrices. public static int2x2 operator %(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise modulus. rhs int2x2 Right hand side int2x2 to use to compute componentwise modulus. 返回 int2x2 int2x2 result of the componentwise modulus. operator *(int, int2x2) Returns the result of a componentwise multiplication operation on an int value and an int2x2 matrix. public static int2x2 operator *(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int2x2 Right hand side int2x2 to use to compute componentwise multiplication. 返回 int2x2 int2x2 result of the componentwise multiplication. operator *(int2x2, int) Returns the result of a componentwise multiplication operation on an int2x2 matrix and an int value. public static int2x2 operator *(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int2x2 int2x2 result of the componentwise multiplication. operator *(int2x2, int2x2) Returns the result of a componentwise multiplication operation on two int2x2 matrices. public static int2x2 operator *(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise multiplication. rhs int2x2 Right hand side int2x2 to use to compute componentwise multiplication. 返回 int2x2 int2x2 result of the componentwise multiplication. operator ~(int2x2) Returns the result of a componentwise bitwise not operation on an int2x2 matrix. public static int2x2 operator ~(int2x2 val) 参数 val int2x2 Value to use when computing the componentwise bitwise not. 返回 int2x2 int2x2 result of the componentwise bitwise not. operator >>(int2x2, int) Returns the result of a componentwise right shift operation on an int2x2 matrix by a number of bits specified by a single int. public static int2x2 operator >>(int2x2 x, int n) 参数 x int2x2 The matrix to right shift. n int The number of bits to right shift. 返回 int2x2 The result of the componentwise right shift. operator -(int, int2x2) Returns the result of a componentwise subtraction operation on an int value and an int2x2 matrix. public static int2x2 operator -(int lhs, int2x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int2x2 Right hand side int2x2 to use to compute componentwise subtraction. 返回 int2x2 int2x2 result of the componentwise subtraction. operator -(int2x2, int) Returns the result of a componentwise subtraction operation on an int2x2 matrix and an int value. public static int2x2 operator -(int2x2 lhs, int rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int2x2 int2x2 result of the componentwise subtraction. operator -(int2x2, int2x2) Returns the result of a componentwise subtraction operation on two int2x2 matrices. public static int2x2 operator -(int2x2 lhs, int2x2 rhs) 参数 lhs int2x2 Left hand side int2x2 to use to compute componentwise subtraction. rhs int2x2 Right hand side int2x2 to use to compute componentwise subtraction. 返回 int2x2 int2x2 result of the componentwise subtraction. operator -(int2x2) Returns the result of a componentwise unary minus operation on an int2x2 matrix. public static int2x2 operator -(int2x2 val) 参数 val int2x2 Value to use when computing the componentwise unary minus. 返回 int2x2 int2x2 result of the componentwise unary minus. operator +(int2x2) Returns the result of a componentwise unary plus operation on an int2x2 matrix. public static int2x2 operator +(int2x2 val) 参数 val int2x2 Value to use when computing the componentwise unary plus. 返回 int2x2 int2x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int2x3.html": {
    "href": "reference/Unity.Mathematics.int2x3.html",
    "title": "int2x3 结构 | Fantasy.Net API Reference",
    "keywords": "int2x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x3 matrix of ints. public struct int2x3 : IEquatable<int2x3>, IFormattable 实现 IEquatable<int2x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int2x3(bool) Constructs a int2x3 matrix from a single bool value by converting it to int and assigning it to every component. public int2x3(bool v) 参数 v bool bool to convert to int2x3 int2x3(double) Constructs a int2x3 matrix from a single double value by converting it to int and assigning it to every component. public int2x3(double v) 参数 v double double to convert to int2x3 int2x3(int) Constructs a int2x3 matrix from a single int value by assigning it to every component. public int2x3(int v) 参数 v int int to convert to int2x3 int2x3(int, int, int, int, int, int) Constructs a int2x3 matrix from 6 int values given in row-major order. public int2x3(int m00, int m01, int m02, int m10, int m11, int m12) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. int2x3(float) Constructs a int2x3 matrix from a single float value by converting it to int and assigning it to every component. public int2x3(float v) 参数 v float float to convert to int2x3 int2x3(uint) Constructs a int2x3 matrix from a single uint value by converting it to int and assigning it to every component. public int2x3(uint v) 参数 v uint uint to convert to int2x3 int2x3(bool2x3) Constructs a int2x3 matrix from a bool2x3 matrix by componentwise conversion. public int2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to int2x3 int2x3(double2x3) Constructs a int2x3 matrix from a double2x3 matrix by componentwise conversion. public int2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to int2x3 int2x3(float2x3) Constructs a int2x3 matrix from a float2x3 matrix by componentwise conversion. public int2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to int2x3 int2x3(int2, int2, int2) Constructs a int2x3 matrix from three int2 vectors. public int2x3(int2 c0, int2 c1, int2 c2) 参数 c0 int2 The matrix column c0 will be set to this value. c1 int2 The matrix column c1 will be set to this value. c2 int2 The matrix column c2 will be set to this value. int2x3(uint2x3) Constructs a int2x3 matrix from a uint2x3 matrix by componentwise conversion. public int2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to int2x3 字段 c0 Column 0 of the matrix. public int2 c0 字段值 int2 c1 Column 1 of the matrix. public int2 c1 字段值 int2 c2 Column 2 of the matrix. public int2 c2 字段值 int2 zero int2x3 zero value. public static readonly int2x3 zero 字段值 int2x3 属性 this[int] Returns the int2 element at a specified index. public ref int2 this[int index] { get; } 参数 index int 属性值 int2 方法 Equals(object) Returns true if the int2x3 is equal to a given int2x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int2x3) Returns true if the int2x3 is equal to a given int2x3, false otherwise. public bool Equals(int2x3 rhs) 参数 rhs int2x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int2x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int2x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int2x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int2x3) Returns the result of a componentwise addition operation on an int value and an int2x3 matrix. public static int2x3 operator +(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int2x3 Right hand side int2x3 to use to compute componentwise addition. 返回 int2x3 int2x3 result of the componentwise addition. operator +(int2x3, int) Returns the result of a componentwise addition operation on an int2x3 matrix and an int value. public static int2x3 operator +(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int2x3 int2x3 result of the componentwise addition. operator +(int2x3, int2x3) Returns the result of a componentwise addition operation on two int2x3 matrices. public static int2x3 operator +(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise addition. rhs int2x3 Right hand side int2x3 to use to compute componentwise addition. 返回 int2x3 int2x3 result of the componentwise addition. operator &(int, int2x3) Returns the result of a componentwise bitwise and operation on an int value and an int2x3 matrix. public static int2x3 operator &(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int2x3 Right hand side int2x3 to use to compute componentwise bitwise and. 返回 int2x3 int2x3 result of the componentwise bitwise and. operator &(int2x3, int) Returns the result of a componentwise bitwise and operation on an int2x3 matrix and an int value. public static int2x3 operator &(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int2x3 int2x3 result of the componentwise bitwise and. operator &(int2x3, int2x3) Returns the result of a componentwise bitwise and operation on two int2x3 matrices. public static int2x3 operator &(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise bitwise and. rhs int2x3 Right hand side int2x3 to use to compute componentwise bitwise and. 返回 int2x3 int2x3 result of the componentwise bitwise and. operator |(int, int2x3) Returns the result of a componentwise bitwise or operation on an int value and an int2x3 matrix. public static int2x3 operator |(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int2x3 Right hand side int2x3 to use to compute componentwise bitwise or. 返回 int2x3 int2x3 result of the componentwise bitwise or. operator |(int2x3, int) Returns the result of a componentwise bitwise or operation on an int2x3 matrix and an int value. public static int2x3 operator |(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int2x3 int2x3 result of the componentwise bitwise or. operator |(int2x3, int2x3) Returns the result of a componentwise bitwise or operation on two int2x3 matrices. public static int2x3 operator |(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise bitwise or. rhs int2x3 Right hand side int2x3 to use to compute componentwise bitwise or. 返回 int2x3 int2x3 result of the componentwise bitwise or. operator --(int2x3) Returns the result of a componentwise decrement operation on an int2x3 matrix. public static int2x3 operator --(int2x3 val) 参数 val int2x3 Value to use when computing the componentwise decrement. 返回 int2x3 int2x3 result of the componentwise decrement. operator /(int, int2x3) Returns the result of a componentwise division operation on an int value and an int2x3 matrix. public static int2x3 operator /(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int2x3 Right hand side int2x3 to use to compute componentwise division. 返回 int2x3 int2x3 result of the componentwise division. operator /(int2x3, int) Returns the result of a componentwise division operation on an int2x3 matrix and an int value. public static int2x3 operator /(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int2x3 int2x3 result of the componentwise division. operator /(int2x3, int2x3) Returns the result of a componentwise division operation on two int2x3 matrices. public static int2x3 operator /(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise division. rhs int2x3 Right hand side int2x3 to use to compute componentwise division. 返回 int2x3 int2x3 result of the componentwise division. operator ==(int, int2x3) Returns the result of a componentwise equality operation on an int value and an int2x3 matrix. public static bool2x3 operator ==(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int2x3 Right hand side int2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(int2x3, int) Returns the result of a componentwise equality operation on an int2x3 matrix and an int value. public static bool2x3 operator ==(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(int2x3, int2x3) Returns the result of a componentwise equality operation on two int2x3 matrices. public static bool2x3 operator ==(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise equality. rhs int2x3 Right hand side int2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ^(int, int2x3) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int2x3 matrix. public static int2x3 operator ^(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int2x3 Right hand side int2x3 to use to compute componentwise bitwise exclusive or. 返回 int2x3 int2x3 result of the componentwise bitwise exclusive or. operator ^(int2x3, int) Returns the result of a componentwise bitwise exclusive or operation on an int2x3 matrix and an int value. public static int2x3 operator ^(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int2x3 int2x3 result of the componentwise bitwise exclusive or. operator ^(int2x3, int2x3) Returns the result of a componentwise bitwise exclusive or operation on two int2x3 matrices. public static int2x3 operator ^(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise bitwise exclusive or. rhs int2x3 Right hand side int2x3 to use to compute componentwise bitwise exclusive or. 返回 int2x3 int2x3 result of the componentwise bitwise exclusive or. explicit operator int2x3(bool) Explicitly converts a single bool value to a int2x3 matrix by converting it to int and assigning it to every component. public static explicit operator int2x3(bool v) 参数 v bool bool to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(double) Explicitly converts a single double value to a int2x3 matrix by converting it to int and assigning it to every component. public static explicit operator int2x3(double v) 参数 v double double to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(float) Explicitly converts a single float value to a int2x3 matrix by converting it to int and assigning it to every component. public static explicit operator int2x3(float v) 参数 v float float to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(uint) Explicitly converts a single uint value to a int2x3 matrix by converting it to int and assigning it to every component. public static explicit operator int2x3(uint v) 参数 v uint uint to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(bool2x3) Explicitly converts a bool2x3 matrix to a int2x3 matrix by componentwise conversion. public static explicit operator int2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(double2x3) Explicitly converts a double2x3 matrix to a int2x3 matrix by componentwise conversion. public static explicit operator int2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(float2x3) Explicitly converts a float2x3 matrix to a int2x3 matrix by componentwise conversion. public static explicit operator int2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to int2x3 返回 int2x3 Converted value. explicit operator int2x3(uint2x3) Explicitly converts a uint2x3 matrix to a int2x3 matrix by componentwise conversion. public static explicit operator int2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to int2x3 返回 int2x3 Converted value. operator >(int, int2x3) Returns the result of a componentwise greater than operation on an int value and an int2x3 matrix. public static bool2x3 operator >(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int2x3 Right hand side int2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(int2x3, int) Returns the result of a componentwise greater than operation on an int2x3 matrix and an int value. public static bool2x3 operator >(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(int2x3, int2x3) Returns the result of a componentwise greater than operation on two int2x3 matrices. public static bool2x3 operator >(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise greater than. rhs int2x3 Right hand side int2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >=(int, int2x3) Returns the result of a componentwise greater or equal operation on an int value and an int2x3 matrix. public static bool2x3 operator >=(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int2x3 Right hand side int2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(int2x3, int) Returns the result of a componentwise greater or equal operation on an int2x3 matrix and an int value. public static bool2x3 operator >=(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(int2x3, int2x3) Returns the result of a componentwise greater or equal operation on two int2x3 matrices. public static bool2x3 operator >=(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise greater or equal. rhs int2x3 Right hand side int2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. implicit operator int2x3(int) Implicitly converts a single int value to a int2x3 matrix by assigning it to every component. public static implicit operator int2x3(int v) 参数 v int int to convert to int2x3 返回 int2x3 Converted value. operator ++(int2x3) Returns the result of a componentwise increment operation on an int2x3 matrix. public static int2x3 operator ++(int2x3 val) 参数 val int2x3 Value to use when computing the componentwise increment. 返回 int2x3 int2x3 result of the componentwise increment. operator !=(int, int2x3) Returns the result of a componentwise not equal operation on an int value and an int2x3 matrix. public static bool2x3 operator !=(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int2x3 Right hand side int2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(int2x3, int) Returns the result of a componentwise not equal operation on an int2x3 matrix and an int value. public static bool2x3 operator !=(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(int2x3, int2x3) Returns the result of a componentwise not equal operation on two int2x3 matrices. public static bool2x3 operator !=(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise not equal. rhs int2x3 Right hand side int2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator <<(int2x3, int) Returns the result of a componentwise left shift operation on an int2x3 matrix by a number of bits specified by a single int. public static int2x3 operator <<(int2x3 x, int n) 参数 x int2x3 The matrix to left shift. n int The number of bits to left shift. 返回 int2x3 The result of the componentwise left shift. operator <(int, int2x3) Returns the result of a componentwise less than operation on an int value and an int2x3 matrix. public static bool2x3 operator <(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int2x3 Right hand side int2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(int2x3, int) Returns the result of a componentwise less than operation on an int2x3 matrix and an int value. public static bool2x3 operator <(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(int2x3, int2x3) Returns the result of a componentwise less than operation on two int2x3 matrices. public static bool2x3 operator <(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise less than. rhs int2x3 Right hand side int2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <=(int, int2x3) Returns the result of a componentwise less or equal operation on an int value and an int2x3 matrix. public static bool2x3 operator <=(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int2x3 Right hand side int2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(int2x3, int) Returns the result of a componentwise less or equal operation on an int2x3 matrix and an int value. public static bool2x3 operator <=(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(int2x3, int2x3) Returns the result of a componentwise less or equal operation on two int2x3 matrices. public static bool2x3 operator <=(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise less or equal. rhs int2x3 Right hand side int2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator %(int, int2x3) Returns the result of a componentwise modulus operation on an int value and an int2x3 matrix. public static int2x3 operator %(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int2x3 Right hand side int2x3 to use to compute componentwise modulus. 返回 int2x3 int2x3 result of the componentwise modulus. operator %(int2x3, int) Returns the result of a componentwise modulus operation on an int2x3 matrix and an int value. public static int2x3 operator %(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int2x3 int2x3 result of the componentwise modulus. operator %(int2x3, int2x3) Returns the result of a componentwise modulus operation on two int2x3 matrices. public static int2x3 operator %(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise modulus. rhs int2x3 Right hand side int2x3 to use to compute componentwise modulus. 返回 int2x3 int2x3 result of the componentwise modulus. operator *(int, int2x3) Returns the result of a componentwise multiplication operation on an int value and an int2x3 matrix. public static int2x3 operator *(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int2x3 Right hand side int2x3 to use to compute componentwise multiplication. 返回 int2x3 int2x3 result of the componentwise multiplication. operator *(int2x3, int) Returns the result of a componentwise multiplication operation on an int2x3 matrix and an int value. public static int2x3 operator *(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int2x3 int2x3 result of the componentwise multiplication. operator *(int2x3, int2x3) Returns the result of a componentwise multiplication operation on two int2x3 matrices. public static int2x3 operator *(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise multiplication. rhs int2x3 Right hand side int2x3 to use to compute componentwise multiplication. 返回 int2x3 int2x3 result of the componentwise multiplication. operator ~(int2x3) Returns the result of a componentwise bitwise not operation on an int2x3 matrix. public static int2x3 operator ~(int2x3 val) 参数 val int2x3 Value to use when computing the componentwise bitwise not. 返回 int2x3 int2x3 result of the componentwise bitwise not. operator >>(int2x3, int) Returns the result of a componentwise right shift operation on an int2x3 matrix by a number of bits specified by a single int. public static int2x3 operator >>(int2x3 x, int n) 参数 x int2x3 The matrix to right shift. n int The number of bits to right shift. 返回 int2x3 The result of the componentwise right shift. operator -(int, int2x3) Returns the result of a componentwise subtraction operation on an int value and an int2x3 matrix. public static int2x3 operator -(int lhs, int2x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int2x3 Right hand side int2x3 to use to compute componentwise subtraction. 返回 int2x3 int2x3 result of the componentwise subtraction. operator -(int2x3, int) Returns the result of a componentwise subtraction operation on an int2x3 matrix and an int value. public static int2x3 operator -(int2x3 lhs, int rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int2x3 int2x3 result of the componentwise subtraction. operator -(int2x3, int2x3) Returns the result of a componentwise subtraction operation on two int2x3 matrices. public static int2x3 operator -(int2x3 lhs, int2x3 rhs) 参数 lhs int2x3 Left hand side int2x3 to use to compute componentwise subtraction. rhs int2x3 Right hand side int2x3 to use to compute componentwise subtraction. 返回 int2x3 int2x3 result of the componentwise subtraction. operator -(int2x3) Returns the result of a componentwise unary minus operation on an int2x3 matrix. public static int2x3 operator -(int2x3 val) 参数 val int2x3 Value to use when computing the componentwise unary minus. 返回 int2x3 int2x3 result of the componentwise unary minus. operator +(int2x3) Returns the result of a componentwise unary plus operation on an int2x3 matrix. public static int2x3 operator +(int2x3 val) 参数 val int2x3 Value to use when computing the componentwise unary plus. 返回 int2x3 int2x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int2x4.html": {
    "href": "reference/Unity.Mathematics.int2x4.html",
    "title": "int2x4 结构 | Fantasy.Net API Reference",
    "keywords": "int2x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x4 matrix of ints. public struct int2x4 : IEquatable<int2x4>, IFormattable 实现 IEquatable<int2x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int2x4(bool) Constructs a int2x4 matrix from a single bool value by converting it to int and assigning it to every component. public int2x4(bool v) 参数 v bool bool to convert to int2x4 int2x4(double) Constructs a int2x4 matrix from a single double value by converting it to int and assigning it to every component. public int2x4(double v) 参数 v double double to convert to int2x4 int2x4(int) Constructs a int2x4 matrix from a single int value by assigning it to every component. public int2x4(int v) 参数 v int int to convert to int2x4 int2x4(int, int, int, int, int, int, int, int) Constructs a int2x4 matrix from 8 int values given in row-major order. public int2x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m03 int The matrix at row 0, column 3 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m13 int The matrix at row 1, column 3 will be set to this value. int2x4(float) Constructs a int2x4 matrix from a single float value by converting it to int and assigning it to every component. public int2x4(float v) 参数 v float float to convert to int2x4 int2x4(uint) Constructs a int2x4 matrix from a single uint value by converting it to int and assigning it to every component. public int2x4(uint v) 参数 v uint uint to convert to int2x4 int2x4(bool2x4) Constructs a int2x4 matrix from a bool2x4 matrix by componentwise conversion. public int2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to int2x4 int2x4(double2x4) Constructs a int2x4 matrix from a double2x4 matrix by componentwise conversion. public int2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to int2x4 int2x4(float2x4) Constructs a int2x4 matrix from a float2x4 matrix by componentwise conversion. public int2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to int2x4 int2x4(int2, int2, int2, int2) Constructs a int2x4 matrix from four int2 vectors. public int2x4(int2 c0, int2 c1, int2 c2, int2 c3) 参数 c0 int2 The matrix column c0 will be set to this value. c1 int2 The matrix column c1 will be set to this value. c2 int2 The matrix column c2 will be set to this value. c3 int2 The matrix column c3 will be set to this value. int2x4(uint2x4) Constructs a int2x4 matrix from a uint2x4 matrix by componentwise conversion. public int2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to int2x4 字段 c0 Column 0 of the matrix. public int2 c0 字段值 int2 c1 Column 1 of the matrix. public int2 c1 字段值 int2 c2 Column 2 of the matrix. public int2 c2 字段值 int2 c3 Column 3 of the matrix. public int2 c3 字段值 int2 zero int2x4 zero value. public static readonly int2x4 zero 字段值 int2x4 属性 this[int] Returns the int2 element at a specified index. public ref int2 this[int index] { get; } 参数 index int 属性值 int2 方法 Equals(object) Returns true if the int2x4 is equal to a given int2x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int2x4) Returns true if the int2x4 is equal to a given int2x4, false otherwise. public bool Equals(int2x4 rhs) 参数 rhs int2x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int2x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int2x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int2x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int2x4) Returns the result of a componentwise addition operation on an int value and an int2x4 matrix. public static int2x4 operator +(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int2x4 Right hand side int2x4 to use to compute componentwise addition. 返回 int2x4 int2x4 result of the componentwise addition. operator +(int2x4, int) Returns the result of a componentwise addition operation on an int2x4 matrix and an int value. public static int2x4 operator +(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int2x4 int2x4 result of the componentwise addition. operator +(int2x4, int2x4) Returns the result of a componentwise addition operation on two int2x4 matrices. public static int2x4 operator +(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise addition. rhs int2x4 Right hand side int2x4 to use to compute componentwise addition. 返回 int2x4 int2x4 result of the componentwise addition. operator &(int, int2x4) Returns the result of a componentwise bitwise and operation on an int value and an int2x4 matrix. public static int2x4 operator &(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int2x4 Right hand side int2x4 to use to compute componentwise bitwise and. 返回 int2x4 int2x4 result of the componentwise bitwise and. operator &(int2x4, int) Returns the result of a componentwise bitwise and operation on an int2x4 matrix and an int value. public static int2x4 operator &(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int2x4 int2x4 result of the componentwise bitwise and. operator &(int2x4, int2x4) Returns the result of a componentwise bitwise and operation on two int2x4 matrices. public static int2x4 operator &(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise bitwise and. rhs int2x4 Right hand side int2x4 to use to compute componentwise bitwise and. 返回 int2x4 int2x4 result of the componentwise bitwise and. operator |(int, int2x4) Returns the result of a componentwise bitwise or operation on an int value and an int2x4 matrix. public static int2x4 operator |(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int2x4 Right hand side int2x4 to use to compute componentwise bitwise or. 返回 int2x4 int2x4 result of the componentwise bitwise or. operator |(int2x4, int) Returns the result of a componentwise bitwise or operation on an int2x4 matrix and an int value. public static int2x4 operator |(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int2x4 int2x4 result of the componentwise bitwise or. operator |(int2x4, int2x4) Returns the result of a componentwise bitwise or operation on two int2x4 matrices. public static int2x4 operator |(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise bitwise or. rhs int2x4 Right hand side int2x4 to use to compute componentwise bitwise or. 返回 int2x4 int2x4 result of the componentwise bitwise or. operator --(int2x4) Returns the result of a componentwise decrement operation on an int2x4 matrix. public static int2x4 operator --(int2x4 val) 参数 val int2x4 Value to use when computing the componentwise decrement. 返回 int2x4 int2x4 result of the componentwise decrement. operator /(int, int2x4) Returns the result of a componentwise division operation on an int value and an int2x4 matrix. public static int2x4 operator /(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int2x4 Right hand side int2x4 to use to compute componentwise division. 返回 int2x4 int2x4 result of the componentwise division. operator /(int2x4, int) Returns the result of a componentwise division operation on an int2x4 matrix and an int value. public static int2x4 operator /(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int2x4 int2x4 result of the componentwise division. operator /(int2x4, int2x4) Returns the result of a componentwise division operation on two int2x4 matrices. public static int2x4 operator /(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise division. rhs int2x4 Right hand side int2x4 to use to compute componentwise division. 返回 int2x4 int2x4 result of the componentwise division. operator ==(int, int2x4) Returns the result of a componentwise equality operation on an int value and an int2x4 matrix. public static bool2x4 operator ==(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int2x4 Right hand side int2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(int2x4, int) Returns the result of a componentwise equality operation on an int2x4 matrix and an int value. public static bool2x4 operator ==(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(int2x4, int2x4) Returns the result of a componentwise equality operation on two int2x4 matrices. public static bool2x4 operator ==(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise equality. rhs int2x4 Right hand side int2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ^(int, int2x4) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int2x4 matrix. public static int2x4 operator ^(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int2x4 Right hand side int2x4 to use to compute componentwise bitwise exclusive or. 返回 int2x4 int2x4 result of the componentwise bitwise exclusive or. operator ^(int2x4, int) Returns the result of a componentwise bitwise exclusive or operation on an int2x4 matrix and an int value. public static int2x4 operator ^(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int2x4 int2x4 result of the componentwise bitwise exclusive or. operator ^(int2x4, int2x4) Returns the result of a componentwise bitwise exclusive or operation on two int2x4 matrices. public static int2x4 operator ^(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise bitwise exclusive or. rhs int2x4 Right hand side int2x4 to use to compute componentwise bitwise exclusive or. 返回 int2x4 int2x4 result of the componentwise bitwise exclusive or. explicit operator int2x4(bool) Explicitly converts a single bool value to a int2x4 matrix by converting it to int and assigning it to every component. public static explicit operator int2x4(bool v) 参数 v bool bool to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(double) Explicitly converts a single double value to a int2x4 matrix by converting it to int and assigning it to every component. public static explicit operator int2x4(double v) 参数 v double double to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(float) Explicitly converts a single float value to a int2x4 matrix by converting it to int and assigning it to every component. public static explicit operator int2x4(float v) 参数 v float float to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(uint) Explicitly converts a single uint value to a int2x4 matrix by converting it to int and assigning it to every component. public static explicit operator int2x4(uint v) 参数 v uint uint to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(bool2x4) Explicitly converts a bool2x4 matrix to a int2x4 matrix by componentwise conversion. public static explicit operator int2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(double2x4) Explicitly converts a double2x4 matrix to a int2x4 matrix by componentwise conversion. public static explicit operator int2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(float2x4) Explicitly converts a float2x4 matrix to a int2x4 matrix by componentwise conversion. public static explicit operator int2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to int2x4 返回 int2x4 Converted value. explicit operator int2x4(uint2x4) Explicitly converts a uint2x4 matrix to a int2x4 matrix by componentwise conversion. public static explicit operator int2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to int2x4 返回 int2x4 Converted value. operator >(int, int2x4) Returns the result of a componentwise greater than operation on an int value and an int2x4 matrix. public static bool2x4 operator >(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int2x4 Right hand side int2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(int2x4, int) Returns the result of a componentwise greater than operation on an int2x4 matrix and an int value. public static bool2x4 operator >(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(int2x4, int2x4) Returns the result of a componentwise greater than operation on two int2x4 matrices. public static bool2x4 operator >(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise greater than. rhs int2x4 Right hand side int2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >=(int, int2x4) Returns the result of a componentwise greater or equal operation on an int value and an int2x4 matrix. public static bool2x4 operator >=(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int2x4 Right hand side int2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(int2x4, int) Returns the result of a componentwise greater or equal operation on an int2x4 matrix and an int value. public static bool2x4 operator >=(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(int2x4, int2x4) Returns the result of a componentwise greater or equal operation on two int2x4 matrices. public static bool2x4 operator >=(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise greater or equal. rhs int2x4 Right hand side int2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. implicit operator int2x4(int) Implicitly converts a single int value to a int2x4 matrix by assigning it to every component. public static implicit operator int2x4(int v) 参数 v int int to convert to int2x4 返回 int2x4 Converted value. operator ++(int2x4) Returns the result of a componentwise increment operation on an int2x4 matrix. public static int2x4 operator ++(int2x4 val) 参数 val int2x4 Value to use when computing the componentwise increment. 返回 int2x4 int2x4 result of the componentwise increment. operator !=(int, int2x4) Returns the result of a componentwise not equal operation on an int value and an int2x4 matrix. public static bool2x4 operator !=(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int2x4 Right hand side int2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(int2x4, int) Returns the result of a componentwise not equal operation on an int2x4 matrix and an int value. public static bool2x4 operator !=(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(int2x4, int2x4) Returns the result of a componentwise not equal operation on two int2x4 matrices. public static bool2x4 operator !=(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise not equal. rhs int2x4 Right hand side int2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator <<(int2x4, int) Returns the result of a componentwise left shift operation on an int2x4 matrix by a number of bits specified by a single int. public static int2x4 operator <<(int2x4 x, int n) 参数 x int2x4 The matrix to left shift. n int The number of bits to left shift. 返回 int2x4 The result of the componentwise left shift. operator <(int, int2x4) Returns the result of a componentwise less than operation on an int value and an int2x4 matrix. public static bool2x4 operator <(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int2x4 Right hand side int2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(int2x4, int) Returns the result of a componentwise less than operation on an int2x4 matrix and an int value. public static bool2x4 operator <(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(int2x4, int2x4) Returns the result of a componentwise less than operation on two int2x4 matrices. public static bool2x4 operator <(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise less than. rhs int2x4 Right hand side int2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <=(int, int2x4) Returns the result of a componentwise less or equal operation on an int value and an int2x4 matrix. public static bool2x4 operator <=(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int2x4 Right hand side int2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(int2x4, int) Returns the result of a componentwise less or equal operation on an int2x4 matrix and an int value. public static bool2x4 operator <=(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(int2x4, int2x4) Returns the result of a componentwise less or equal operation on two int2x4 matrices. public static bool2x4 operator <=(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise less or equal. rhs int2x4 Right hand side int2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator %(int, int2x4) Returns the result of a componentwise modulus operation on an int value and an int2x4 matrix. public static int2x4 operator %(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int2x4 Right hand side int2x4 to use to compute componentwise modulus. 返回 int2x4 int2x4 result of the componentwise modulus. operator %(int2x4, int) Returns the result of a componentwise modulus operation on an int2x4 matrix and an int value. public static int2x4 operator %(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int2x4 int2x4 result of the componentwise modulus. operator %(int2x4, int2x4) Returns the result of a componentwise modulus operation on two int2x4 matrices. public static int2x4 operator %(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise modulus. rhs int2x4 Right hand side int2x4 to use to compute componentwise modulus. 返回 int2x4 int2x4 result of the componentwise modulus. operator *(int, int2x4) Returns the result of a componentwise multiplication operation on an int value and an int2x4 matrix. public static int2x4 operator *(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int2x4 Right hand side int2x4 to use to compute componentwise multiplication. 返回 int2x4 int2x4 result of the componentwise multiplication. operator *(int2x4, int) Returns the result of a componentwise multiplication operation on an int2x4 matrix and an int value. public static int2x4 operator *(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int2x4 int2x4 result of the componentwise multiplication. operator *(int2x4, int2x4) Returns the result of a componentwise multiplication operation on two int2x4 matrices. public static int2x4 operator *(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise multiplication. rhs int2x4 Right hand side int2x4 to use to compute componentwise multiplication. 返回 int2x4 int2x4 result of the componentwise multiplication. operator ~(int2x4) Returns the result of a componentwise bitwise not operation on an int2x4 matrix. public static int2x4 operator ~(int2x4 val) 参数 val int2x4 Value to use when computing the componentwise bitwise not. 返回 int2x4 int2x4 result of the componentwise bitwise not. operator >>(int2x4, int) Returns the result of a componentwise right shift operation on an int2x4 matrix by a number of bits specified by a single int. public static int2x4 operator >>(int2x4 x, int n) 参数 x int2x4 The matrix to right shift. n int The number of bits to right shift. 返回 int2x4 The result of the componentwise right shift. operator -(int, int2x4) Returns the result of a componentwise subtraction operation on an int value and an int2x4 matrix. public static int2x4 operator -(int lhs, int2x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int2x4 Right hand side int2x4 to use to compute componentwise subtraction. 返回 int2x4 int2x4 result of the componentwise subtraction. operator -(int2x4, int) Returns the result of a componentwise subtraction operation on an int2x4 matrix and an int value. public static int2x4 operator -(int2x4 lhs, int rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int2x4 int2x4 result of the componentwise subtraction. operator -(int2x4, int2x4) Returns the result of a componentwise subtraction operation on two int2x4 matrices. public static int2x4 operator -(int2x4 lhs, int2x4 rhs) 参数 lhs int2x4 Left hand side int2x4 to use to compute componentwise subtraction. rhs int2x4 Right hand side int2x4 to use to compute componentwise subtraction. 返回 int2x4 int2x4 result of the componentwise subtraction. operator -(int2x4) Returns the result of a componentwise unary minus operation on an int2x4 matrix. public static int2x4 operator -(int2x4 val) 参数 val int2x4 Value to use when computing the componentwise unary minus. 返回 int2x4 int2x4 result of the componentwise unary minus. operator +(int2x4) Returns the result of a componentwise unary plus operation on an int2x4 matrix. public static int2x4 operator +(int2x4 val) 参数 val int2x4 Value to use when computing the componentwise unary plus. 返回 int2x4 int2x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int3.html": {
    "href": "reference/Unity.Mathematics.int3.html",
    "title": "int3 结构 | Fantasy.Net API Reference",
    "keywords": "int3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3 component vector of ints. public struct int3 : IEquatable<int3>, IFormattable 实现 IEquatable<int3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int3(bool) Constructs a int3 vector from a single bool value by converting it to int and assigning it to every component. public int3(bool v) 参数 v bool bool to convert to int3 int3(double) Constructs a int3 vector from a single double value by converting it to int and assigning it to every component. public int3(double v) 参数 v double double to convert to int3 int3(int) Constructs a int3 vector from a single int value by assigning it to every component. public int3(int v) 参数 v int int to convert to int3 int3(int, int, int) Constructs a int3 vector from three int values. public int3(int x, int y, int z) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. z int The constructed vector's z component will be set to this value. int3(int, int2) Constructs a int3 vector from an int value and an int2 vector. public int3(int x, int2 yz) 参数 x int The constructed vector's x component will be set to this value. yz int2 The constructed vector's yz components will be set to this value. int3(float) Constructs a int3 vector from a single float value by converting it to int and assigning it to every component. public int3(float v) 参数 v float float to convert to int3 int3(uint) Constructs a int3 vector from a single uint value by converting it to int and assigning it to every component. public int3(uint v) 参数 v uint uint to convert to int3 int3(bool3) Constructs a int3 vector from a bool3 vector by componentwise conversion. public int3(bool3 v) 参数 v bool3 bool3 to convert to int3 int3(double3) Constructs a int3 vector from a double3 vector by componentwise conversion. public int3(double3 v) 参数 v double3 double3 to convert to int3 int3(float3) Constructs a int3 vector from a float3 vector by componentwise conversion. public int3(float3 v) 参数 v float3 float3 to convert to int3 int3(int2, int) Constructs a int3 vector from an int2 vector and an int value. public int3(int2 xy, int z) 参数 xy int2 The constructed vector's xy components will be set to this value. z int The constructed vector's z component will be set to this value. int3(int3) Constructs a int3 vector from an int3 vector. public int3(int3 xyz) 参数 xyz int3 The constructed vector's xyz components will be set to this value. int3(uint3) Constructs a int3 vector from a uint3 vector by componentwise conversion. public int3(uint3 v) 参数 v uint3 uint3 to convert to int3 字段 x x component of the vector. public int x 字段值 int y y component of the vector. public int y 字段值 int z z component of the vector. public int z 字段值 int zero int3 zero value. public static readonly int3 zero 字段值 int3 属性 this[int] Returns the int element at a specified index. public int this[int index] { get; set; } 参数 index int 属性值 int 方法 Equals(object) Returns true if the int3 is equal to a given int3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int3) Returns true if the int3 is equal to a given int3, false otherwise. public bool Equals(int3 rhs) 参数 rhs int3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int3) Returns the result of a componentwise addition operation on an int value and an int3 vector. public static int3 operator +(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int3 Right hand side int3 to use to compute componentwise addition. 返回 int3 int3 result of the componentwise addition. operator +(int3, int) Returns the result of a componentwise addition operation on an int3 vector and an int value. public static int3 operator +(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int3 int3 result of the componentwise addition. operator +(int3, int3) Returns the result of a componentwise addition operation on two int3 vectors. public static int3 operator +(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise addition. rhs int3 Right hand side int3 to use to compute componentwise addition. 返回 int3 int3 result of the componentwise addition. operator &(int, int3) Returns the result of a componentwise bitwise and operation on an int value and an int3 vector. public static int3 operator &(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int3 Right hand side int3 to use to compute componentwise bitwise and. 返回 int3 int3 result of the componentwise bitwise and. operator &(int3, int) Returns the result of a componentwise bitwise and operation on an int3 vector and an int value. public static int3 operator &(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int3 int3 result of the componentwise bitwise and. operator &(int3, int3) Returns the result of a componentwise bitwise and operation on two int3 vectors. public static int3 operator &(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise bitwise and. rhs int3 Right hand side int3 to use to compute componentwise bitwise and. 返回 int3 int3 result of the componentwise bitwise and. operator |(int, int3) Returns the result of a componentwise bitwise or operation on an int value and an int3 vector. public static int3 operator |(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int3 Right hand side int3 to use to compute componentwise bitwise or. 返回 int3 int3 result of the componentwise bitwise or. operator |(int3, int) Returns the result of a componentwise bitwise or operation on an int3 vector and an int value. public static int3 operator |(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int3 int3 result of the componentwise bitwise or. operator |(int3, int3) Returns the result of a componentwise bitwise or operation on two int3 vectors. public static int3 operator |(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise bitwise or. rhs int3 Right hand side int3 to use to compute componentwise bitwise or. 返回 int3 int3 result of the componentwise bitwise or. operator --(int3) Returns the result of a componentwise decrement operation on an int3 vector. public static int3 operator --(int3 val) 参数 val int3 Value to use when computing the componentwise decrement. 返回 int3 int3 result of the componentwise decrement. operator /(int, int3) Returns the result of a componentwise division operation on an int value and an int3 vector. public static int3 operator /(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int3 Right hand side int3 to use to compute componentwise division. 返回 int3 int3 result of the componentwise division. operator /(int3, int) Returns the result of a componentwise division operation on an int3 vector and an int value. public static int3 operator /(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int3 int3 result of the componentwise division. operator /(int3, int3) Returns the result of a componentwise division operation on two int3 vectors. public static int3 operator /(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise division. rhs int3 Right hand side int3 to use to compute componentwise division. 返回 int3 int3 result of the componentwise division. operator ==(int, int3) Returns the result of a componentwise equality operation on an int value and an int3 vector. public static bool3 operator ==(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int3 Right hand side int3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(int3, int) Returns the result of a componentwise equality operation on an int3 vector and an int value. public static bool3 operator ==(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(int3, int3) Returns the result of a componentwise equality operation on two int3 vectors. public static bool3 operator ==(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise equality. rhs int3 Right hand side int3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ^(int, int3) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int3 vector. public static int3 operator ^(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int3 Right hand side int3 to use to compute componentwise bitwise exclusive or. 返回 int3 int3 result of the componentwise bitwise exclusive or. operator ^(int3, int) Returns the result of a componentwise bitwise exclusive or operation on an int3 vector and an int value. public static int3 operator ^(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int3 int3 result of the componentwise bitwise exclusive or. operator ^(int3, int3) Returns the result of a componentwise bitwise exclusive or operation on two int3 vectors. public static int3 operator ^(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise bitwise exclusive or. rhs int3 Right hand side int3 to use to compute componentwise bitwise exclusive or. 返回 int3 int3 result of the componentwise bitwise exclusive or. explicit operator int3(bool) Explicitly converts a single bool value to a int3 vector by converting it to int and assigning it to every component. public static explicit operator int3(bool v) 参数 v bool bool to convert to int3 返回 int3 Converted value. explicit operator int3(double) Explicitly converts a single double value to a int3 vector by converting it to int and assigning it to every component. public static explicit operator int3(double v) 参数 v double double to convert to int3 返回 int3 Converted value. explicit operator int3(float) Explicitly converts a single float value to a int3 vector by converting it to int and assigning it to every component. public static explicit operator int3(float v) 参数 v float float to convert to int3 返回 int3 Converted value. explicit operator int3(uint) Explicitly converts a single uint value to a int3 vector by converting it to int and assigning it to every component. public static explicit operator int3(uint v) 参数 v uint uint to convert to int3 返回 int3 Converted value. explicit operator int3(bool3) Explicitly converts a bool3 vector to a int3 vector by componentwise conversion. public static explicit operator int3(bool3 v) 参数 v bool3 bool3 to convert to int3 返回 int3 Converted value. explicit operator int3(double3) Explicitly converts a double3 vector to a int3 vector by componentwise conversion. public static explicit operator int3(double3 v) 参数 v double3 double3 to convert to int3 返回 int3 Converted value. explicit operator int3(float3) Explicitly converts a float3 vector to a int3 vector by componentwise conversion. public static explicit operator int3(float3 v) 参数 v float3 float3 to convert to int3 返回 int3 Converted value. explicit operator int3(uint3) Explicitly converts a uint3 vector to a int3 vector by componentwise conversion. public static explicit operator int3(uint3 v) 参数 v uint3 uint3 to convert to int3 返回 int3 Converted value. operator >(int, int3) Returns the result of a componentwise greater than operation on an int value and an int3 vector. public static bool3 operator >(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int3 Right hand side int3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(int3, int) Returns the result of a componentwise greater than operation on an int3 vector and an int value. public static bool3 operator >(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(int3, int3) Returns the result of a componentwise greater than operation on two int3 vectors. public static bool3 operator >(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise greater than. rhs int3 Right hand side int3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >=(int, int3) Returns the result of a componentwise greater or equal operation on an int value and an int3 vector. public static bool3 operator >=(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int3 Right hand side int3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(int3, int) Returns the result of a componentwise greater or equal operation on an int3 vector and an int value. public static bool3 operator >=(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(int3, int3) Returns the result of a componentwise greater or equal operation on two int3 vectors. public static bool3 operator >=(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise greater or equal. rhs int3 Right hand side int3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. implicit operator int3(int) Implicitly converts a single int value to a int3 vector by assigning it to every component. public static implicit operator int3(int v) 参数 v int int to convert to int3 返回 int3 Converted value. operator ++(int3) Returns the result of a componentwise increment operation on an int3 vector. public static int3 operator ++(int3 val) 参数 val int3 Value to use when computing the componentwise increment. 返回 int3 int3 result of the componentwise increment. operator !=(int, int3) Returns the result of a componentwise not equal operation on an int value and an int3 vector. public static bool3 operator !=(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int3 Right hand side int3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(int3, int) Returns the result of a componentwise not equal operation on an int3 vector and an int value. public static bool3 operator !=(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(int3, int3) Returns the result of a componentwise not equal operation on two int3 vectors. public static bool3 operator !=(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise not equal. rhs int3 Right hand side int3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator <<(int3, int) Returns the result of a componentwise left shift operation on an int3 vector by a number of bits specified by a single int. public static int3 operator <<(int3 x, int n) 参数 x int3 The vector to left shift. n int The number of bits to left shift. 返回 int3 The result of the componentwise left shift. operator <(int, int3) Returns the result of a componentwise less than operation on an int value and an int3 vector. public static bool3 operator <(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int3 Right hand side int3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(int3, int) Returns the result of a componentwise less than operation on an int3 vector and an int value. public static bool3 operator <(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(int3, int3) Returns the result of a componentwise less than operation on two int3 vectors. public static bool3 operator <(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise less than. rhs int3 Right hand side int3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <=(int, int3) Returns the result of a componentwise less or equal operation on an int value and an int3 vector. public static bool3 operator <=(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int3 Right hand side int3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(int3, int) Returns the result of a componentwise less or equal operation on an int3 vector and an int value. public static bool3 operator <=(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(int3, int3) Returns the result of a componentwise less or equal operation on two int3 vectors. public static bool3 operator <=(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise less or equal. rhs int3 Right hand side int3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator %(int, int3) Returns the result of a componentwise modulus operation on an int value and an int3 vector. public static int3 operator %(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int3 Right hand side int3 to use to compute componentwise modulus. 返回 int3 int3 result of the componentwise modulus. operator %(int3, int) Returns the result of a componentwise modulus operation on an int3 vector and an int value. public static int3 operator %(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int3 int3 result of the componentwise modulus. operator %(int3, int3) Returns the result of a componentwise modulus operation on two int3 vectors. public static int3 operator %(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise modulus. rhs int3 Right hand side int3 to use to compute componentwise modulus. 返回 int3 int3 result of the componentwise modulus. operator *(int, int3) Returns the result of a componentwise multiplication operation on an int value and an int3 vector. public static int3 operator *(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int3 Right hand side int3 to use to compute componentwise multiplication. 返回 int3 int3 result of the componentwise multiplication. operator *(int3, int) Returns the result of a componentwise multiplication operation on an int3 vector and an int value. public static int3 operator *(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int3 int3 result of the componentwise multiplication. operator *(int3, int3) Returns the result of a componentwise multiplication operation on two int3 vectors. public static int3 operator *(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise multiplication. rhs int3 Right hand side int3 to use to compute componentwise multiplication. 返回 int3 int3 result of the componentwise multiplication. operator ~(int3) Returns the result of a componentwise bitwise not operation on an int3 vector. public static int3 operator ~(int3 val) 参数 val int3 Value to use when computing the componentwise bitwise not. 返回 int3 int3 result of the componentwise bitwise not. operator >>(int3, int) Returns the result of a componentwise right shift operation on an int3 vector by a number of bits specified by a single int. public static int3 operator >>(int3 x, int n) 参数 x int3 The vector to right shift. n int The number of bits to right shift. 返回 int3 The result of the componentwise right shift. operator -(int, int3) Returns the result of a componentwise subtraction operation on an int value and an int3 vector. public static int3 operator -(int lhs, int3 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int3 Right hand side int3 to use to compute componentwise subtraction. 返回 int3 int3 result of the componentwise subtraction. operator -(int3, int) Returns the result of a componentwise subtraction operation on an int3 vector and an int value. public static int3 operator -(int3 lhs, int rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int3 int3 result of the componentwise subtraction. operator -(int3, int3) Returns the result of a componentwise subtraction operation on two int3 vectors. public static int3 operator -(int3 lhs, int3 rhs) 参数 lhs int3 Left hand side int3 to use to compute componentwise subtraction. rhs int3 Right hand side int3 to use to compute componentwise subtraction. 返回 int3 int3 result of the componentwise subtraction. operator -(int3) Returns the result of a componentwise unary minus operation on an int3 vector. public static int3 operator -(int3 val) 参数 val int3 Value to use when computing the componentwise unary minus. 返回 int3 int3 result of the componentwise unary minus. operator +(int3) Returns the result of a componentwise unary plus operation on an int3 vector. public static int3 operator +(int3 val) 参数 val int3 Value to use when computing the componentwise unary plus. 返回 int3 int3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int3x2.html": {
    "href": "reference/Unity.Mathematics.int3x2.html",
    "title": "int3x2 结构 | Fantasy.Net API Reference",
    "keywords": "int3x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x2 matrix of ints. public struct int3x2 : IEquatable<int3x2>, IFormattable 实现 IEquatable<int3x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int3x2(bool) Constructs a int3x2 matrix from a single bool value by converting it to int and assigning it to every component. public int3x2(bool v) 参数 v bool bool to convert to int3x2 int3x2(double) Constructs a int3x2 matrix from a single double value by converting it to int and assigning it to every component. public int3x2(double v) 参数 v double double to convert to int3x2 int3x2(int) Constructs a int3x2 matrix from a single int value by assigning it to every component. public int3x2(int v) 参数 v int int to convert to int3x2 int3x2(int, int, int, int, int, int) Constructs a int3x2 matrix from 6 int values given in row-major order. public int3x2(int m00, int m01, int m10, int m11, int m20, int m21) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. int3x2(float) Constructs a int3x2 matrix from a single float value by converting it to int and assigning it to every component. public int3x2(float v) 参数 v float float to convert to int3x2 int3x2(uint) Constructs a int3x2 matrix from a single uint value by converting it to int and assigning it to every component. public int3x2(uint v) 参数 v uint uint to convert to int3x2 int3x2(bool3x2) Constructs a int3x2 matrix from a bool3x2 matrix by componentwise conversion. public int3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to int3x2 int3x2(double3x2) Constructs a int3x2 matrix from a double3x2 matrix by componentwise conversion. public int3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to int3x2 int3x2(float3x2) Constructs a int3x2 matrix from a float3x2 matrix by componentwise conversion. public int3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to int3x2 int3x2(int3, int3) Constructs a int3x2 matrix from two int3 vectors. public int3x2(int3 c0, int3 c1) 参数 c0 int3 The matrix column c0 will be set to this value. c1 int3 The matrix column c1 will be set to this value. int3x2(uint3x2) Constructs a int3x2 matrix from a uint3x2 matrix by componentwise conversion. public int3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to int3x2 字段 c0 Column 0 of the matrix. public int3 c0 字段值 int3 c1 Column 1 of the matrix. public int3 c1 字段值 int3 zero int3x2 zero value. public static readonly int3x2 zero 字段值 int3x2 属性 this[int] Returns the int3 element at a specified index. public ref int3 this[int index] { get; } 参数 index int 属性值 int3 方法 Equals(object) Returns true if the int3x2 is equal to a given int3x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int3x2) Returns true if the int3x2 is equal to a given int3x2, false otherwise. public bool Equals(int3x2 rhs) 参数 rhs int3x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int3x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int3x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int3x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int3x2) Returns the result of a componentwise addition operation on an int value and an int3x2 matrix. public static int3x2 operator +(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int3x2 Right hand side int3x2 to use to compute componentwise addition. 返回 int3x2 int3x2 result of the componentwise addition. operator +(int3x2, int) Returns the result of a componentwise addition operation on an int3x2 matrix and an int value. public static int3x2 operator +(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int3x2 int3x2 result of the componentwise addition. operator +(int3x2, int3x2) Returns the result of a componentwise addition operation on two int3x2 matrices. public static int3x2 operator +(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise addition. rhs int3x2 Right hand side int3x2 to use to compute componentwise addition. 返回 int3x2 int3x2 result of the componentwise addition. operator &(int, int3x2) Returns the result of a componentwise bitwise and operation on an int value and an int3x2 matrix. public static int3x2 operator &(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int3x2 Right hand side int3x2 to use to compute componentwise bitwise and. 返回 int3x2 int3x2 result of the componentwise bitwise and. operator &(int3x2, int) Returns the result of a componentwise bitwise and operation on an int3x2 matrix and an int value. public static int3x2 operator &(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int3x2 int3x2 result of the componentwise bitwise and. operator &(int3x2, int3x2) Returns the result of a componentwise bitwise and operation on two int3x2 matrices. public static int3x2 operator &(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise bitwise and. rhs int3x2 Right hand side int3x2 to use to compute componentwise bitwise and. 返回 int3x2 int3x2 result of the componentwise bitwise and. operator |(int, int3x2) Returns the result of a componentwise bitwise or operation on an int value and an int3x2 matrix. public static int3x2 operator |(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int3x2 Right hand side int3x2 to use to compute componentwise bitwise or. 返回 int3x2 int3x2 result of the componentwise bitwise or. operator |(int3x2, int) Returns the result of a componentwise bitwise or operation on an int3x2 matrix and an int value. public static int3x2 operator |(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int3x2 int3x2 result of the componentwise bitwise or. operator |(int3x2, int3x2) Returns the result of a componentwise bitwise or operation on two int3x2 matrices. public static int3x2 operator |(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise bitwise or. rhs int3x2 Right hand side int3x2 to use to compute componentwise bitwise or. 返回 int3x2 int3x2 result of the componentwise bitwise or. operator --(int3x2) Returns the result of a componentwise decrement operation on an int3x2 matrix. public static int3x2 operator --(int3x2 val) 参数 val int3x2 Value to use when computing the componentwise decrement. 返回 int3x2 int3x2 result of the componentwise decrement. operator /(int, int3x2) Returns the result of a componentwise division operation on an int value and an int3x2 matrix. public static int3x2 operator /(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int3x2 Right hand side int3x2 to use to compute componentwise division. 返回 int3x2 int3x2 result of the componentwise division. operator /(int3x2, int) Returns the result of a componentwise division operation on an int3x2 matrix and an int value. public static int3x2 operator /(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int3x2 int3x2 result of the componentwise division. operator /(int3x2, int3x2) Returns the result of a componentwise division operation on two int3x2 matrices. public static int3x2 operator /(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise division. rhs int3x2 Right hand side int3x2 to use to compute componentwise division. 返回 int3x2 int3x2 result of the componentwise division. operator ==(int, int3x2) Returns the result of a componentwise equality operation on an int value and an int3x2 matrix. public static bool3x2 operator ==(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int3x2 Right hand side int3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(int3x2, int) Returns the result of a componentwise equality operation on an int3x2 matrix and an int value. public static bool3x2 operator ==(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(int3x2, int3x2) Returns the result of a componentwise equality operation on two int3x2 matrices. public static bool3x2 operator ==(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise equality. rhs int3x2 Right hand side int3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ^(int, int3x2) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int3x2 matrix. public static int3x2 operator ^(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int3x2 Right hand side int3x2 to use to compute componentwise bitwise exclusive or. 返回 int3x2 int3x2 result of the componentwise bitwise exclusive or. operator ^(int3x2, int) Returns the result of a componentwise bitwise exclusive or operation on an int3x2 matrix and an int value. public static int3x2 operator ^(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int3x2 int3x2 result of the componentwise bitwise exclusive or. operator ^(int3x2, int3x2) Returns the result of a componentwise bitwise exclusive or operation on two int3x2 matrices. public static int3x2 operator ^(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise bitwise exclusive or. rhs int3x2 Right hand side int3x2 to use to compute componentwise bitwise exclusive or. 返回 int3x2 int3x2 result of the componentwise bitwise exclusive or. explicit operator int3x2(bool) Explicitly converts a single bool value to a int3x2 matrix by converting it to int and assigning it to every component. public static explicit operator int3x2(bool v) 参数 v bool bool to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(double) Explicitly converts a single double value to a int3x2 matrix by converting it to int and assigning it to every component. public static explicit operator int3x2(double v) 参数 v double double to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(float) Explicitly converts a single float value to a int3x2 matrix by converting it to int and assigning it to every component. public static explicit operator int3x2(float v) 参数 v float float to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(uint) Explicitly converts a single uint value to a int3x2 matrix by converting it to int and assigning it to every component. public static explicit operator int3x2(uint v) 参数 v uint uint to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(bool3x2) Explicitly converts a bool3x2 matrix to a int3x2 matrix by componentwise conversion. public static explicit operator int3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(double3x2) Explicitly converts a double3x2 matrix to a int3x2 matrix by componentwise conversion. public static explicit operator int3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(float3x2) Explicitly converts a float3x2 matrix to a int3x2 matrix by componentwise conversion. public static explicit operator int3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to int3x2 返回 int3x2 Converted value. explicit operator int3x2(uint3x2) Explicitly converts a uint3x2 matrix to a int3x2 matrix by componentwise conversion. public static explicit operator int3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to int3x2 返回 int3x2 Converted value. operator >(int, int3x2) Returns the result of a componentwise greater than operation on an int value and an int3x2 matrix. public static bool3x2 operator >(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int3x2 Right hand side int3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(int3x2, int) Returns the result of a componentwise greater than operation on an int3x2 matrix and an int value. public static bool3x2 operator >(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(int3x2, int3x2) Returns the result of a componentwise greater than operation on two int3x2 matrices. public static bool3x2 operator >(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise greater than. rhs int3x2 Right hand side int3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >=(int, int3x2) Returns the result of a componentwise greater or equal operation on an int value and an int3x2 matrix. public static bool3x2 operator >=(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int3x2 Right hand side int3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(int3x2, int) Returns the result of a componentwise greater or equal operation on an int3x2 matrix and an int value. public static bool3x2 operator >=(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(int3x2, int3x2) Returns the result of a componentwise greater or equal operation on two int3x2 matrices. public static bool3x2 operator >=(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise greater or equal. rhs int3x2 Right hand side int3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. implicit operator int3x2(int) Implicitly converts a single int value to a int3x2 matrix by assigning it to every component. public static implicit operator int3x2(int v) 参数 v int int to convert to int3x2 返回 int3x2 Converted value. operator ++(int3x2) Returns the result of a componentwise increment operation on an int3x2 matrix. public static int3x2 operator ++(int3x2 val) 参数 val int3x2 Value to use when computing the componentwise increment. 返回 int3x2 int3x2 result of the componentwise increment. operator !=(int, int3x2) Returns the result of a componentwise not equal operation on an int value and an int3x2 matrix. public static bool3x2 operator !=(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int3x2 Right hand side int3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(int3x2, int) Returns the result of a componentwise not equal operation on an int3x2 matrix and an int value. public static bool3x2 operator !=(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(int3x2, int3x2) Returns the result of a componentwise not equal operation on two int3x2 matrices. public static bool3x2 operator !=(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise not equal. rhs int3x2 Right hand side int3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator <<(int3x2, int) Returns the result of a componentwise left shift operation on an int3x2 matrix by a number of bits specified by a single int. public static int3x2 operator <<(int3x2 x, int n) 参数 x int3x2 The matrix to left shift. n int The number of bits to left shift. 返回 int3x2 The result of the componentwise left shift. operator <(int, int3x2) Returns the result of a componentwise less than operation on an int value and an int3x2 matrix. public static bool3x2 operator <(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int3x2 Right hand side int3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(int3x2, int) Returns the result of a componentwise less than operation on an int3x2 matrix and an int value. public static bool3x2 operator <(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(int3x2, int3x2) Returns the result of a componentwise less than operation on two int3x2 matrices. public static bool3x2 operator <(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise less than. rhs int3x2 Right hand side int3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <=(int, int3x2) Returns the result of a componentwise less or equal operation on an int value and an int3x2 matrix. public static bool3x2 operator <=(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int3x2 Right hand side int3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(int3x2, int) Returns the result of a componentwise less or equal operation on an int3x2 matrix and an int value. public static bool3x2 operator <=(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(int3x2, int3x2) Returns the result of a componentwise less or equal operation on two int3x2 matrices. public static bool3x2 operator <=(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise less or equal. rhs int3x2 Right hand side int3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator %(int, int3x2) Returns the result of a componentwise modulus operation on an int value and an int3x2 matrix. public static int3x2 operator %(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int3x2 Right hand side int3x2 to use to compute componentwise modulus. 返回 int3x2 int3x2 result of the componentwise modulus. operator %(int3x2, int) Returns the result of a componentwise modulus operation on an int3x2 matrix and an int value. public static int3x2 operator %(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int3x2 int3x2 result of the componentwise modulus. operator %(int3x2, int3x2) Returns the result of a componentwise modulus operation on two int3x2 matrices. public static int3x2 operator %(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise modulus. rhs int3x2 Right hand side int3x2 to use to compute componentwise modulus. 返回 int3x2 int3x2 result of the componentwise modulus. operator *(int, int3x2) Returns the result of a componentwise multiplication operation on an int value and an int3x2 matrix. public static int3x2 operator *(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int3x2 Right hand side int3x2 to use to compute componentwise multiplication. 返回 int3x2 int3x2 result of the componentwise multiplication. operator *(int3x2, int) Returns the result of a componentwise multiplication operation on an int3x2 matrix and an int value. public static int3x2 operator *(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int3x2 int3x2 result of the componentwise multiplication. operator *(int3x2, int3x2) Returns the result of a componentwise multiplication operation on two int3x2 matrices. public static int3x2 operator *(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise multiplication. rhs int3x2 Right hand side int3x2 to use to compute componentwise multiplication. 返回 int3x2 int3x2 result of the componentwise multiplication. operator ~(int3x2) Returns the result of a componentwise bitwise not operation on an int3x2 matrix. public static int3x2 operator ~(int3x2 val) 参数 val int3x2 Value to use when computing the componentwise bitwise not. 返回 int3x2 int3x2 result of the componentwise bitwise not. operator >>(int3x2, int) Returns the result of a componentwise right shift operation on an int3x2 matrix by a number of bits specified by a single int. public static int3x2 operator >>(int3x2 x, int n) 参数 x int3x2 The matrix to right shift. n int The number of bits to right shift. 返回 int3x2 The result of the componentwise right shift. operator -(int, int3x2) Returns the result of a componentwise subtraction operation on an int value and an int3x2 matrix. public static int3x2 operator -(int lhs, int3x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int3x2 Right hand side int3x2 to use to compute componentwise subtraction. 返回 int3x2 int3x2 result of the componentwise subtraction. operator -(int3x2, int) Returns the result of a componentwise subtraction operation on an int3x2 matrix and an int value. public static int3x2 operator -(int3x2 lhs, int rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int3x2 int3x2 result of the componentwise subtraction. operator -(int3x2, int3x2) Returns the result of a componentwise subtraction operation on two int3x2 matrices. public static int3x2 operator -(int3x2 lhs, int3x2 rhs) 参数 lhs int3x2 Left hand side int3x2 to use to compute componentwise subtraction. rhs int3x2 Right hand side int3x2 to use to compute componentwise subtraction. 返回 int3x2 int3x2 result of the componentwise subtraction. operator -(int3x2) Returns the result of a componentwise unary minus operation on an int3x2 matrix. public static int3x2 operator -(int3x2 val) 参数 val int3x2 Value to use when computing the componentwise unary minus. 返回 int3x2 int3x2 result of the componentwise unary minus. operator +(int3x2) Returns the result of a componentwise unary plus operation on an int3x2 matrix. public static int3x2 operator +(int3x2 val) 参数 val int3x2 Value to use when computing the componentwise unary plus. 返回 int3x2 int3x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int3x3.html": {
    "href": "reference/Unity.Mathematics.int3x3.html",
    "title": "int3x3 结构 | Fantasy.Net API Reference",
    "keywords": "int3x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x3 matrix of ints. public struct int3x3 : IEquatable<int3x3>, IFormattable 实现 IEquatable<int3x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int3x3(bool) Constructs a int3x3 matrix from a single bool value by converting it to int and assigning it to every component. public int3x3(bool v) 参数 v bool bool to convert to int3x3 int3x3(double) Constructs a int3x3 matrix from a single double value by converting it to int and assigning it to every component. public int3x3(double v) 参数 v double double to convert to int3x3 int3x3(int) Constructs a int3x3 matrix from a single int value by assigning it to every component. public int3x3(int v) 参数 v int int to convert to int3x3 int3x3(int, int, int, int, int, int, int, int, int) Constructs a int3x3 matrix from 9 int values given in row-major order. public int3x3(int m00, int m01, int m02, int m10, int m11, int m12, int m20, int m21, int m22) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. int3x3(float) Constructs a int3x3 matrix from a single float value by converting it to int and assigning it to every component. public int3x3(float v) 参数 v float float to convert to int3x3 int3x3(uint) Constructs a int3x3 matrix from a single uint value by converting it to int and assigning it to every component. public int3x3(uint v) 参数 v uint uint to convert to int3x3 int3x3(bool3x3) Constructs a int3x3 matrix from a bool3x3 matrix by componentwise conversion. public int3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to int3x3 int3x3(double3x3) Constructs a int3x3 matrix from a double3x3 matrix by componentwise conversion. public int3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to int3x3 int3x3(float3x3) Constructs a int3x3 matrix from a float3x3 matrix by componentwise conversion. public int3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to int3x3 int3x3(int3, int3, int3) Constructs a int3x3 matrix from three int3 vectors. public int3x3(int3 c0, int3 c1, int3 c2) 参数 c0 int3 The matrix column c0 will be set to this value. c1 int3 The matrix column c1 will be set to this value. c2 int3 The matrix column c2 will be set to this value. int3x3(uint3x3) Constructs a int3x3 matrix from a uint3x3 matrix by componentwise conversion. public int3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to int3x3 字段 c0 Column 0 of the matrix. public int3 c0 字段值 int3 c1 Column 1 of the matrix. public int3 c1 字段值 int3 c2 Column 2 of the matrix. public int3 c2 字段值 int3 identity int3x3 identity transform. public static readonly int3x3 identity 字段值 int3x3 zero int3x3 zero value. public static readonly int3x3 zero 字段值 int3x3 属性 this[int] Returns the int3 element at a specified index. public ref int3 this[int index] { get; } 参数 index int 属性值 int3 方法 Equals(object) Returns true if the int3x3 is equal to a given int3x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int3x3) Returns true if the int3x3 is equal to a given int3x3, false otherwise. public bool Equals(int3x3 rhs) 参数 rhs int3x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int3x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int3x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int3x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int3x3) Returns the result of a componentwise addition operation on an int value and an int3x3 matrix. public static int3x3 operator +(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int3x3 Right hand side int3x3 to use to compute componentwise addition. 返回 int3x3 int3x3 result of the componentwise addition. operator +(int3x3, int) Returns the result of a componentwise addition operation on an int3x3 matrix and an int value. public static int3x3 operator +(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int3x3 int3x3 result of the componentwise addition. operator +(int3x3, int3x3) Returns the result of a componentwise addition operation on two int3x3 matrices. public static int3x3 operator +(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise addition. rhs int3x3 Right hand side int3x3 to use to compute componentwise addition. 返回 int3x3 int3x3 result of the componentwise addition. operator &(int, int3x3) Returns the result of a componentwise bitwise and operation on an int value and an int3x3 matrix. public static int3x3 operator &(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int3x3 Right hand side int3x3 to use to compute componentwise bitwise and. 返回 int3x3 int3x3 result of the componentwise bitwise and. operator &(int3x3, int) Returns the result of a componentwise bitwise and operation on an int3x3 matrix and an int value. public static int3x3 operator &(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int3x3 int3x3 result of the componentwise bitwise and. operator &(int3x3, int3x3) Returns the result of a componentwise bitwise and operation on two int3x3 matrices. public static int3x3 operator &(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise bitwise and. rhs int3x3 Right hand side int3x3 to use to compute componentwise bitwise and. 返回 int3x3 int3x3 result of the componentwise bitwise and. operator |(int, int3x3) Returns the result of a componentwise bitwise or operation on an int value and an int3x3 matrix. public static int3x3 operator |(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int3x3 Right hand side int3x3 to use to compute componentwise bitwise or. 返回 int3x3 int3x3 result of the componentwise bitwise or. operator |(int3x3, int) Returns the result of a componentwise bitwise or operation on an int3x3 matrix and an int value. public static int3x3 operator |(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int3x3 int3x3 result of the componentwise bitwise or. operator |(int3x3, int3x3) Returns the result of a componentwise bitwise or operation on two int3x3 matrices. public static int3x3 operator |(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise bitwise or. rhs int3x3 Right hand side int3x3 to use to compute componentwise bitwise or. 返回 int3x3 int3x3 result of the componentwise bitwise or. operator --(int3x3) Returns the result of a componentwise decrement operation on an int3x3 matrix. public static int3x3 operator --(int3x3 val) 参数 val int3x3 Value to use when computing the componentwise decrement. 返回 int3x3 int3x3 result of the componentwise decrement. operator /(int, int3x3) Returns the result of a componentwise division operation on an int value and an int3x3 matrix. public static int3x3 operator /(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int3x3 Right hand side int3x3 to use to compute componentwise division. 返回 int3x3 int3x3 result of the componentwise division. operator /(int3x3, int) Returns the result of a componentwise division operation on an int3x3 matrix and an int value. public static int3x3 operator /(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int3x3 int3x3 result of the componentwise division. operator /(int3x3, int3x3) Returns the result of a componentwise division operation on two int3x3 matrices. public static int3x3 operator /(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise division. rhs int3x3 Right hand side int3x3 to use to compute componentwise division. 返回 int3x3 int3x3 result of the componentwise division. operator ==(int, int3x3) Returns the result of a componentwise equality operation on an int value and an int3x3 matrix. public static bool3x3 operator ==(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int3x3 Right hand side int3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(int3x3, int) Returns the result of a componentwise equality operation on an int3x3 matrix and an int value. public static bool3x3 operator ==(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(int3x3, int3x3) Returns the result of a componentwise equality operation on two int3x3 matrices. public static bool3x3 operator ==(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise equality. rhs int3x3 Right hand side int3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ^(int, int3x3) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int3x3 matrix. public static int3x3 operator ^(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int3x3 Right hand side int3x3 to use to compute componentwise bitwise exclusive or. 返回 int3x3 int3x3 result of the componentwise bitwise exclusive or. operator ^(int3x3, int) Returns the result of a componentwise bitwise exclusive or operation on an int3x3 matrix and an int value. public static int3x3 operator ^(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int3x3 int3x3 result of the componentwise bitwise exclusive or. operator ^(int3x3, int3x3) Returns the result of a componentwise bitwise exclusive or operation on two int3x3 matrices. public static int3x3 operator ^(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise bitwise exclusive or. rhs int3x3 Right hand side int3x3 to use to compute componentwise bitwise exclusive or. 返回 int3x3 int3x3 result of the componentwise bitwise exclusive or. explicit operator int3x3(bool) Explicitly converts a single bool value to a int3x3 matrix by converting it to int and assigning it to every component. public static explicit operator int3x3(bool v) 参数 v bool bool to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(double) Explicitly converts a single double value to a int3x3 matrix by converting it to int and assigning it to every component. public static explicit operator int3x3(double v) 参数 v double double to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(float) Explicitly converts a single float value to a int3x3 matrix by converting it to int and assigning it to every component. public static explicit operator int3x3(float v) 参数 v float float to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(uint) Explicitly converts a single uint value to a int3x3 matrix by converting it to int and assigning it to every component. public static explicit operator int3x3(uint v) 参数 v uint uint to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(bool3x3) Explicitly converts a bool3x3 matrix to a int3x3 matrix by componentwise conversion. public static explicit operator int3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(double3x3) Explicitly converts a double3x3 matrix to a int3x3 matrix by componentwise conversion. public static explicit operator int3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(float3x3) Explicitly converts a float3x3 matrix to a int3x3 matrix by componentwise conversion. public static explicit operator int3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to int3x3 返回 int3x3 Converted value. explicit operator int3x3(uint3x3) Explicitly converts a uint3x3 matrix to a int3x3 matrix by componentwise conversion. public static explicit operator int3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to int3x3 返回 int3x3 Converted value. operator >(int, int3x3) Returns the result of a componentwise greater than operation on an int value and an int3x3 matrix. public static bool3x3 operator >(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int3x3 Right hand side int3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(int3x3, int) Returns the result of a componentwise greater than operation on an int3x3 matrix and an int value. public static bool3x3 operator >(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(int3x3, int3x3) Returns the result of a componentwise greater than operation on two int3x3 matrices. public static bool3x3 operator >(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise greater than. rhs int3x3 Right hand side int3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >=(int, int3x3) Returns the result of a componentwise greater or equal operation on an int value and an int3x3 matrix. public static bool3x3 operator >=(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int3x3 Right hand side int3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(int3x3, int) Returns the result of a componentwise greater or equal operation on an int3x3 matrix and an int value. public static bool3x3 operator >=(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(int3x3, int3x3) Returns the result of a componentwise greater or equal operation on two int3x3 matrices. public static bool3x3 operator >=(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise greater or equal. rhs int3x3 Right hand side int3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. implicit operator int3x3(int) Implicitly converts a single int value to a int3x3 matrix by assigning it to every component. public static implicit operator int3x3(int v) 参数 v int int to convert to int3x3 返回 int3x3 Converted value. operator ++(int3x3) Returns the result of a componentwise increment operation on an int3x3 matrix. public static int3x3 operator ++(int3x3 val) 参数 val int3x3 Value to use when computing the componentwise increment. 返回 int3x3 int3x3 result of the componentwise increment. operator !=(int, int3x3) Returns the result of a componentwise not equal operation on an int value and an int3x3 matrix. public static bool3x3 operator !=(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int3x3 Right hand side int3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(int3x3, int) Returns the result of a componentwise not equal operation on an int3x3 matrix and an int value. public static bool3x3 operator !=(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(int3x3, int3x3) Returns the result of a componentwise not equal operation on two int3x3 matrices. public static bool3x3 operator !=(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise not equal. rhs int3x3 Right hand side int3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator <<(int3x3, int) Returns the result of a componentwise left shift operation on an int3x3 matrix by a number of bits specified by a single int. public static int3x3 operator <<(int3x3 x, int n) 参数 x int3x3 The matrix to left shift. n int The number of bits to left shift. 返回 int3x3 The result of the componentwise left shift. operator <(int, int3x3) Returns the result of a componentwise less than operation on an int value and an int3x3 matrix. public static bool3x3 operator <(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int3x3 Right hand side int3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(int3x3, int) Returns the result of a componentwise less than operation on an int3x3 matrix and an int value. public static bool3x3 operator <(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(int3x3, int3x3) Returns the result of a componentwise less than operation on two int3x3 matrices. public static bool3x3 operator <(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise less than. rhs int3x3 Right hand side int3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <=(int, int3x3) Returns the result of a componentwise less or equal operation on an int value and an int3x3 matrix. public static bool3x3 operator <=(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int3x3 Right hand side int3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(int3x3, int) Returns the result of a componentwise less or equal operation on an int3x3 matrix and an int value. public static bool3x3 operator <=(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(int3x3, int3x3) Returns the result of a componentwise less or equal operation on two int3x3 matrices. public static bool3x3 operator <=(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise less or equal. rhs int3x3 Right hand side int3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator %(int, int3x3) Returns the result of a componentwise modulus operation on an int value and an int3x3 matrix. public static int3x3 operator %(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int3x3 Right hand side int3x3 to use to compute componentwise modulus. 返回 int3x3 int3x3 result of the componentwise modulus. operator %(int3x3, int) Returns the result of a componentwise modulus operation on an int3x3 matrix and an int value. public static int3x3 operator %(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int3x3 int3x3 result of the componentwise modulus. operator %(int3x3, int3x3) Returns the result of a componentwise modulus operation on two int3x3 matrices. public static int3x3 operator %(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise modulus. rhs int3x3 Right hand side int3x3 to use to compute componentwise modulus. 返回 int3x3 int3x3 result of the componentwise modulus. operator *(int, int3x3) Returns the result of a componentwise multiplication operation on an int value and an int3x3 matrix. public static int3x3 operator *(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int3x3 Right hand side int3x3 to use to compute componentwise multiplication. 返回 int3x3 int3x3 result of the componentwise multiplication. operator *(int3x3, int) Returns the result of a componentwise multiplication operation on an int3x3 matrix and an int value. public static int3x3 operator *(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int3x3 int3x3 result of the componentwise multiplication. operator *(int3x3, int3x3) Returns the result of a componentwise multiplication operation on two int3x3 matrices. public static int3x3 operator *(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise multiplication. rhs int3x3 Right hand side int3x3 to use to compute componentwise multiplication. 返回 int3x3 int3x3 result of the componentwise multiplication. operator ~(int3x3) Returns the result of a componentwise bitwise not operation on an int3x3 matrix. public static int3x3 operator ~(int3x3 val) 参数 val int3x3 Value to use when computing the componentwise bitwise not. 返回 int3x3 int3x3 result of the componentwise bitwise not. operator >>(int3x3, int) Returns the result of a componentwise right shift operation on an int3x3 matrix by a number of bits specified by a single int. public static int3x3 operator >>(int3x3 x, int n) 参数 x int3x3 The matrix to right shift. n int The number of bits to right shift. 返回 int3x3 The result of the componentwise right shift. operator -(int, int3x3) Returns the result of a componentwise subtraction operation on an int value and an int3x3 matrix. public static int3x3 operator -(int lhs, int3x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int3x3 Right hand side int3x3 to use to compute componentwise subtraction. 返回 int3x3 int3x3 result of the componentwise subtraction. operator -(int3x3, int) Returns the result of a componentwise subtraction operation on an int3x3 matrix and an int value. public static int3x3 operator -(int3x3 lhs, int rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int3x3 int3x3 result of the componentwise subtraction. operator -(int3x3, int3x3) Returns the result of a componentwise subtraction operation on two int3x3 matrices. public static int3x3 operator -(int3x3 lhs, int3x3 rhs) 参数 lhs int3x3 Left hand side int3x3 to use to compute componentwise subtraction. rhs int3x3 Right hand side int3x3 to use to compute componentwise subtraction. 返回 int3x3 int3x3 result of the componentwise subtraction. operator -(int3x3) Returns the result of a componentwise unary minus operation on an int3x3 matrix. public static int3x3 operator -(int3x3 val) 参数 val int3x3 Value to use when computing the componentwise unary minus. 返回 int3x3 int3x3 result of the componentwise unary minus. operator +(int3x3) Returns the result of a componentwise unary plus operation on an int3x3 matrix. public static int3x3 operator +(int3x3 val) 参数 val int3x3 Value to use when computing the componentwise unary plus. 返回 int3x3 int3x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int3x4.html": {
    "href": "reference/Unity.Mathematics.int3x4.html",
    "title": "int3x4 结构 | Fantasy.Net API Reference",
    "keywords": "int3x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x4 matrix of ints. public struct int3x4 : IEquatable<int3x4>, IFormattable 实现 IEquatable<int3x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int3x4(bool) Constructs a int3x4 matrix from a single bool value by converting it to int and assigning it to every component. public int3x4(bool v) 参数 v bool bool to convert to int3x4 int3x4(double) Constructs a int3x4 matrix from a single double value by converting it to int and assigning it to every component. public int3x4(double v) 参数 v double double to convert to int3x4 int3x4(int) Constructs a int3x4 matrix from a single int value by assigning it to every component. public int3x4(int v) 参数 v int int to convert to int3x4 int3x4(int, int, int, int, int, int, int, int, int, int, int, int) Constructs a int3x4 matrix from 12 int values given in row-major order. public int3x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13, int m20, int m21, int m22, int m23) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m03 int The matrix at row 0, column 3 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m13 int The matrix at row 1, column 3 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. m23 int The matrix at row 2, column 3 will be set to this value. int3x4(float) Constructs a int3x4 matrix from a single float value by converting it to int and assigning it to every component. public int3x4(float v) 参数 v float float to convert to int3x4 int3x4(uint) Constructs a int3x4 matrix from a single uint value by converting it to int and assigning it to every component. public int3x4(uint v) 参数 v uint uint to convert to int3x4 int3x4(bool3x4) Constructs a int3x4 matrix from a bool3x4 matrix by componentwise conversion. public int3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to int3x4 int3x4(double3x4) Constructs a int3x4 matrix from a double3x4 matrix by componentwise conversion. public int3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to int3x4 int3x4(float3x4) Constructs a int3x4 matrix from a float3x4 matrix by componentwise conversion. public int3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to int3x4 int3x4(int3, int3, int3, int3) Constructs a int3x4 matrix from four int3 vectors. public int3x4(int3 c0, int3 c1, int3 c2, int3 c3) 参数 c0 int3 The matrix column c0 will be set to this value. c1 int3 The matrix column c1 will be set to this value. c2 int3 The matrix column c2 will be set to this value. c3 int3 The matrix column c3 will be set to this value. int3x4(uint3x4) Constructs a int3x4 matrix from a uint3x4 matrix by componentwise conversion. public int3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to int3x4 字段 c0 Column 0 of the matrix. public int3 c0 字段值 int3 c1 Column 1 of the matrix. public int3 c1 字段值 int3 c2 Column 2 of the matrix. public int3 c2 字段值 int3 c3 Column 3 of the matrix. public int3 c3 字段值 int3 zero int3x4 zero value. public static readonly int3x4 zero 字段值 int3x4 属性 this[int] Returns the int3 element at a specified index. public ref int3 this[int index] { get; } 参数 index int 属性值 int3 方法 Equals(object) Returns true if the int3x4 is equal to a given int3x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int3x4) Returns true if the int3x4 is equal to a given int3x4, false otherwise. public bool Equals(int3x4 rhs) 参数 rhs int3x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int3x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int3x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int3x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int3x4) Returns the result of a componentwise addition operation on an int value and an int3x4 matrix. public static int3x4 operator +(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int3x4 Right hand side int3x4 to use to compute componentwise addition. 返回 int3x4 int3x4 result of the componentwise addition. operator +(int3x4, int) Returns the result of a componentwise addition operation on an int3x4 matrix and an int value. public static int3x4 operator +(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int3x4 int3x4 result of the componentwise addition. operator +(int3x4, int3x4) Returns the result of a componentwise addition operation on two int3x4 matrices. public static int3x4 operator +(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise addition. rhs int3x4 Right hand side int3x4 to use to compute componentwise addition. 返回 int3x4 int3x4 result of the componentwise addition. operator &(int, int3x4) Returns the result of a componentwise bitwise and operation on an int value and an int3x4 matrix. public static int3x4 operator &(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int3x4 Right hand side int3x4 to use to compute componentwise bitwise and. 返回 int3x4 int3x4 result of the componentwise bitwise and. operator &(int3x4, int) Returns the result of a componentwise bitwise and operation on an int3x4 matrix and an int value. public static int3x4 operator &(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int3x4 int3x4 result of the componentwise bitwise and. operator &(int3x4, int3x4) Returns the result of a componentwise bitwise and operation on two int3x4 matrices. public static int3x4 operator &(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise bitwise and. rhs int3x4 Right hand side int3x4 to use to compute componentwise bitwise and. 返回 int3x4 int3x4 result of the componentwise bitwise and. operator |(int, int3x4) Returns the result of a componentwise bitwise or operation on an int value and an int3x4 matrix. public static int3x4 operator |(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int3x4 Right hand side int3x4 to use to compute componentwise bitwise or. 返回 int3x4 int3x4 result of the componentwise bitwise or. operator |(int3x4, int) Returns the result of a componentwise bitwise or operation on an int3x4 matrix and an int value. public static int3x4 operator |(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int3x4 int3x4 result of the componentwise bitwise or. operator |(int3x4, int3x4) Returns the result of a componentwise bitwise or operation on two int3x4 matrices. public static int3x4 operator |(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise bitwise or. rhs int3x4 Right hand side int3x4 to use to compute componentwise bitwise or. 返回 int3x4 int3x4 result of the componentwise bitwise or. operator --(int3x4) Returns the result of a componentwise decrement operation on an int3x4 matrix. public static int3x4 operator --(int3x4 val) 参数 val int3x4 Value to use when computing the componentwise decrement. 返回 int3x4 int3x4 result of the componentwise decrement. operator /(int, int3x4) Returns the result of a componentwise division operation on an int value and an int3x4 matrix. public static int3x4 operator /(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int3x4 Right hand side int3x4 to use to compute componentwise division. 返回 int3x4 int3x4 result of the componentwise division. operator /(int3x4, int) Returns the result of a componentwise division operation on an int3x4 matrix and an int value. public static int3x4 operator /(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int3x4 int3x4 result of the componentwise division. operator /(int3x4, int3x4) Returns the result of a componentwise division operation on two int3x4 matrices. public static int3x4 operator /(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise division. rhs int3x4 Right hand side int3x4 to use to compute componentwise division. 返回 int3x4 int3x4 result of the componentwise division. operator ==(int, int3x4) Returns the result of a componentwise equality operation on an int value and an int3x4 matrix. public static bool3x4 operator ==(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int3x4 Right hand side int3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(int3x4, int) Returns the result of a componentwise equality operation on an int3x4 matrix and an int value. public static bool3x4 operator ==(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(int3x4, int3x4) Returns the result of a componentwise equality operation on two int3x4 matrices. public static bool3x4 operator ==(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise equality. rhs int3x4 Right hand side int3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ^(int, int3x4) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int3x4 matrix. public static int3x4 operator ^(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int3x4 Right hand side int3x4 to use to compute componentwise bitwise exclusive or. 返回 int3x4 int3x4 result of the componentwise bitwise exclusive or. operator ^(int3x4, int) Returns the result of a componentwise bitwise exclusive or operation on an int3x4 matrix and an int value. public static int3x4 operator ^(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int3x4 int3x4 result of the componentwise bitwise exclusive or. operator ^(int3x4, int3x4) Returns the result of a componentwise bitwise exclusive or operation on two int3x4 matrices. public static int3x4 operator ^(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise bitwise exclusive or. rhs int3x4 Right hand side int3x4 to use to compute componentwise bitwise exclusive or. 返回 int3x4 int3x4 result of the componentwise bitwise exclusive or. explicit operator int3x4(bool) Explicitly converts a single bool value to a int3x4 matrix by converting it to int and assigning it to every component. public static explicit operator int3x4(bool v) 参数 v bool bool to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(double) Explicitly converts a single double value to a int3x4 matrix by converting it to int and assigning it to every component. public static explicit operator int3x4(double v) 参数 v double double to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(float) Explicitly converts a single float value to a int3x4 matrix by converting it to int and assigning it to every component. public static explicit operator int3x4(float v) 参数 v float float to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(uint) Explicitly converts a single uint value to a int3x4 matrix by converting it to int and assigning it to every component. public static explicit operator int3x4(uint v) 参数 v uint uint to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(bool3x4) Explicitly converts a bool3x4 matrix to a int3x4 matrix by componentwise conversion. public static explicit operator int3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(double3x4) Explicitly converts a double3x4 matrix to a int3x4 matrix by componentwise conversion. public static explicit operator int3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(float3x4) Explicitly converts a float3x4 matrix to a int3x4 matrix by componentwise conversion. public static explicit operator int3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to int3x4 返回 int3x4 Converted value. explicit operator int3x4(uint3x4) Explicitly converts a uint3x4 matrix to a int3x4 matrix by componentwise conversion. public static explicit operator int3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to int3x4 返回 int3x4 Converted value. operator >(int, int3x4) Returns the result of a componentwise greater than operation on an int value and an int3x4 matrix. public static bool3x4 operator >(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int3x4 Right hand side int3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(int3x4, int) Returns the result of a componentwise greater than operation on an int3x4 matrix and an int value. public static bool3x4 operator >(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(int3x4, int3x4) Returns the result of a componentwise greater than operation on two int3x4 matrices. public static bool3x4 operator >(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise greater than. rhs int3x4 Right hand side int3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >=(int, int3x4) Returns the result of a componentwise greater or equal operation on an int value and an int3x4 matrix. public static bool3x4 operator >=(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int3x4 Right hand side int3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(int3x4, int) Returns the result of a componentwise greater or equal operation on an int3x4 matrix and an int value. public static bool3x4 operator >=(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(int3x4, int3x4) Returns the result of a componentwise greater or equal operation on two int3x4 matrices. public static bool3x4 operator >=(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise greater or equal. rhs int3x4 Right hand side int3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. implicit operator int3x4(int) Implicitly converts a single int value to a int3x4 matrix by assigning it to every component. public static implicit operator int3x4(int v) 参数 v int int to convert to int3x4 返回 int3x4 Converted value. operator ++(int3x4) Returns the result of a componentwise increment operation on an int3x4 matrix. public static int3x4 operator ++(int3x4 val) 参数 val int3x4 Value to use when computing the componentwise increment. 返回 int3x4 int3x4 result of the componentwise increment. operator !=(int, int3x4) Returns the result of a componentwise not equal operation on an int value and an int3x4 matrix. public static bool3x4 operator !=(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int3x4 Right hand side int3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(int3x4, int) Returns the result of a componentwise not equal operation on an int3x4 matrix and an int value. public static bool3x4 operator !=(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(int3x4, int3x4) Returns the result of a componentwise not equal operation on two int3x4 matrices. public static bool3x4 operator !=(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise not equal. rhs int3x4 Right hand side int3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator <<(int3x4, int) Returns the result of a componentwise left shift operation on an int3x4 matrix by a number of bits specified by a single int. public static int3x4 operator <<(int3x4 x, int n) 参数 x int3x4 The matrix to left shift. n int The number of bits to left shift. 返回 int3x4 The result of the componentwise left shift. operator <(int, int3x4) Returns the result of a componentwise less than operation on an int value and an int3x4 matrix. public static bool3x4 operator <(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int3x4 Right hand side int3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(int3x4, int) Returns the result of a componentwise less than operation on an int3x4 matrix and an int value. public static bool3x4 operator <(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(int3x4, int3x4) Returns the result of a componentwise less than operation on two int3x4 matrices. public static bool3x4 operator <(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise less than. rhs int3x4 Right hand side int3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <=(int, int3x4) Returns the result of a componentwise less or equal operation on an int value and an int3x4 matrix. public static bool3x4 operator <=(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int3x4 Right hand side int3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(int3x4, int) Returns the result of a componentwise less or equal operation on an int3x4 matrix and an int value. public static bool3x4 operator <=(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(int3x4, int3x4) Returns the result of a componentwise less or equal operation on two int3x4 matrices. public static bool3x4 operator <=(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise less or equal. rhs int3x4 Right hand side int3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator %(int, int3x4) Returns the result of a componentwise modulus operation on an int value and an int3x4 matrix. public static int3x4 operator %(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int3x4 Right hand side int3x4 to use to compute componentwise modulus. 返回 int3x4 int3x4 result of the componentwise modulus. operator %(int3x4, int) Returns the result of a componentwise modulus operation on an int3x4 matrix and an int value. public static int3x4 operator %(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int3x4 int3x4 result of the componentwise modulus. operator %(int3x4, int3x4) Returns the result of a componentwise modulus operation on two int3x4 matrices. public static int3x4 operator %(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise modulus. rhs int3x4 Right hand side int3x4 to use to compute componentwise modulus. 返回 int3x4 int3x4 result of the componentwise modulus. operator *(int, int3x4) Returns the result of a componentwise multiplication operation on an int value and an int3x4 matrix. public static int3x4 operator *(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int3x4 Right hand side int3x4 to use to compute componentwise multiplication. 返回 int3x4 int3x4 result of the componentwise multiplication. operator *(int3x4, int) Returns the result of a componentwise multiplication operation on an int3x4 matrix and an int value. public static int3x4 operator *(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int3x4 int3x4 result of the componentwise multiplication. operator *(int3x4, int3x4) Returns the result of a componentwise multiplication operation on two int3x4 matrices. public static int3x4 operator *(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise multiplication. rhs int3x4 Right hand side int3x4 to use to compute componentwise multiplication. 返回 int3x4 int3x4 result of the componentwise multiplication. operator ~(int3x4) Returns the result of a componentwise bitwise not operation on an int3x4 matrix. public static int3x4 operator ~(int3x4 val) 参数 val int3x4 Value to use when computing the componentwise bitwise not. 返回 int3x4 int3x4 result of the componentwise bitwise not. operator >>(int3x4, int) Returns the result of a componentwise right shift operation on an int3x4 matrix by a number of bits specified by a single int. public static int3x4 operator >>(int3x4 x, int n) 参数 x int3x4 The matrix to right shift. n int The number of bits to right shift. 返回 int3x4 The result of the componentwise right shift. operator -(int, int3x4) Returns the result of a componentwise subtraction operation on an int value and an int3x4 matrix. public static int3x4 operator -(int lhs, int3x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int3x4 Right hand side int3x4 to use to compute componentwise subtraction. 返回 int3x4 int3x4 result of the componentwise subtraction. operator -(int3x4, int) Returns the result of a componentwise subtraction operation on an int3x4 matrix and an int value. public static int3x4 operator -(int3x4 lhs, int rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int3x4 int3x4 result of the componentwise subtraction. operator -(int3x4, int3x4) Returns the result of a componentwise subtraction operation on two int3x4 matrices. public static int3x4 operator -(int3x4 lhs, int3x4 rhs) 参数 lhs int3x4 Left hand side int3x4 to use to compute componentwise subtraction. rhs int3x4 Right hand side int3x4 to use to compute componentwise subtraction. 返回 int3x4 int3x4 result of the componentwise subtraction. operator -(int3x4) Returns the result of a componentwise unary minus operation on an int3x4 matrix. public static int3x4 operator -(int3x4 val) 参数 val int3x4 Value to use when computing the componentwise unary minus. 返回 int3x4 int3x4 result of the componentwise unary minus. operator +(int3x4) Returns the result of a componentwise unary plus operation on an int3x4 matrix. public static int3x4 operator +(int3x4 val) 参数 val int3x4 Value to use when computing the componentwise unary plus. 返回 int3x4 int3x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int4.html": {
    "href": "reference/Unity.Mathematics.int4.html",
    "title": "int4 结构 | Fantasy.Net API Reference",
    "keywords": "int4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4 component vector of ints. public struct int4 : IEquatable<int4>, IFormattable 实现 IEquatable<int4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int4(bool) Constructs a int4 vector from a single bool value by converting it to int and assigning it to every component. public int4(bool v) 参数 v bool bool to convert to int4 int4(double) Constructs a int4 vector from a single double value by converting it to int and assigning it to every component. public int4(double v) 参数 v double double to convert to int4 int4(int) Constructs a int4 vector from a single int value by assigning it to every component. public int4(int v) 参数 v int int to convert to int4 int4(int, int, int, int) Constructs a int4 vector from four int values. public int4(int x, int y, int z, int w) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. z int The constructed vector's z component will be set to this value. w int The constructed vector's w component will be set to this value. int4(int, int, int2) Constructs a int4 vector from two int values and an int2 vector. public int4(int x, int y, int2 zw) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. zw int2 The constructed vector's zw components will be set to this value. int4(int, int2, int) Constructs a int4 vector from an int value, an int2 vector and an int value. public int4(int x, int2 yz, int w) 参数 x int The constructed vector's x component will be set to this value. yz int2 The constructed vector's yz components will be set to this value. w int The constructed vector's w component will be set to this value. int4(int, int3) Constructs a int4 vector from an int value and an int3 vector. public int4(int x, int3 yzw) 参数 x int The constructed vector's x component will be set to this value. yzw int3 The constructed vector's yzw components will be set to this value. int4(float) Constructs a int4 vector from a single float value by converting it to int and assigning it to every component. public int4(float v) 参数 v float float to convert to int4 int4(uint) Constructs a int4 vector from a single uint value by converting it to int and assigning it to every component. public int4(uint v) 参数 v uint uint to convert to int4 int4(bool4) Constructs a int4 vector from a bool4 vector by componentwise conversion. public int4(bool4 v) 参数 v bool4 bool4 to convert to int4 int4(double4) Constructs a int4 vector from a double4 vector by componentwise conversion. public int4(double4 v) 参数 v double4 double4 to convert to int4 int4(float4) Constructs a int4 vector from a float4 vector by componentwise conversion. public int4(float4 v) 参数 v float4 float4 to convert to int4 int4(int2, int, int) Constructs a int4 vector from an int2 vector and two int values. public int4(int2 xy, int z, int w) 参数 xy int2 The constructed vector's xy components will be set to this value. z int The constructed vector's z component will be set to this value. w int The constructed vector's w component will be set to this value. int4(int2, int2) Constructs a int4 vector from two int2 vectors. public int4(int2 xy, int2 zw) 参数 xy int2 The constructed vector's xy components will be set to this value. zw int2 The constructed vector's zw components will be set to this value. int4(int3, int) Constructs a int4 vector from an int3 vector and an int value. public int4(int3 xyz, int w) 参数 xyz int3 The constructed vector's xyz components will be set to this value. w int The constructed vector's w component will be set to this value. int4(int4) Constructs a int4 vector from an int4 vector. public int4(int4 xyzw) 参数 xyzw int4 The constructed vector's xyzw components will be set to this value. int4(uint4) Constructs a int4 vector from a uint4 vector by componentwise conversion. public int4(uint4 v) 参数 v uint4 uint4 to convert to int4 字段 w w component of the vector. public int w 字段值 int x x component of the vector. public int x 字段值 int y y component of the vector. public int y 字段值 int z z component of the vector. public int z 字段值 int zero int4 zero value. public static readonly int4 zero 字段值 int4 属性 this[int] Returns the int element at a specified index. public int this[int index] { get; set; } 参数 index int 属性值 int 方法 Equals(object) Returns true if the int4 is equal to a given int4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int4) Returns true if the int4 is equal to a given int4, false otherwise. public bool Equals(int4 rhs) 参数 rhs int4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int4) Returns the result of a componentwise addition operation on an int value and an int4 vector. public static int4 operator +(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int4 Right hand side int4 to use to compute componentwise addition. 返回 int4 int4 result of the componentwise addition. operator +(int4, int) Returns the result of a componentwise addition operation on an int4 vector and an int value. public static int4 operator +(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int4 int4 result of the componentwise addition. operator +(int4, int4) Returns the result of a componentwise addition operation on two int4 vectors. public static int4 operator +(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise addition. rhs int4 Right hand side int4 to use to compute componentwise addition. 返回 int4 int4 result of the componentwise addition. operator &(int, int4) Returns the result of a componentwise bitwise and operation on an int value and an int4 vector. public static int4 operator &(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int4 Right hand side int4 to use to compute componentwise bitwise and. 返回 int4 int4 result of the componentwise bitwise and. operator &(int4, int) Returns the result of a componentwise bitwise and operation on an int4 vector and an int value. public static int4 operator &(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int4 int4 result of the componentwise bitwise and. operator &(int4, int4) Returns the result of a componentwise bitwise and operation on two int4 vectors. public static int4 operator &(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise bitwise and. rhs int4 Right hand side int4 to use to compute componentwise bitwise and. 返回 int4 int4 result of the componentwise bitwise and. operator |(int, int4) Returns the result of a componentwise bitwise or operation on an int value and an int4 vector. public static int4 operator |(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int4 Right hand side int4 to use to compute componentwise bitwise or. 返回 int4 int4 result of the componentwise bitwise or. operator |(int4, int) Returns the result of a componentwise bitwise or operation on an int4 vector and an int value. public static int4 operator |(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int4 int4 result of the componentwise bitwise or. operator |(int4, int4) Returns the result of a componentwise bitwise or operation on two int4 vectors. public static int4 operator |(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise bitwise or. rhs int4 Right hand side int4 to use to compute componentwise bitwise or. 返回 int4 int4 result of the componentwise bitwise or. operator --(int4) Returns the result of a componentwise decrement operation on an int4 vector. public static int4 operator --(int4 val) 参数 val int4 Value to use when computing the componentwise decrement. 返回 int4 int4 result of the componentwise decrement. operator /(int, int4) Returns the result of a componentwise division operation on an int value and an int4 vector. public static int4 operator /(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int4 Right hand side int4 to use to compute componentwise division. 返回 int4 int4 result of the componentwise division. operator /(int4, int) Returns the result of a componentwise division operation on an int4 vector and an int value. public static int4 operator /(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int4 int4 result of the componentwise division. operator /(int4, int4) Returns the result of a componentwise division operation on two int4 vectors. public static int4 operator /(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise division. rhs int4 Right hand side int4 to use to compute componentwise division. 返回 int4 int4 result of the componentwise division. operator ==(int, int4) Returns the result of a componentwise equality operation on an int value and an int4 vector. public static bool4 operator ==(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int4 Right hand side int4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(int4, int) Returns the result of a componentwise equality operation on an int4 vector and an int value. public static bool4 operator ==(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(int4, int4) Returns the result of a componentwise equality operation on two int4 vectors. public static bool4 operator ==(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise equality. rhs int4 Right hand side int4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ^(int, int4) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int4 vector. public static int4 operator ^(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int4 Right hand side int4 to use to compute componentwise bitwise exclusive or. 返回 int4 int4 result of the componentwise bitwise exclusive or. operator ^(int4, int) Returns the result of a componentwise bitwise exclusive or operation on an int4 vector and an int value. public static int4 operator ^(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int4 int4 result of the componentwise bitwise exclusive or. operator ^(int4, int4) Returns the result of a componentwise bitwise exclusive or operation on two int4 vectors. public static int4 operator ^(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise bitwise exclusive or. rhs int4 Right hand side int4 to use to compute componentwise bitwise exclusive or. 返回 int4 int4 result of the componentwise bitwise exclusive or. explicit operator int4(bool) Explicitly converts a single bool value to a int4 vector by converting it to int and assigning it to every component. public static explicit operator int4(bool v) 参数 v bool bool to convert to int4 返回 int4 Converted value. explicit operator int4(double) Explicitly converts a single double value to a int4 vector by converting it to int and assigning it to every component. public static explicit operator int4(double v) 参数 v double double to convert to int4 返回 int4 Converted value. explicit operator int4(float) Explicitly converts a single float value to a int4 vector by converting it to int and assigning it to every component. public static explicit operator int4(float v) 参数 v float float to convert to int4 返回 int4 Converted value. explicit operator int4(uint) Explicitly converts a single uint value to a int4 vector by converting it to int and assigning it to every component. public static explicit operator int4(uint v) 参数 v uint uint to convert to int4 返回 int4 Converted value. explicit operator int4(bool4) Explicitly converts a bool4 vector to a int4 vector by componentwise conversion. public static explicit operator int4(bool4 v) 参数 v bool4 bool4 to convert to int4 返回 int4 Converted value. explicit operator int4(double4) Explicitly converts a double4 vector to a int4 vector by componentwise conversion. public static explicit operator int4(double4 v) 参数 v double4 double4 to convert to int4 返回 int4 Converted value. explicit operator int4(float4) Explicitly converts a float4 vector to a int4 vector by componentwise conversion. public static explicit operator int4(float4 v) 参数 v float4 float4 to convert to int4 返回 int4 Converted value. explicit operator int4(uint4) Explicitly converts a uint4 vector to a int4 vector by componentwise conversion. public static explicit operator int4(uint4 v) 参数 v uint4 uint4 to convert to int4 返回 int4 Converted value. operator >(int, int4) Returns the result of a componentwise greater than operation on an int value and an int4 vector. public static bool4 operator >(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int4 Right hand side int4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(int4, int) Returns the result of a componentwise greater than operation on an int4 vector and an int value. public static bool4 operator >(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(int4, int4) Returns the result of a componentwise greater than operation on two int4 vectors. public static bool4 operator >(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise greater than. rhs int4 Right hand side int4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >=(int, int4) Returns the result of a componentwise greater or equal operation on an int value and an int4 vector. public static bool4 operator >=(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int4 Right hand side int4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(int4, int) Returns the result of a componentwise greater or equal operation on an int4 vector and an int value. public static bool4 operator >=(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(int4, int4) Returns the result of a componentwise greater or equal operation on two int4 vectors. public static bool4 operator >=(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise greater or equal. rhs int4 Right hand side int4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. implicit operator int4(int) Implicitly converts a single int value to a int4 vector by assigning it to every component. public static implicit operator int4(int v) 参数 v int int to convert to int4 返回 int4 Converted value. operator ++(int4) Returns the result of a componentwise increment operation on an int4 vector. public static int4 operator ++(int4 val) 参数 val int4 Value to use when computing the componentwise increment. 返回 int4 int4 result of the componentwise increment. operator !=(int, int4) Returns the result of a componentwise not equal operation on an int value and an int4 vector. public static bool4 operator !=(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int4 Right hand side int4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(int4, int) Returns the result of a componentwise not equal operation on an int4 vector and an int value. public static bool4 operator !=(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(int4, int4) Returns the result of a componentwise not equal operation on two int4 vectors. public static bool4 operator !=(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise not equal. rhs int4 Right hand side int4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator <<(int4, int) Returns the result of a componentwise left shift operation on an int4 vector by a number of bits specified by a single int. public static int4 operator <<(int4 x, int n) 参数 x int4 The vector to left shift. n int The number of bits to left shift. 返回 int4 The result of the componentwise left shift. operator <(int, int4) Returns the result of a componentwise less than operation on an int value and an int4 vector. public static bool4 operator <(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int4 Right hand side int4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(int4, int) Returns the result of a componentwise less than operation on an int4 vector and an int value. public static bool4 operator <(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(int4, int4) Returns the result of a componentwise less than operation on two int4 vectors. public static bool4 operator <(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise less than. rhs int4 Right hand side int4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <=(int, int4) Returns the result of a componentwise less or equal operation on an int value and an int4 vector. public static bool4 operator <=(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int4 Right hand side int4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(int4, int) Returns the result of a componentwise less or equal operation on an int4 vector and an int value. public static bool4 operator <=(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(int4, int4) Returns the result of a componentwise less or equal operation on two int4 vectors. public static bool4 operator <=(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise less or equal. rhs int4 Right hand side int4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator %(int, int4) Returns the result of a componentwise modulus operation on an int value and an int4 vector. public static int4 operator %(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int4 Right hand side int4 to use to compute componentwise modulus. 返回 int4 int4 result of the componentwise modulus. operator %(int4, int) Returns the result of a componentwise modulus operation on an int4 vector and an int value. public static int4 operator %(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int4 int4 result of the componentwise modulus. operator %(int4, int4) Returns the result of a componentwise modulus operation on two int4 vectors. public static int4 operator %(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise modulus. rhs int4 Right hand side int4 to use to compute componentwise modulus. 返回 int4 int4 result of the componentwise modulus. operator *(int, int4) Returns the result of a componentwise multiplication operation on an int value and an int4 vector. public static int4 operator *(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int4 Right hand side int4 to use to compute componentwise multiplication. 返回 int4 int4 result of the componentwise multiplication. operator *(int4, int) Returns the result of a componentwise multiplication operation on an int4 vector and an int value. public static int4 operator *(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int4 int4 result of the componentwise multiplication. operator *(int4, int4) Returns the result of a componentwise multiplication operation on two int4 vectors. public static int4 operator *(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise multiplication. rhs int4 Right hand side int4 to use to compute componentwise multiplication. 返回 int4 int4 result of the componentwise multiplication. operator ~(int4) Returns the result of a componentwise bitwise not operation on an int4 vector. public static int4 operator ~(int4 val) 参数 val int4 Value to use when computing the componentwise bitwise not. 返回 int4 int4 result of the componentwise bitwise not. operator >>(int4, int) Returns the result of a componentwise right shift operation on an int4 vector by a number of bits specified by a single int. public static int4 operator >>(int4 x, int n) 参数 x int4 The vector to right shift. n int The number of bits to right shift. 返回 int4 The result of the componentwise right shift. operator -(int, int4) Returns the result of a componentwise subtraction operation on an int value and an int4 vector. public static int4 operator -(int lhs, int4 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int4 Right hand side int4 to use to compute componentwise subtraction. 返回 int4 int4 result of the componentwise subtraction. operator -(int4, int) Returns the result of a componentwise subtraction operation on an int4 vector and an int value. public static int4 operator -(int4 lhs, int rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int4 int4 result of the componentwise subtraction. operator -(int4, int4) Returns the result of a componentwise subtraction operation on two int4 vectors. public static int4 operator -(int4 lhs, int4 rhs) 参数 lhs int4 Left hand side int4 to use to compute componentwise subtraction. rhs int4 Right hand side int4 to use to compute componentwise subtraction. 返回 int4 int4 result of the componentwise subtraction. operator -(int4) Returns the result of a componentwise unary minus operation on an int4 vector. public static int4 operator -(int4 val) 参数 val int4 Value to use when computing the componentwise unary minus. 返回 int4 int4 result of the componentwise unary minus. operator +(int4) Returns the result of a componentwise unary plus operation on an int4 vector. public static int4 operator +(int4 val) 参数 val int4 Value to use when computing the componentwise unary plus. 返回 int4 int4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int4x2.html": {
    "href": "reference/Unity.Mathematics.int4x2.html",
    "title": "int4x2 结构 | Fantasy.Net API Reference",
    "keywords": "int4x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x2 matrix of ints. public struct int4x2 : IEquatable<int4x2>, IFormattable 实现 IEquatable<int4x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int4x2(bool) Constructs a int4x2 matrix from a single bool value by converting it to int and assigning it to every component. public int4x2(bool v) 参数 v bool bool to convert to int4x2 int4x2(double) Constructs a int4x2 matrix from a single double value by converting it to int and assigning it to every component. public int4x2(double v) 参数 v double double to convert to int4x2 int4x2(int) Constructs a int4x2 matrix from a single int value by assigning it to every component. public int4x2(int v) 参数 v int int to convert to int4x2 int4x2(int, int, int, int, int, int, int, int) Constructs a int4x2 matrix from 8 int values given in row-major order. public int4x2(int m00, int m01, int m10, int m11, int m20, int m21, int m30, int m31) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m30 int The matrix at row 3, column 0 will be set to this value. m31 int The matrix at row 3, column 1 will be set to this value. int4x2(float) Constructs a int4x2 matrix from a single float value by converting it to int and assigning it to every component. public int4x2(float v) 参数 v float float to convert to int4x2 int4x2(uint) Constructs a int4x2 matrix from a single uint value by converting it to int and assigning it to every component. public int4x2(uint v) 参数 v uint uint to convert to int4x2 int4x2(bool4x2) Constructs a int4x2 matrix from a bool4x2 matrix by componentwise conversion. public int4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to int4x2 int4x2(double4x2) Constructs a int4x2 matrix from a double4x2 matrix by componentwise conversion. public int4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to int4x2 int4x2(float4x2) Constructs a int4x2 matrix from a float4x2 matrix by componentwise conversion. public int4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to int4x2 int4x2(int4, int4) Constructs a int4x2 matrix from two int4 vectors. public int4x2(int4 c0, int4 c1) 参数 c0 int4 The matrix column c0 will be set to this value. c1 int4 The matrix column c1 will be set to this value. int4x2(uint4x2) Constructs a int4x2 matrix from a uint4x2 matrix by componentwise conversion. public int4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to int4x2 字段 c0 Column 0 of the matrix. public int4 c0 字段值 int4 c1 Column 1 of the matrix. public int4 c1 字段值 int4 zero int4x2 zero value. public static readonly int4x2 zero 字段值 int4x2 属性 this[int] Returns the int4 element at a specified index. public ref int4 this[int index] { get; } 参数 index int 属性值 int4 方法 Equals(object) Returns true if the int4x2 is equal to a given int4x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int4x2) Returns true if the int4x2 is equal to a given int4x2, false otherwise. public bool Equals(int4x2 rhs) 参数 rhs int4x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int4x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int4x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int4x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int4x2) Returns the result of a componentwise addition operation on an int value and an int4x2 matrix. public static int4x2 operator +(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int4x2 Right hand side int4x2 to use to compute componentwise addition. 返回 int4x2 int4x2 result of the componentwise addition. operator +(int4x2, int) Returns the result of a componentwise addition operation on an int4x2 matrix and an int value. public static int4x2 operator +(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int4x2 int4x2 result of the componentwise addition. operator +(int4x2, int4x2) Returns the result of a componentwise addition operation on two int4x2 matrices. public static int4x2 operator +(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise addition. rhs int4x2 Right hand side int4x2 to use to compute componentwise addition. 返回 int4x2 int4x2 result of the componentwise addition. operator &(int, int4x2) Returns the result of a componentwise bitwise and operation on an int value and an int4x2 matrix. public static int4x2 operator &(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int4x2 Right hand side int4x2 to use to compute componentwise bitwise and. 返回 int4x2 int4x2 result of the componentwise bitwise and. operator &(int4x2, int) Returns the result of a componentwise bitwise and operation on an int4x2 matrix and an int value. public static int4x2 operator &(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int4x2 int4x2 result of the componentwise bitwise and. operator &(int4x2, int4x2) Returns the result of a componentwise bitwise and operation on two int4x2 matrices. public static int4x2 operator &(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise bitwise and. rhs int4x2 Right hand side int4x2 to use to compute componentwise bitwise and. 返回 int4x2 int4x2 result of the componentwise bitwise and. operator |(int, int4x2) Returns the result of a componentwise bitwise or operation on an int value and an int4x2 matrix. public static int4x2 operator |(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int4x2 Right hand side int4x2 to use to compute componentwise bitwise or. 返回 int4x2 int4x2 result of the componentwise bitwise or. operator |(int4x2, int) Returns the result of a componentwise bitwise or operation on an int4x2 matrix and an int value. public static int4x2 operator |(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int4x2 int4x2 result of the componentwise bitwise or. operator |(int4x2, int4x2) Returns the result of a componentwise bitwise or operation on two int4x2 matrices. public static int4x2 operator |(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise bitwise or. rhs int4x2 Right hand side int4x2 to use to compute componentwise bitwise or. 返回 int4x2 int4x2 result of the componentwise bitwise or. operator --(int4x2) Returns the result of a componentwise decrement operation on an int4x2 matrix. public static int4x2 operator --(int4x2 val) 参数 val int4x2 Value to use when computing the componentwise decrement. 返回 int4x2 int4x2 result of the componentwise decrement. operator /(int, int4x2) Returns the result of a componentwise division operation on an int value and an int4x2 matrix. public static int4x2 operator /(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int4x2 Right hand side int4x2 to use to compute componentwise division. 返回 int4x2 int4x2 result of the componentwise division. operator /(int4x2, int) Returns the result of a componentwise division operation on an int4x2 matrix and an int value. public static int4x2 operator /(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int4x2 int4x2 result of the componentwise division. operator /(int4x2, int4x2) Returns the result of a componentwise division operation on two int4x2 matrices. public static int4x2 operator /(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise division. rhs int4x2 Right hand side int4x2 to use to compute componentwise division. 返回 int4x2 int4x2 result of the componentwise division. operator ==(int, int4x2) Returns the result of a componentwise equality operation on an int value and an int4x2 matrix. public static bool4x2 operator ==(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int4x2 Right hand side int4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(int4x2, int) Returns the result of a componentwise equality operation on an int4x2 matrix and an int value. public static bool4x2 operator ==(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(int4x2, int4x2) Returns the result of a componentwise equality operation on two int4x2 matrices. public static bool4x2 operator ==(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise equality. rhs int4x2 Right hand side int4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ^(int, int4x2) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int4x2 matrix. public static int4x2 operator ^(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int4x2 Right hand side int4x2 to use to compute componentwise bitwise exclusive or. 返回 int4x2 int4x2 result of the componentwise bitwise exclusive or. operator ^(int4x2, int) Returns the result of a componentwise bitwise exclusive or operation on an int4x2 matrix and an int value. public static int4x2 operator ^(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int4x2 int4x2 result of the componentwise bitwise exclusive or. operator ^(int4x2, int4x2) Returns the result of a componentwise bitwise exclusive or operation on two int4x2 matrices. public static int4x2 operator ^(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise bitwise exclusive or. rhs int4x2 Right hand side int4x2 to use to compute componentwise bitwise exclusive or. 返回 int4x2 int4x2 result of the componentwise bitwise exclusive or. explicit operator int4x2(bool) Explicitly converts a single bool value to a int4x2 matrix by converting it to int and assigning it to every component. public static explicit operator int4x2(bool v) 参数 v bool bool to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(double) Explicitly converts a single double value to a int4x2 matrix by converting it to int and assigning it to every component. public static explicit operator int4x2(double v) 参数 v double double to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(float) Explicitly converts a single float value to a int4x2 matrix by converting it to int and assigning it to every component. public static explicit operator int4x2(float v) 参数 v float float to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(uint) Explicitly converts a single uint value to a int4x2 matrix by converting it to int and assigning it to every component. public static explicit operator int4x2(uint v) 参数 v uint uint to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(bool4x2) Explicitly converts a bool4x2 matrix to a int4x2 matrix by componentwise conversion. public static explicit operator int4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(double4x2) Explicitly converts a double4x2 matrix to a int4x2 matrix by componentwise conversion. public static explicit operator int4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(float4x2) Explicitly converts a float4x2 matrix to a int4x2 matrix by componentwise conversion. public static explicit operator int4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to int4x2 返回 int4x2 Converted value. explicit operator int4x2(uint4x2) Explicitly converts a uint4x2 matrix to a int4x2 matrix by componentwise conversion. public static explicit operator int4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to int4x2 返回 int4x2 Converted value. operator >(int, int4x2) Returns the result of a componentwise greater than operation on an int value and an int4x2 matrix. public static bool4x2 operator >(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int4x2 Right hand side int4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(int4x2, int) Returns the result of a componentwise greater than operation on an int4x2 matrix and an int value. public static bool4x2 operator >(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(int4x2, int4x2) Returns the result of a componentwise greater than operation on two int4x2 matrices. public static bool4x2 operator >(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise greater than. rhs int4x2 Right hand side int4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >=(int, int4x2) Returns the result of a componentwise greater or equal operation on an int value and an int4x2 matrix. public static bool4x2 operator >=(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int4x2 Right hand side int4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(int4x2, int) Returns the result of a componentwise greater or equal operation on an int4x2 matrix and an int value. public static bool4x2 operator >=(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(int4x2, int4x2) Returns the result of a componentwise greater or equal operation on two int4x2 matrices. public static bool4x2 operator >=(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise greater or equal. rhs int4x2 Right hand side int4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. implicit operator int4x2(int) Implicitly converts a single int value to a int4x2 matrix by assigning it to every component. public static implicit operator int4x2(int v) 参数 v int int to convert to int4x2 返回 int4x2 Converted value. operator ++(int4x2) Returns the result of a componentwise increment operation on an int4x2 matrix. public static int4x2 operator ++(int4x2 val) 参数 val int4x2 Value to use when computing the componentwise increment. 返回 int4x2 int4x2 result of the componentwise increment. operator !=(int, int4x2) Returns the result of a componentwise not equal operation on an int value and an int4x2 matrix. public static bool4x2 operator !=(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int4x2 Right hand side int4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(int4x2, int) Returns the result of a componentwise not equal operation on an int4x2 matrix and an int value. public static bool4x2 operator !=(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(int4x2, int4x2) Returns the result of a componentwise not equal operation on two int4x2 matrices. public static bool4x2 operator !=(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise not equal. rhs int4x2 Right hand side int4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator <<(int4x2, int) Returns the result of a componentwise left shift operation on an int4x2 matrix by a number of bits specified by a single int. public static int4x2 operator <<(int4x2 x, int n) 参数 x int4x2 The matrix to left shift. n int The number of bits to left shift. 返回 int4x2 The result of the componentwise left shift. operator <(int, int4x2) Returns the result of a componentwise less than operation on an int value and an int4x2 matrix. public static bool4x2 operator <(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int4x2 Right hand side int4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(int4x2, int) Returns the result of a componentwise less than operation on an int4x2 matrix and an int value. public static bool4x2 operator <(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(int4x2, int4x2) Returns the result of a componentwise less than operation on two int4x2 matrices. public static bool4x2 operator <(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise less than. rhs int4x2 Right hand side int4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <=(int, int4x2) Returns the result of a componentwise less or equal operation on an int value and an int4x2 matrix. public static bool4x2 operator <=(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int4x2 Right hand side int4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(int4x2, int) Returns the result of a componentwise less or equal operation on an int4x2 matrix and an int value. public static bool4x2 operator <=(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(int4x2, int4x2) Returns the result of a componentwise less or equal operation on two int4x2 matrices. public static bool4x2 operator <=(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise less or equal. rhs int4x2 Right hand side int4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator %(int, int4x2) Returns the result of a componentwise modulus operation on an int value and an int4x2 matrix. public static int4x2 operator %(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int4x2 Right hand side int4x2 to use to compute componentwise modulus. 返回 int4x2 int4x2 result of the componentwise modulus. operator %(int4x2, int) Returns the result of a componentwise modulus operation on an int4x2 matrix and an int value. public static int4x2 operator %(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int4x2 int4x2 result of the componentwise modulus. operator %(int4x2, int4x2) Returns the result of a componentwise modulus operation on two int4x2 matrices. public static int4x2 operator %(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise modulus. rhs int4x2 Right hand side int4x2 to use to compute componentwise modulus. 返回 int4x2 int4x2 result of the componentwise modulus. operator *(int, int4x2) Returns the result of a componentwise multiplication operation on an int value and an int4x2 matrix. public static int4x2 operator *(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int4x2 Right hand side int4x2 to use to compute componentwise multiplication. 返回 int4x2 int4x2 result of the componentwise multiplication. operator *(int4x2, int) Returns the result of a componentwise multiplication operation on an int4x2 matrix and an int value. public static int4x2 operator *(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int4x2 int4x2 result of the componentwise multiplication. operator *(int4x2, int4x2) Returns the result of a componentwise multiplication operation on two int4x2 matrices. public static int4x2 operator *(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise multiplication. rhs int4x2 Right hand side int4x2 to use to compute componentwise multiplication. 返回 int4x2 int4x2 result of the componentwise multiplication. operator ~(int4x2) Returns the result of a componentwise bitwise not operation on an int4x2 matrix. public static int4x2 operator ~(int4x2 val) 参数 val int4x2 Value to use when computing the componentwise bitwise not. 返回 int4x2 int4x2 result of the componentwise bitwise not. operator >>(int4x2, int) Returns the result of a componentwise right shift operation on an int4x2 matrix by a number of bits specified by a single int. public static int4x2 operator >>(int4x2 x, int n) 参数 x int4x2 The matrix to right shift. n int The number of bits to right shift. 返回 int4x2 The result of the componentwise right shift. operator -(int, int4x2) Returns the result of a componentwise subtraction operation on an int value and an int4x2 matrix. public static int4x2 operator -(int lhs, int4x2 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int4x2 Right hand side int4x2 to use to compute componentwise subtraction. 返回 int4x2 int4x2 result of the componentwise subtraction. operator -(int4x2, int) Returns the result of a componentwise subtraction operation on an int4x2 matrix and an int value. public static int4x2 operator -(int4x2 lhs, int rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int4x2 int4x2 result of the componentwise subtraction. operator -(int4x2, int4x2) Returns the result of a componentwise subtraction operation on two int4x2 matrices. public static int4x2 operator -(int4x2 lhs, int4x2 rhs) 参数 lhs int4x2 Left hand side int4x2 to use to compute componentwise subtraction. rhs int4x2 Right hand side int4x2 to use to compute componentwise subtraction. 返回 int4x2 int4x2 result of the componentwise subtraction. operator -(int4x2) Returns the result of a componentwise unary minus operation on an int4x2 matrix. public static int4x2 operator -(int4x2 val) 参数 val int4x2 Value to use when computing the componentwise unary minus. 返回 int4x2 int4x2 result of the componentwise unary minus. operator +(int4x2) Returns the result of a componentwise unary plus operation on an int4x2 matrix. public static int4x2 operator +(int4x2 val) 参数 val int4x2 Value to use when computing the componentwise unary plus. 返回 int4x2 int4x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int4x3.html": {
    "href": "reference/Unity.Mathematics.int4x3.html",
    "title": "int4x3 结构 | Fantasy.Net API Reference",
    "keywords": "int4x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x3 matrix of ints. public struct int4x3 : IEquatable<int4x3>, IFormattable 实现 IEquatable<int4x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int4x3(bool) Constructs a int4x3 matrix from a single bool value by converting it to int and assigning it to every component. public int4x3(bool v) 参数 v bool bool to convert to int4x3 int4x3(double) Constructs a int4x3 matrix from a single double value by converting it to int and assigning it to every component. public int4x3(double v) 参数 v double double to convert to int4x3 int4x3(int) Constructs a int4x3 matrix from a single int value by assigning it to every component. public int4x3(int v) 参数 v int int to convert to int4x3 int4x3(int, int, int, int, int, int, int, int, int, int, int, int) Constructs a int4x3 matrix from 12 int values given in row-major order. public int4x3(int m00, int m01, int m02, int m10, int m11, int m12, int m20, int m21, int m22, int m30, int m31, int m32) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. m30 int The matrix at row 3, column 0 will be set to this value. m31 int The matrix at row 3, column 1 will be set to this value. m32 int The matrix at row 3, column 2 will be set to this value. int4x3(float) Constructs a int4x3 matrix from a single float value by converting it to int and assigning it to every component. public int4x3(float v) 参数 v float float to convert to int4x3 int4x3(uint) Constructs a int4x3 matrix from a single uint value by converting it to int and assigning it to every component. public int4x3(uint v) 参数 v uint uint to convert to int4x3 int4x3(bool4x3) Constructs a int4x3 matrix from a bool4x3 matrix by componentwise conversion. public int4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to int4x3 int4x3(double4x3) Constructs a int4x3 matrix from a double4x3 matrix by componentwise conversion. public int4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to int4x3 int4x3(float4x3) Constructs a int4x3 matrix from a float4x3 matrix by componentwise conversion. public int4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to int4x3 int4x3(int4, int4, int4) Constructs a int4x3 matrix from three int4 vectors. public int4x3(int4 c0, int4 c1, int4 c2) 参数 c0 int4 The matrix column c0 will be set to this value. c1 int4 The matrix column c1 will be set to this value. c2 int4 The matrix column c2 will be set to this value. int4x3(uint4x3) Constructs a int4x3 matrix from a uint4x3 matrix by componentwise conversion. public int4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to int4x3 字段 c0 Column 0 of the matrix. public int4 c0 字段值 int4 c1 Column 1 of the matrix. public int4 c1 字段值 int4 c2 Column 2 of the matrix. public int4 c2 字段值 int4 zero int4x3 zero value. public static readonly int4x3 zero 字段值 int4x3 属性 this[int] Returns the int4 element at a specified index. public ref int4 this[int index] { get; } 参数 index int 属性值 int4 方法 Equals(object) Returns true if the int4x3 is equal to a given int4x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int4x3) Returns true if the int4x3 is equal to a given int4x3, false otherwise. public bool Equals(int4x3 rhs) 参数 rhs int4x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int4x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int4x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int4x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int4x3) Returns the result of a componentwise addition operation on an int value and an int4x3 matrix. public static int4x3 operator +(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int4x3 Right hand side int4x3 to use to compute componentwise addition. 返回 int4x3 int4x3 result of the componentwise addition. operator +(int4x3, int) Returns the result of a componentwise addition operation on an int4x3 matrix and an int value. public static int4x3 operator +(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int4x3 int4x3 result of the componentwise addition. operator +(int4x3, int4x3) Returns the result of a componentwise addition operation on two int4x3 matrices. public static int4x3 operator +(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise addition. rhs int4x3 Right hand side int4x3 to use to compute componentwise addition. 返回 int4x3 int4x3 result of the componentwise addition. operator &(int, int4x3) Returns the result of a componentwise bitwise and operation on an int value and an int4x3 matrix. public static int4x3 operator &(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int4x3 Right hand side int4x3 to use to compute componentwise bitwise and. 返回 int4x3 int4x3 result of the componentwise bitwise and. operator &(int4x3, int) Returns the result of a componentwise bitwise and operation on an int4x3 matrix and an int value. public static int4x3 operator &(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int4x3 int4x3 result of the componentwise bitwise and. operator &(int4x3, int4x3) Returns the result of a componentwise bitwise and operation on two int4x3 matrices. public static int4x3 operator &(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise bitwise and. rhs int4x3 Right hand side int4x3 to use to compute componentwise bitwise and. 返回 int4x3 int4x3 result of the componentwise bitwise and. operator |(int, int4x3) Returns the result of a componentwise bitwise or operation on an int value and an int4x3 matrix. public static int4x3 operator |(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int4x3 Right hand side int4x3 to use to compute componentwise bitwise or. 返回 int4x3 int4x3 result of the componentwise bitwise or. operator |(int4x3, int) Returns the result of a componentwise bitwise or operation on an int4x3 matrix and an int value. public static int4x3 operator |(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int4x3 int4x3 result of the componentwise bitwise or. operator |(int4x3, int4x3) Returns the result of a componentwise bitwise or operation on two int4x3 matrices. public static int4x3 operator |(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise bitwise or. rhs int4x3 Right hand side int4x3 to use to compute componentwise bitwise or. 返回 int4x3 int4x3 result of the componentwise bitwise or. operator --(int4x3) Returns the result of a componentwise decrement operation on an int4x3 matrix. public static int4x3 operator --(int4x3 val) 参数 val int4x3 Value to use when computing the componentwise decrement. 返回 int4x3 int4x3 result of the componentwise decrement. operator /(int, int4x3) Returns the result of a componentwise division operation on an int value and an int4x3 matrix. public static int4x3 operator /(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int4x3 Right hand side int4x3 to use to compute componentwise division. 返回 int4x3 int4x3 result of the componentwise division. operator /(int4x3, int) Returns the result of a componentwise division operation on an int4x3 matrix and an int value. public static int4x3 operator /(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int4x3 int4x3 result of the componentwise division. operator /(int4x3, int4x3) Returns the result of a componentwise division operation on two int4x3 matrices. public static int4x3 operator /(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise division. rhs int4x3 Right hand side int4x3 to use to compute componentwise division. 返回 int4x3 int4x3 result of the componentwise division. operator ==(int, int4x3) Returns the result of a componentwise equality operation on an int value and an int4x3 matrix. public static bool4x3 operator ==(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int4x3 Right hand side int4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(int4x3, int) Returns the result of a componentwise equality operation on an int4x3 matrix and an int value. public static bool4x3 operator ==(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(int4x3, int4x3) Returns the result of a componentwise equality operation on two int4x3 matrices. public static bool4x3 operator ==(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise equality. rhs int4x3 Right hand side int4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ^(int, int4x3) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int4x3 matrix. public static int4x3 operator ^(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int4x3 Right hand side int4x3 to use to compute componentwise bitwise exclusive or. 返回 int4x3 int4x3 result of the componentwise bitwise exclusive or. operator ^(int4x3, int) Returns the result of a componentwise bitwise exclusive or operation on an int4x3 matrix and an int value. public static int4x3 operator ^(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int4x3 int4x3 result of the componentwise bitwise exclusive or. operator ^(int4x3, int4x3) Returns the result of a componentwise bitwise exclusive or operation on two int4x3 matrices. public static int4x3 operator ^(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise bitwise exclusive or. rhs int4x3 Right hand side int4x3 to use to compute componentwise bitwise exclusive or. 返回 int4x3 int4x3 result of the componentwise bitwise exclusive or. explicit operator int4x3(bool) Explicitly converts a single bool value to a int4x3 matrix by converting it to int and assigning it to every component. public static explicit operator int4x3(bool v) 参数 v bool bool to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(double) Explicitly converts a single double value to a int4x3 matrix by converting it to int and assigning it to every component. public static explicit operator int4x3(double v) 参数 v double double to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(float) Explicitly converts a single float value to a int4x3 matrix by converting it to int and assigning it to every component. public static explicit operator int4x3(float v) 参数 v float float to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(uint) Explicitly converts a single uint value to a int4x3 matrix by converting it to int and assigning it to every component. public static explicit operator int4x3(uint v) 参数 v uint uint to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(bool4x3) Explicitly converts a bool4x3 matrix to a int4x3 matrix by componentwise conversion. public static explicit operator int4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(double4x3) Explicitly converts a double4x3 matrix to a int4x3 matrix by componentwise conversion. public static explicit operator int4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(float4x3) Explicitly converts a float4x3 matrix to a int4x3 matrix by componentwise conversion. public static explicit operator int4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to int4x3 返回 int4x3 Converted value. explicit operator int4x3(uint4x3) Explicitly converts a uint4x3 matrix to a int4x3 matrix by componentwise conversion. public static explicit operator int4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to int4x3 返回 int4x3 Converted value. operator >(int, int4x3) Returns the result of a componentwise greater than operation on an int value and an int4x3 matrix. public static bool4x3 operator >(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int4x3 Right hand side int4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(int4x3, int) Returns the result of a componentwise greater than operation on an int4x3 matrix and an int value. public static bool4x3 operator >(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(int4x3, int4x3) Returns the result of a componentwise greater than operation on two int4x3 matrices. public static bool4x3 operator >(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise greater than. rhs int4x3 Right hand side int4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >=(int, int4x3) Returns the result of a componentwise greater or equal operation on an int value and an int4x3 matrix. public static bool4x3 operator >=(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int4x3 Right hand side int4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(int4x3, int) Returns the result of a componentwise greater or equal operation on an int4x3 matrix and an int value. public static bool4x3 operator >=(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(int4x3, int4x3) Returns the result of a componentwise greater or equal operation on two int4x3 matrices. public static bool4x3 operator >=(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise greater or equal. rhs int4x3 Right hand side int4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. implicit operator int4x3(int) Implicitly converts a single int value to a int4x3 matrix by assigning it to every component. public static implicit operator int4x3(int v) 参数 v int int to convert to int4x3 返回 int4x3 Converted value. operator ++(int4x3) Returns the result of a componentwise increment operation on an int4x3 matrix. public static int4x3 operator ++(int4x3 val) 参数 val int4x3 Value to use when computing the componentwise increment. 返回 int4x3 int4x3 result of the componentwise increment. operator !=(int, int4x3) Returns the result of a componentwise not equal operation on an int value and an int4x3 matrix. public static bool4x3 operator !=(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int4x3 Right hand side int4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(int4x3, int) Returns the result of a componentwise not equal operation on an int4x3 matrix and an int value. public static bool4x3 operator !=(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(int4x3, int4x3) Returns the result of a componentwise not equal operation on two int4x3 matrices. public static bool4x3 operator !=(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise not equal. rhs int4x3 Right hand side int4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator <<(int4x3, int) Returns the result of a componentwise left shift operation on an int4x3 matrix by a number of bits specified by a single int. public static int4x3 operator <<(int4x3 x, int n) 参数 x int4x3 The matrix to left shift. n int The number of bits to left shift. 返回 int4x3 The result of the componentwise left shift. operator <(int, int4x3) Returns the result of a componentwise less than operation on an int value and an int4x3 matrix. public static bool4x3 operator <(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int4x3 Right hand side int4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(int4x3, int) Returns the result of a componentwise less than operation on an int4x3 matrix and an int value. public static bool4x3 operator <(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(int4x3, int4x3) Returns the result of a componentwise less than operation on two int4x3 matrices. public static bool4x3 operator <(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise less than. rhs int4x3 Right hand side int4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <=(int, int4x3) Returns the result of a componentwise less or equal operation on an int value and an int4x3 matrix. public static bool4x3 operator <=(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int4x3 Right hand side int4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(int4x3, int) Returns the result of a componentwise less or equal operation on an int4x3 matrix and an int value. public static bool4x3 operator <=(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(int4x3, int4x3) Returns the result of a componentwise less or equal operation on two int4x3 matrices. public static bool4x3 operator <=(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise less or equal. rhs int4x3 Right hand side int4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator %(int, int4x3) Returns the result of a componentwise modulus operation on an int value and an int4x3 matrix. public static int4x3 operator %(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int4x3 Right hand side int4x3 to use to compute componentwise modulus. 返回 int4x3 int4x3 result of the componentwise modulus. operator %(int4x3, int) Returns the result of a componentwise modulus operation on an int4x3 matrix and an int value. public static int4x3 operator %(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int4x3 int4x3 result of the componentwise modulus. operator %(int4x3, int4x3) Returns the result of a componentwise modulus operation on two int4x3 matrices. public static int4x3 operator %(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise modulus. rhs int4x3 Right hand side int4x3 to use to compute componentwise modulus. 返回 int4x3 int4x3 result of the componentwise modulus. operator *(int, int4x3) Returns the result of a componentwise multiplication operation on an int value and an int4x3 matrix. public static int4x3 operator *(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int4x3 Right hand side int4x3 to use to compute componentwise multiplication. 返回 int4x3 int4x3 result of the componentwise multiplication. operator *(int4x3, int) Returns the result of a componentwise multiplication operation on an int4x3 matrix and an int value. public static int4x3 operator *(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int4x3 int4x3 result of the componentwise multiplication. operator *(int4x3, int4x3) Returns the result of a componentwise multiplication operation on two int4x3 matrices. public static int4x3 operator *(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise multiplication. rhs int4x3 Right hand side int4x3 to use to compute componentwise multiplication. 返回 int4x3 int4x3 result of the componentwise multiplication. operator ~(int4x3) Returns the result of a componentwise bitwise not operation on an int4x3 matrix. public static int4x3 operator ~(int4x3 val) 参数 val int4x3 Value to use when computing the componentwise bitwise not. 返回 int4x3 int4x3 result of the componentwise bitwise not. operator >>(int4x3, int) Returns the result of a componentwise right shift operation on an int4x3 matrix by a number of bits specified by a single int. public static int4x3 operator >>(int4x3 x, int n) 参数 x int4x3 The matrix to right shift. n int The number of bits to right shift. 返回 int4x3 The result of the componentwise right shift. operator -(int, int4x3) Returns the result of a componentwise subtraction operation on an int value and an int4x3 matrix. public static int4x3 operator -(int lhs, int4x3 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int4x3 Right hand side int4x3 to use to compute componentwise subtraction. 返回 int4x3 int4x3 result of the componentwise subtraction. operator -(int4x3, int) Returns the result of a componentwise subtraction operation on an int4x3 matrix and an int value. public static int4x3 operator -(int4x3 lhs, int rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int4x3 int4x3 result of the componentwise subtraction. operator -(int4x3, int4x3) Returns the result of a componentwise subtraction operation on two int4x3 matrices. public static int4x3 operator -(int4x3 lhs, int4x3 rhs) 参数 lhs int4x3 Left hand side int4x3 to use to compute componentwise subtraction. rhs int4x3 Right hand side int4x3 to use to compute componentwise subtraction. 返回 int4x3 int4x3 result of the componentwise subtraction. operator -(int4x3) Returns the result of a componentwise unary minus operation on an int4x3 matrix. public static int4x3 operator -(int4x3 val) 参数 val int4x3 Value to use when computing the componentwise unary minus. 返回 int4x3 int4x3 result of the componentwise unary minus. operator +(int4x3) Returns the result of a componentwise unary plus operation on an int4x3 matrix. public static int4x3 operator +(int4x3 val) 参数 val int4x3 Value to use when computing the componentwise unary plus. 返回 int4x3 int4x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.int4x4.html": {
    "href": "reference/Unity.Mathematics.int4x4.html",
    "title": "int4x4 结构 | Fantasy.Net API Reference",
    "keywords": "int4x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x4 matrix of ints. public struct int4x4 : IEquatable<int4x4>, IFormattable 实现 IEquatable<int4x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 int4x4(bool) Constructs a int4x4 matrix from a single bool value by converting it to int and assigning it to every component. public int4x4(bool v) 参数 v bool bool to convert to int4x4 int4x4(double) Constructs a int4x4 matrix from a single double value by converting it to int and assigning it to every component. public int4x4(double v) 参数 v double double to convert to int4x4 int4x4(int) Constructs a int4x4 matrix from a single int value by assigning it to every component. public int4x4(int v) 参数 v int int to convert to int4x4 int4x4(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) Constructs a int4x4 matrix from 16 int values given in row-major order. public int4x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13, int m20, int m21, int m22, int m23, int m30, int m31, int m32, int m33) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m03 int The matrix at row 0, column 3 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m13 int The matrix at row 1, column 3 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. m23 int The matrix at row 2, column 3 will be set to this value. m30 int The matrix at row 3, column 0 will be set to this value. m31 int The matrix at row 3, column 1 will be set to this value. m32 int The matrix at row 3, column 2 will be set to this value. m33 int The matrix at row 3, column 3 will be set to this value. int4x4(float) Constructs a int4x4 matrix from a single float value by converting it to int and assigning it to every component. public int4x4(float v) 参数 v float float to convert to int4x4 int4x4(uint) Constructs a int4x4 matrix from a single uint value by converting it to int and assigning it to every component. public int4x4(uint v) 参数 v uint uint to convert to int4x4 int4x4(bool4x4) Constructs a int4x4 matrix from a bool4x4 matrix by componentwise conversion. public int4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to int4x4 int4x4(double4x4) Constructs a int4x4 matrix from a double4x4 matrix by componentwise conversion. public int4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to int4x4 int4x4(float4x4) Constructs a int4x4 matrix from a float4x4 matrix by componentwise conversion. public int4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to int4x4 int4x4(int4, int4, int4, int4) Constructs a int4x4 matrix from four int4 vectors. public int4x4(int4 c0, int4 c1, int4 c2, int4 c3) 参数 c0 int4 The matrix column c0 will be set to this value. c1 int4 The matrix column c1 will be set to this value. c2 int4 The matrix column c2 will be set to this value. c3 int4 The matrix column c3 will be set to this value. int4x4(uint4x4) Constructs a int4x4 matrix from a uint4x4 matrix by componentwise conversion. public int4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to int4x4 字段 c0 Column 0 of the matrix. public int4 c0 字段值 int4 c1 Column 1 of the matrix. public int4 c1 字段值 int4 c2 Column 2 of the matrix. public int4 c2 字段值 int4 c3 Column 3 of the matrix. public int4 c3 字段值 int4 identity int4x4 identity transform. public static readonly int4x4 identity 字段值 int4x4 zero int4x4 zero value. public static readonly int4x4 zero 字段值 int4x4 属性 this[int] Returns the int4 element at a specified index. public ref int4 this[int index] { get; } 参数 index int 属性值 int4 方法 Equals(object) Returns true if the int4x4 is equal to a given int4x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(int4x4) Returns true if the int4x4 is equal to a given int4x4, false otherwise. public bool Equals(int4x4 rhs) 参数 rhs int4x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the int4x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the int4x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the int4x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(int, int4x4) Returns the result of a componentwise addition operation on an int value and an int4x4 matrix. public static int4x4 operator +(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise addition. rhs int4x4 Right hand side int4x4 to use to compute componentwise addition. 返回 int4x4 int4x4 result of the componentwise addition. operator +(int4x4, int) Returns the result of a componentwise addition operation on an int4x4 matrix and an int value. public static int4x4 operator +(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise addition. rhs int Right hand side int to use to compute componentwise addition. 返回 int4x4 int4x4 result of the componentwise addition. operator +(int4x4, int4x4) Returns the result of a componentwise addition operation on two int4x4 matrices. public static int4x4 operator +(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise addition. rhs int4x4 Right hand side int4x4 to use to compute componentwise addition. 返回 int4x4 int4x4 result of the componentwise addition. operator &(int, int4x4) Returns the result of a componentwise bitwise and operation on an int value and an int4x4 matrix. public static int4x4 operator &(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise and. rhs int4x4 Right hand side int4x4 to use to compute componentwise bitwise and. 返回 int4x4 int4x4 result of the componentwise bitwise and. operator &(int4x4, int) Returns the result of a componentwise bitwise and operation on an int4x4 matrix and an int value. public static int4x4 operator &(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise bitwise and. rhs int Right hand side int to use to compute componentwise bitwise and. 返回 int4x4 int4x4 result of the componentwise bitwise and. operator &(int4x4, int4x4) Returns the result of a componentwise bitwise and operation on two int4x4 matrices. public static int4x4 operator &(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise bitwise and. rhs int4x4 Right hand side int4x4 to use to compute componentwise bitwise and. 返回 int4x4 int4x4 result of the componentwise bitwise and. operator |(int, int4x4) Returns the result of a componentwise bitwise or operation on an int value and an int4x4 matrix. public static int4x4 operator |(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise or. rhs int4x4 Right hand side int4x4 to use to compute componentwise bitwise or. 返回 int4x4 int4x4 result of the componentwise bitwise or. operator |(int4x4, int) Returns the result of a componentwise bitwise or operation on an int4x4 matrix and an int value. public static int4x4 operator |(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise bitwise or. rhs int Right hand side int to use to compute componentwise bitwise or. 返回 int4x4 int4x4 result of the componentwise bitwise or. operator |(int4x4, int4x4) Returns the result of a componentwise bitwise or operation on two int4x4 matrices. public static int4x4 operator |(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise bitwise or. rhs int4x4 Right hand side int4x4 to use to compute componentwise bitwise or. 返回 int4x4 int4x4 result of the componentwise bitwise or. operator --(int4x4) Returns the result of a componentwise decrement operation on an int4x4 matrix. public static int4x4 operator --(int4x4 val) 参数 val int4x4 Value to use when computing the componentwise decrement. 返回 int4x4 int4x4 result of the componentwise decrement. operator /(int, int4x4) Returns the result of a componentwise division operation on an int value and an int4x4 matrix. public static int4x4 operator /(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise division. rhs int4x4 Right hand side int4x4 to use to compute componentwise division. 返回 int4x4 int4x4 result of the componentwise division. operator /(int4x4, int) Returns the result of a componentwise division operation on an int4x4 matrix and an int value. public static int4x4 operator /(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise division. rhs int Right hand side int to use to compute componentwise division. 返回 int4x4 int4x4 result of the componentwise division. operator /(int4x4, int4x4) Returns the result of a componentwise division operation on two int4x4 matrices. public static int4x4 operator /(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise division. rhs int4x4 Right hand side int4x4 to use to compute componentwise division. 返回 int4x4 int4x4 result of the componentwise division. operator ==(int, int4x4) Returns the result of a componentwise equality operation on an int value and an int4x4 matrix. public static bool4x4 operator ==(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise equality. rhs int4x4 Right hand side int4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(int4x4, int) Returns the result of a componentwise equality operation on an int4x4 matrix and an int value. public static bool4x4 operator ==(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise equality. rhs int Right hand side int to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(int4x4, int4x4) Returns the result of a componentwise equality operation on two int4x4 matrices. public static bool4x4 operator ==(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise equality. rhs int4x4 Right hand side int4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ^(int, int4x4) Returns the result of a componentwise bitwise exclusive or operation on an int value and an int4x4 matrix. public static int4x4 operator ^(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise bitwise exclusive or. rhs int4x4 Right hand side int4x4 to use to compute componentwise bitwise exclusive or. 返回 int4x4 int4x4 result of the componentwise bitwise exclusive or. operator ^(int4x4, int) Returns the result of a componentwise bitwise exclusive or operation on an int4x4 matrix and an int value. public static int4x4 operator ^(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise bitwise exclusive or. rhs int Right hand side int to use to compute componentwise bitwise exclusive or. 返回 int4x4 int4x4 result of the componentwise bitwise exclusive or. operator ^(int4x4, int4x4) Returns the result of a componentwise bitwise exclusive or operation on two int4x4 matrices. public static int4x4 operator ^(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise bitwise exclusive or. rhs int4x4 Right hand side int4x4 to use to compute componentwise bitwise exclusive or. 返回 int4x4 int4x4 result of the componentwise bitwise exclusive or. explicit operator int4x4(bool) Explicitly converts a single bool value to a int4x4 matrix by converting it to int and assigning it to every component. public static explicit operator int4x4(bool v) 参数 v bool bool to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(double) Explicitly converts a single double value to a int4x4 matrix by converting it to int and assigning it to every component. public static explicit operator int4x4(double v) 参数 v double double to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(float) Explicitly converts a single float value to a int4x4 matrix by converting it to int and assigning it to every component. public static explicit operator int4x4(float v) 参数 v float float to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(uint) Explicitly converts a single uint value to a int4x4 matrix by converting it to int and assigning it to every component. public static explicit operator int4x4(uint v) 参数 v uint uint to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(bool4x4) Explicitly converts a bool4x4 matrix to a int4x4 matrix by componentwise conversion. public static explicit operator int4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(double4x4) Explicitly converts a double4x4 matrix to a int4x4 matrix by componentwise conversion. public static explicit operator int4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(float4x4) Explicitly converts a float4x4 matrix to a int4x4 matrix by componentwise conversion. public static explicit operator int4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to int4x4 返回 int4x4 Converted value. explicit operator int4x4(uint4x4) Explicitly converts a uint4x4 matrix to a int4x4 matrix by componentwise conversion. public static explicit operator int4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to int4x4 返回 int4x4 Converted value. operator >(int, int4x4) Returns the result of a componentwise greater than operation on an int value and an int4x4 matrix. public static bool4x4 operator >(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater than. rhs int4x4 Right hand side int4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(int4x4, int) Returns the result of a componentwise greater than operation on an int4x4 matrix and an int value. public static bool4x4 operator >(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise greater than. rhs int Right hand side int to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(int4x4, int4x4) Returns the result of a componentwise greater than operation on two int4x4 matrices. public static bool4x4 operator >(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise greater than. rhs int4x4 Right hand side int4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >=(int, int4x4) Returns the result of a componentwise greater or equal operation on an int value and an int4x4 matrix. public static bool4x4 operator >=(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise greater or equal. rhs int4x4 Right hand side int4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(int4x4, int) Returns the result of a componentwise greater or equal operation on an int4x4 matrix and an int value. public static bool4x4 operator >=(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise greater or equal. rhs int Right hand side int to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(int4x4, int4x4) Returns the result of a componentwise greater or equal operation on two int4x4 matrices. public static bool4x4 operator >=(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise greater or equal. rhs int4x4 Right hand side int4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. implicit operator int4x4(int) Implicitly converts a single int value to a int4x4 matrix by assigning it to every component. public static implicit operator int4x4(int v) 参数 v int int to convert to int4x4 返回 int4x4 Converted value. operator ++(int4x4) Returns the result of a componentwise increment operation on an int4x4 matrix. public static int4x4 operator ++(int4x4 val) 参数 val int4x4 Value to use when computing the componentwise increment. 返回 int4x4 int4x4 result of the componentwise increment. operator !=(int, int4x4) Returns the result of a componentwise not equal operation on an int value and an int4x4 matrix. public static bool4x4 operator !=(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise not equal. rhs int4x4 Right hand side int4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(int4x4, int) Returns the result of a componentwise not equal operation on an int4x4 matrix and an int value. public static bool4x4 operator !=(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise not equal. rhs int Right hand side int to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(int4x4, int4x4) Returns the result of a componentwise not equal operation on two int4x4 matrices. public static bool4x4 operator !=(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise not equal. rhs int4x4 Right hand side int4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator <<(int4x4, int) Returns the result of a componentwise left shift operation on an int4x4 matrix by a number of bits specified by a single int. public static int4x4 operator <<(int4x4 x, int n) 参数 x int4x4 The matrix to left shift. n int The number of bits to left shift. 返回 int4x4 The result of the componentwise left shift. operator <(int, int4x4) Returns the result of a componentwise less than operation on an int value and an int4x4 matrix. public static bool4x4 operator <(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less than. rhs int4x4 Right hand side int4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(int4x4, int) Returns the result of a componentwise less than operation on an int4x4 matrix and an int value. public static bool4x4 operator <(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise less than. rhs int Right hand side int to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(int4x4, int4x4) Returns the result of a componentwise less than operation on two int4x4 matrices. public static bool4x4 operator <(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise less than. rhs int4x4 Right hand side int4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <=(int, int4x4) Returns the result of a componentwise less or equal operation on an int value and an int4x4 matrix. public static bool4x4 operator <=(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise less or equal. rhs int4x4 Right hand side int4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(int4x4, int) Returns the result of a componentwise less or equal operation on an int4x4 matrix and an int value. public static bool4x4 operator <=(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise less or equal. rhs int Right hand side int to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(int4x4, int4x4) Returns the result of a componentwise less or equal operation on two int4x4 matrices. public static bool4x4 operator <=(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise less or equal. rhs int4x4 Right hand side int4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator %(int, int4x4) Returns the result of a componentwise modulus operation on an int value and an int4x4 matrix. public static int4x4 operator %(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise modulus. rhs int4x4 Right hand side int4x4 to use to compute componentwise modulus. 返回 int4x4 int4x4 result of the componentwise modulus. operator %(int4x4, int) Returns the result of a componentwise modulus operation on an int4x4 matrix and an int value. public static int4x4 operator %(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise modulus. rhs int Right hand side int to use to compute componentwise modulus. 返回 int4x4 int4x4 result of the componentwise modulus. operator %(int4x4, int4x4) Returns the result of a componentwise modulus operation on two int4x4 matrices. public static int4x4 operator %(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise modulus. rhs int4x4 Right hand side int4x4 to use to compute componentwise modulus. 返回 int4x4 int4x4 result of the componentwise modulus. operator *(int, int4x4) Returns the result of a componentwise multiplication operation on an int value and an int4x4 matrix. public static int4x4 operator *(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise multiplication. rhs int4x4 Right hand side int4x4 to use to compute componentwise multiplication. 返回 int4x4 int4x4 result of the componentwise multiplication. operator *(int4x4, int) Returns the result of a componentwise multiplication operation on an int4x4 matrix and an int value. public static int4x4 operator *(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise multiplication. rhs int Right hand side int to use to compute componentwise multiplication. 返回 int4x4 int4x4 result of the componentwise multiplication. operator *(int4x4, int4x4) Returns the result of a componentwise multiplication operation on two int4x4 matrices. public static int4x4 operator *(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise multiplication. rhs int4x4 Right hand side int4x4 to use to compute componentwise multiplication. 返回 int4x4 int4x4 result of the componentwise multiplication. operator ~(int4x4) Returns the result of a componentwise bitwise not operation on an int4x4 matrix. public static int4x4 operator ~(int4x4 val) 参数 val int4x4 Value to use when computing the componentwise bitwise not. 返回 int4x4 int4x4 result of the componentwise bitwise not. operator >>(int4x4, int) Returns the result of a componentwise right shift operation on an int4x4 matrix by a number of bits specified by a single int. public static int4x4 operator >>(int4x4 x, int n) 参数 x int4x4 The matrix to right shift. n int The number of bits to right shift. 返回 int4x4 The result of the componentwise right shift. operator -(int, int4x4) Returns the result of a componentwise subtraction operation on an int value and an int4x4 matrix. public static int4x4 operator -(int lhs, int4x4 rhs) 参数 lhs int Left hand side int to use to compute componentwise subtraction. rhs int4x4 Right hand side int4x4 to use to compute componentwise subtraction. 返回 int4x4 int4x4 result of the componentwise subtraction. operator -(int4x4, int) Returns the result of a componentwise subtraction operation on an int4x4 matrix and an int value. public static int4x4 operator -(int4x4 lhs, int rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise subtraction. rhs int Right hand side int to use to compute componentwise subtraction. 返回 int4x4 int4x4 result of the componentwise subtraction. operator -(int4x4, int4x4) Returns the result of a componentwise subtraction operation on two int4x4 matrices. public static int4x4 operator -(int4x4 lhs, int4x4 rhs) 参数 lhs int4x4 Left hand side int4x4 to use to compute componentwise subtraction. rhs int4x4 Right hand side int4x4 to use to compute componentwise subtraction. 返回 int4x4 int4x4 result of the componentwise subtraction. operator -(int4x4) Returns the result of a componentwise unary minus operation on an int4x4 matrix. public static int4x4 operator -(int4x4 val) 参数 val int4x4 Value to use when computing the componentwise unary minus. 返回 int4x4 int4x4 result of the componentwise unary minus. operator +(int4x4) Returns the result of a componentwise unary plus operation on an int4x4 matrix. public static int4x4 operator +(int4x4 val) 参数 val int4x4 Value to use when computing the componentwise unary plus. 返回 int4x4 int4x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.math.RotationOrder.html": {
    "href": "reference/Unity.Mathematics.math.RotationOrder.html",
    "title": "math.RotationOrder 枚举 | Fantasy.Net API Reference",
    "keywords": "math.RotationOrder 枚举 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll Extrinsic rotation order. Specifies in which order rotations around the principal axes (x, y and z) are to be applied. public enum math.RotationOrder : byte 扩展方法 JsonHelper.ToJson<T>(T) 字段 Default = 4 Unity default rotation order. Extrinsic Rotation around the z axis, then around the x axis and finally around the y axis. XYZ = 0 Extrinsic rotation around the x axis, then around the y axis and finally around the z axis. XZY = 1 Extrinsic rotation around the x axis, then around the z axis and finally around the y axis. YXZ = 2 Extrinsic rotation around the y axis, then around the x axis and finally around the z axis. YZX = 3 Extrinsic rotation around the y axis, then around the z axis and finally around the x axis. ZXY = 4 Extrinsic rotation around the z axis, then around the x axis and finally around the y axis. ZYX = 5 Extrinsic rotation around the z axis, then around the y axis and finally around the x axis."
  },
  "reference/Unity.Mathematics.math.ShuffleComponent.html": {
    "href": "reference/Unity.Mathematics.math.ShuffleComponent.html",
    "title": "math.ShuffleComponent 枚举 | Fantasy.Net API Reference",
    "keywords": "math.ShuffleComponent 枚举 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll Specifies a shuffle component. public enum math.ShuffleComponent : byte 扩展方法 JsonHelper.ToJson<T>(T) 字段 LeftW = 3 Specified the w component of the left vector. LeftX = 0 Specified the x component of the left vector. LeftY = 1 Specified the y component of the left vector. LeftZ = 2 Specified the z component of the left vector. RightW = 7 Specified the w component of the right vector. RightX = 4 Specified the x component of the right vector. RightY = 5 Specified the y component of the right vector. RightZ = 6 Specified the z component of the right vector."
  },
  "reference/Unity.Mathematics.math.html": {
    "href": "reference/Unity.Mathematics.math.html",
    "title": "math 类 | Fantasy.Net API Reference",
    "keywords": "math 类 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A static class to contain various math functions and constants. public static class math 继承 object math 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 字段 DBL_MIN_NORMAL The smallest positive normal number representable in a double. This is a f64/double precision constant. public const double DBL_MIN_NORMAL = 2.2250738585072014E-308 字段值 double E The mathematical constant e also known as Euler's number. Approximately 2.72. public const float E = 2.7182817 字段值 float EPSILON The difference between 1.0f and the next representable f32/single precision number. Beware: This value is different from System.Single.Epsilon, which is the smallest, positive, denormalized f32/single. public const float EPSILON = 1.1920929E-07 字段值 float EPSILON_DBL The difference between 1.0 and the next representable f64/double precision number. Beware: This value is different from System.Double.Epsilon, which is the smallest, positive, denormalized f64/double. public const double EPSILON_DBL = 2.220446049250313E-16 字段值 double E_DBL The mathematical constant e also known as Euler's number. Approximately 2.72. This is a f64/double precision constant. public const double E_DBL = 2.718281828459045 字段值 double FLT_MIN_NORMAL The smallest positive normal number representable in a float. public const float FLT_MIN_NORMAL = 1.1754944E-38 字段值 float INFINITY Single precision constant for positive infinity. public const float INFINITY = Infinity 字段值 float INFINITY_DBL Double precision constant for positive infinity. public const double INFINITY_DBL = Infinity 字段值 double LN10 The natural logarithm of 10. Approximately 2.30. public const float LN10 = 2.3025851 字段值 float LN10_DBL The natural logarithm of 10. Approximately 2.30. This is a f64/double precision constant. public const double LN10_DBL = 2.302585092994046 字段值 double LN2 The natural logarithm of 2. Approximately 0.69. public const float LN2 = 0.6931472 字段值 float LN2_DBL The natural logarithm of 2. Approximately 0.69. This is a f64/double precision constant. public const double LN2_DBL = 0.6931471805599453 字段值 double LOG10E The base 10 logarithm of e. Approximately 0.43. public const float LOG10E = 0.4342945 字段值 float LOG10E_DBL The base 10 logarithm of e. Approximately 0.43. This is a f64/double precision constant. public const double LOG10E_DBL = 0.4342944819032518 字段值 double LOG2E The base 2 logarithm of e. Approximately 1.44. public const float LOG2E = 1.442695 字段值 float LOG2E_DBL The base 2 logarithm of e. Approximately 1.44. This is a f64/double precision constant. public const double LOG2E_DBL = 1.4426950408889634 字段值 double NAN Single precision constant for Not a Number. NAN is considered unordered, which means all comparisons involving it are false except for not equal (operator !=). As a consequence, NAN == NAN is false but NAN != NAN is true. Additionally, there are multiple bit representations for Not a Number, so if you must test if your value is NAN, use isnan(). public const float NAN = NaN 字段值 float NAN_DBL Double precision constant for Not a Number. NAN_DBL is considered unordered, which means all comparisons involving it are false except for not equal (operator !=). As a consequence, NAN_DBL == NAN_DBL is false but NAN_DBL != NAN_DBL is true. Additionally, there are multiple bit representations for Not a Number, so if you must test if your value is NAN_DBL, use isnan(). public const double NAN_DBL = NaN 字段值 double PI The mathematical constant pi. Approximately 3.14. public const float PI = 3.1415927 字段值 float PI2 The mathematical constant (2 * pi). Approximately 6.28. Also known as TAU. public const float PI2 = 6.2831855 字段值 float PI2_DBL The mathematical constant (2 * pi). Approximately 6.28. This is a f64/double precision constant. Also known as TAU_DBL. public const double PI2_DBL = 6.283185307179586 字段值 double PIHALF The mathematical constant (pi / 2). Approximately 1.57. public const float PIHALF = 1.5707964 字段值 float PIHALF_DBL The mathematical constant (pi / 2). Approximately 1.57. This is a f64/double precision constant. public const double PIHALF_DBL = 1.5707963267948966 字段值 double PI_DBL The mathematical constant pi. Approximately 3.14. This is a f64/double precision constant. public const double PI_DBL = 3.141592653589793 字段值 double SQRT2 The square root 2. Approximately 1.41. public const float SQRT2 = 1.4142135 字段值 float SQRT2_DBL The square root 2. Approximately 1.41. This is a f64/double precision constant. public const double SQRT2_DBL = 1.4142135623730951 字段值 double TAU The mathematical constant tau. Approximately 6.28. Also known as PI2. public const float TAU = 6.2831855 字段值 float TAU_DBL The mathematical constant tau. Approximately 6.28. This is a f64/double precision constant. Also known as PI2_DBL. public const double TAU_DBL = 6.283185307179586 字段值 double TODEGREES The conversion constant used to convert radians to degrees. Multiply the radian value by this constant to get degrees. public const float TODEGREES = 57.29578 字段值 float 备注 Multiplying by this constant is equivalent to using degrees(float). TODEGREES_DBL The conversion constant used to convert radians to degrees. Multiply the radian value by this constant to get degrees. public const double TODEGREES_DBL = 57.29577951308232 字段值 double 备注 Multiplying by this constant is equivalent to using degrees(double). TORADIANS The conversion constant used to convert degrees to radians. Multiply the degree value by this constant to get radians. public const float TORADIANS = 0.017453292 字段值 float 备注 Multiplying by this constant is equivalent to using radians(float). TORADIANS_DBL The conversion constant used to convert degrees to radians. Multiply the degree value by this constant to get radians. public const double TORADIANS_DBL = 0.017453292519943295 字段值 double 备注 Multiplying by this constant is equivalent to using radians(double). 方法 AffineTransform(RigidTransform) Returns an AffineTransform constructed from a RigidTransform. public static AffineTransform AffineTransform(RigidTransform rigid) 参数 rigid RigidTransform The RigidTransform. 返回 AffineTransform The AffineTransform given a RigidTransform. AffineTransform(float3, float3x3) Returns an AffineTransform constructed from a translation represented by float3 vector and a float3x3 matrix representing both rotation and scale. public static AffineTransform AffineTransform(float3 translation, float3x3 rotationScale) 参数 translation float3 The translation vector. rotationScale float3x3 The rotation and scale matrix. 返回 AffineTransform The AffineTransform given the translation vector and float3x3 matrix. AffineTransform(float3, quaternion) Returns an AffineTransform constructed from a translation represented by a float3 vector and rotation represented by a unit quaternion. public static AffineTransform AffineTransform(float3 translation, quaternion rotation) 参数 translation float3 The AffineTransform translation. rotation quaternion The AffineTransform rotation. 返回 AffineTransform The AffineTransform given the translation vector and rotation quaternion. AffineTransform(float3, quaternion, float3) Returns an AffineTransform constructed from a translation represented by a float3 vector, rotation represented by a unit quaternion and scale represented by a float3 vector. public static AffineTransform AffineTransform(float3 translation, quaternion rotation, float3 scale) 参数 translation float3 The translation vector. rotation quaternion The rotation quaternion. scale float3 The scale vector. 返回 AffineTransform The AffineTransform given the translation vector, rotation quaternion and scale vector. AffineTransform(float3x3) Returns an AffineTransform constructed from a float3x3 matrix representing both rotation and scale. public static AffineTransform AffineTransform(float3x3 rotationScale) 参数 rotationScale float3x3 The rotation and scale matrix. 返回 AffineTransform The AffineTransform given a float3x3 matrix. AffineTransform(float3x4) Returns an AffineTransform constructed from a float3x4 matrix. public static AffineTransform AffineTransform(float3x4 m) 参数 m float3x4 The float3x4 matrix. 返回 AffineTransform The AffineTransform given a float3x4 matrix. AffineTransform(float4x4) Returns an AffineTransform constructed from a float4x4 matrix. public static AffineTransform AffineTransform(float4x4 m) 参数 m float4x4 The float4x4 matrix. 返回 AffineTransform The AffineTransform given a float4x4 matrix. Euler(quaternion, RotationOrder) Returns the Euler angle representation of the quaternion. The returned angles depend on the specified order to apply the three rotations around the principal axes. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, to get the best performance you should use the specific Euler rotation constructors such as EulerZXY(...). public static float3 Euler(quaternion q, math.RotationOrder order = RotationOrder.Default) 参数 q quaternion The quaternion to convert to Euler angles. order math.RotationOrder The order in which the rotations are applied. 返回 float3 The Euler angle representation of the quaternion in the specified order. EulerXYZ(quaternion) Returns the Euler angle representation of the quaternion following the XYZ rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3 EulerXYZ(quaternion q) 参数 q quaternion The quaternion to convert to Euler angles. 返回 float3 The Euler angle representation of the quaternion in XYZ order. EulerXZY(quaternion) Returns the Euler angle representation of the quaternion following the XZY rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3 EulerXZY(quaternion q) 参数 q quaternion The quaternion to convert to Euler angles. 返回 float3 The Euler angle representation of the quaternion in XZY order. EulerYXZ(quaternion) Returns the Euler angle representation of the quaternion following the YXZ rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3 EulerYXZ(quaternion q) 参数 q quaternion The quaternion to convert to Euler angles. 返回 float3 The Euler angle representation of the quaternion in YXZ order. EulerYZX(quaternion) Returns the Euler angle representation of the quaternion following the YZX rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3 EulerYZX(quaternion q) 参数 q quaternion The quaternion to convert to Euler angles. 返回 float3 The Euler angle representation of the quaternion in YZX order. EulerZXY(quaternion) Returns the Euler angle representation of the quaternion following the ZXY rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3 EulerZXY(quaternion q) 参数 q quaternion The quaternion to convert to Euler angles. 返回 float3 The Euler angle representation of the quaternion in ZXY order. EulerZYX(quaternion) Returns the Euler angle representation of the quaternion following the ZYX rotation order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static float3 EulerZYX(quaternion q) 参数 q quaternion The quaternion to convert to Euler angles. 返回 float3 The Euler angle representation of the quaternion in ZYX order. RigidTransform(float3x3, float3) Returns a RigidTransform constructed from a rotation represented by a float3x3 rotation matrix and a translation represented by a float3 vector. public static RigidTransform RigidTransform(float3x3 rotation, float3 translation) 参数 rotation float3x3 The float3x3 rotation matrix. translation float3 The translation vector. 返回 RigidTransform The RigidTransform of the given rotation matrix and translation vector. RigidTransform(float4x4) Returns a RigidTransform constructed from a rotation represented by a float3x3 matrix and a translation represented by a float3 vector. public static RigidTransform RigidTransform(float4x4 transform) 参数 transform float4x4 The float4x4 transformation matrix. 返回 RigidTransform The RigidTransform of the given float4x4 transformation matrix. RigidTransform(quaternion, float3) Returns a RigidTransform constructed from a rotation represented by a unit quaternion and a translation represented by a float3 vector. public static RigidTransform RigidTransform(quaternion rot, float3 pos) 参数 rot quaternion The quaternion rotation. pos float3 The translation vector. 返回 RigidTransform The RigidTransform of the given rotation quaternion and translation vector. abs(double) Returns the absolute value of a double value. public static double abs(double x) 参数 x double Input value. 返回 double The absolute value of the input. abs(int) Returns the absolute value of a int value. public static int abs(int x) 参数 x int Input value. 返回 int The absolute value of the input. abs(long) Returns the absolute value of a long value. public static long abs(long x) 参数 x long Input value. 返回 long The absolute value of the input. abs(float) Returns the absolute value of a float value. public static float abs(float x) 参数 x float Input value. 返回 float The absolute value of the input. abs(double2) Returns the componentwise absolute value of a double2 vector. public static double2 abs(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise absolute value of the input. abs(double3) Returns the componentwise absolute value of a double3 vector. public static double3 abs(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise absolute value of the input. abs(double4) Returns the componentwise absolute value of a double4 vector. public static double4 abs(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise absolute value of the input. abs(float2) Returns the componentwise absolute value of a float2 vector. public static float2 abs(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise absolute value of the input. abs(float3) Returns the componentwise absolute value of a float3 vector. public static float3 abs(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise absolute value of the input. abs(float4) Returns the componentwise absolute value of a float4 vector. public static float4 abs(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise absolute value of the input. abs(int2) Returns the componentwise absolute value of a int2 vector. public static int2 abs(int2 x) 参数 x int2 Input value. 返回 int2 The componentwise absolute value of the input. abs(int3) Returns the componentwise absolute value of a int3 vector. public static int3 abs(int3 x) 参数 x int3 Input value. 返回 int3 The componentwise absolute value of the input. abs(int4) Returns the componentwise absolute value of a int4 vector. public static int4 abs(int4 x) 参数 x int4 Input value. 返回 int4 The componentwise absolute value of the input. acos(double) Returns the arccosine of a double value. public static double acos(double x) 参数 x double Input value. 返回 double The arccosine of the input. acos(float) Returns the arccosine of a float value. public static float acos(float x) 参数 x float Input value. 返回 float The arccosine of the input. acos(double2) Returns the componentwise arccosine of a double2 vector. public static double2 acos(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise arccosine of the input. acos(double3) Returns the componentwise arccosine of a double3 vector. public static double3 acos(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise arccosine of the input. acos(double4) Returns the componentwise arccosine of a double4 vector. public static double4 acos(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise arccosine of the input. acos(float2) Returns the componentwise arccosine of a float2 vector. public static float2 acos(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise arccosine of the input. acos(float3) Returns the componentwise arccosine of a float3 vector. public static float3 acos(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise arccosine of the input. acos(float4) Returns the componentwise arccosine of a float4 vector. public static float4 acos(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise arccosine of the input. all(bool2) Returns true if all components of the input bool2 vector are true, false otherwise. public static bool all(bool2 x) 参数 x bool2 Vector of values to compare. 返回 bool True if all the components of x are true, false otherwise. all(bool3) Returns true if all components of the input bool3 vector are true, false otherwise. public static bool all(bool3 x) 参数 x bool3 Vector of values to compare. 返回 bool True if all the components of x are true, false otherwise. all(bool4) Returns true if all components of the input bool4 vector are true, false otherwise. public static bool all(bool4 x) 参数 x bool4 Vector of values to compare. 返回 bool True if all the components of x are true, false otherwise. all(double2) Returns true if all components of the input double2 vector are non-zero, false otherwise. public static bool all(double2 x) 参数 x double2 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(double3) Returns true if all components of the input double3 vector are non-zero, false otherwise. public static bool all(double3 x) 参数 x double3 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(double4) Returns true if all components of the input double4 vector are non-zero, false otherwise. public static bool all(double4 x) 参数 x double4 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(float2) Returns true if all components of the input float2 vector are non-zero, false otherwise. public static bool all(float2 x) 参数 x float2 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(float3) Returns true if all components of the input float3 vector are non-zero, false otherwise. public static bool all(float3 x) 参数 x float3 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(float4) Returns true if all components of the input float4 vector are non-zero, false otherwise. public static bool all(float4 x) 参数 x float4 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(int2) Returns true if all components of the input int2 vector are non-zero, false otherwise. public static bool all(int2 x) 参数 x int2 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(int3) Returns true if all components of the input int3 vector are non-zero, false otherwise. public static bool all(int3 x) 参数 x int3 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(int4) Returns true if all components of the input int4 vector are non-zero, false otherwise. public static bool all(int4 x) 参数 x int4 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(uint2) Returns true if all components of the input uint2 vector are non-zero, false otherwise. public static bool all(uint2 x) 参数 x uint2 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(uint3) Returns true if all components of the input uint3 vector are non-zero, false otherwise. public static bool all(uint3 x) 参数 x uint3 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. all(uint4) Returns true if all components of the input uint4 vector are non-zero, false otherwise. public static bool all(uint4 x) 参数 x uint4 Vector of values to compare. 返回 bool True if all the components of x are non-zero, false otherwise. angle(quaternion, quaternion) Returns the angle in radians between two unit quaternions. public static float angle(quaternion q1, quaternion q2) 参数 q1 quaternion The first quaternion. q2 quaternion The second quaternion. 返回 float The angle between two unit quaternions. any(bool2) Returns true if any component of the input bool2 vector is true, false otherwise. public static bool any(bool2 x) 参数 x bool2 Vector of values to compare. 返回 bool True if any the components of x are true, false otherwise. any(bool3) Returns true if any component of the input bool3 vector is true, false otherwise. public static bool any(bool3 x) 参数 x bool3 Vector of values to compare. 返回 bool True if any the components of x are true, false otherwise. any(bool4) Returns true if any components of the input bool4 vector is true, false otherwise. public static bool any(bool4 x) 参数 x bool4 Vector of values to compare. 返回 bool True if any the components of x are true, false otherwise. any(double2) Returns true if any component of the input double2 vector is non-zero, false otherwise. public static bool any(double2 x) 参数 x double2 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(double3) Returns true if any component of the input double3 vector is non-zero, false otherwise. public static bool any(double3 x) 参数 x double3 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(double4) Returns true if any component of the input double4 vector is non-zero, false otherwise. public static bool any(double4 x) 参数 x double4 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(float2) Returns true if any component of the input float2 vector is non-zero, false otherwise. public static bool any(float2 x) 参数 x float2 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(float3) Returns true if any component of the input float3 vector is non-zero, false otherwise. public static bool any(float3 x) 参数 x float3 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(float4) Returns true if any component of the input float4 vector is non-zero, false otherwise. public static bool any(float4 x) 参数 x float4 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(int2) Returns true if any component of the input int2 vector is non-zero, false otherwise. public static bool any(int2 x) 参数 x int2 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(int3) Returns true if any component of the input int3 vector is non-zero, false otherwise. public static bool any(int3 x) 参数 x int3 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(int4) Returns true if any components of the input int4 vector is non-zero, false otherwise. public static bool any(int4 x) 参数 x int4 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(uint2) Returns true if any component of the input uint2 vector is non-zero, false otherwise. public static bool any(uint2 x) 参数 x uint2 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(uint3) Returns true if any component of the input uint3 vector is non-zero, false otherwise. public static bool any(uint3 x) 参数 x uint3 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. any(uint4) Returns true if any components of the input uint4 vector is non-zero, false otherwise. public static bool any(uint4 x) 参数 x uint4 Vector of values to compare. 返回 bool True if any the components of x are non-zero, false otherwise. asdouble(long) Returns the bit pattern of a long as a double. public static double asdouble(long x) 参数 x long The long bits to copy. 返回 double The double with the same bit pattern as the input. asdouble(ulong) Returns the bit pattern of a ulong as a double. public static double asdouble(ulong x) 参数 x ulong The ulong bits to copy. 返回 double The double with the same bit pattern as the input. asfloat(int) Returns the bit pattern of an int as a float. public static float asfloat(int x) 参数 x int The int bits to copy. 返回 float The float with the same bit pattern as the input. asfloat(uint) Returns the bit pattern of a uint as a float. public static float asfloat(uint x) 参数 x uint The uint bits to copy. 返回 float The float with the same bit pattern as the input. asfloat(int2) Returns the bit pattern of an int2 as a float2. public static float2 asfloat(int2 x) 参数 x int2 The int2 bits to copy. 返回 float2 The float2 with the same bit pattern as the input. asfloat(int3) Returns the bit pattern of an int3 as a float3. public static float3 asfloat(int3 x) 参数 x int3 The int3 bits to copy. 返回 float3 The float3 with the same bit pattern as the input. asfloat(int4) Returns the bit pattern of an int4 as a float4. public static float4 asfloat(int4 x) 参数 x int4 The int4 bits to copy. 返回 float4 The float4 with the same bit pattern as the input. asfloat(uint2) Returns the bit pattern of a uint2 as a float2. public static float2 asfloat(uint2 x) 参数 x uint2 The uint2 bits to copy. 返回 float2 The float2 with the same bit pattern as the input. asfloat(uint3) Returns the bit pattern of a uint3 as a float3. public static float3 asfloat(uint3 x) 参数 x uint3 The uint3 bits to copy. 返回 float3 The float3 with the same bit pattern as the input. asfloat(uint4) Returns the bit pattern of a uint4 as a float4. public static float4 asfloat(uint4 x) 参数 x uint4 The uint4 bits to copy. 返回 float4 The float4 with the same bit pattern as the input. asin(double) Returns the arcsine of a double value. public static double asin(double x) 参数 x double Input value. 返回 double The arcsine of the input. asin(float) Returns the arcsine of a float value. public static float asin(float x) 参数 x float Input value. 返回 float The arcsine of the input. asin(double2) Returns the componentwise arcsine of a double2 vector. public static double2 asin(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise arcsine of the input. asin(double3) Returns the componentwise arcsine of a double3 vector. public static double3 asin(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise arcsine of the input. asin(double4) Returns the componentwise arcsine of a double4 vector. public static double4 asin(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise arcsine of the input. asin(float2) Returns the componentwise arcsine of a float2 vector. public static float2 asin(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise arcsine of the input. asin(float3) Returns the componentwise arcsine of a float3 vector. public static float3 asin(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise arcsine of the input. asin(float4) Returns the componentwise arcsine of a float4 vector. public static float4 asin(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise arcsine of the input. asint(float) Returns the bit pattern of a float as an int. public static int asint(float x) 参数 x float The float bits to copy. 返回 int The int with the same bit pattern as the input. asint(uint) Returns the bit pattern of a uint as an int. public static int asint(uint x) 参数 x uint The uint bits to copy. 返回 int The int with the same bit pattern as the input. asint(float2) Returns the bit pattern of a float2 as an int2. public static int2 asint(float2 x) 参数 x float2 The float2 bits to copy. 返回 int2 The int2 with the same bit pattern as the input. asint(float3) Returns the bit pattern of a float3 as an int3. public static int3 asint(float3 x) 参数 x float3 The float3 bits to copy. 返回 int3 The int3 with the same bit pattern as the input. asint(float4) Returns the bit pattern of a float4 as an int4. public static int4 asint(float4 x) 参数 x float4 The float4 bits to copy. 返回 int4 The int4 with the same bit pattern as the input. asint(uint2) Returns the bit pattern of a uint2 as an int2. public static int2 asint(uint2 x) 参数 x uint2 The uint2 bits to copy. 返回 int2 The int2 with the same bit pattern as the input. asint(uint3) Returns the bit pattern of a uint3 as an int3. public static int3 asint(uint3 x) 参数 x uint3 The uint3 bits to copy. 返回 int3 The int3 with the same bit pattern as the input. asint(uint4) Returns the bit pattern of a uint4 as an int4. public static int4 asint(uint4 x) 参数 x uint4 The uint4 bits to copy. 返回 int4 The int4 with the same bit pattern as the input. aslong(double) Returns the bit pattern of a double as a long. public static long aslong(double x) 参数 x double The double bits to copy. 返回 long The long with the same bit pattern as the input. aslong(ulong) Returns the bit pattern of a ulong as a long. public static long aslong(ulong x) 参数 x ulong The ulong bits to copy. 返回 long The long with the same bit pattern as the input. asuint(int) Returns the bit pattern of an int as a uint. public static uint asuint(int x) 参数 x int The int bits to copy. 返回 uint The uint with the same bit pattern as the input. asuint(float) Returns the bit pattern of a float as a uint. public static uint asuint(float x) 参数 x float The float bits to copy. 返回 uint The uint with the same bit pattern as the input. asuint(float2) Returns the bit pattern of a float2 as a uint2. public static uint2 asuint(float2 x) 参数 x float2 The float2 bits to copy. 返回 uint2 The uint2 with the same bit pattern as the input. asuint(float3) Returns the bit pattern of a float3 as a uint3. public static uint3 asuint(float3 x) 参数 x float3 The float3 bits to copy. 返回 uint3 The uint3 with the same bit pattern as the input. asuint(float4) Returns the bit pattern of a float4 as a uint4. public static uint4 asuint(float4 x) 参数 x float4 The float4 bits to copy. 返回 uint4 The uint4 with the same bit pattern as the input. asuint(int2) Returns the bit pattern of an int2 as a uint2. public static uint2 asuint(int2 x) 参数 x int2 The int2 bits to copy. 返回 uint2 The uint2 with the same bit pattern as the input. asuint(int3) Returns the bit pattern of an int3 as a uint3. public static uint3 asuint(int3 x) 参数 x int3 The int3 bits to copy. 返回 uint3 The uint3 with the same bit pattern as the input. asuint(int4) Returns the bit pattern of an int4 as a uint4. public static uint4 asuint(int4 x) 参数 x int4 The int4 bits to copy. 返回 uint4 The uint4 with the same bit pattern as the input. asulong(double) Returns the bit pattern of a double as a ulong. public static ulong asulong(double x) 参数 x double The double bits to copy. 返回 ulong The ulong with the same bit pattern as the input. asulong(long) Returns the bit pattern of a long as a ulong. public static ulong asulong(long x) 参数 x long The long bits to copy. 返回 ulong The ulong with the same bit pattern as the input. atan(double) Returns the arctangent of a double value. public static double atan(double x) 参数 x double A tangent value, usually the ratio y/x on the unit circle. 返回 double The arctangent of the input, in radians. atan(float) Returns the arctangent of a float value. public static float atan(float x) 参数 x float A tangent value, usually the ratio y/x on the unit circle. 返回 float The arctangent of the input, in radians. atan(double2) Returns the componentwise arctangent of a double2 vector. public static double2 atan(double2 x) 参数 x double2 A tangent value, usually the ratio y/x on the unit circle. 返回 double2 The componentwise arctangent of the input, in radians. atan(double3) Returns the componentwise arctangent of a double3 vector. public static double3 atan(double3 x) 参数 x double3 A tangent value, usually the ratio y/x on the unit circle. 返回 double3 The componentwise arctangent of the input, in radians. atan(double4) Returns the componentwise arctangent of a double4 vector. public static double4 atan(double4 x) 参数 x double4 A tangent value, usually the ratio y/x on the unit circle. 返回 double4 The componentwise arctangent of the input, in radians. atan(float2) Returns the componentwise arctangent of a float2 vector. public static float2 atan(float2 x) 参数 x float2 A tangent value, usually the ratio y/x on the unit circle. 返回 float2 The componentwise arctangent of the input, in radians. atan(float3) Returns the componentwise arctangent of a float3 vector. public static float3 atan(float3 x) 参数 x float3 A tangent value, usually the ratio y/x on the unit circle. 返回 float3 The componentwise arctangent of the input, in radians. atan(float4) Returns the componentwise arctangent of a float4 vector. public static float4 atan(float4 x) 参数 x float4 A tangent value, usually the ratio y/x on the unit circle. 返回 float4 The componentwise arctangent of the input, in radians. atan2(double, double) Returns the 2-argument arctangent of a pair of double values. public static double atan2(double y, double x) 参数 y double Numerator of the ratio y/x, usually the y component on the unit circle. x double Denominator of the ratio y/x, usually the x component on the unit circle. 返回 double The arctangent of the ratio y/x, in radians. atan2(float, float) Returns the 2-argument arctangent of a pair of float values. public static float atan2(float y, float x) 参数 y float Numerator of the ratio y/x, usually the y component on the unit circle. x float Denominator of the ratio y/x, usually the x component on the unit circle. 返回 float The arctangent of the ratio y/x, in radians. atan2(double2, double2) Returns the 2-argument arctangent of a pair of double2 vectors. public static double2 atan2(double2 y, double2 x) 参数 y double2 Numerator of the ratio y/x, usually the y component on the unit circle. x double2 Denominator of the ratio y/x, usually the x component on the unit circle. 返回 double2 The componentwise arctangent of the ratio y/x, in radians. atan2(double3, double3) Returns the 2-argument arctangent of a pair of double3 vectors. public static double3 atan2(double3 y, double3 x) 参数 y double3 Numerator of the ratio y/x, usually the y component on the unit circle. x double3 Denominator of the ratio y/x, usually the x component on the unit circle. 返回 double3 The componentwise arctangent of the ratio y/x, in radians. atan2(double4, double4) Returns the 2-argument arctangent of a pair of double4 vectors. public static double4 atan2(double4 y, double4 x) 参数 y double4 Numerator of the ratio y/x, usually the y component on the unit circle. x double4 Denominator of the ratio y/x, usually the x component on the unit circle. 返回 double4 The componentwise arctangent of the ratio y/x, in radians. atan2(float2, float2) Returns the componentwise 2-argument arctangent of a pair of floats2 vectors. public static float2 atan2(float2 y, float2 x) 参数 y float2 Numerator of the ratio y/x, usually the y component on the unit circle. x float2 Denominator of the ratio y/x, usually the x component on the unit circle. 返回 float2 The componentwise arctangent of the ratio y/x, in radians. atan2(float3, float3) Returns the componentwise 2-argument arctangent of a pair of floats3 vectors. public static float3 atan2(float3 y, float3 x) 参数 y float3 Numerator of the ratio y/x, usually the y component on the unit circle. x float3 Denominator of the ratio y/x, usually the x component on the unit circle. 返回 float3 The componentwise arctangent of the ratio y/x, in radians. atan2(float4, float4) Returns the componentwise 2-argument arctangent of a pair of floats4 vectors. public static float4 atan2(float4 y, float4 x) 参数 y float4 Numerator of the ratio y/x, usually the y component on the unit circle. x float4 Denominator of the ratio y/x, usually the x component on the unit circle. 返回 float4 The componentwise arctangent of the ratio y/x, in radians. back() Unity's back axis (0, 0, -1). public static float3 back() 返回 float3 The back axis. 备注 Matches https://docs.unity3d.com/ScriptReference/Vector3-back.html bitmask(bool4) Returns a bitmask representation of a bool4. Storing one 1 bit per component in LSB order, from lower to higher bits (so 4 bits in total). The component x is stored at bit 0, The component y is stored at bit 1, The component z is stored at bit 2, The component w is stored at bit 3 The bool4(x = true, y = true, z = false, w = true) would produce the value 1011 = 0xB public static int bitmask(bool4 value) 参数 value bool4 The input bool4 to calculate the bitmask for 返回 int A bitmask representation of the bool4, in LSB order bool2(bool) Returns a bool2 vector constructed from a single bool value by assigning it to every component. public static bool2 bool2(bool v) 参数 v bool bool to convert to bool2 返回 bool2 Converted value. bool2(bool, bool) Returns a bool2 vector constructed from two bool values. public static bool2 bool2(bool x, bool y) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. 返回 bool2 bool2 constructed from arguments. bool2(bool2) Returns a bool2 vector constructed from a bool2 vector. public static bool2 bool2(bool2 xy) 参数 xy bool2 The constructed vector's xy components will be set to this value. 返回 bool2 bool2 constructed from arguments. bool2x2(bool) Returns a bool2x2 matrix constructed from a single bool value by assigning it to every component. public static bool2x2 bool2x2(bool v) 参数 v bool bool to convert to bool2x2 返回 bool2x2 Converted value. bool2x2(bool, bool, bool, bool) Returns a bool2x2 matrix constructed from from 4 bool values given in row-major order. public static bool2x2 bool2x2(bool m00, bool m01, bool m10, bool m11) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. 返回 bool2x2 bool2x2 constructed from arguments. bool2x2(bool2, bool2) Returns a bool2x2 matrix constructed from two bool2 vectors. public static bool2x2 bool2x2(bool2 c0, bool2 c1) 参数 c0 bool2 The matrix column c0 will be set to this value. c1 bool2 The matrix column c1 will be set to this value. 返回 bool2x2 bool2x2 constructed from arguments. bool2x3(bool) Returns a bool2x3 matrix constructed from a single bool value by assigning it to every component. public static bool2x3 bool2x3(bool v) 参数 v bool bool to convert to bool2x3 返回 bool2x3 Converted value. bool2x3(bool, bool, bool, bool, bool, bool) Returns a bool2x3 matrix constructed from from 6 bool values given in row-major order. public static bool2x3 bool2x3(bool m00, bool m01, bool m02, bool m10, bool m11, bool m12) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. 返回 bool2x3 bool2x3 constructed from arguments. bool2x3(bool2, bool2, bool2) Returns a bool2x3 matrix constructed from three bool2 vectors. public static bool2x3 bool2x3(bool2 c0, bool2 c1, bool2 c2) 参数 c0 bool2 The matrix column c0 will be set to this value. c1 bool2 The matrix column c1 will be set to this value. c2 bool2 The matrix column c2 will be set to this value. 返回 bool2x3 bool2x3 constructed from arguments. bool2x4(bool) Returns a bool2x4 matrix constructed from a single bool value by assigning it to every component. public static bool2x4 bool2x4(bool v) 参数 v bool bool to convert to bool2x4 返回 bool2x4 Converted value. bool2x4(bool, bool, bool, bool, bool, bool, bool, bool) Returns a bool2x4 matrix constructed from from 8 bool values given in row-major order. public static bool2x4 bool2x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m03 bool The matrix at row 0, column 3 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m13 bool The matrix at row 1, column 3 will be set to this value. 返回 bool2x4 bool2x4 constructed from arguments. bool2x4(bool2, bool2, bool2, bool2) Returns a bool2x4 matrix constructed from four bool2 vectors. public static bool2x4 bool2x4(bool2 c0, bool2 c1, bool2 c2, bool2 c3) 参数 c0 bool2 The matrix column c0 will be set to this value. c1 bool2 The matrix column c1 will be set to this value. c2 bool2 The matrix column c2 will be set to this value. c3 bool2 The matrix column c3 will be set to this value. 返回 bool2x4 bool2x4 constructed from arguments. bool3(bool) Returns a bool3 vector constructed from a single bool value by assigning it to every component. public static bool3 bool3(bool v) 参数 v bool bool to convert to bool3 返回 bool3 Converted value. bool3(bool, bool, bool) Returns a bool3 vector constructed from three bool values. public static bool3 bool3(bool x, bool y, bool z) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. z bool The constructed vector's z component will be set to this value. 返回 bool3 bool3 constructed from arguments. bool3(bool, bool2) Returns a bool3 vector constructed from a bool value and a bool2 vector. public static bool3 bool3(bool x, bool2 yz) 参数 x bool The constructed vector's x component will be set to this value. yz bool2 The constructed vector's yz components will be set to this value. 返回 bool3 bool3 constructed from arguments. bool3(bool2, bool) Returns a bool3 vector constructed from a bool2 vector and a bool value. public static bool3 bool3(bool2 xy, bool z) 参数 xy bool2 The constructed vector's xy components will be set to this value. z bool The constructed vector's z component will be set to this value. 返回 bool3 bool3 constructed from arguments. bool3(bool3) Returns a bool3 vector constructed from a bool3 vector. public static bool3 bool3(bool3 xyz) 参数 xyz bool3 The constructed vector's xyz components will be set to this value. 返回 bool3 bool3 constructed from arguments. bool3x2(bool) Returns a bool3x2 matrix constructed from a single bool value by assigning it to every component. public static bool3x2 bool3x2(bool v) 参数 v bool bool to convert to bool3x2 返回 bool3x2 Converted value. bool3x2(bool, bool, bool, bool, bool, bool) Returns a bool3x2 matrix constructed from from 6 bool values given in row-major order. public static bool3x2 bool3x2(bool m00, bool m01, bool m10, bool m11, bool m20, bool m21) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. 返回 bool3x2 bool3x2 constructed from arguments. bool3x2(bool3, bool3) Returns a bool3x2 matrix constructed from two bool3 vectors. public static bool3x2 bool3x2(bool3 c0, bool3 c1) 参数 c0 bool3 The matrix column c0 will be set to this value. c1 bool3 The matrix column c1 will be set to this value. 返回 bool3x2 bool3x2 constructed from arguments. bool3x3(bool) Returns a bool3x3 matrix constructed from a single bool value by assigning it to every component. public static bool3x3 bool3x3(bool v) 参数 v bool bool to convert to bool3x3 返回 bool3x3 Converted value. bool3x3(bool, bool, bool, bool, bool, bool, bool, bool, bool) Returns a bool3x3 matrix constructed from from 9 bool values given in row-major order. public static bool3x3 bool3x3(bool m00, bool m01, bool m02, bool m10, bool m11, bool m12, bool m20, bool m21, bool m22) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. 返回 bool3x3 bool3x3 constructed from arguments. bool3x3(bool3, bool3, bool3) Returns a bool3x3 matrix constructed from three bool3 vectors. public static bool3x3 bool3x3(bool3 c0, bool3 c1, bool3 c2) 参数 c0 bool3 The matrix column c0 will be set to this value. c1 bool3 The matrix column c1 will be set to this value. c2 bool3 The matrix column c2 will be set to this value. 返回 bool3x3 bool3x3 constructed from arguments. bool3x4(bool) Returns a bool3x4 matrix constructed from a single bool value by assigning it to every component. public static bool3x4 bool3x4(bool v) 参数 v bool bool to convert to bool3x4 返回 bool3x4 Converted value. bool3x4(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Returns a bool3x4 matrix constructed from from 12 bool values given in row-major order. public static bool3x4 bool3x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13, bool m20, bool m21, bool m22, bool m23) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m03 bool The matrix at row 0, column 3 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m13 bool The matrix at row 1, column 3 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. m23 bool The matrix at row 2, column 3 will be set to this value. 返回 bool3x4 bool3x4 constructed from arguments. bool3x4(bool3, bool3, bool3, bool3) Returns a bool3x4 matrix constructed from four bool3 vectors. public static bool3x4 bool3x4(bool3 c0, bool3 c1, bool3 c2, bool3 c3) 参数 c0 bool3 The matrix column c0 will be set to this value. c1 bool3 The matrix column c1 will be set to this value. c2 bool3 The matrix column c2 will be set to this value. c3 bool3 The matrix column c3 will be set to this value. 返回 bool3x4 bool3x4 constructed from arguments. bool4(bool) Returns a bool4 vector constructed from a single bool value by assigning it to every component. public static bool4 bool4(bool v) 参数 v bool bool to convert to bool4 返回 bool4 Converted value. bool4(bool, bool, bool, bool) Returns a bool4 vector constructed from four bool values. public static bool4 bool4(bool x, bool y, bool z, bool w) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. z bool The constructed vector's z component will be set to this value. w bool The constructed vector's w component will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool, bool, bool2) Returns a bool4 vector constructed from two bool values and a bool2 vector. public static bool4 bool4(bool x, bool y, bool2 zw) 参数 x bool The constructed vector's x component will be set to this value. y bool The constructed vector's y component will be set to this value. zw bool2 The constructed vector's zw components will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool, bool2, bool) Returns a bool4 vector constructed from a bool value, a bool2 vector and a bool value. public static bool4 bool4(bool x, bool2 yz, bool w) 参数 x bool The constructed vector's x component will be set to this value. yz bool2 The constructed vector's yz components will be set to this value. w bool The constructed vector's w component will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool, bool3) Returns a bool4 vector constructed from a bool value and a bool3 vector. public static bool4 bool4(bool x, bool3 yzw) 参数 x bool The constructed vector's x component will be set to this value. yzw bool3 The constructed vector's yzw components will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool2, bool, bool) Returns a bool4 vector constructed from a bool2 vector and two bool values. public static bool4 bool4(bool2 xy, bool z, bool w) 参数 xy bool2 The constructed vector's xy components will be set to this value. z bool The constructed vector's z component will be set to this value. w bool The constructed vector's w component will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool2, bool2) Returns a bool4 vector constructed from two bool2 vectors. public static bool4 bool4(bool2 xy, bool2 zw) 参数 xy bool2 The constructed vector's xy components will be set to this value. zw bool2 The constructed vector's zw components will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool3, bool) Returns a bool4 vector constructed from a bool3 vector and a bool value. public static bool4 bool4(bool3 xyz, bool w) 参数 xyz bool3 The constructed vector's xyz components will be set to this value. w bool The constructed vector's w component will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4(bool4) Returns a bool4 vector constructed from a bool4 vector. public static bool4 bool4(bool4 xyzw) 参数 xyzw bool4 The constructed vector's xyzw components will be set to this value. 返回 bool4 bool4 constructed from arguments. bool4x2(bool) Returns a bool4x2 matrix constructed from a single bool value by assigning it to every component. public static bool4x2 bool4x2(bool v) 参数 v bool bool to convert to bool4x2 返回 bool4x2 Converted value. bool4x2(bool, bool, bool, bool, bool, bool, bool, bool) Returns a bool4x2 matrix constructed from from 8 bool values given in row-major order. public static bool4x2 bool4x2(bool m00, bool m01, bool m10, bool m11, bool m20, bool m21, bool m30, bool m31) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m30 bool The matrix at row 3, column 0 will be set to this value. m31 bool The matrix at row 3, column 1 will be set to this value. 返回 bool4x2 bool4x2 constructed from arguments. bool4x2(bool4, bool4) Returns a bool4x2 matrix constructed from two bool4 vectors. public static bool4x2 bool4x2(bool4 c0, bool4 c1) 参数 c0 bool4 The matrix column c0 will be set to this value. c1 bool4 The matrix column c1 will be set to this value. 返回 bool4x2 bool4x2 constructed from arguments. bool4x3(bool) Returns a bool4x3 matrix constructed from a single bool value by assigning it to every component. public static bool4x3 bool4x3(bool v) 参数 v bool bool to convert to bool4x3 返回 bool4x3 Converted value. bool4x3(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Returns a bool4x3 matrix constructed from from 12 bool values given in row-major order. public static bool4x3 bool4x3(bool m00, bool m01, bool m02, bool m10, bool m11, bool m12, bool m20, bool m21, bool m22, bool m30, bool m31, bool m32) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. m30 bool The matrix at row 3, column 0 will be set to this value. m31 bool The matrix at row 3, column 1 will be set to this value. m32 bool The matrix at row 3, column 2 will be set to this value. 返回 bool4x3 bool4x3 constructed from arguments. bool4x3(bool4, bool4, bool4) Returns a bool4x3 matrix constructed from three bool4 vectors. public static bool4x3 bool4x3(bool4 c0, bool4 c1, bool4 c2) 参数 c0 bool4 The matrix column c0 will be set to this value. c1 bool4 The matrix column c1 will be set to this value. c2 bool4 The matrix column c2 will be set to this value. 返回 bool4x3 bool4x3 constructed from arguments. bool4x4(bool) Returns a bool4x4 matrix constructed from a single bool value by assigning it to every component. public static bool4x4 bool4x4(bool v) 参数 v bool bool to convert to bool4x4 返回 bool4x4 Converted value. bool4x4(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Returns a bool4x4 matrix constructed from from 16 bool values given in row-major order. public static bool4x4 bool4x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13, bool m20, bool m21, bool m22, bool m23, bool m30, bool m31, bool m32, bool m33) 参数 m00 bool The matrix at row 0, column 0 will be set to this value. m01 bool The matrix at row 0, column 1 will be set to this value. m02 bool The matrix at row 0, column 2 will be set to this value. m03 bool The matrix at row 0, column 3 will be set to this value. m10 bool The matrix at row 1, column 0 will be set to this value. m11 bool The matrix at row 1, column 1 will be set to this value. m12 bool The matrix at row 1, column 2 will be set to this value. m13 bool The matrix at row 1, column 3 will be set to this value. m20 bool The matrix at row 2, column 0 will be set to this value. m21 bool The matrix at row 2, column 1 will be set to this value. m22 bool The matrix at row 2, column 2 will be set to this value. m23 bool The matrix at row 2, column 3 will be set to this value. m30 bool The matrix at row 3, column 0 will be set to this value. m31 bool The matrix at row 3, column 1 will be set to this value. m32 bool The matrix at row 3, column 2 will be set to this value. m33 bool The matrix at row 3, column 3 will be set to this value. 返回 bool4x4 bool4x4 constructed from arguments. bool4x4(bool4, bool4, bool4, bool4) Returns a bool4x4 matrix constructed from four bool4 vectors. public static bool4x4 bool4x4(bool4 c0, bool4 c1, bool4 c2, bool4 c3) 参数 c0 bool4 The matrix column c0 will be set to this value. c1 bool4 The matrix column c1 will be set to this value. c2 bool4 The matrix column c2 will be set to this value. c3 bool4 The matrix column c3 will be set to this value. 返回 bool4x4 bool4x4 constructed from arguments. ceil(double) Returns the result of rounding a double value up to the nearest greater integral value greater or equal to the original value. public static double ceil(double x) 参数 x double Input value. 返回 double The round up to nearest integral value of the input. ceil(float) Returns the result of rounding a float value up to the nearest integral value greater or equal to the original value. public static float ceil(float x) 参数 x float Input value. 返回 float The round up to nearest integral value of the input. ceil(double2) Returns the result of rounding each component of a double2 vector value up to the nearest integral value greater or equal to the original value. public static double2 ceil(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise round up to nearest integral value of the input. ceil(double3) Returns the result of rounding each component of a double3 vector value up to the nearest integral value greater or equal to the original value.. public static double3 ceil(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise round up to nearest integral value of the input. ceil(double4) Returns the result of rounding each component of a double4 vector value up to the nearest integral value greater or equal to the original value. public static double4 ceil(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise round up to nearest integral value of the input. ceil(float2) Returns the result of rounding each component of a float2 vector value up to the nearest value greater or equal to the original value. public static float2 ceil(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise round up to nearest integral value of the input. ceil(float3) Returns the result of rounding each component of a float3 vector value up to the nearest value greater or equal to the original value. public static float3 ceil(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise round up to nearest integral value of the input. ceil(float4) Returns the result of rounding each component of a float4 vector value up to the nearest value greater or equal to the original value. public static float4 ceil(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise round up to nearest integral value of the input. ceillog2(int) Computes the ceiling of the base-2 logarithm of x. public static int ceillog2(int x) 参数 x int Integer to be used as input. 返回 int Ceiling of the base-2 logarithm of x, as an integer. 备注 x must be greater than 0, otherwise the result is undefined. ceillog2(uint) Computes the ceiling of the base-2 logarithm of x. public static int ceillog2(uint x) 参数 x uint Unsigned integer to be used as input. 返回 int Ceiling of the base-2 logarithm of x, as an integer. 备注 x must be greater than 0, otherwise the result is undefined. ceillog2(int2) Computes the componentwise ceiling of the base-2 logarithm of x. public static int2 ceillog2(int2 x) 参数 x int2 int2 to be used as input. 返回 int2 Componentwise ceiling of the base-2 logarithm of x. 备注 Components of x must be greater than 0, otherwise the result for that component is undefined. ceillog2(int3) Computes the componentwise ceiling of the base-2 logarithm of x. public static int3 ceillog2(int3 x) 参数 x int3 int3 to be used as input. 返回 int3 Componentwise ceiling of the base-2 logarithm of x. 备注 Components of x must be greater than 0, otherwise the result for that component is undefined. ceillog2(int4) Computes the componentwise ceiling of the base-2 logarithm of x. public static int4 ceillog2(int4 x) 参数 x int4 int4 to be used as input. 返回 int4 Componentwise ceiling of the base-2 logarithm of x. 备注 Components of x must be greater than 0, otherwise the result for that component is undefined. ceillog2(uint2) Computes the componentwise ceiling of the base-2 logarithm of x. public static int2 ceillog2(uint2 x) 参数 x uint2 uint2 to be used as input. 返回 int2 Componentwise ceiling of the base-2 logarithm of x. 备注 Components of x must be greater than 0, otherwise the result for that component is undefined. ceillog2(uint3) Computes the componentwise ceiling of the base-2 logarithm of x. public static int3 ceillog2(uint3 x) 参数 x uint3 uint3 to be used as input. 返回 int3 Componentwise ceiling of the base-2 logarithm of x. 备注 Components of x must be greater than 0, otherwise the result for that component is undefined. ceillog2(uint4) Computes the componentwise ceiling of the base-2 logarithm of x. public static int4 ceillog2(uint4 x) 参数 x uint4 uint4 to be used as input. 返回 int4 Componentwise ceiling of the base-2 logarithm of x. 备注 Components of x must be greater than 0, otherwise the result for that component is undefined. ceilpow2(int) Returns the smallest power of two greater than or equal to the input. public static int ceilpow2(int x) 参数 x int Input value. 返回 int The smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(long) Returns the smallest power of two greater than or equal to the input. public static long ceilpow2(long x) 参数 x long Input value. 返回 long The smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(uint) Returns the smallest power of two greater than or equal to the input. public static uint ceilpow2(uint x) 参数 x uint Input value. 返回 uint The smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(ulong) Returns the smallest power of two greater than or equal to the input. public static ulong ceilpow2(ulong x) 参数 x ulong Input value. 返回 ulong The smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(int2) Returns the result of a componentwise calculation of the smallest power of two greater than or equal to the input. public static int2 ceilpow2(int2 x) 参数 x int2 Input value. 返回 int2 The componentwise smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(int3) Returns the result of a componentwise calculation of the smallest power of two greater than or equal to the input. public static int3 ceilpow2(int3 x) 参数 x int3 Input value. 返回 int3 The componentwise smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(int4) Returns the result of a componentwise calculation of the smallest power of two greater than or equal to the input. public static int4 ceilpow2(int4 x) 参数 x int4 Input value. 返回 int4 The componentwise smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(uint2) Returns the result of a componentwise calculation of the smallest power of two greater than or equal to the input. public static uint2 ceilpow2(uint2 x) 参数 x uint2 Input value. 返回 uint2 The componentwise smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(uint3) Returns the result of a componentwise calculation of the smallest power of two greater than or equal to the input. public static uint3 ceilpow2(uint3 x) 参数 x uint3 Input value. 返回 uint3 The componentwise smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. ceilpow2(uint4) Returns the result of a componentwise calculation of the smallest power of two greater than or equal to the input. public static uint4 ceilpow2(uint4 x) 参数 x uint4 Input value. 返回 uint4 The componentwise smallest power of two greater than or equal to the input. 备注 Also known as nextpow2. chgsign(float, float) Change the sign of x based on the most significant bit of y [msb(y) ? -x : x]. public static float chgsign(float x, float y) 参数 x float The single precision float to change the sign. y float The single precision float used to test the most significant bit. 返回 float Returns x with changed sign based on y. chgsign(float2, float2) Change the sign of components of x based on the most significant bit of components of y [msb(y) ? -x : x]. public static float2 chgsign(float2 x, float2 y) 参数 x float2 The single precision float vector to change the sign. y float2 The single precision float vector used to test the most significant bit. 返回 float2 Returns vector x with changed sign based on vector y. chgsign(float3, float3) Change the sign of components of x based on the most significant bit of components of y [msb(y) ? -x : x]. public static float3 chgsign(float3 x, float3 y) 参数 x float3 The single precision float vector to change the sign. y float3 The single precision float vector used to test the most significant bit. 返回 float3 Returns vector x with changed sign based on vector y. chgsign(float4, float4) Change the sign of components of x based on the most significant bit of components of y [msb(y) ? -x : x]. public static float4 chgsign(float4 x, float4 y) 参数 x float4 The single precision float vector to change the sign. y float4 The single precision float vector used to test the most significant bit. 返回 float4 Returns vector x with changed sign based on vector y. clamp(double, double, double) Returns the result of clamping the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are double values. public static double clamp(double valueToClamp, double lowerBound, double upperBound) 参数 valueToClamp double Input value to be clamped. lowerBound double Lower bound of the interval. upperBound double Upper bound of the interval. 返回 double The clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(int, int, int) Returns the result of clamping the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are int values. public static int clamp(int valueToClamp, int lowerBound, int upperBound) 参数 valueToClamp int Input value to be clamped. lowerBound int Lower bound of the interval. upperBound int Upper bound of the interval. 返回 int The clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(long, long, long) Returns the result of clamping the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are long values. public static long clamp(long valueToClamp, long lowerBound, long upperBound) 参数 valueToClamp long Input value to be clamped. lowerBound long Lower bound of the interval. upperBound long Upper bound of the interval. 返回 long The clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(float, float, float) Returns the result of clamping the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are float values. public static float clamp(float valueToClamp, float lowerBound, float upperBound) 参数 valueToClamp float Input value to be clamped. lowerBound float Lower bound of the interval. upperBound float Upper bound of the interval. 返回 float The clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(uint, uint, uint) Returns the result of clamping the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are uint values. public static uint clamp(uint valueToClamp, uint lowerBound, uint upperBound) 参数 valueToClamp uint Input value to be clamped. lowerBound uint Lower bound of the interval. upperBound uint Upper bound of the interval. 返回 uint The clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(ulong, ulong, ulong) Returns the result of clamping the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are ulong values. public static ulong clamp(ulong valueToClamp, ulong lowerBound, ulong upperBound) 参数 valueToClamp ulong Input value to be clamped. lowerBound ulong Lower bound of the interval. upperBound ulong Upper bound of the interval. 返回 ulong The clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(double2, double2, double2) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are double2 vectors. public static double2 clamp(double2 valueToClamp, double2 lowerBound, double2 upperBound) 参数 valueToClamp double2 Input value to be clamped. lowerBound double2 Lower bound of the interval. upperBound double2 Upper bound of the interval. 返回 double2 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(double3, double3, double3) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are double3 vectors. public static double3 clamp(double3 valueToClamp, double3 lowerBound, double3 upperBound) 参数 valueToClamp double3 Input value to be clamped. lowerBound double3 Lower bound of the interval. upperBound double3 Upper bound of the interval. 返回 double3 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(double4, double4, double4) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are double4 vectors. public static double4 clamp(double4 valueToClamp, double4 lowerBound, double4 upperBound) 参数 valueToClamp double4 Input value to be clamped. lowerBound double4 Lower bound of the interval. upperBound double4 Upper bound of the interval. 返回 double4 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(float2, float2, float2) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are float2 vectors. public static float2 clamp(float2 valueToClamp, float2 lowerBound, float2 upperBound) 参数 valueToClamp float2 Input value to be clamped. lowerBound float2 Lower bound of the interval. upperBound float2 Upper bound of the interval. 返回 float2 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(float3, float3, float3) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are float3 vectors. public static float3 clamp(float3 valueToClamp, float3 lowerBound, float3 upperBound) 参数 valueToClamp float3 Input value to be clamped. lowerBound float3 Lower bound of the interval. upperBound float3 Upper bound of the interval. 返回 float3 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(float4, float4, float4) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are float4 vectors. public static float4 clamp(float4 valueToClamp, float4 lowerBound, float4 upperBound) 参数 valueToClamp float4 Input value to be clamped. lowerBound float4 Lower bound of the interval. upperBound float4 Upper bound of the interval. 返回 float4 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(int2, int2, int2) Returns the result of a componentwise clamping of the int2 x into the interval [a, b], where a and b are int2 vectors. public static int2 clamp(int2 valueToClamp, int2 lowerBound, int2 upperBound) 参数 valueToClamp int2 Input value to be clamped. lowerBound int2 Lower bound of the interval. upperBound int2 Upper bound of the interval. 返回 int2 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(int3, int3, int3) Returns the result of a componentwise clamping of the int3 x into the interval [a, b], where x, a and b are int3 vectors. public static int3 clamp(int3 valueToClamp, int3 lowerBound, int3 upperBound) 参数 valueToClamp int3 Input value to be clamped. lowerBound int3 Lower bound of the interval. upperBound int3 Upper bound of the interval. 返回 int3 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(int4, int4, int4) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are int4 vectors. public static int4 clamp(int4 valueToClamp, int4 lowerBound, int4 upperBound) 参数 valueToClamp int4 Input value to be clamped. lowerBound int4 Lower bound of the interval. upperBound int4 Upper bound of the interval. 返回 int4 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(uint2, uint2, uint2) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are uint2 vectors. public static uint2 clamp(uint2 valueToClamp, uint2 lowerBound, uint2 upperBound) 参数 valueToClamp uint2 Input value to be clamped. lowerBound uint2 Lower bound of the interval. upperBound uint2 Upper bound of the interval. 返回 uint2 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(uint3, uint3, uint3) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are uint3 vectors. public static uint3 clamp(uint3 valueToClamp, uint3 lowerBound, uint3 upperBound) 参数 valueToClamp uint3 Input value to be clamped. lowerBound uint3 Lower bound of the interval. upperBound uint3 Upper bound of the interval. 返回 uint3 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. clamp(uint4, uint4, uint4) Returns the result of a componentwise clamping of the value valueToClamp into the interval (inclusive) [lowerBound, upperBound], where valueToClamp, lowerBound and upperBound are uint4 vectors. public static uint4 clamp(uint4 valueToClamp, uint4 lowerBound, uint4 upperBound) 参数 valueToClamp uint4 Input value to be clamped. lowerBound uint4 Lower bound of the interval. upperBound uint4 Upper bound of the interval. 返回 uint4 The componentwise clamping of the input valueToClamp into the interval (inclusive) [lowerBound, upperBound]. cmax(double2) Returns the maximum component of a double2 vector. public static double cmax(double2 x) 参数 x double2 The vector to use when computing the maximum component. 返回 double The value of the maximum component of the vector. cmax(double3) Returns the maximum component of a double3 vector. public static double cmax(double3 x) 参数 x double3 The vector to use when computing the maximum component. 返回 double The value of the maximum component of the vector. cmax(double4) Returns the maximum component of a double4 vector. public static double cmax(double4 x) 参数 x double4 The vector to use when computing the maximum component. 返回 double The value of the maximum component of the vector. cmax(float2) Returns the maximum component of a float2 vector. public static float cmax(float2 x) 参数 x float2 The vector to use when computing the maximum component. 返回 float The value of the maximum component of the vector. cmax(float3) Returns the maximum component of a float3 vector. public static float cmax(float3 x) 参数 x float3 The vector to use when computing the maximum component. 返回 float The value of the maximum component of the vector. cmax(float4) Returns the maximum component of a float4 vector. public static float cmax(float4 x) 参数 x float4 The vector to use when computing the maximum component. 返回 float The value of the maximum component of the vector. cmax(int2) Returns the maximum component of an int2 vector. public static int cmax(int2 x) 参数 x int2 The vector to use when computing the maximum component. 返回 int The value of the maximum component of the vector. cmax(int3) Returns the maximum component of an int3 vector. public static int cmax(int3 x) 参数 x int3 The vector to use when computing the maximum component. 返回 int The value of the maximum component of the vector. cmax(int4) Returns the maximum component of an int4 vector. public static int cmax(int4 x) 参数 x int4 The vector to use when computing the maximum component. 返回 int The value of the maximum component of the vector. cmax(uint2) Returns the maximum component of a uint2 vector. public static uint cmax(uint2 x) 参数 x uint2 The vector to use when computing the maximum component. 返回 uint The value of the maximum component of the vector. cmax(uint3) Returns the maximum component of a uint3 vector. public static uint cmax(uint3 x) 参数 x uint3 The vector to use when computing the maximum component. 返回 uint The value of the maximum component of the vector. cmax(uint4) Returns the maximum component of a uint4 vector. public static uint cmax(uint4 x) 参数 x uint4 The vector to use when computing the maximum component. 返回 uint The value of the maximum component of the vector. cmin(double2) Returns the minimum component of a double2 vector. public static double cmin(double2 x) 参数 x double2 The vector to use when computing the minimum component. 返回 double The value of the minimum component of the vector. cmin(double3) Returns the minimum component of a double3 vector. public static double cmin(double3 x) 参数 x double3 The vector to use when computing the minimum component. 返回 double The value of the minimum component of the vector. cmin(double4) Returns the minimum component of a double4 vector. public static double cmin(double4 x) 参数 x double4 The vector to use when computing the minimum component. 返回 double The value of the minimum component of the vector. cmin(float2) Returns the minimum component of a float2 vector. public static float cmin(float2 x) 参数 x float2 The vector to use when computing the minimum component. 返回 float The value of the minimum component of the vector. cmin(float3) Returns the minimum component of a float3 vector. public static float cmin(float3 x) 参数 x float3 The vector to use when computing the minimum component. 返回 float The value of the minimum component of the vector. cmin(float4) Returns the minimum component of a float4 vector. public static float cmin(float4 x) 参数 x float4 The vector to use when computing the minimum component. 返回 float The value of the minimum component of the vector. cmin(int2) Returns the minimum component of an int2 vector. public static int cmin(int2 x) 参数 x int2 The vector to use when computing the minimum component. 返回 int The value of the minimum component of the vector. cmin(int3) Returns the minimum component of an int3 vector. public static int cmin(int3 x) 参数 x int3 The vector to use when computing the minimum component. 返回 int The value of the minimum component of the vector. cmin(int4) Returns the minimum component of an int4 vector. public static int cmin(int4 x) 参数 x int4 The vector to use when computing the minimum component. 返回 int The value of the minimum component of the vector. cmin(uint2) Returns the minimum component of a uint2 vector. public static uint cmin(uint2 x) 参数 x uint2 The vector to use when computing the minimum component. 返回 uint The value of the minimum component of the vector. cmin(uint3) Returns the minimum component of a uint3 vector. public static uint cmin(uint3 x) 参数 x uint3 The vector to use when computing the minimum component. 返回 uint The value of the minimum component of the vector. cmin(uint4) Returns the minimum component of a uint4 vector. public static uint cmin(uint4 x) 参数 x uint4 The vector to use when computing the minimum component. 返回 uint The value of the minimum component of the vector. compress(int*, int, int4, bool4) Packs components with an enabled mask to the left. public static int compress(int* output, int index, int4 val, bool4 mask) 参数 output int* Pointer to packed output array where enabled components should be stored to. index int Index into output array where first enabled component should be stored to. val int4 The value to to compress. mask bool4 Mask indicating which components are enabled. 返回 int Index to element after the last one stored. 备注 This function is also known as left packing. The effect of this function is to filter out components that are not enabled and leave an output buffer tightly packed with only the enabled components. A common use case is if you perform intersection tests on arrays of data in structure of arrays (SoA) form and need to produce an output array of the things that intersected. compress(float*, int, float4, bool4) Packs components with an enabled mask to the left. public static int compress(float* output, int index, float4 val, bool4 mask) 参数 output float* Pointer to packed output array where enabled components should be stored to. index int Index into output array where first enabled component should be stored to. val float4 The value to to compress. mask bool4 Mask indicating which components are enabled. 返回 int Index to element after the last one stored. 备注 This function is also known as left packing. The effect of this function is to filter out components that are not enabled and leave an output buffer tightly packed with only the enabled components. A common use case is if you perform intersection tests on arrays of data in structure of arrays (SoA) form and need to produce an output array of the things that intersected. compress(uint*, int, uint4, bool4) Packs components with an enabled mask to the left. public static int compress(uint* output, int index, uint4 val, bool4 mask) 参数 output uint* Pointer to packed output array where enabled components should be stored to. index int Index into output array where first enabled component should be stored to. val uint4 The value to to compress. mask bool4 Mask indicating which components are enabled. 返回 int Index to element after the last one stored. 备注 This function is also known as left packing. The effect of this function is to filter out components that are not enabled and leave an output buffer tightly packed with only the enabled components. A common use case is if you perform intersection tests on arrays of data in structure of arrays (SoA) form and need to produce an output array of the things that intersected. conjugate(quaternion) Returns the conjugate of a quaternion value. public static quaternion conjugate(quaternion q) 参数 q quaternion The quaternion to conjugate. 返回 quaternion The conjugate of the input quaternion. cos(double) Returns the cosine of a double value. public static double cos(double x) 参数 x double Input value. 返回 double The cosine cosine of the input. cos(float) Returns the cosine of a float value. public static float cos(float x) 参数 x float Input value. 返回 float The cosine cosine of the input. cos(double2) Returns the componentwise cosine of a double2 vector. public static double2 cos(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise cosine cosine of the input. cos(double3) Returns the componentwise cosine of a double3 vector. public static double3 cos(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise cosine cosine of the input. cos(double4) Returns the componentwise cosine of a double4 vector. public static double4 cos(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise cosine cosine of the input. cos(float2) Returns the componentwise cosine of a float2 vector. public static float2 cos(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise cosine cosine of the input. cos(float3) Returns the componentwise cosine of a float3 vector. public static float3 cos(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise cosine cosine of the input. cos(float4) Returns the componentwise cosine of a float4 vector. public static float4 cos(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise cosine cosine of the input. cosh(double) Returns the hyperbolic cosine of a double value. public static double cosh(double x) 参数 x double Input value. 返回 double The hyperbolic cosine of the input. cosh(float) Returns the hyperbolic cosine of a float value. public static float cosh(float x) 参数 x float Input value. 返回 float The hyperbolic cosine of the input. cosh(double2) Returns the componentwise hyperbolic cosine of a double2 vector. public static double2 cosh(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise hyperbolic cosine of the input. cosh(double3) Returns the componentwise hyperbolic cosine of a double3 vector. public static double3 cosh(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise hyperbolic cosine of the input. cosh(double4) Returns the componentwise hyperbolic cosine of a double4 vector. public static double4 cosh(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise hyperbolic cosine of the input. cosh(float2) Returns the componentwise hyperbolic cosine of a float2 vector. public static float2 cosh(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise hyperbolic cosine of the input. cosh(float3) Returns the componentwise hyperbolic cosine of a float3 vector. public static float3 cosh(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise hyperbolic cosine of the input. cosh(float4) Returns the componentwise hyperbolic cosine of a float4 vector. public static float4 cosh(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise hyperbolic cosine of the input. countbits(int) Returns number of 1-bits in the binary representation of an int value. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int countbits(int x) 参数 x int int value in which to count bits set to 1. 返回 int Number of bits set to 1 within x. countbits(long) Returns number of 1-bits in the binary representation of a long value. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int countbits(long x) 参数 x long Number in which to count bits. 返回 int Number of bits set to 1 within x. countbits(uint) Returns number of 1-bits in the binary representation of a uint value. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int countbits(uint x) 参数 x uint Number in which to count bits. 返回 int Number of bits set to 1 within x. countbits(ulong) Returns number of 1-bits in the binary representation of a ulong value. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int countbits(ulong x) 参数 x ulong Number in which to count bits. 返回 int Number of bits set to 1 within x. countbits(int2) Returns component-wise number of 1-bits in the binary representation of an int2 vector. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int2 countbits(int2 x) 参数 x int2 int2 value in which to count bits for each component. 返回 int2 int2 containing number of bits set to 1 within each component of x. countbits(int3) Returns component-wise number of 1-bits in the binary representation of an int3 vector. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int3 countbits(int3 x) 参数 x int3 Number in which to count bits. 返回 int3 int3 containing number of bits set to 1 within each component of x. countbits(int4) Returns component-wise number of 1-bits in the binary representation of an int4 vector. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int4 countbits(int4 x) 参数 x int4 Number in which to count bits. 返回 int4 int4 containing number of bits set to 1 within each component of x. countbits(uint2) Returns component-wise number of 1-bits in the binary representation of a uint2 vector. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int2 countbits(uint2 x) 参数 x uint2 Number in which to count bits. 返回 int2 int2 containing number of bits set to 1 within each component of x. countbits(uint3) Returns component-wise number of 1-bits in the binary representation of a uint3 vector. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int3 countbits(uint3 x) 参数 x uint3 Number in which to count bits. 返回 int3 int3 containing number of bits set to 1 within each component of x. countbits(uint4) Returns component-wise number of 1-bits in the binary representation of a uint4 vector. Also known as the Hamming weight, popcnt on x86, and vcnt on ARM. public static int4 countbits(uint4 x) 参数 x uint4 Number in which to count bits. 返回 int4 int4 containing number of bits set to 1 within each component of x. cross(double3, double3) Returns the cross product of two double3 vectors. public static double3 cross(double3 x, double3 y) 参数 x double3 First vector to use in cross product. y double3 Second vector to use in cross product. 返回 double3 The cross product of x and y. cross(float3, float3) Returns the cross product of two float3 vectors. public static float3 cross(float3 x, float3 y) 参数 x float3 First vector to use in cross product. y float3 Second vector to use in cross product. 返回 float3 The cross product of x and y. csum(double2) Returns the horizontal sum of components of a double2 vector. public static double csum(double2 x) 参数 x double2 The vector to use when computing the horizontal sum. 返回 double The horizontal sum of of components of the vector. csum(double3) Returns the horizontal sum of components of a double3 vector. public static double csum(double3 x) 参数 x double3 The vector to use when computing the horizontal sum. 返回 double The horizontal sum of of components of the vector. csum(double4) Returns the horizontal sum of components of a double4 vector. public static double csum(double4 x) 参数 x double4 The vector to use when computing the horizontal sum. 返回 double The horizontal sum of of components of the vector. csum(float2) Returns the horizontal sum of components of a float2 vector. public static float csum(float2 x) 参数 x float2 The vector to use when computing the horizontal sum. 返回 float The horizontal sum of of components of the vector. csum(float3) Returns the horizontal sum of components of a float3 vector. public static float csum(float3 x) 参数 x float3 The vector to use when computing the horizontal sum. 返回 float The horizontal sum of of components of the vector. csum(float4) Returns the horizontal sum of components of a float4 vector. public static float csum(float4 x) 参数 x float4 The vector to use when computing the horizontal sum. 返回 float The horizontal sum of of components of the vector. csum(int2) Returns the horizontal sum of components of an int2 vector. public static int csum(int2 x) 参数 x int2 The vector to use when computing the horizontal sum. 返回 int The horizontal sum of of components of the vector. csum(int3) Returns the horizontal sum of components of an int3 vector. public static int csum(int3 x) 参数 x int3 The vector to use when computing the horizontal sum. 返回 int The horizontal sum of of components of the vector. csum(int4) Returns the horizontal sum of components of an int4 vector. public static int csum(int4 x) 参数 x int4 The vector to use when computing the horizontal sum. 返回 int The horizontal sum of of components of the vector. csum(uint2) Returns the horizontal sum of components of a uint2 vector. public static uint csum(uint2 x) 参数 x uint2 The vector to use when computing the horizontal sum. 返回 uint The horizontal sum of of components of the vector. csum(uint3) Returns the horizontal sum of components of a uint3 vector. public static uint csum(uint3 x) 参数 x uint3 The vector to use when computing the horizontal sum. 返回 uint The horizontal sum of of components of the vector. csum(uint4) Returns the horizontal sum of components of a uint4 vector. public static uint csum(uint4 x) 参数 x uint4 The vector to use when computing the horizontal sum. 返回 uint The horizontal sum of of components of the vector. decompose(AffineTransform, out float3, out quaternion, out float3) Decomposes the AffineTransform in translation, rotation and scale. public static void decompose(AffineTransform a, out float3 translation, out quaternion rotation, out float3 scale) 参数 a AffineTransform The AffineTransform translation float3 The decomposed translation vector of the AffineTransform. rotation quaternion The decomposed rotation quaternion of the AffineTransform. scale float3 The decomposed scale of the AffineTransform. degrees(double) Returns the result of converting a double value from radians to degrees. public static double degrees(double x) 参数 x double Angle in radians. 返回 double Angle converted to degrees. degrees(float) Returns the result of converting a double value from radians to degrees. public static float degrees(float x) 参数 x float Angle in radians. 返回 float Angle converted to degrees. degrees(double2) Returns the result of a componentwise conversion of a double2 vector from radians to degrees. public static double2 degrees(double2 x) 参数 x double2 Vector containing angles in radians. 返回 double2 Vector containing angles converted to degrees. degrees(double3) Returns the result of a componentwise conversion of a double3 vector from radians to degrees. public static double3 degrees(double3 x) 参数 x double3 Vector containing angles in radians. 返回 double3 Vector containing values converted to degrees. degrees(double4) Returns the result of a componentwise conversion of a double4 vector from radians to degrees. public static double4 degrees(double4 x) 参数 x double4 Vector containing angles in radians. 返回 double4 Vector containing angles converted to degrees. degrees(float2) Returns the result of a componentwise conversion of a double2 vector from radians to degrees. public static float2 degrees(float2 x) 参数 x float2 Vector containing angles in radians. 返回 float2 Vector containing angles converted to degrees. degrees(float3) Returns the result of a componentwise conversion of a double3 vector from radians to degrees. public static float3 degrees(float3 x) 参数 x float3 Vector containing angles in radians. 返回 float3 Vector containing angles converted to degrees. degrees(float4) Returns the result of a componentwise conversion of a double4 vector from radians to degrees. public static float4 degrees(float4 x) 参数 x float4 Vector containing angles in radians. 返回 float4 Vector containing angles converted to degrees. determinant(double2x2) Returns the determinant of a double2x2 matrix. public static double determinant(double2x2 m) 参数 m double2x2 Matrix to use when computing determinant. 返回 double The determinant of the matrix. determinant(double3x3) Returns the determinant of a double3x3 matrix. public static double determinant(double3x3 m) 参数 m double3x3 Matrix to use when computing determinant. 返回 double The determinant of the matrix. determinant(double4x4) Returns the determinant of a double4x4 matrix. public static double determinant(double4x4 m) 参数 m double4x4 Matrix to use when computing determinant. 返回 double The determinant of the matrix. determinant(float2x2) Returns the determinant of a float2x2 matrix. public static float determinant(float2x2 m) 参数 m float2x2 Matrix to use when computing determinant. 返回 float The determinant of the matrix. determinant(float3x3) Returns the determinant of a float3x3 matrix. public static float determinant(float3x3 m) 参数 m float3x3 Matrix to use when computing determinant. 返回 float The determinant of the matrix. determinant(float4x4) Returns the determinant of a float4x4 matrix. public static float determinant(float4x4 m) 参数 m float4x4 Matrix to use when computing determinant. 返回 float The determinant of the matrix. determinant(int2x2) Returns the determinant of a int2x2 matrix. public static int determinant(int2x2 m) 参数 m int2x2 Matrix to use when computing determinant. 返回 int The determinant of the matrix. determinant(int3x3) Returns the determinant of a int3x3 matrix. public static int determinant(int3x3 m) 参数 m int3x3 Matrix to use when computing determinant. 返回 int The determinant of the matrix. determinant(int4x4) Returns the determinant of a int4x4 matrix. public static int determinant(int4x4 m) 参数 m int4x4 Matrix to use when computing determinant. 返回 int The determinant of the matrix. distance(double, double) Returns the distance between two double values. public static double distance(double x, double y) 参数 x double First value to use in distance computation. y double Second value to use in distance computation. 返回 double The distance between x and y. distance(float, float) Returns the distance between two float values. public static float distance(float x, float y) 参数 x float First value to use in distance computation. y float Second value to use in distance computation. 返回 float The distance between x and y. distance(double2, double2) Returns the distance between two double2 vectors. public static double distance(double2 x, double2 y) 参数 x double2 First vector to use in distance computation. y double2 Second vector to use in distance computation. 返回 double The distance between x and y. distance(double3, double3) Returns the distance between two double3 vectors. public static double distance(double3 x, double3 y) 参数 x double3 First vector to use in distance computation. y double3 Second vector to use in distance computation. 返回 double The distance between x and y. distance(double4, double4) Returns the distance between two double4 vectors. public static double distance(double4 x, double4 y) 参数 x double4 First vector to use in distance computation. y double4 Second vector to use in distance computation. 返回 double The distance between x and y. distance(float2, float2) Returns the distance between two float2 vectors. public static float distance(float2 x, float2 y) 参数 x float2 First vector to use in distance computation. y float2 Second vector to use in distance computation. 返回 float The distance between x and y. distance(float3, float3) Returns the distance between two float3 vectors. public static float distance(float3 x, float3 y) 参数 x float3 First vector to use in distance computation. y float3 Second vector to use in distance computation. 返回 float The distance between x and y. distance(float4, float4) Returns the distance between two float4 vectors. public static float distance(float4 x, float4 y) 参数 x float4 First vector to use in distance computation. y float4 Second vector to use in distance computation. 返回 float The distance between x and y. distancesq(double, double) Returns the squared distance between two double values. public static double distancesq(double x, double y) 参数 x double First value to use in distance computation. y double Second value to use in distance computation. 返回 double The squared distance between x and y. distancesq(float, float) Returns the squared distance between two float values. public static float distancesq(float x, float y) 参数 x float First value to use in distance computation. y float Second value to use in distance computation. 返回 float The squared distance between x and y. distancesq(double2, double2) Returns the squared distance between two double2 vectors. public static double distancesq(double2 x, double2 y) 参数 x double2 First vector to use in distance computation. y double2 Second vector to use in distance computation. 返回 double The squared distance between x and y. distancesq(double3, double3) Returns the squared distance between two double3 vectors. public static double distancesq(double3 x, double3 y) 参数 x double3 First vector to use in distance computation. y double3 Second vector to use in distance computation. 返回 double The squared distance between x and y. distancesq(double4, double4) Returns the squared distance between two double4 vectors. public static double distancesq(double4 x, double4 y) 参数 x double4 First vector to use in distance computation. y double4 Second vector to use in distance computation. 返回 double The squared distance between x and y. distancesq(float2, float2) Returns the squared distance between two float2 vectors. public static float distancesq(float2 x, float2 y) 参数 x float2 First vector to use in distance computation. y float2 Second vector to use in distance computation. 返回 float The squared distance between x and y. distancesq(float3, float3) Returns the squared distance between two float3 vectors. public static float distancesq(float3 x, float3 y) 参数 x float3 First vector to use in distance computation. y float3 Second vector to use in distance computation. 返回 float The squared distance between x and y. distancesq(float4, float4) Returns the squared distance between two float4 vectors. public static float distancesq(float4 x, float4 y) 参数 x float4 First vector to use in distance computation. y float4 Second vector to use in distance computation. 返回 float The squared distance between x and y. dot(double, double) Returns the dot product of two double values. Equivalent to multiplication. public static double dot(double x, double y) 参数 x double The first value. y double The second value. 返回 double The dot product of two values. dot(int, int) Returns the dot product of two int values. Equivalent to multiplication. public static int dot(int x, int y) 参数 x int The first value. y int The second value. 返回 int The dot product of two values. dot(float, float) Returns the dot product of two float values. Equivalent to multiplication. public static float dot(float x, float y) 参数 x float The first value. y float The second value. 返回 float The dot product of two values. dot(uint, uint) Returns the dot product of two uint values. Equivalent to multiplication. public static uint dot(uint x, uint y) 参数 x uint The first value. y uint The second value. 返回 uint The dot product of two values. dot(double2, double2) Returns the dot product of two double2 vectors. public static double dot(double2 x, double2 y) 参数 x double2 The first vector. y double2 The second vector. 返回 double The dot product of two vectors. dot(double3, double3) Returns the dot product of two double3 vectors. public static double dot(double3 x, double3 y) 参数 x double3 The first vector. y double3 The second vector. 返回 double The dot product of two vectors. dot(double4, double4) Returns the dot product of two double4 vectors. public static double dot(double4 x, double4 y) 参数 x double4 The first vector. y double4 The second vector. 返回 double The dot product of two vectors. dot(float2, float2) Returns the dot product of two float2 vectors. public static float dot(float2 x, float2 y) 参数 x float2 The first vector. y float2 The second vector. 返回 float The dot product of two vectors. dot(float3, float3) Returns the dot product of two float3 vectors. public static float dot(float3 x, float3 y) 参数 x float3 The first vector. y float3 The second vector. 返回 float The dot product of two vectors. dot(float4, float4) Returns the dot product of two float4 vectors. public static float dot(float4 x, float4 y) 参数 x float4 The first vector. y float4 The second vector. 返回 float The dot product of two vectors. dot(int2, int2) Returns the dot product of two int2 vectors. public static int dot(int2 x, int2 y) 参数 x int2 The first vector. y int2 The second vector. 返回 int The dot product of two vectors. dot(int3, int3) Returns the dot product of two int3 vectors. public static int dot(int3 x, int3 y) 参数 x int3 The first vector. y int3 The second vector. 返回 int The dot product of two vectors. dot(int4, int4) Returns the dot product of two int4 vectors. public static int dot(int4 x, int4 y) 参数 x int4 The first vector. y int4 The second vector. 返回 int The dot product of two vectors. dot(quaternion, quaternion) Returns the dot product of two quaternions. public static float dot(quaternion a, quaternion b) 参数 a quaternion The first quaternion. b quaternion The second quaternion. 返回 float The dot product of two quaternions. dot(uint2, uint2) Returns the dot product of two uint2 vectors. public static uint dot(uint2 x, uint2 y) 参数 x uint2 The first vector. y uint2 The second vector. 返回 uint The dot product of two vectors. dot(uint3, uint3) Returns the dot product of two uint3 vectors. public static uint dot(uint3 x, uint3 y) 参数 x uint3 The first vector. y uint3 The second vector. 返回 uint The dot product of two vectors. dot(uint4, uint4) Returns the dot product of two uint4 vectors. public static uint dot(uint4 x, uint4 y) 参数 x uint4 The first vector. y uint4 The second vector. 返回 uint The dot product of two vectors. double2(bool) Returns a double2 vector constructed from a single bool value by converting it to double and assigning it to every component. public static double2 double2(bool v) 参数 v bool bool to convert to double2 返回 double2 Converted value. double2(double) Returns a double2 vector constructed from a single double value by assigning it to every component. public static double2 double2(double v) 参数 v double double to convert to double2 返回 double2 Converted value. double2(double, double) Returns a double2 vector constructed from two double values. public static double2 double2(double x, double y) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. 返回 double2 double2 constructed from arguments. double2(int) Returns a double2 vector constructed from a single int value by converting it to double and assigning it to every component. public static double2 double2(int v) 参数 v int int to convert to double2 返回 double2 Converted value. double2(float) Returns a double2 vector constructed from a single float value by converting it to double and assigning it to every component. public static double2 double2(float v) 参数 v float float to convert to double2 返回 double2 Converted value. double2(uint) Returns a double2 vector constructed from a single uint value by converting it to double and assigning it to every component. public static double2 double2(uint v) 参数 v uint uint to convert to double2 返回 double2 Converted value. double2(bool2) Return a double2 vector constructed from a bool2 vector by componentwise conversion. public static double2 double2(bool2 v) 参数 v bool2 bool2 to convert to double2 返回 double2 Converted value. double2(double2) Returns a double2 vector constructed from a double2 vector. public static double2 double2(double2 xy) 参数 xy double2 The constructed vector's xy components will be set to this value. 返回 double2 double2 constructed from arguments. double2(float2) Return a double2 vector constructed from a float2 vector by componentwise conversion. public static double2 double2(float2 v) 参数 v float2 float2 to convert to double2 返回 double2 Converted value. double2(half) Returns a double2 vector constructed from a single half value by converting it to double and assigning it to every component. public static double2 double2(half v) 参数 v half half to convert to double2 返回 double2 Converted value. double2(half2) Return a double2 vector constructed from a half2 vector by componentwise conversion. public static double2 double2(half2 v) 参数 v half2 half2 to convert to double2 返回 double2 Converted value. double2(int2) Return a double2 vector constructed from a int2 vector by componentwise conversion. public static double2 double2(int2 v) 参数 v int2 int2 to convert to double2 返回 double2 Converted value. double2(uint2) Return a double2 vector constructed from a uint2 vector by componentwise conversion. public static double2 double2(uint2 v) 参数 v uint2 uint2 to convert to double2 返回 double2 Converted value. double2x2(bool) Returns a double2x2 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double2x2 double2x2(bool v) 参数 v bool bool to convert to double2x2 返回 double2x2 Converted value. double2x2(double) Returns a double2x2 matrix constructed from a single double value by assigning it to every component. public static double2x2 double2x2(double v) 参数 v double double to convert to double2x2 返回 double2x2 Converted value. double2x2(double, double, double, double) Returns a double2x2 matrix constructed from from 4 double values given in row-major order. public static double2x2 double2x2(double m00, double m01, double m10, double m11) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. 返回 double2x2 double2x2 constructed from arguments. double2x2(int) Returns a double2x2 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double2x2 double2x2(int v) 参数 v int int to convert to double2x2 返回 double2x2 Converted value. double2x2(float) Returns a double2x2 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double2x2 double2x2(float v) 参数 v float float to convert to double2x2 返回 double2x2 Converted value. double2x2(uint) Returns a double2x2 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double2x2 double2x2(uint v) 参数 v uint uint to convert to double2x2 返回 double2x2 Converted value. double2x2(bool2x2) Return a double2x2 matrix constructed from a bool2x2 matrix by componentwise conversion. public static double2x2 double2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to double2x2 返回 double2x2 Converted value. double2x2(double2, double2) Returns a double2x2 matrix constructed from two double2 vectors. public static double2x2 double2x2(double2 c0, double2 c1) 参数 c0 double2 The matrix column c0 will be set to this value. c1 double2 The matrix column c1 will be set to this value. 返回 double2x2 double2x2 constructed from arguments. double2x2(float2x2) Return a double2x2 matrix constructed from a float2x2 matrix by componentwise conversion. public static double2x2 double2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to double2x2 返回 double2x2 Converted value. double2x2(int2x2) Return a double2x2 matrix constructed from a int2x2 matrix by componentwise conversion. public static double2x2 double2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to double2x2 返回 double2x2 Converted value. double2x2(uint2x2) Return a double2x2 matrix constructed from a uint2x2 matrix by componentwise conversion. public static double2x2 double2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to double2x2 返回 double2x2 Converted value. double2x3(bool) Returns a double2x3 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double2x3 double2x3(bool v) 参数 v bool bool to convert to double2x3 返回 double2x3 Converted value. double2x3(double) Returns a double2x3 matrix constructed from a single double value by assigning it to every component. public static double2x3 double2x3(double v) 参数 v double double to convert to double2x3 返回 double2x3 Converted value. double2x3(double, double, double, double, double, double) Returns a double2x3 matrix constructed from from 6 double values given in row-major order. public static double2x3 double2x3(double m00, double m01, double m02, double m10, double m11, double m12) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. 返回 double2x3 double2x3 constructed from arguments. double2x3(int) Returns a double2x3 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double2x3 double2x3(int v) 参数 v int int to convert to double2x3 返回 double2x3 Converted value. double2x3(float) Returns a double2x3 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double2x3 double2x3(float v) 参数 v float float to convert to double2x3 返回 double2x3 Converted value. double2x3(uint) Returns a double2x3 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double2x3 double2x3(uint v) 参数 v uint uint to convert to double2x3 返回 double2x3 Converted value. double2x3(bool2x3) Return a double2x3 matrix constructed from a bool2x3 matrix by componentwise conversion. public static double2x3 double2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to double2x3 返回 double2x3 Converted value. double2x3(double2, double2, double2) Returns a double2x3 matrix constructed from three double2 vectors. public static double2x3 double2x3(double2 c0, double2 c1, double2 c2) 参数 c0 double2 The matrix column c0 will be set to this value. c1 double2 The matrix column c1 will be set to this value. c2 double2 The matrix column c2 will be set to this value. 返回 double2x3 double2x3 constructed from arguments. double2x3(float2x3) Return a double2x3 matrix constructed from a float2x3 matrix by componentwise conversion. public static double2x3 double2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to double2x3 返回 double2x3 Converted value. double2x3(int2x3) Return a double2x3 matrix constructed from a int2x3 matrix by componentwise conversion. public static double2x3 double2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to double2x3 返回 double2x3 Converted value. double2x3(uint2x3) Return a double2x3 matrix constructed from a uint2x3 matrix by componentwise conversion. public static double2x3 double2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to double2x3 返回 double2x3 Converted value. double2x4(bool) Returns a double2x4 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double2x4 double2x4(bool v) 参数 v bool bool to convert to double2x4 返回 double2x4 Converted value. double2x4(double) Returns a double2x4 matrix constructed from a single double value by assigning it to every component. public static double2x4 double2x4(double v) 参数 v double double to convert to double2x4 返回 double2x4 Converted value. double2x4(double, double, double, double, double, double, double, double) Returns a double2x4 matrix constructed from from 8 double values given in row-major order. public static double2x4 double2x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m03 double The matrix at row 0, column 3 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m13 double The matrix at row 1, column 3 will be set to this value. 返回 double2x4 double2x4 constructed from arguments. double2x4(int) Returns a double2x4 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double2x4 double2x4(int v) 参数 v int int to convert to double2x4 返回 double2x4 Converted value. double2x4(float) Returns a double2x4 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double2x4 double2x4(float v) 参数 v float float to convert to double2x4 返回 double2x4 Converted value. double2x4(uint) Returns a double2x4 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double2x4 double2x4(uint v) 参数 v uint uint to convert to double2x4 返回 double2x4 Converted value. double2x4(bool2x4) Return a double2x4 matrix constructed from a bool2x4 matrix by componentwise conversion. public static double2x4 double2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to double2x4 返回 double2x4 Converted value. double2x4(double2, double2, double2, double2) Returns a double2x4 matrix constructed from four double2 vectors. public static double2x4 double2x4(double2 c0, double2 c1, double2 c2, double2 c3) 参数 c0 double2 The matrix column c0 will be set to this value. c1 double2 The matrix column c1 will be set to this value. c2 double2 The matrix column c2 will be set to this value. c3 double2 The matrix column c3 will be set to this value. 返回 double2x4 double2x4 constructed from arguments. double2x4(float2x4) Return a double2x4 matrix constructed from a float2x4 matrix by componentwise conversion. public static double2x4 double2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to double2x4 返回 double2x4 Converted value. double2x4(int2x4) Return a double2x4 matrix constructed from a int2x4 matrix by componentwise conversion. public static double2x4 double2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to double2x4 返回 double2x4 Converted value. double2x4(uint2x4) Return a double2x4 matrix constructed from a uint2x4 matrix by componentwise conversion. public static double2x4 double2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to double2x4 返回 double2x4 Converted value. double3(bool) Returns a double3 vector constructed from a single bool value by converting it to double and assigning it to every component. public static double3 double3(bool v) 参数 v bool bool to convert to double3 返回 double3 Converted value. double3(double) Returns a double3 vector constructed from a single double value by assigning it to every component. public static double3 double3(double v) 参数 v double double to convert to double3 返回 double3 Converted value. double3(double, double, double) Returns a double3 vector constructed from three double values. public static double3 double3(double x, double y, double z) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. z double The constructed vector's z component will be set to this value. 返回 double3 double3 constructed from arguments. double3(double, double2) Returns a double3 vector constructed from a double value and a double2 vector. public static double3 double3(double x, double2 yz) 参数 x double The constructed vector's x component will be set to this value. yz double2 The constructed vector's yz components will be set to this value. 返回 double3 double3 constructed from arguments. double3(int) Returns a double3 vector constructed from a single int value by converting it to double and assigning it to every component. public static double3 double3(int v) 参数 v int int to convert to double3 返回 double3 Converted value. double3(float) Returns a double3 vector constructed from a single float value by converting it to double and assigning it to every component. public static double3 double3(float v) 参数 v float float to convert to double3 返回 double3 Converted value. double3(uint) Returns a double3 vector constructed from a single uint value by converting it to double and assigning it to every component. public static double3 double3(uint v) 参数 v uint uint to convert to double3 返回 double3 Converted value. double3(bool3) Return a double3 vector constructed from a bool3 vector by componentwise conversion. public static double3 double3(bool3 v) 参数 v bool3 bool3 to convert to double3 返回 double3 Converted value. double3(double2, double) Returns a double3 vector constructed from a double2 vector and a double value. public static double3 double3(double2 xy, double z) 参数 xy double2 The constructed vector's xy components will be set to this value. z double The constructed vector's z component will be set to this value. 返回 double3 double3 constructed from arguments. double3(double3) Returns a double3 vector constructed from a double3 vector. public static double3 double3(double3 xyz) 参数 xyz double3 The constructed vector's xyz components will be set to this value. 返回 double3 double3 constructed from arguments. double3(float3) Return a double3 vector constructed from a float3 vector by componentwise conversion. public static double3 double3(float3 v) 参数 v float3 float3 to convert to double3 返回 double3 Converted value. double3(half) Returns a double3 vector constructed from a single half value by converting it to double and assigning it to every component. public static double3 double3(half v) 参数 v half half to convert to double3 返回 double3 Converted value. double3(half3) Return a double3 vector constructed from a half3 vector by componentwise conversion. public static double3 double3(half3 v) 参数 v half3 half3 to convert to double3 返回 double3 Converted value. double3(int3) Return a double3 vector constructed from a int3 vector by componentwise conversion. public static double3 double3(int3 v) 参数 v int3 int3 to convert to double3 返回 double3 Converted value. double3(uint3) Return a double3 vector constructed from a uint3 vector by componentwise conversion. public static double3 double3(uint3 v) 参数 v uint3 uint3 to convert to double3 返回 double3 Converted value. double3x2(bool) Returns a double3x2 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double3x2 double3x2(bool v) 参数 v bool bool to convert to double3x2 返回 double3x2 Converted value. double3x2(double) Returns a double3x2 matrix constructed from a single double value by assigning it to every component. public static double3x2 double3x2(double v) 参数 v double double to convert to double3x2 返回 double3x2 Converted value. double3x2(double, double, double, double, double, double) Returns a double3x2 matrix constructed from from 6 double values given in row-major order. public static double3x2 double3x2(double m00, double m01, double m10, double m11, double m20, double m21) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. 返回 double3x2 double3x2 constructed from arguments. double3x2(int) Returns a double3x2 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double3x2 double3x2(int v) 参数 v int int to convert to double3x2 返回 double3x2 Converted value. double3x2(float) Returns a double3x2 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double3x2 double3x2(float v) 参数 v float float to convert to double3x2 返回 double3x2 Converted value. double3x2(uint) Returns a double3x2 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double3x2 double3x2(uint v) 参数 v uint uint to convert to double3x2 返回 double3x2 Converted value. double3x2(bool3x2) Return a double3x2 matrix constructed from a bool3x2 matrix by componentwise conversion. public static double3x2 double3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to double3x2 返回 double3x2 Converted value. double3x2(double3, double3) Returns a double3x2 matrix constructed from two double3 vectors. public static double3x2 double3x2(double3 c0, double3 c1) 参数 c0 double3 The matrix column c0 will be set to this value. c1 double3 The matrix column c1 will be set to this value. 返回 double3x2 double3x2 constructed from arguments. double3x2(float3x2) Return a double3x2 matrix constructed from a float3x2 matrix by componentwise conversion. public static double3x2 double3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to double3x2 返回 double3x2 Converted value. double3x2(int3x2) Return a double3x2 matrix constructed from a int3x2 matrix by componentwise conversion. public static double3x2 double3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to double3x2 返回 double3x2 Converted value. double3x2(uint3x2) Return a double3x2 matrix constructed from a uint3x2 matrix by componentwise conversion. public static double3x2 double3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to double3x2 返回 double3x2 Converted value. double3x3(bool) Returns a double3x3 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double3x3 double3x3(bool v) 参数 v bool bool to convert to double3x3 返回 double3x3 Converted value. double3x3(double) Returns a double3x3 matrix constructed from a single double value by assigning it to every component. public static double3x3 double3x3(double v) 参数 v double double to convert to double3x3 返回 double3x3 Converted value. double3x3(double, double, double, double, double, double, double, double, double) Returns a double3x3 matrix constructed from from 9 double values given in row-major order. public static double3x3 double3x3(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. 返回 double3x3 double3x3 constructed from arguments. double3x3(int) Returns a double3x3 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double3x3 double3x3(int v) 参数 v int int to convert to double3x3 返回 double3x3 Converted value. double3x3(float) Returns a double3x3 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double3x3 double3x3(float v) 参数 v float float to convert to double3x3 返回 double3x3 Converted value. double3x3(uint) Returns a double3x3 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double3x3 double3x3(uint v) 参数 v uint uint to convert to double3x3 返回 double3x3 Converted value. double3x3(bool3x3) Return a double3x3 matrix constructed from a bool3x3 matrix by componentwise conversion. public static double3x3 double3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to double3x3 返回 double3x3 Converted value. double3x3(double3, double3, double3) Returns a double3x3 matrix constructed from three double3 vectors. public static double3x3 double3x3(double3 c0, double3 c1, double3 c2) 参数 c0 double3 The matrix column c0 will be set to this value. c1 double3 The matrix column c1 will be set to this value. c2 double3 The matrix column c2 will be set to this value. 返回 double3x3 double3x3 constructed from arguments. double3x3(float3x3) Return a double3x3 matrix constructed from a float3x3 matrix by componentwise conversion. public static double3x3 double3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to double3x3 返回 double3x3 Converted value. double3x3(int3x3) Return a double3x3 matrix constructed from a int3x3 matrix by componentwise conversion. public static double3x3 double3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to double3x3 返回 double3x3 Converted value. double3x3(uint3x3) Return a double3x3 matrix constructed from a uint3x3 matrix by componentwise conversion. public static double3x3 double3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to double3x3 返回 double3x3 Converted value. double3x4(bool) Returns a double3x4 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double3x4 double3x4(bool v) 参数 v bool bool to convert to double3x4 返回 double3x4 Converted value. double3x4(double) Returns a double3x4 matrix constructed from a single double value by assigning it to every component. public static double3x4 double3x4(double v) 参数 v double double to convert to double3x4 返回 double3x4 Converted value. double3x4(double, double, double, double, double, double, double, double, double, double, double, double) Returns a double3x4 matrix constructed from from 12 double values given in row-major order. public static double3x4 double3x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m03 double The matrix at row 0, column 3 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m13 double The matrix at row 1, column 3 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. m23 double The matrix at row 2, column 3 will be set to this value. 返回 double3x4 double3x4 constructed from arguments. double3x4(int) Returns a double3x4 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double3x4 double3x4(int v) 参数 v int int to convert to double3x4 返回 double3x4 Converted value. double3x4(float) Returns a double3x4 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double3x4 double3x4(float v) 参数 v float float to convert to double3x4 返回 double3x4 Converted value. double3x4(uint) Returns a double3x4 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double3x4 double3x4(uint v) 参数 v uint uint to convert to double3x4 返回 double3x4 Converted value. double3x4(bool3x4) Return a double3x4 matrix constructed from a bool3x4 matrix by componentwise conversion. public static double3x4 double3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to double3x4 返回 double3x4 Converted value. double3x4(double3, double3, double3, double3) Returns a double3x4 matrix constructed from four double3 vectors. public static double3x4 double3x4(double3 c0, double3 c1, double3 c2, double3 c3) 参数 c0 double3 The matrix column c0 will be set to this value. c1 double3 The matrix column c1 will be set to this value. c2 double3 The matrix column c2 will be set to this value. c3 double3 The matrix column c3 will be set to this value. 返回 double3x4 double3x4 constructed from arguments. double3x4(float3x4) Return a double3x4 matrix constructed from a float3x4 matrix by componentwise conversion. public static double3x4 double3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to double3x4 返回 double3x4 Converted value. double3x4(int3x4) Return a double3x4 matrix constructed from a int3x4 matrix by componentwise conversion. public static double3x4 double3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to double3x4 返回 double3x4 Converted value. double3x4(uint3x4) Return a double3x4 matrix constructed from a uint3x4 matrix by componentwise conversion. public static double3x4 double3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to double3x4 返回 double3x4 Converted value. double4(bool) Returns a double4 vector constructed from a single bool value by converting it to double and assigning it to every component. public static double4 double4(bool v) 参数 v bool bool to convert to double4 返回 double4 Converted value. double4(double) Returns a double4 vector constructed from a single double value by assigning it to every component. public static double4 double4(double v) 参数 v double double to convert to double4 返回 double4 Converted value. double4(double, double, double, double) Returns a double4 vector constructed from four double values. public static double4 double4(double x, double y, double z, double w) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. z double The constructed vector's z component will be set to this value. w double The constructed vector's w component will be set to this value. 返回 double4 double4 constructed from arguments. double4(double, double, double2) Returns a double4 vector constructed from two double values and a double2 vector. public static double4 double4(double x, double y, double2 zw) 参数 x double The constructed vector's x component will be set to this value. y double The constructed vector's y component will be set to this value. zw double2 The constructed vector's zw components will be set to this value. 返回 double4 double4 constructed from arguments. double4(double, double2, double) Returns a double4 vector constructed from a double value, a double2 vector and a double value. public static double4 double4(double x, double2 yz, double w) 参数 x double The constructed vector's x component will be set to this value. yz double2 The constructed vector's yz components will be set to this value. w double The constructed vector's w component will be set to this value. 返回 double4 double4 constructed from arguments. double4(double, double3) Returns a double4 vector constructed from a double value and a double3 vector. public static double4 double4(double x, double3 yzw) 参数 x double The constructed vector's x component will be set to this value. yzw double3 The constructed vector's yzw components will be set to this value. 返回 double4 double4 constructed from arguments. double4(int) Returns a double4 vector constructed from a single int value by converting it to double and assigning it to every component. public static double4 double4(int v) 参数 v int int to convert to double4 返回 double4 Converted value. double4(float) Returns a double4 vector constructed from a single float value by converting it to double and assigning it to every component. public static double4 double4(float v) 参数 v float float to convert to double4 返回 double4 Converted value. double4(uint) Returns a double4 vector constructed from a single uint value by converting it to double and assigning it to every component. public static double4 double4(uint v) 参数 v uint uint to convert to double4 返回 double4 Converted value. double4(bool4) Return a double4 vector constructed from a bool4 vector by componentwise conversion. public static double4 double4(bool4 v) 参数 v bool4 bool4 to convert to double4 返回 double4 Converted value. double4(double2, double, double) Returns a double4 vector constructed from a double2 vector and two double values. public static double4 double4(double2 xy, double z, double w) 参数 xy double2 The constructed vector's xy components will be set to this value. z double The constructed vector's z component will be set to this value. w double The constructed vector's w component will be set to this value. 返回 double4 double4 constructed from arguments. double4(double2, double2) Returns a double4 vector constructed from two double2 vectors. public static double4 double4(double2 xy, double2 zw) 参数 xy double2 The constructed vector's xy components will be set to this value. zw double2 The constructed vector's zw components will be set to this value. 返回 double4 double4 constructed from arguments. double4(double3, double) Returns a double4 vector constructed from a double3 vector and a double value. public static double4 double4(double3 xyz, double w) 参数 xyz double3 The constructed vector's xyz components will be set to this value. w double The constructed vector's w component will be set to this value. 返回 double4 double4 constructed from arguments. double4(double4) Returns a double4 vector constructed from a double4 vector. public static double4 double4(double4 xyzw) 参数 xyzw double4 The constructed vector's xyzw components will be set to this value. 返回 double4 double4 constructed from arguments. double4(float4) Return a double4 vector constructed from a float4 vector by componentwise conversion. public static double4 double4(float4 v) 参数 v float4 float4 to convert to double4 返回 double4 Converted value. double4(half) Returns a double4 vector constructed from a single half value by converting it to double and assigning it to every component. public static double4 double4(half v) 参数 v half half to convert to double4 返回 double4 Converted value. double4(half4) Return a double4 vector constructed from a half4 vector by componentwise conversion. public static double4 double4(half4 v) 参数 v half4 half4 to convert to double4 返回 double4 Converted value. double4(int4) Return a double4 vector constructed from a int4 vector by componentwise conversion. public static double4 double4(int4 v) 参数 v int4 int4 to convert to double4 返回 double4 Converted value. double4(uint4) Return a double4 vector constructed from a uint4 vector by componentwise conversion. public static double4 double4(uint4 v) 参数 v uint4 uint4 to convert to double4 返回 double4 Converted value. double4x2(bool) Returns a double4x2 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double4x2 double4x2(bool v) 参数 v bool bool to convert to double4x2 返回 double4x2 Converted value. double4x2(double) Returns a double4x2 matrix constructed from a single double value by assigning it to every component. public static double4x2 double4x2(double v) 参数 v double double to convert to double4x2 返回 double4x2 Converted value. double4x2(double, double, double, double, double, double, double, double) Returns a double4x2 matrix constructed from from 8 double values given in row-major order. public static double4x2 double4x2(double m00, double m01, double m10, double m11, double m20, double m21, double m30, double m31) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m30 double The matrix at row 3, column 0 will be set to this value. m31 double The matrix at row 3, column 1 will be set to this value. 返回 double4x2 double4x2 constructed from arguments. double4x2(int) Returns a double4x2 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double4x2 double4x2(int v) 参数 v int int to convert to double4x2 返回 double4x2 Converted value. double4x2(float) Returns a double4x2 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double4x2 double4x2(float v) 参数 v float float to convert to double4x2 返回 double4x2 Converted value. double4x2(uint) Returns a double4x2 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double4x2 double4x2(uint v) 参数 v uint uint to convert to double4x2 返回 double4x2 Converted value. double4x2(bool4x2) Return a double4x2 matrix constructed from a bool4x2 matrix by componentwise conversion. public static double4x2 double4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to double4x2 返回 double4x2 Converted value. double4x2(double4, double4) Returns a double4x2 matrix constructed from two double4 vectors. public static double4x2 double4x2(double4 c0, double4 c1) 参数 c0 double4 The matrix column c0 will be set to this value. c1 double4 The matrix column c1 will be set to this value. 返回 double4x2 double4x2 constructed from arguments. double4x2(float4x2) Return a double4x2 matrix constructed from a float4x2 matrix by componentwise conversion. public static double4x2 double4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to double4x2 返回 double4x2 Converted value. double4x2(int4x2) Return a double4x2 matrix constructed from a int4x2 matrix by componentwise conversion. public static double4x2 double4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to double4x2 返回 double4x2 Converted value. double4x2(uint4x2) Return a double4x2 matrix constructed from a uint4x2 matrix by componentwise conversion. public static double4x2 double4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to double4x2 返回 double4x2 Converted value. double4x3(bool) Returns a double4x3 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double4x3 double4x3(bool v) 参数 v bool bool to convert to double4x3 返回 double4x3 Converted value. double4x3(double) Returns a double4x3 matrix constructed from a single double value by assigning it to every component. public static double4x3 double4x3(double v) 参数 v double double to convert to double4x3 返回 double4x3 Converted value. double4x3(double, double, double, double, double, double, double, double, double, double, double, double) Returns a double4x3 matrix constructed from from 12 double values given in row-major order. public static double4x3 double4x3(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22, double m30, double m31, double m32) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. m30 double The matrix at row 3, column 0 will be set to this value. m31 double The matrix at row 3, column 1 will be set to this value. m32 double The matrix at row 3, column 2 will be set to this value. 返回 double4x3 double4x3 constructed from arguments. double4x3(int) Returns a double4x3 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double4x3 double4x3(int v) 参数 v int int to convert to double4x3 返回 double4x3 Converted value. double4x3(float) Returns a double4x3 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double4x3 double4x3(float v) 参数 v float float to convert to double4x3 返回 double4x3 Converted value. double4x3(uint) Returns a double4x3 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double4x3 double4x3(uint v) 参数 v uint uint to convert to double4x3 返回 double4x3 Converted value. double4x3(bool4x3) Return a double4x3 matrix constructed from a bool4x3 matrix by componentwise conversion. public static double4x3 double4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to double4x3 返回 double4x3 Converted value. double4x3(double4, double4, double4) Returns a double4x3 matrix constructed from three double4 vectors. public static double4x3 double4x3(double4 c0, double4 c1, double4 c2) 参数 c0 double4 The matrix column c0 will be set to this value. c1 double4 The matrix column c1 will be set to this value. c2 double4 The matrix column c2 will be set to this value. 返回 double4x3 double4x3 constructed from arguments. double4x3(float4x3) Return a double4x3 matrix constructed from a float4x3 matrix by componentwise conversion. public static double4x3 double4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to double4x3 返回 double4x3 Converted value. double4x3(int4x3) Return a double4x3 matrix constructed from a int4x3 matrix by componentwise conversion. public static double4x3 double4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to double4x3 返回 double4x3 Converted value. double4x3(uint4x3) Return a double4x3 matrix constructed from a uint4x3 matrix by componentwise conversion. public static double4x3 double4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to double4x3 返回 double4x3 Converted value. double4x4(bool) Returns a double4x4 matrix constructed from a single bool value by converting it to double and assigning it to every component. public static double4x4 double4x4(bool v) 参数 v bool bool to convert to double4x4 返回 double4x4 Converted value. double4x4(double) Returns a double4x4 matrix constructed from a single double value by assigning it to every component. public static double4x4 double4x4(double v) 参数 v double double to convert to double4x4 返回 double4x4 Converted value. double4x4(double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double) Returns a double4x4 matrix constructed from from 16 double values given in row-major order. public static double4x4 double4x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23, double m30, double m31, double m32, double m33) 参数 m00 double The matrix at row 0, column 0 will be set to this value. m01 double The matrix at row 0, column 1 will be set to this value. m02 double The matrix at row 0, column 2 will be set to this value. m03 double The matrix at row 0, column 3 will be set to this value. m10 double The matrix at row 1, column 0 will be set to this value. m11 double The matrix at row 1, column 1 will be set to this value. m12 double The matrix at row 1, column 2 will be set to this value. m13 double The matrix at row 1, column 3 will be set to this value. m20 double The matrix at row 2, column 0 will be set to this value. m21 double The matrix at row 2, column 1 will be set to this value. m22 double The matrix at row 2, column 2 will be set to this value. m23 double The matrix at row 2, column 3 will be set to this value. m30 double The matrix at row 3, column 0 will be set to this value. m31 double The matrix at row 3, column 1 will be set to this value. m32 double The matrix at row 3, column 2 will be set to this value. m33 double The matrix at row 3, column 3 will be set to this value. 返回 double4x4 double4x4 constructed from arguments. double4x4(int) Returns a double4x4 matrix constructed from a single int value by converting it to double and assigning it to every component. public static double4x4 double4x4(int v) 参数 v int int to convert to double4x4 返回 double4x4 Converted value. double4x4(float) Returns a double4x4 matrix constructed from a single float value by converting it to double and assigning it to every component. public static double4x4 double4x4(float v) 参数 v float float to convert to double4x4 返回 double4x4 Converted value. double4x4(uint) Returns a double4x4 matrix constructed from a single uint value by converting it to double and assigning it to every component. public static double4x4 double4x4(uint v) 参数 v uint uint to convert to double4x4 返回 double4x4 Converted value. double4x4(bool4x4) Return a double4x4 matrix constructed from a bool4x4 matrix by componentwise conversion. public static double4x4 double4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to double4x4 返回 double4x4 Converted value. double4x4(double4, double4, double4, double4) Returns a double4x4 matrix constructed from four double4 vectors. public static double4x4 double4x4(double4 c0, double4 c1, double4 c2, double4 c3) 参数 c0 double4 The matrix column c0 will be set to this value. c1 double4 The matrix column c1 will be set to this value. c2 double4 The matrix column c2 will be set to this value. c3 double4 The matrix column c3 will be set to this value. 返回 double4x4 double4x4 constructed from arguments. double4x4(float4x4) Return a double4x4 matrix constructed from a float4x4 matrix by componentwise conversion. public static double4x4 double4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to double4x4 返回 double4x4 Converted value. double4x4(int4x4) Return a double4x4 matrix constructed from a int4x4 matrix by componentwise conversion. public static double4x4 double4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to double4x4 返回 double4x4 Converted value. double4x4(uint4x4) Return a double4x4 matrix constructed from a uint4x4 matrix by componentwise conversion. public static double4x4 double4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to double4x4 返回 double4x4 Converted value. down() Unity's down axis (0, -1, 0). public static float3 down() 返回 float3 The down axis. 备注 Matches https://docs.unity3d.com/ScriptReference/Vector3-down.html exp(double) Returns the base-e exponential of x. public static double exp(double x) 参数 x double Input value. 返回 double The base-e exponential of the input. exp(float) Returns the base-e exponential of x. public static float exp(float x) 参数 x float Input value. 返回 float The base-e exponential of the input. exp(double2) Returns the componentwise base-e exponential of x. public static double2 exp(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise base-e exponential of the input. exp(double3) Returns the componentwise base-e exponential of x. public static double3 exp(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise base-e exponential of the input. exp(double4) Returns the componentwise base-e exponential of x. public static double4 exp(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise base-e exponential of the input. exp(float2) Returns the componentwise base-e exponential of x. public static float2 exp(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise base-e exponential of the input. exp(float3) Returns the componentwise base-e exponential of x. public static float3 exp(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise base-e exponential of the input. exp(float4) Returns the componentwise base-e exponential of x. public static float4 exp(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise base-e exponential of the input. exp(quaternion) Returns the natural exponent of a quaternion. public static quaternion exp(quaternion q) 参数 q quaternion The quaternion. 返回 quaternion The natural exponent of the input quaternion. exp10(double) Returns the base-10 exponential of x. public static double exp10(double x) 参数 x double Input value. 返回 double The base-10 exponential of the input. exp10(float) Returns the base-10 exponential of x. public static float exp10(float x) 参数 x float Input value. 返回 float The base-10 exponential of the input. exp10(double2) Returns the componentwise base-10 exponential of x. public static double2 exp10(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise base-10 exponential of the input. exp10(double3) Returns the componentwise base-10 exponential of x. public static double3 exp10(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise base-10 exponential of the input. exp10(double4) Returns the componentwise base-10 exponential of x. public static double4 exp10(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise base-10 exponential of the input. exp10(float2) Returns the componentwise base-10 exponential of x. public static float2 exp10(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise base-10 exponential of the input. exp10(float3) Returns the componentwise base-10 exponential of x. public static float3 exp10(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise base-10 exponential of the input. exp10(float4) Returns the componentwise base-10 exponential of x. public static float4 exp10(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise base-10 exponential of the input. exp2(double) Returns the base-2 exponential of x. public static double exp2(double x) 参数 x double Input value. 返回 double The base-2 exponential of the input. exp2(float) Returns the base-2 exponential of x. public static float exp2(float x) 参数 x float Input value. 返回 float The base-2 exponential of the input. exp2(double2) Returns the componentwise base-2 exponential of x. public static double2 exp2(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise base-2 exponential of the input. exp2(double3) Returns the componentwise base-2 exponential of x. public static double3 exp2(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise base-2 exponential of the input. exp2(double4) Returns the componentwise base-2 exponential of x. public static double4 exp2(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise base-2 exponential of the input. exp2(float2) Returns the componentwise base-2 exponential of x. public static float2 exp2(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise base-2 exponential of the input. exp2(float3) Returns the componentwise base-2 exponential of x. public static float3 exp2(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise base-2 exponential of the input. exp2(float4) Returns the componentwise base-2 exponential of x. public static float4 exp2(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise base-2 exponential of the input. f16tof32(uint) Returns the floating point representation of a half-precision floating point value. public static float f16tof32(uint x) 参数 x uint The half precision float. 返回 float The single precision float representation of the half precision float. f16tof32(uint2) Returns the floating point representation of a half-precision floating point vector. public static float2 f16tof32(uint2 x) 参数 x uint2 The half precision float vector. 返回 float2 The single precision float vector representation of the half precision float vector. f16tof32(uint3) Returns the floating point representation of a half-precision floating point vector. public static float3 f16tof32(uint3 x) 参数 x uint3 The half precision float vector. 返回 float3 The single precision float vector representation of the half precision float vector. f16tof32(uint4) Returns the floating point representation of a half-precision floating point vector. public static float4 f16tof32(uint4 x) 参数 x uint4 The half precision float vector. 返回 float4 The single precision float vector representation of the half precision float vector. f32tof16(float) Returns the result converting a float value to its nearest half-precision floating point representation. public static uint f32tof16(float x) 参数 x float The single precision float. 返回 uint The half precision float representation of the single precision float. f32tof16(float2) Returns the result of a componentwise conversion of a float2 vector to its nearest half-precision floating point representation. public static uint2 f32tof16(float2 x) 参数 x float2 The single precision float vector. 返回 uint2 The half precision float vector representation of the single precision float vector. f32tof16(float3) Returns the result of a componentwise conversion of a float3 vector to its nearest half-precision floating point representation. public static uint3 f32tof16(float3 x) 参数 x float3 The single precision float vector. 返回 uint3 The half precision float vector representation of the single precision float vector. f32tof16(float4) Returns the result of a componentwise conversion of a float4 vector to its nearest half-precision floating point representation. public static uint4 f32tof16(float4 x) 参数 x float4 The single precision float vector. 返回 uint4 The half precision float vector representation of the single precision float vector. faceforward(double2, double2, double2) Conditionally flips a vector n if two vectors i and ng are pointing in the same direction. Returns n if dot(i, ng) < 0, -n otherwise. public static double2 faceforward(double2 n, double2 i, double2 ng) 参数 n double2 Vector to conditionally flip. i double2 First vector in direction comparison. ng double2 Second vector in direction comparison. 返回 double2 -n if i and ng point in the same direction; otherwise return n unchanged. faceforward(double3, double3, double3) Conditionally flips a vector n if two vectors i and ng are pointing in the same direction. Returns n if dot(i, ng) < 0, -n otherwise. public static double3 faceforward(double3 n, double3 i, double3 ng) 参数 n double3 Vector to conditionally flip. i double3 First vector in direction comparison. ng double3 Second vector in direction comparison. 返回 double3 -n if i and ng point in the same direction; otherwise return n unchanged. faceforward(double4, double4, double4) Conditionally flips a vector n if two vectors i and ng are pointing in the same direction. Returns n if dot(i, ng) < 0, -n otherwise. public static double4 faceforward(double4 n, double4 i, double4 ng) 参数 n double4 Vector to conditionally flip. i double4 First vector in direction comparison. ng double4 Second vector in direction comparison. 返回 double4 -n if i and ng point in the same direction; otherwise return n unchanged. faceforward(float2, float2, float2) Conditionally flips a vector n if two vectors i and ng are pointing in the same direction. Returns n if dot(i, ng) < 0, -n otherwise. public static float2 faceforward(float2 n, float2 i, float2 ng) 参数 n float2 Vector to conditionally flip. i float2 First vector in direction comparison. ng float2 Second vector in direction comparison. 返回 float2 -n if i and ng point in the same direction; otherwise return n unchanged. faceforward(float3, float3, float3) Conditionally flips a vector n if two vectors i and ng are pointing in the same direction. Returns n if dot(i, ng) < 0, -n otherwise. public static float3 faceforward(float3 n, float3 i, float3 ng) 参数 n float3 Vector to conditionally flip. i float3 First vector in direction comparison. ng float3 Second vector in direction comparison. 返回 float3 -n if i and ng point in the same direction; otherwise return n unchanged. faceforward(float4, float4, float4) Conditionally flips a vector n if two vectors i and ng are pointing in the same direction. Returns n if dot(i, ng) < 0, -n otherwise. public static float4 faceforward(float4 n, float4 i, float4 ng) 参数 n float4 Vector to conditionally flip. i float4 First vector in direction comparison. ng float4 Second vector in direction comparison. 返回 float4 -n if i and ng point in the same direction; otherwise return n unchanged. fastinverse(double3x4) Fast matrix inverse for rigid transforms (orthonormal basis and translation) public static double3x4 fastinverse(double3x4 m) 参数 m double3x4 Matrix to invert. 返回 double3x4 The inverted matrix. fastinverse(double4x4) Fast matrix inverse for rigid transforms (orthonormal basis and translation) public static double4x4 fastinverse(double4x4 m) 参数 m double4x4 Matrix to invert. 返回 double4x4 The inverted matrix. fastinverse(float3x4) Fast matrix inverse for rigid transforms (orthonormal basis and translation) public static float3x4 fastinverse(float3x4 m) 参数 m float3x4 Matrix to invert. 返回 float3x4 The inverted matrix. fastinverse(float4x4) Fast matrix inverse for rigid transforms (orthonormal basis and translation) public static float4x4 fastinverse(float4x4 m) 参数 m float4x4 Matrix to invert. 返回 float4x4 The inverted matrix. float2(bool) Returns a float2 vector constructed from a single bool value by converting it to float and assigning it to every component. public static float2 float2(bool v) 参数 v bool bool to convert to float2 返回 float2 Converted value. float2(double) Returns a float2 vector constructed from a single double value by converting it to float and assigning it to every component. public static float2 float2(double v) 参数 v double double to convert to float2 返回 float2 Converted value. float2(int) Returns a float2 vector constructed from a single int value by converting it to float and assigning it to every component. public static float2 float2(int v) 参数 v int int to convert to float2 返回 float2 Converted value. float2(float) Returns a float2 vector constructed from a single float value by assigning it to every component. public static float2 float2(float v) 参数 v float float to convert to float2 返回 float2 Converted value. float2(float, float) Returns a float2 vector constructed from two float values. public static float2 float2(float x, float y) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. 返回 float2 float2 constructed from arguments. float2(uint) Returns a float2 vector constructed from a single uint value by converting it to float and assigning it to every component. public static float2 float2(uint v) 参数 v uint uint to convert to float2 返回 float2 Converted value. float2(bool2) Return a float2 vector constructed from a bool2 vector by componentwise conversion. public static float2 float2(bool2 v) 参数 v bool2 bool2 to convert to float2 返回 float2 Converted value. float2(double2) Return a float2 vector constructed from a double2 vector by componentwise conversion. public static float2 float2(double2 v) 参数 v double2 double2 to convert to float2 返回 float2 Converted value. float2(float2) Returns a float2 vector constructed from a float2 vector. public static float2 float2(float2 xy) 参数 xy float2 The constructed vector's xy components will be set to this value. 返回 float2 float2 constructed from arguments. float2(half) Returns a float2 vector constructed from a single half value by converting it to float and assigning it to every component. public static float2 float2(half v) 参数 v half half to convert to float2 返回 float2 Converted value. float2(half2) Return a float2 vector constructed from a half2 vector by componentwise conversion. public static float2 float2(half2 v) 参数 v half2 half2 to convert to float2 返回 float2 Converted value. float2(int2) Return a float2 vector constructed from a int2 vector by componentwise conversion. public static float2 float2(int2 v) 参数 v int2 int2 to convert to float2 返回 float2 Converted value. float2(uint2) Return a float2 vector constructed from a uint2 vector by componentwise conversion. public static float2 float2(uint2 v) 参数 v uint2 uint2 to convert to float2 返回 float2 Converted value. float2x2(bool) Returns a float2x2 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float2x2 float2x2(bool v) 参数 v bool bool to convert to float2x2 返回 float2x2 Converted value. float2x2(double) Returns a float2x2 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float2x2 float2x2(double v) 参数 v double double to convert to float2x2 返回 float2x2 Converted value. float2x2(int) Returns a float2x2 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float2x2 float2x2(int v) 参数 v int int to convert to float2x2 返回 float2x2 Converted value. float2x2(float) Returns a float2x2 matrix constructed from a single float value by assigning it to every component. public static float2x2 float2x2(float v) 参数 v float float to convert to float2x2 返回 float2x2 Converted value. float2x2(float, float, float, float) Returns a float2x2 matrix constructed from from 4 float values given in row-major order. public static float2x2 float2x2(float m00, float m01, float m10, float m11) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. 返回 float2x2 float2x2 constructed from arguments. float2x2(uint) Returns a float2x2 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float2x2 float2x2(uint v) 参数 v uint uint to convert to float2x2 返回 float2x2 Converted value. float2x2(bool2x2) Return a float2x2 matrix constructed from a bool2x2 matrix by componentwise conversion. public static float2x2 float2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to float2x2 返回 float2x2 Converted value. float2x2(double2x2) Return a float2x2 matrix constructed from a double2x2 matrix by componentwise conversion. public static float2x2 float2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to float2x2 返回 float2x2 Converted value. float2x2(float2, float2) Returns a float2x2 matrix constructed from two float2 vectors. public static float2x2 float2x2(float2 c0, float2 c1) 参数 c0 float2 The matrix column c0 will be set to this value. c1 float2 The matrix column c1 will be set to this value. 返回 float2x2 float2x2 constructed from arguments. float2x2(int2x2) Return a float2x2 matrix constructed from a int2x2 matrix by componentwise conversion. public static float2x2 float2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to float2x2 返回 float2x2 Converted value. float2x2(uint2x2) Return a float2x2 matrix constructed from a uint2x2 matrix by componentwise conversion. public static float2x2 float2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to float2x2 返回 float2x2 Converted value. float2x3(bool) Returns a float2x3 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float2x3 float2x3(bool v) 参数 v bool bool to convert to float2x3 返回 float2x3 Converted value. float2x3(double) Returns a float2x3 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float2x3 float2x3(double v) 参数 v double double to convert to float2x3 返回 float2x3 Converted value. float2x3(int) Returns a float2x3 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float2x3 float2x3(int v) 参数 v int int to convert to float2x3 返回 float2x3 Converted value. float2x3(float) Returns a float2x3 matrix constructed from a single float value by assigning it to every component. public static float2x3 float2x3(float v) 参数 v float float to convert to float2x3 返回 float2x3 Converted value. float2x3(float, float, float, float, float, float) Returns a float2x3 matrix constructed from from 6 float values given in row-major order. public static float2x3 float2x3(float m00, float m01, float m02, float m10, float m11, float m12) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. 返回 float2x3 float2x3 constructed from arguments. float2x3(uint) Returns a float2x3 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float2x3 float2x3(uint v) 参数 v uint uint to convert to float2x3 返回 float2x3 Converted value. float2x3(bool2x3) Return a float2x3 matrix constructed from a bool2x3 matrix by componentwise conversion. public static float2x3 float2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to float2x3 返回 float2x3 Converted value. float2x3(double2x3) Return a float2x3 matrix constructed from a double2x3 matrix by componentwise conversion. public static float2x3 float2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to float2x3 返回 float2x3 Converted value. float2x3(float2, float2, float2) Returns a float2x3 matrix constructed from three float2 vectors. public static float2x3 float2x3(float2 c0, float2 c1, float2 c2) 参数 c0 float2 The matrix column c0 will be set to this value. c1 float2 The matrix column c1 will be set to this value. c2 float2 The matrix column c2 will be set to this value. 返回 float2x3 float2x3 constructed from arguments. float2x3(int2x3) Return a float2x3 matrix constructed from a int2x3 matrix by componentwise conversion. public static float2x3 float2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to float2x3 返回 float2x3 Converted value. float2x3(uint2x3) Return a float2x3 matrix constructed from a uint2x3 matrix by componentwise conversion. public static float2x3 float2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to float2x3 返回 float2x3 Converted value. float2x4(bool) Returns a float2x4 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float2x4 float2x4(bool v) 参数 v bool bool to convert to float2x4 返回 float2x4 Converted value. float2x4(double) Returns a float2x4 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float2x4 float2x4(double v) 参数 v double double to convert to float2x4 返回 float2x4 Converted value. float2x4(int) Returns a float2x4 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float2x4 float2x4(int v) 参数 v int int to convert to float2x4 返回 float2x4 Converted value. float2x4(float) Returns a float2x4 matrix constructed from a single float value by assigning it to every component. public static float2x4 float2x4(float v) 参数 v float float to convert to float2x4 返回 float2x4 Converted value. float2x4(float, float, float, float, float, float, float, float) Returns a float2x4 matrix constructed from from 8 float values given in row-major order. public static float2x4 float2x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m03 float The matrix at row 0, column 3 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m13 float The matrix at row 1, column 3 will be set to this value. 返回 float2x4 float2x4 constructed from arguments. float2x4(uint) Returns a float2x4 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float2x4 float2x4(uint v) 参数 v uint uint to convert to float2x4 返回 float2x4 Converted value. float2x4(bool2x4) Return a float2x4 matrix constructed from a bool2x4 matrix by componentwise conversion. public static float2x4 float2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to float2x4 返回 float2x4 Converted value. float2x4(double2x4) Return a float2x4 matrix constructed from a double2x4 matrix by componentwise conversion. public static float2x4 float2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to float2x4 返回 float2x4 Converted value. float2x4(float2, float2, float2, float2) Returns a float2x4 matrix constructed from four float2 vectors. public static float2x4 float2x4(float2 c0, float2 c1, float2 c2, float2 c3) 参数 c0 float2 The matrix column c0 will be set to this value. c1 float2 The matrix column c1 will be set to this value. c2 float2 The matrix column c2 will be set to this value. c3 float2 The matrix column c3 will be set to this value. 返回 float2x4 float2x4 constructed from arguments. float2x4(int2x4) Return a float2x4 matrix constructed from a int2x4 matrix by componentwise conversion. public static float2x4 float2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to float2x4 返回 float2x4 Converted value. float2x4(uint2x4) Return a float2x4 matrix constructed from a uint2x4 matrix by componentwise conversion. public static float2x4 float2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to float2x4 返回 float2x4 Converted value. float3(bool) Returns a float3 vector constructed from a single bool value by converting it to float and assigning it to every component. public static float3 float3(bool v) 参数 v bool bool to convert to float3 返回 float3 Converted value. float3(double) Returns a float3 vector constructed from a single double value by converting it to float and assigning it to every component. public static float3 float3(double v) 参数 v double double to convert to float3 返回 float3 Converted value. float3(int) Returns a float3 vector constructed from a single int value by converting it to float and assigning it to every component. public static float3 float3(int v) 参数 v int int to convert to float3 返回 float3 Converted value. float3(float) Returns a float3 vector constructed from a single float value by assigning it to every component. public static float3 float3(float v) 参数 v float float to convert to float3 返回 float3 Converted value. float3(float, float, float) Returns a float3 vector constructed from three float values. public static float3 float3(float x, float y, float z) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. z float The constructed vector's z component will be set to this value. 返回 float3 float3 constructed from arguments. float3(float, float2) Returns a float3 vector constructed from a float value and a float2 vector. public static float3 float3(float x, float2 yz) 参数 x float The constructed vector's x component will be set to this value. yz float2 The constructed vector's yz components will be set to this value. 返回 float3 float3 constructed from arguments. float3(uint) Returns a float3 vector constructed from a single uint value by converting it to float and assigning it to every component. public static float3 float3(uint v) 参数 v uint uint to convert to float3 返回 float3 Converted value. float3(bool3) Return a float3 vector constructed from a bool3 vector by componentwise conversion. public static float3 float3(bool3 v) 参数 v bool3 bool3 to convert to float3 返回 float3 Converted value. float3(double3) Return a float3 vector constructed from a double3 vector by componentwise conversion. public static float3 float3(double3 v) 参数 v double3 double3 to convert to float3 返回 float3 Converted value. float3(float2, float) Returns a float3 vector constructed from a float2 vector and a float value. public static float3 float3(float2 xy, float z) 参数 xy float2 The constructed vector's xy components will be set to this value. z float The constructed vector's z component will be set to this value. 返回 float3 float3 constructed from arguments. float3(float3) Returns a float3 vector constructed from a float3 vector. public static float3 float3(float3 xyz) 参数 xyz float3 The constructed vector's xyz components will be set to this value. 返回 float3 float3 constructed from arguments. float3(half) Returns a float3 vector constructed from a single half value by converting it to float and assigning it to every component. public static float3 float3(half v) 参数 v half half to convert to float3 返回 float3 Converted value. float3(half3) Return a float3 vector constructed from a half3 vector by componentwise conversion. public static float3 float3(half3 v) 参数 v half3 half3 to convert to float3 返回 float3 Converted value. float3(int3) Return a float3 vector constructed from a int3 vector by componentwise conversion. public static float3 float3(int3 v) 参数 v int3 int3 to convert to float3 返回 float3 Converted value. float3(uint3) Return a float3 vector constructed from a uint3 vector by componentwise conversion. public static float3 float3(uint3 v) 参数 v uint3 uint3 to convert to float3 返回 float3 Converted value. float3x2(bool) Returns a float3x2 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float3x2 float3x2(bool v) 参数 v bool bool to convert to float3x2 返回 float3x2 Converted value. float3x2(double) Returns a float3x2 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float3x2 float3x2(double v) 参数 v double double to convert to float3x2 返回 float3x2 Converted value. float3x2(int) Returns a float3x2 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float3x2 float3x2(int v) 参数 v int int to convert to float3x2 返回 float3x2 Converted value. float3x2(float) Returns a float3x2 matrix constructed from a single float value by assigning it to every component. public static float3x2 float3x2(float v) 参数 v float float to convert to float3x2 返回 float3x2 Converted value. float3x2(float, float, float, float, float, float) Returns a float3x2 matrix constructed from from 6 float values given in row-major order. public static float3x2 float3x2(float m00, float m01, float m10, float m11, float m20, float m21) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. 返回 float3x2 float3x2 constructed from arguments. float3x2(uint) Returns a float3x2 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float3x2 float3x2(uint v) 参数 v uint uint to convert to float3x2 返回 float3x2 Converted value. float3x2(bool3x2) Return a float3x2 matrix constructed from a bool3x2 matrix by componentwise conversion. public static float3x2 float3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to float3x2 返回 float3x2 Converted value. float3x2(double3x2) Return a float3x2 matrix constructed from a double3x2 matrix by componentwise conversion. public static float3x2 float3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to float3x2 返回 float3x2 Converted value. float3x2(float3, float3) Returns a float3x2 matrix constructed from two float3 vectors. public static float3x2 float3x2(float3 c0, float3 c1) 参数 c0 float3 The matrix column c0 will be set to this value. c1 float3 The matrix column c1 will be set to this value. 返回 float3x2 float3x2 constructed from arguments. float3x2(int3x2) Return a float3x2 matrix constructed from a int3x2 matrix by componentwise conversion. public static float3x2 float3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to float3x2 返回 float3x2 Converted value. float3x2(uint3x2) Return a float3x2 matrix constructed from a uint3x2 matrix by componentwise conversion. public static float3x2 float3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to float3x2 返回 float3x2 Converted value. float3x3(bool) Returns a float3x3 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float3x3 float3x3(bool v) 参数 v bool bool to convert to float3x3 返回 float3x3 Converted value. float3x3(double) Returns a float3x3 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float3x3 float3x3(double v) 参数 v double double to convert to float3x3 返回 float3x3 Converted value. float3x3(int) Returns a float3x3 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float3x3 float3x3(int v) 参数 v int int to convert to float3x3 返回 float3x3 Converted value. float3x3(float) Returns a float3x3 matrix constructed from a single float value by assigning it to every component. public static float3x3 float3x3(float v) 参数 v float float to convert to float3x3 返回 float3x3 Converted value. float3x3(float, float, float, float, float, float, float, float, float) Returns a float3x3 matrix constructed from from 9 float values given in row-major order. public static float3x3 float3x3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. 返回 float3x3 float3x3 constructed from arguments. float3x3(uint) Returns a float3x3 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float3x3 float3x3(uint v) 参数 v uint uint to convert to float3x3 返回 float3x3 Converted value. float3x3(bool3x3) Return a float3x3 matrix constructed from a bool3x3 matrix by componentwise conversion. public static float3x3 float3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to float3x3 返回 float3x3 Converted value. float3x3(double3x3) Return a float3x3 matrix constructed from a double3x3 matrix by componentwise conversion. public static float3x3 float3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to float3x3 返回 float3x3 Converted value. float3x3(float3, float3, float3) Returns a float3x3 matrix constructed from three float3 vectors. public static float3x3 float3x3(float3 c0, float3 c1, float3 c2) 参数 c0 float3 The matrix column c0 will be set to this value. c1 float3 The matrix column c1 will be set to this value. c2 float3 The matrix column c2 will be set to this value. 返回 float3x3 float3x3 constructed from arguments. float3x3(float4x4) Extracts a float3x3 from the upper left 3x3 of a float4x4. public static float3x3 float3x3(float4x4 f4x4) 参数 f4x4 float4x4 float4x4(AffineTransform) to extract a float3x3 from. 返回 float3x3 Upper left 3x3 matrix as float3x3. float3x3(int3x3) Return a float3x3 matrix constructed from a int3x3 matrix by componentwise conversion. public static float3x3 float3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to float3x3 返回 float3x3 Converted value. float3x3(quaternion) Returns a float3x3 matrix constructed from a quaternion. public static float3x3 float3x3(quaternion rotation) 参数 rotation quaternion The quaternion representing a rotation. 返回 float3x3 The float3x3 constructed from a quaternion. float3x3(uint3x3) Return a float3x3 matrix constructed from a uint3x3 matrix by componentwise conversion. public static float3x3 float3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to float3x3 返回 float3x3 Converted value. float3x4(bool) Returns a float3x4 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float3x4 float3x4(bool v) 参数 v bool bool to convert to float3x4 返回 float3x4 Converted value. float3x4(double) Returns a float3x4 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float3x4 float3x4(double v) 参数 v double double to convert to float3x4 返回 float3x4 Converted value. float3x4(int) Returns a float3x4 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float3x4 float3x4(int v) 参数 v int int to convert to float3x4 返回 float3x4 Converted value. float3x4(float) Returns a float3x4 matrix constructed from a single float value by assigning it to every component. public static float3x4 float3x4(float v) 参数 v float float to convert to float3x4 返回 float3x4 Converted value. float3x4(float, float, float, float, float, float, float, float, float, float, float, float) Returns a float3x4 matrix constructed from from 12 float values given in row-major order. public static float3x4 float3x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m03 float The matrix at row 0, column 3 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m13 float The matrix at row 1, column 3 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. m23 float The matrix at row 2, column 3 will be set to this value. 返回 float3x4 float3x4 constructed from arguments. float3x4(uint) Returns a float3x4 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float3x4 float3x4(uint v) 参数 v uint uint to convert to float3x4 返回 float3x4 Converted value. float3x4(AffineTransform) Returns a float3x4 matrix constructed from an AffineTransform. public static float3x4 float3x4(AffineTransform transform) 参数 transform AffineTransform The AffineTransform. 返回 float3x4 The float3x4 matrix given an AffineTransform. float3x4(bool3x4) Return a float3x4 matrix constructed from a bool3x4 matrix by componentwise conversion. public static float3x4 float3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to float3x4 返回 float3x4 Converted value. float3x4(double3x4) Return a float3x4 matrix constructed from a double3x4 matrix by componentwise conversion. public static float3x4 float3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to float3x4 返回 float3x4 Converted value. float3x4(float3, float3, float3, float3) Returns a float3x4 matrix constructed from four float3 vectors. public static float3x4 float3x4(float3 c0, float3 c1, float3 c2, float3 c3) 参数 c0 float3 The matrix column c0 will be set to this value. c1 float3 The matrix column c1 will be set to this value. c2 float3 The matrix column c2 will be set to this value. c3 float3 The matrix column c3 will be set to this value. 返回 float3x4 float3x4 constructed from arguments. float3x4(int3x4) Return a float3x4 matrix constructed from a int3x4 matrix by componentwise conversion. public static float3x4 float3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to float3x4 返回 float3x4 Converted value. float3x4(uint3x4) Return a float3x4 matrix constructed from a uint3x4 matrix by componentwise conversion. public static float3x4 float3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to float3x4 返回 float3x4 Converted value. float4(bool) Returns a float4 vector constructed from a single bool value by converting it to float and assigning it to every component. public static float4 float4(bool v) 参数 v bool bool to convert to float4 返回 float4 Converted value. float4(double) Returns a float4 vector constructed from a single double value by converting it to float and assigning it to every component. public static float4 float4(double v) 参数 v double double to convert to float4 返回 float4 Converted value. float4(int) Returns a float4 vector constructed from a single int value by converting it to float and assigning it to every component. public static float4 float4(int v) 参数 v int int to convert to float4 返回 float4 Converted value. float4(float) Returns a float4 vector constructed from a single float value by assigning it to every component. public static float4 float4(float v) 参数 v float float to convert to float4 返回 float4 Converted value. float4(float, float, float, float) Returns a float4 vector constructed from four float values. public static float4 float4(float x, float y, float z, float w) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. z float The constructed vector's z component will be set to this value. w float The constructed vector's w component will be set to this value. 返回 float4 float4 constructed from arguments. float4(float, float, float2) Returns a float4 vector constructed from two float values and a float2 vector. public static float4 float4(float x, float y, float2 zw) 参数 x float The constructed vector's x component will be set to this value. y float The constructed vector's y component will be set to this value. zw float2 The constructed vector's zw components will be set to this value. 返回 float4 float4 constructed from arguments. float4(float, float2, float) Returns a float4 vector constructed from a float value, a float2 vector and a float value. public static float4 float4(float x, float2 yz, float w) 参数 x float The constructed vector's x component will be set to this value. yz float2 The constructed vector's yz components will be set to this value. w float The constructed vector's w component will be set to this value. 返回 float4 float4 constructed from arguments. float4(float, float3) Returns a float4 vector constructed from a float value and a float3 vector. public static float4 float4(float x, float3 yzw) 参数 x float The constructed vector's x component will be set to this value. yzw float3 The constructed vector's yzw components will be set to this value. 返回 float4 float4 constructed from arguments. float4(uint) Returns a float4 vector constructed from a single uint value by converting it to float and assigning it to every component. public static float4 float4(uint v) 参数 v uint uint to convert to float4 返回 float4 Converted value. float4(bool4) Return a float4 vector constructed from a bool4 vector by componentwise conversion. public static float4 float4(bool4 v) 参数 v bool4 bool4 to convert to float4 返回 float4 Converted value. float4(double4) Return a float4 vector constructed from a double4 vector by componentwise conversion. public static float4 float4(double4 v) 参数 v double4 double4 to convert to float4 返回 float4 Converted value. float4(float2, float, float) Returns a float4 vector constructed from a float2 vector and two float values. public static float4 float4(float2 xy, float z, float w) 参数 xy float2 The constructed vector's xy components will be set to this value. z float The constructed vector's z component will be set to this value. w float The constructed vector's w component will be set to this value. 返回 float4 float4 constructed from arguments. float4(float2, float2) Returns a float4 vector constructed from two float2 vectors. public static float4 float4(float2 xy, float2 zw) 参数 xy float2 The constructed vector's xy components will be set to this value. zw float2 The constructed vector's zw components will be set to this value. 返回 float4 float4 constructed from arguments. float4(float3, float) Returns a float4 vector constructed from a float3 vector and a float value. public static float4 float4(float3 xyz, float w) 参数 xyz float3 The constructed vector's xyz components will be set to this value. w float The constructed vector's w component will be set to this value. 返回 float4 float4 constructed from arguments. float4(float4) Returns a float4 vector constructed from a float4 vector. public static float4 float4(float4 xyzw) 参数 xyzw float4 The constructed vector's xyzw components will be set to this value. 返回 float4 float4 constructed from arguments. float4(half) Returns a float4 vector constructed from a single half value by converting it to float and assigning it to every component. public static float4 float4(half v) 参数 v half half to convert to float4 返回 float4 Converted value. float4(half4) Return a float4 vector constructed from a half4 vector by componentwise conversion. public static float4 float4(half4 v) 参数 v half4 half4 to convert to float4 返回 float4 Converted value. float4(int4) Return a float4 vector constructed from a int4 vector by componentwise conversion. public static float4 float4(int4 v) 参数 v int4 int4 to convert to float4 返回 float4 Converted value. float4(uint4) Return a float4 vector constructed from a uint4 vector by componentwise conversion. public static float4 float4(uint4 v) 参数 v uint4 uint4 to convert to float4 返回 float4 Converted value. float4x2(bool) Returns a float4x2 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float4x2 float4x2(bool v) 参数 v bool bool to convert to float4x2 返回 float4x2 Converted value. float4x2(double) Returns a float4x2 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float4x2 float4x2(double v) 参数 v double double to convert to float4x2 返回 float4x2 Converted value. float4x2(int) Returns a float4x2 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float4x2 float4x2(int v) 参数 v int int to convert to float4x2 返回 float4x2 Converted value. float4x2(float) Returns a float4x2 matrix constructed from a single float value by assigning it to every component. public static float4x2 float4x2(float v) 参数 v float float to convert to float4x2 返回 float4x2 Converted value. float4x2(float, float, float, float, float, float, float, float) Returns a float4x2 matrix constructed from from 8 float values given in row-major order. public static float4x2 float4x2(float m00, float m01, float m10, float m11, float m20, float m21, float m30, float m31) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m30 float The matrix at row 3, column 0 will be set to this value. m31 float The matrix at row 3, column 1 will be set to this value. 返回 float4x2 float4x2 constructed from arguments. float4x2(uint) Returns a float4x2 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float4x2 float4x2(uint v) 参数 v uint uint to convert to float4x2 返回 float4x2 Converted value. float4x2(bool4x2) Return a float4x2 matrix constructed from a bool4x2 matrix by componentwise conversion. public static float4x2 float4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to float4x2 返回 float4x2 Converted value. float4x2(double4x2) Return a float4x2 matrix constructed from a double4x2 matrix by componentwise conversion. public static float4x2 float4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to float4x2 返回 float4x2 Converted value. float4x2(float4, float4) Returns a float4x2 matrix constructed from two float4 vectors. public static float4x2 float4x2(float4 c0, float4 c1) 参数 c0 float4 The matrix column c0 will be set to this value. c1 float4 The matrix column c1 will be set to this value. 返回 float4x2 float4x2 constructed from arguments. float4x2(int4x2) Return a float4x2 matrix constructed from a int4x2 matrix by componentwise conversion. public static float4x2 float4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to float4x2 返回 float4x2 Converted value. float4x2(uint4x2) Return a float4x2 matrix constructed from a uint4x2 matrix by componentwise conversion. public static float4x2 float4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to float4x2 返回 float4x2 Converted value. float4x3(bool) Returns a float4x3 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float4x3 float4x3(bool v) 参数 v bool bool to convert to float4x3 返回 float4x3 Converted value. float4x3(double) Returns a float4x3 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float4x3 float4x3(double v) 参数 v double double to convert to float4x3 返回 float4x3 Converted value. float4x3(int) Returns a float4x3 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float4x3 float4x3(int v) 参数 v int int to convert to float4x3 返回 float4x3 Converted value. float4x3(float) Returns a float4x3 matrix constructed from a single float value by assigning it to every component. public static float4x3 float4x3(float v) 参数 v float float to convert to float4x3 返回 float4x3 Converted value. float4x3(float, float, float, float, float, float, float, float, float, float, float, float) Returns a float4x3 matrix constructed from from 12 float values given in row-major order. public static float4x3 float4x3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22, float m30, float m31, float m32) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. m30 float The matrix at row 3, column 0 will be set to this value. m31 float The matrix at row 3, column 1 will be set to this value. m32 float The matrix at row 3, column 2 will be set to this value. 返回 float4x3 float4x3 constructed from arguments. float4x3(uint) Returns a float4x3 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float4x3 float4x3(uint v) 参数 v uint uint to convert to float4x3 返回 float4x3 Converted value. float4x3(bool4x3) Return a float4x3 matrix constructed from a bool4x3 matrix by componentwise conversion. public static float4x3 float4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to float4x3 返回 float4x3 Converted value. float4x3(double4x3) Return a float4x3 matrix constructed from a double4x3 matrix by componentwise conversion. public static float4x3 float4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to float4x3 返回 float4x3 Converted value. float4x3(float4, float4, float4) Returns a float4x3 matrix constructed from three float4 vectors. public static float4x3 float4x3(float4 c0, float4 c1, float4 c2) 参数 c0 float4 The matrix column c0 will be set to this value. c1 float4 The matrix column c1 will be set to this value. c2 float4 The matrix column c2 will be set to this value. 返回 float4x3 float4x3 constructed from arguments. float4x3(int4x3) Return a float4x3 matrix constructed from a int4x3 matrix by componentwise conversion. public static float4x3 float4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to float4x3 返回 float4x3 Converted value. float4x3(uint4x3) Return a float4x3 matrix constructed from a uint4x3 matrix by componentwise conversion. public static float4x3 float4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to float4x3 返回 float4x3 Converted value. float4x4(bool) Returns a float4x4 matrix constructed from a single bool value by converting it to float and assigning it to every component. public static float4x4 float4x4(bool v) 参数 v bool bool to convert to float4x4 返回 float4x4 Converted value. float4x4(double) Returns a float4x4 matrix constructed from a single double value by converting it to float and assigning it to every component. public static float4x4 float4x4(double v) 参数 v double double to convert to float4x4 返回 float4x4 Converted value. float4x4(int) Returns a float4x4 matrix constructed from a single int value by converting it to float and assigning it to every component. public static float4x4 float4x4(int v) 参数 v int int to convert to float4x4 返回 float4x4 Converted value. float4x4(float) Returns a float4x4 matrix constructed from a single float value by assigning it to every component. public static float4x4 float4x4(float v) 参数 v float float to convert to float4x4 返回 float4x4 Converted value. float4x4(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) Returns a float4x4 matrix constructed from from 16 float values given in row-major order. public static float4x4 float4x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) 参数 m00 float The matrix at row 0, column 0 will be set to this value. m01 float The matrix at row 0, column 1 will be set to this value. m02 float The matrix at row 0, column 2 will be set to this value. m03 float The matrix at row 0, column 3 will be set to this value. m10 float The matrix at row 1, column 0 will be set to this value. m11 float The matrix at row 1, column 1 will be set to this value. m12 float The matrix at row 1, column 2 will be set to this value. m13 float The matrix at row 1, column 3 will be set to this value. m20 float The matrix at row 2, column 0 will be set to this value. m21 float The matrix at row 2, column 1 will be set to this value. m22 float The matrix at row 2, column 2 will be set to this value. m23 float The matrix at row 2, column 3 will be set to this value. m30 float The matrix at row 3, column 0 will be set to this value. m31 float The matrix at row 3, column 1 will be set to this value. m32 float The matrix at row 3, column 2 will be set to this value. m33 float The matrix at row 3, column 3 will be set to this value. 返回 float4x4 float4x4 constructed from arguments. float4x4(uint) Returns a float4x4 matrix constructed from a single uint value by converting it to float and assigning it to every component. public static float4x4 float4x4(uint v) 参数 v uint uint to convert to float4x4 返回 float4x4 Converted value. float4x4(AffineTransform) Returns a float4x4 matrix constructed from an AffineTransform. public static float4x4 float4x4(AffineTransform transform) 参数 transform AffineTransform The AffineTransform. 返回 float4x4 The float4x4 matrix given an AffineTransform. float4x4(RigidTransform) Returns a float4x4 constructed from a RigidTransform. public static float4x4 float4x4(RigidTransform transform) 参数 transform RigidTransform The rigid transformation. 返回 float4x4 The float4x4 constructed from a RigidTransform. float4x4(bool4x4) Return a float4x4 matrix constructed from a bool4x4 matrix by componentwise conversion. public static float4x4 float4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to float4x4 返回 float4x4 Converted value. float4x4(double4x4) Return a float4x4 matrix constructed from a double4x4 matrix by componentwise conversion. public static float4x4 float4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to float4x4 返回 float4x4 Converted value. float4x4(float3x3, float3) Returns a float4x4 constructed from a float3x3 rotation matrix and a float3 translation vector. public static float4x4 float4x4(float3x3 rotation, float3 translation) 参数 rotation float3x3 The float3x3 rotation matrix. translation float3 The translation vector. 返回 float4x4 The float4x4 constructed from a rotation and translation. float4x4(float4, float4, float4, float4) Returns a float4x4 matrix constructed from four float4 vectors. public static float4x4 float4x4(float4 c0, float4 c1, float4 c2, float4 c3) 参数 c0 float4 The matrix column c0 will be set to this value. c1 float4 The matrix column c1 will be set to this value. c2 float4 The matrix column c2 will be set to this value. c3 float4 The matrix column c3 will be set to this value. 返回 float4x4 float4x4 constructed from arguments. float4x4(int4x4) Return a float4x4 matrix constructed from a int4x4 matrix by componentwise conversion. public static float4x4 float4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to float4x4 返回 float4x4 Converted value. float4x4(quaternion, float3) Returns a float4x4 constructed from a quaternion and a float3 translation vector. public static float4x4 float4x4(quaternion rotation, float3 translation) 参数 rotation quaternion The quaternion rotation. translation float3 The translation vector. 返回 float4x4 The float4x4 constructed from a rotation and translation. float4x4(uint4x4) Return a float4x4 matrix constructed from a uint4x4 matrix by componentwise conversion. public static float4x4 float4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to float4x4 返回 float4x4 Converted value. floor(double) Returns the result of rounding a double value up to the nearest integral value less or equal to the original value. public static double floor(double x) 参数 x double Input value. 返回 double The round down to nearest integral value of the input. floor(float) Returns the result of rounding a float value up to the nearest integral value less or equal to the original value. public static float floor(float x) 参数 x float Input value. 返回 float The round down to nearest integral value of the input. floor(double2) Returns the result of rounding each component of a double2 vector value down to the nearest value less or equal to the original value. public static double2 floor(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise round down to nearest integral value of the input. floor(double3) Returns the result of rounding each component of a double3 vector value down to the nearest value less or equal to the original value. public static double3 floor(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise round down to nearest integral value of the input. floor(double4) Returns the result of rounding each component of a double4 vector value down to the nearest value less or equal to the original value. public static double4 floor(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise round down to nearest integral value of the input. floor(float2) Returns the result of rounding each component of a float2 vector value down to the nearest value less or equal to the original value. public static float2 floor(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise round down to nearest integral value of the input. floor(float3) Returns the result of rounding each component of a float3 vector value down to the nearest value less or equal to the original value. public static float3 floor(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise round down to nearest integral value of the input. floor(float4) Returns the result of rounding each component of a float4 vector value down to the nearest value less or equal to the original value. public static float4 floor(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise round down to nearest integral value of the input. floorlog2(int) Computes the floor of the base-2 logarithm of x. public static int floorlog2(int x) 参数 x int Integer to be used as input. 返回 int Floor of base-2 logarithm of x. 备注 x must be greater than zero, otherwise the result is undefined. floorlog2(uint) Computes the floor of the base-2 logarithm of x. public static int floorlog2(uint x) 参数 x uint Unsigned integer to be used as input. 返回 int Floor of base-2 logarithm of x. 备注 x must be greater than zero, otherwise the result is undefined. floorlog2(int2) Computes the componentwise floor of the base-2 logarithm of x. public static int2 floorlog2(int2 x) 参数 x int2 int2 to be used as input. 返回 int2 Componentwise floor of base-2 logarithm of x. 备注 Components of x must be greater than zero, otherwise the result of the component is undefined. floorlog2(int3) Computes the componentwise floor of the base-2 logarithm of x. public static int3 floorlog2(int3 x) 参数 x int3 int3 to be used as input. 返回 int3 Componentwise floor of base-2 logarithm of x. 备注 Components of x must be greater than zero, otherwise the result of the component is undefined. floorlog2(int4) Computes the componentwise floor of the base-2 logarithm of x. public static int4 floorlog2(int4 x) 参数 x int4 int4 to be used as input. 返回 int4 Componentwise floor of base-2 logarithm of x. 备注 Components of x must be greater than zero, otherwise the result of the component is undefined. floorlog2(uint2) Computes the componentwise floor of the base-2 logarithm of x. public static int2 floorlog2(uint2 x) 参数 x uint2 uint2 to be used as input. 返回 int2 Componentwise floor of base-2 logarithm of x. 备注 Components of x must be greater than zero, otherwise the result of the component is undefined. floorlog2(uint3) Computes the componentwise floor of the base-2 logarithm of x. public static int3 floorlog2(uint3 x) 参数 x uint3 uint3 to be used as input. 返回 int3 Componentwise floor of base-2 logarithm of x. 备注 Components of x must be greater than zero, otherwise the result of the component is undefined. floorlog2(uint4) Computes the componentwise floor of the base-2 logarithm of x. public static int4 floorlog2(uint4 x) 参数 x uint4 uint4 to be used as input. 返回 int4 Componentwise floor of base-2 logarithm of x. 备注 Components of x must be greater than zero, otherwise the result of the component is undefined. fmod(double, double) Returns the double precision floating point remainder of x/y. public static double fmod(double x, double y) 参数 x double The dividend in x/y. y double The divisor in x/y. 返回 double The remainder of x/y. fmod(float, float) Returns the floating point remainder of x/y. public static float fmod(float x, float y) 参数 x float The dividend in x/y. y float The divisor in x/y. 返回 float The remainder of x/y. fmod(double2, double2) Returns the componentwise double precision floating point remainder of x/y. public static double2 fmod(double2 x, double2 y) 参数 x double2 The dividend in x/y. y double2 The divisor in x/y. 返回 double2 The componentwise remainder of x/y. fmod(double3, double3) Returns the componentwise double precision floating point remainder of x/y. public static double3 fmod(double3 x, double3 y) 参数 x double3 The dividend in x/y. y double3 The divisor in x/y. 返回 double3 The componentwise remainder of x/y. fmod(double4, double4) Returns the componentwise double precision floating point remainder of x/y. public static double4 fmod(double4 x, double4 y) 参数 x double4 The dividend in x/y. y double4 The divisor in x/y. 返回 double4 The componentwise remainder of x/y. fmod(float2, float2) Returns the componentwise floating point remainder of x/y. public static float2 fmod(float2 x, float2 y) 参数 x float2 The dividend in x/y. y float2 The divisor in x/y. 返回 float2 The componentwise remainder of x/y. fmod(float3, float3) Returns the componentwise floating point remainder of x/y. public static float3 fmod(float3 x, float3 y) 参数 x float3 The dividend in x/y. y float3 The divisor in x/y. 返回 float3 The componentwise remainder of x/y. fmod(float4, float4) Returns the componentwise floating point remainder of x/y. public static float4 fmod(float4 x, float4 y) 参数 x float4 The dividend in x/y. y float4 The divisor in x/y. 返回 float4 The componentwise remainder of x/y. forward() Unity's forward axis (0, 0, 1). public static float3 forward() 返回 float3 The forward axis. 备注 Matches https://docs.unity3d.com/ScriptReference/Vector3-forward.html forward(quaternion) Transforms the forward vector by a quaternion. public static float3 forward(quaternion q) 参数 q quaternion The quaternion transformation. 返回 float3 The forward vector transformed by the input quaternion. frac(double) Returns the fractional part of a double value. public static double frac(double x) 参数 x double Input value. 返回 double The fractional part of the input. frac(float) Returns the fractional part of a float value. public static float frac(float x) 参数 x float Input value. 返回 float The fractional part of the input. frac(double2) Returns the componentwise fractional parts of a double2 vector. public static double2 frac(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise fractional part of the input. frac(double3) Returns the componentwise fractional parts of a double3 vector. public static double3 frac(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise fractional part of the input. frac(double4) Returns the componentwise fractional parts of a double4 vector. public static double4 frac(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise fractional part of the input. frac(float2) Returns the componentwise fractional parts of a float2 vector. public static float2 frac(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise fractional part of the input. frac(float3) Returns the componentwise fractional parts of a float3 vector. public static float3 frac(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise fractional part of the input. frac(float4) Returns the componentwise fractional parts of a float4 vector. public static float4 frac(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise fractional part of the input. half(double) Returns a half value constructed from a double value. public static half half(double v) 参数 v double The double precision float value to convert to half. 返回 half The constructed half value. half(float) Returns a half value constructed from a float value. public static half half(float v) 参数 v float The single precision float value to convert to half. 返回 half The constructed half value. half(half) Returns a half value constructed from a half values. public static half half(half x) 参数 x half The input half value to copy. 返回 half The constructed half value. half2(double) Returns a half2 vector constructed from a single double value by converting it to half and assigning it to every component. public static half2 half2(double v) 参数 v double double to convert to half2 返回 half2 Converted value. half2(float) Returns a half2 vector constructed from a single float value by converting it to half and assigning it to every component. public static half2 half2(float v) 参数 v float float to convert to half2 返回 half2 Converted value. half2(double2) Return a half2 vector constructed from a double2 vector by componentwise conversion. public static half2 half2(double2 v) 参数 v double2 double2 to convert to half2 返回 half2 Converted value. half2(float2) Return a half2 vector constructed from a float2 vector by componentwise conversion. public static half2 half2(float2 v) 参数 v float2 float2 to convert to half2 返回 half2 Converted value. half2(half) Returns a half2 vector constructed from a single half value by assigning it to every component. public static half2 half2(half v) 参数 v half half to convert to half2 返回 half2 Converted value. half2(half, half) Returns a half2 vector constructed from two half values. public static half2 half2(half x, half y) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. 返回 half2 half2 constructed from arguments. half2(half2) Returns a half2 vector constructed from a half2 vector. public static half2 half2(half2 xy) 参数 xy half2 The constructed vector's xy components will be set to this value. 返回 half2 half2 constructed from arguments. half3(double) Returns a half3 vector constructed from a single double value by converting it to half and assigning it to every component. public static half3 half3(double v) 参数 v double double to convert to half3 返回 half3 Converted value. half3(float) Returns a half3 vector constructed from a single float value by converting it to half and assigning it to every component. public static half3 half3(float v) 参数 v float float to convert to half3 返回 half3 Converted value. half3(double3) Return a half3 vector constructed from a double3 vector by componentwise conversion. public static half3 half3(double3 v) 参数 v double3 double3 to convert to half3 返回 half3 Converted value. half3(float3) Return a half3 vector constructed from a float3 vector by componentwise conversion. public static half3 half3(float3 v) 参数 v float3 float3 to convert to half3 返回 half3 Converted value. half3(half) Returns a half3 vector constructed from a single half value by assigning it to every component. public static half3 half3(half v) 参数 v half half to convert to half3 返回 half3 Converted value. half3(half, half, half) Returns a half3 vector constructed from three half values. public static half3 half3(half x, half y, half z) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. z half The constructed vector's z component will be set to this value. 返回 half3 half3 constructed from arguments. half3(half, half2) Returns a half3 vector constructed from a half value and a half2 vector. public static half3 half3(half x, half2 yz) 参数 x half The constructed vector's x component will be set to this value. yz half2 The constructed vector's yz components will be set to this value. 返回 half3 half3 constructed from arguments. half3(half2, half) Returns a half3 vector constructed from a half2 vector and a half value. public static half3 half3(half2 xy, half z) 参数 xy half2 The constructed vector's xy components will be set to this value. z half The constructed vector's z component will be set to this value. 返回 half3 half3 constructed from arguments. half3(half3) Returns a half3 vector constructed from a half3 vector. public static half3 half3(half3 xyz) 参数 xyz half3 The constructed vector's xyz components will be set to this value. 返回 half3 half3 constructed from arguments. half4(double) Returns a half4 vector constructed from a single double value by converting it to half and assigning it to every component. public static half4 half4(double v) 参数 v double double to convert to half4 返回 half4 Converted value. half4(float) Returns a half4 vector constructed from a single float value by converting it to half and assigning it to every component. public static half4 half4(float v) 参数 v float float to convert to half4 返回 half4 Converted value. half4(double4) Return a half4 vector constructed from a double4 vector by componentwise conversion. public static half4 half4(double4 v) 参数 v double4 double4 to convert to half4 返回 half4 Converted value. half4(float4) Return a half4 vector constructed from a float4 vector by componentwise conversion. public static half4 half4(float4 v) 参数 v float4 float4 to convert to half4 返回 half4 Converted value. half4(half) Returns a half4 vector constructed from a single half value by assigning it to every component. public static half4 half4(half v) 参数 v half half to convert to half4 返回 half4 Converted value. half4(half, half, half, half) Returns a half4 vector constructed from four half values. public static half4 half4(half x, half y, half z, half w) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. z half The constructed vector's z component will be set to this value. w half The constructed vector's w component will be set to this value. 返回 half4 half4 constructed from arguments. half4(half, half, half2) Returns a half4 vector constructed from two half values and a half2 vector. public static half4 half4(half x, half y, half2 zw) 参数 x half The constructed vector's x component will be set to this value. y half The constructed vector's y component will be set to this value. zw half2 The constructed vector's zw components will be set to this value. 返回 half4 half4 constructed from arguments. half4(half, half2, half) Returns a half4 vector constructed from a half value, a half2 vector and a half value. public static half4 half4(half x, half2 yz, half w) 参数 x half The constructed vector's x component will be set to this value. yz half2 The constructed vector's yz components will be set to this value. w half The constructed vector's w component will be set to this value. 返回 half4 half4 constructed from arguments. half4(half, half3) Returns a half4 vector constructed from a half value and a half3 vector. public static half4 half4(half x, half3 yzw) 参数 x half The constructed vector's x component will be set to this value. yzw half3 The constructed vector's yzw components will be set to this value. 返回 half4 half4 constructed from arguments. half4(half2, half, half) Returns a half4 vector constructed from a half2 vector and two half values. public static half4 half4(half2 xy, half z, half w) 参数 xy half2 The constructed vector's xy components will be set to this value. z half The constructed vector's z component will be set to this value. w half The constructed vector's w component will be set to this value. 返回 half4 half4 constructed from arguments. half4(half2, half2) Returns a half4 vector constructed from two half2 vectors. public static half4 half4(half2 xy, half2 zw) 参数 xy half2 The constructed vector's xy components will be set to this value. zw half2 The constructed vector's zw components will be set to this value. 返回 half4 half4 constructed from arguments. half4(half3, half) Returns a half4 vector constructed from a half3 vector and a half value. public static half4 half4(half3 xyz, half w) 参数 xyz half3 The constructed vector's xyz components will be set to this value. w half The constructed vector's w component will be set to this value. 返回 half4 half4 constructed from arguments. half4(half4) Returns a half4 vector constructed from a half4 vector. public static half4 half4(half4 xyzw) 参数 xyzw half4 The constructed vector's xyzw components will be set to this value. 返回 half4 half4 constructed from arguments. hash(void*, int, uint) Returns a uint hash from a block of memory using the xxhash32 algorithm. Can only be used in an unsafe context. public static uint hash(void* pBuffer, int numBytes, uint seed = 0) 参数 pBuffer void* A pointer to the beginning of the data. numBytes int Number of bytes to hash. seed uint Starting seed value. 返回 uint The 32 bit hash of the input data buffer. hash(AffineTransform) Returns a uint hash code of an AffineTransform. public static uint hash(AffineTransform a) 参数 a AffineTransform The AffineTransform to hash. 返回 uint The hash code of the input AffineTransform. hash(RigidTransform) Returns a uint hash code of a RigidTransform. public static uint hash(RigidTransform t) 参数 t RigidTransform The RigidTransform to hash. 返回 uint The hash code of the input RigidTransform hash(bool2) Returns a uint hash code of a bool2 vector. public static uint hash(bool2 v) 参数 v bool2 Vector value to hash. 返回 uint uint hash of the argument. hash(bool2x2) Returns a uint hash code of a bool2x2 matrix. public static uint hash(bool2x2 v) 参数 v bool2x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool2x3) Returns a uint hash code of a bool2x3 matrix. public static uint hash(bool2x3 v) 参数 v bool2x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool2x4) Returns a uint hash code of a bool2x4 matrix. public static uint hash(bool2x4 v) 参数 v bool2x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool3) Returns a uint hash code of a bool3 vector. public static uint hash(bool3 v) 参数 v bool3 Vector value to hash. 返回 uint uint hash of the argument. hash(bool3x2) Returns a uint hash code of a bool3x2 matrix. public static uint hash(bool3x2 v) 参数 v bool3x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool3x3) Returns a uint hash code of a bool3x3 matrix. public static uint hash(bool3x3 v) 参数 v bool3x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool3x4) Returns a uint hash code of a bool3x4 matrix. public static uint hash(bool3x4 v) 参数 v bool3x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool4) Returns a uint hash code of a bool4 vector. public static uint hash(bool4 v) 参数 v bool4 Vector value to hash. 返回 uint uint hash of the argument. hash(bool4x2) Returns a uint hash code of a bool4x2 matrix. public static uint hash(bool4x2 v) 参数 v bool4x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool4x3) Returns a uint hash code of a bool4x3 matrix. public static uint hash(bool4x3 v) 参数 v bool4x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(bool4x4) Returns a uint hash code of a bool4x4 matrix. public static uint hash(bool4x4 v) 参数 v bool4x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(double2) Returns a uint hash code of a double2 vector. public static uint hash(double2 v) 参数 v double2 Vector value to hash. 返回 uint uint hash of the argument. hash(double2x2) Returns a uint hash code of a double2x2 matrix. public static uint hash(double2x2 v) 参数 v double2x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(double2x3) Returns a uint hash code of a double2x3 matrix. public static uint hash(double2x3 v) 参数 v double2x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(double2x4) Returns a uint hash code of a double2x4 matrix. public static uint hash(double2x4 v) 参数 v double2x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(double3) Returns a uint hash code of a double3 vector. public static uint hash(double3 v) 参数 v double3 Vector value to hash. 返回 uint uint hash of the argument. hash(double3x2) Returns a uint hash code of a double3x2 matrix. public static uint hash(double3x2 v) 参数 v double3x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(double3x3) Returns a uint hash code of a double3x3 matrix. public static uint hash(double3x3 v) 参数 v double3x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(double3x4) Returns a uint hash code of a double3x4 matrix. public static uint hash(double3x4 v) 参数 v double3x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(double4) Returns a uint hash code of a double4 vector. public static uint hash(double4 v) 参数 v double4 Vector value to hash. 返回 uint uint hash of the argument. hash(double4x2) Returns a uint hash code of a double4x2 matrix. public static uint hash(double4x2 v) 参数 v double4x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(double4x3) Returns a uint hash code of a double4x3 matrix. public static uint hash(double4x3 v) 参数 v double4x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(double4x4) Returns a uint hash code of a double4x4 matrix. public static uint hash(double4x4 v) 参数 v double4x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(float2) Returns a uint hash code of a float2 vector. public static uint hash(float2 v) 参数 v float2 Vector value to hash. 返回 uint uint hash of the argument. hash(float2x2) Returns a uint hash code of a float2x2 matrix. public static uint hash(float2x2 v) 参数 v float2x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(float2x3) Returns a uint hash code of a float2x3 matrix. public static uint hash(float2x3 v) 参数 v float2x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(float2x4) Returns a uint hash code of a float2x4 matrix. public static uint hash(float2x4 v) 参数 v float2x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(float3) Returns a uint hash code of a float3 vector. public static uint hash(float3 v) 参数 v float3 Vector value to hash. 返回 uint uint hash of the argument. hash(float3x2) Returns a uint hash code of a float3x2 matrix. public static uint hash(float3x2 v) 参数 v float3x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(float3x3) Returns a uint hash code of a float3x3 matrix. public static uint hash(float3x3 v) 参数 v float3x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(float3x4) Returns a uint hash code of a float3x4 matrix. public static uint hash(float3x4 v) 参数 v float3x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(float4) Returns a uint hash code of a float4 vector. public static uint hash(float4 v) 参数 v float4 Vector value to hash. 返回 uint uint hash of the argument. hash(float4x2) Returns a uint hash code of a float4x2 matrix. public static uint hash(float4x2 v) 参数 v float4x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(float4x3) Returns a uint hash code of a float4x3 matrix. public static uint hash(float4x3 v) 参数 v float4x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(float4x4) Returns a uint hash code of a float4x4 matrix. public static uint hash(float4x4 v) 参数 v float4x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(half) Returns a uint hash code of a half value. public static uint hash(half v) 参数 v half The half value to hash. 返回 uint The computed hash code of the half value. hash(half2) Returns a uint hash code of a half2 vector. public static uint hash(half2 v) 参数 v half2 Vector value to hash. 返回 uint uint hash of the argument. hash(half3) Returns a uint hash code of a half3 vector. public static uint hash(half3 v) 参数 v half3 Vector value to hash. 返回 uint uint hash of the argument. hash(half4) Returns a uint hash code of a half4 vector. public static uint hash(half4 v) 参数 v half4 Vector value to hash. 返回 uint uint hash of the argument. hash(int2) Returns a uint hash code of a int2 vector. public static uint hash(int2 v) 参数 v int2 Vector value to hash. 返回 uint uint hash of the argument. hash(int2x2) Returns a uint hash code of a int2x2 matrix. public static uint hash(int2x2 v) 参数 v int2x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(int2x3) Returns a uint hash code of a int2x3 matrix. public static uint hash(int2x3 v) 参数 v int2x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(int2x4) Returns a uint hash code of a int2x4 matrix. public static uint hash(int2x4 v) 参数 v int2x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(int3) Returns a uint hash code of a int3 vector. public static uint hash(int3 v) 参数 v int3 Vector value to hash. 返回 uint uint hash of the argument. hash(int3x2) Returns a uint hash code of a int3x2 matrix. public static uint hash(int3x2 v) 参数 v int3x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(int3x3) Returns a uint hash code of a int3x3 matrix. public static uint hash(int3x3 v) 参数 v int3x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(int3x4) Returns a uint hash code of a int3x4 matrix. public static uint hash(int3x4 v) 参数 v int3x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(int4) Returns a uint hash code of a int4 vector. public static uint hash(int4 v) 参数 v int4 Vector value to hash. 返回 uint uint hash of the argument. hash(int4x2) Returns a uint hash code of a int4x2 matrix. public static uint hash(int4x2 v) 参数 v int4x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(int4x3) Returns a uint hash code of a int4x3 matrix. public static uint hash(int4x3 v) 参数 v int4x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(int4x4) Returns a uint hash code of a int4x4 matrix. public static uint hash(int4x4 v) 参数 v int4x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(quaternion) Returns a uint hash code of a quaternion. public static uint hash(quaternion q) 参数 q quaternion The quaternion to hash. 返回 uint The hash code for the input quaternion. hash(uint2) Returns a uint hash code of a uint2 vector. public static uint hash(uint2 v) 参数 v uint2 Vector value to hash. 返回 uint uint hash of the argument. hash(uint2x2) Returns a uint hash code of a uint2x2 matrix. public static uint hash(uint2x2 v) 参数 v uint2x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint2x3) Returns a uint hash code of a uint2x3 matrix. public static uint hash(uint2x3 v) 参数 v uint2x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint2x4) Returns a uint hash code of a uint2x4 matrix. public static uint hash(uint2x4 v) 参数 v uint2x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint3) Returns a uint hash code of a uint3 vector. public static uint hash(uint3 v) 参数 v uint3 Vector value to hash. 返回 uint uint hash of the argument. hash(uint3x2) Returns a uint hash code of a uint3x2 matrix. public static uint hash(uint3x2 v) 参数 v uint3x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint3x3) Returns a uint hash code of a uint3x3 matrix. public static uint hash(uint3x3 v) 参数 v uint3x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint3x4) Returns a uint hash code of a uint3x4 matrix. public static uint hash(uint3x4 v) 参数 v uint3x4 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint4) Returns a uint hash code of a uint4 vector. public static uint hash(uint4 v) 参数 v uint4 Vector value to hash. 返回 uint uint hash of the argument. hash(uint4x2) Returns a uint hash code of a uint4x2 matrix. public static uint hash(uint4x2 v) 参数 v uint4x2 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint4x3) Returns a uint hash code of a uint4x3 matrix. public static uint hash(uint4x3 v) 参数 v uint4x3 Matrix value to hash. 返回 uint uint hash of the argument. hash(uint4x4) Returns a uint hash code of a uint4x4 matrix. public static uint hash(uint4x4 v) 参数 v uint4x4 Matrix value to hash. 返回 uint uint hash of the argument. hashwide(AffineTransform) Returns a uint4 vector hash code of an AffineTransform. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(AffineTransform a) 参数 a AffineTransform The AffineTransform to hash. 返回 uint4 The uint4 wide hash code. hashwide(RigidTransform) Returns a uint4 vector hash code of a RigidTransform. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(RigidTransform t) 参数 t RigidTransform The RigidTransform to hash. 返回 uint4 The uint4 wide hash code. hashwide(bool2) Returns a uint2 vector hash code of a bool2 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(bool2 v) 参数 v bool2 Vector value to hash. 返回 uint2 uint2 hash of the argument. hashwide(bool2x2) Returns a uint2 vector hash code of a bool2x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(bool2x2 v) 参数 v bool2x2 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(bool2x3) Returns a uint2 vector hash code of a bool2x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(bool2x3 v) 参数 v bool2x3 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(bool2x4) Returns a uint2 vector hash code of a bool2x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(bool2x4 v) 参数 v bool2x4 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(bool3) Returns a uint3 vector hash code of a bool3 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(bool3 v) 参数 v bool3 Vector value to hash. 返回 uint3 uint3 hash of the argument. hashwide(bool3x2) Returns a uint3 vector hash code of a bool3x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(bool3x2 v) 参数 v bool3x2 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(bool3x3) Returns a uint3 vector hash code of a bool3x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(bool3x3 v) 参数 v bool3x3 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(bool3x4) Returns a uint3 vector hash code of a bool3x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(bool3x4 v) 参数 v bool3x4 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(bool4) Returns a uint4 vector hash code of a bool4 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(bool4 v) 参数 v bool4 Vector value to hash. 返回 uint4 uint4 hash of the argument. hashwide(bool4x2) Returns a uint4 vector hash code of a bool4x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(bool4x2 v) 参数 v bool4x2 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(bool4x3) Returns a uint4 vector hash code of a bool4x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(bool4x3 v) 参数 v bool4x3 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(bool4x4) Returns a uint4 vector hash code of a bool4x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(bool4x4 v) 参数 v bool4x4 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(double2) Returns a uint2 vector hash code of a double2 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(double2 v) 参数 v double2 Vector value to hash. 返回 uint2 uint2 hash of the argument. hashwide(double2x2) Returns a uint2 vector hash code of a double2x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(double2x2 v) 参数 v double2x2 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(double2x3) Returns a uint2 vector hash code of a double2x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(double2x3 v) 参数 v double2x3 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(double2x4) Returns a uint2 vector hash code of a double2x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(double2x4 v) 参数 v double2x4 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(double3) Returns a uint3 vector hash code of a double3 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(double3 v) 参数 v double3 Vector value to hash. 返回 uint3 uint3 hash of the argument. hashwide(double3x2) Returns a uint3 vector hash code of a double3x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(double3x2 v) 参数 v double3x2 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(double3x3) Returns a uint3 vector hash code of a double3x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(double3x3 v) 参数 v double3x3 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(double3x4) Returns a uint3 vector hash code of a double3x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(double3x4 v) 参数 v double3x4 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(double4) Returns a uint4 vector hash code of a double4 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(double4 v) 参数 v double4 Vector value to hash. 返回 uint4 uint4 hash of the argument. hashwide(double4x2) Returns a uint4 vector hash code of a double4x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(double4x2 v) 参数 v double4x2 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(double4x3) Returns a uint4 vector hash code of a double4x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(double4x3 v) 参数 v double4x3 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(double4x4) Returns a uint4 vector hash code of a double4x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(double4x4 v) 参数 v double4x4 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(float2) Returns a uint2 vector hash code of a float2 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(float2 v) 参数 v float2 Vector value to hash. 返回 uint2 uint2 hash of the argument. hashwide(float2x2) Returns a uint2 vector hash code of a float2x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(float2x2 v) 参数 v float2x2 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(float2x3) Returns a uint2 vector hash code of a float2x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(float2x3 v) 参数 v float2x3 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(float2x4) Returns a uint2 vector hash code of a float2x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(float2x4 v) 参数 v float2x4 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(float3) Returns a uint3 vector hash code of a float3 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(float3 v) 参数 v float3 Vector value to hash. 返回 uint3 uint3 hash of the argument. hashwide(float3x2) Returns a uint3 vector hash code of a float3x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(float3x2 v) 参数 v float3x2 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(float3x3) Returns a uint3 vector hash code of a float3x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(float3x3 v) 参数 v float3x3 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(float3x4) Returns a uint3 vector hash code of a float3x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(float3x4 v) 参数 v float3x4 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(float4) Returns a uint4 vector hash code of a float4 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(float4 v) 参数 v float4 Vector value to hash. 返回 uint4 uint4 hash of the argument. hashwide(float4x2) Returns a uint4 vector hash code of a float4x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(float4x2 v) 参数 v float4x2 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(float4x3) Returns a uint4 vector hash code of a float4x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(float4x3 v) 参数 v float4x3 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(float4x4) Returns a uint4 vector hash code of a float4x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(float4x4 v) 参数 v float4x4 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(half2) Returns a uint2 vector hash code of a half2 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(half2 v) 参数 v half2 Vector value to hash. 返回 uint2 uint2 hash of the argument. hashwide(half3) Returns a uint3 vector hash code of a half3 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(half3 v) 参数 v half3 Vector value to hash. 返回 uint3 uint3 hash of the argument. hashwide(half4) Returns a uint4 vector hash code of a half4 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(half4 v) 参数 v half4 Vector value to hash. 返回 uint4 uint4 hash of the argument. hashwide(int2) Returns a uint2 vector hash code of a int2 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(int2 v) 参数 v int2 Vector value to hash. 返回 uint2 uint2 hash of the argument. hashwide(int2x2) Returns a uint2 vector hash code of a int2x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(int2x2 v) 参数 v int2x2 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(int2x3) Returns a uint2 vector hash code of a int2x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(int2x3 v) 参数 v int2x3 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(int2x4) Returns a uint2 vector hash code of a int2x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(int2x4 v) 参数 v int2x4 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(int3) Returns a uint3 vector hash code of a int3 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(int3 v) 参数 v int3 Vector value to hash. 返回 uint3 uint3 hash of the argument. hashwide(int3x2) Returns a uint3 vector hash code of a int3x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(int3x2 v) 参数 v int3x2 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(int3x3) Returns a uint3 vector hash code of a int3x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(int3x3 v) 参数 v int3x3 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(int3x4) Returns a uint3 vector hash code of a int3x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(int3x4 v) 参数 v int3x4 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(int4) Returns a uint4 vector hash code of a int4 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(int4 v) 参数 v int4 Vector value to hash. 返回 uint4 uint4 hash of the argument. hashwide(int4x2) Returns a uint4 vector hash code of a int4x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(int4x2 v) 参数 v int4x2 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(int4x3) Returns a uint4 vector hash code of a int4x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(int4x3 v) 参数 v int4x3 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(int4x4) Returns a uint4 vector hash code of a int4x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(int4x4 v) 参数 v int4x4 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(quaternion) Returns a uint4 vector hash code of a quaternion. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(quaternion q) 参数 q quaternion The quaternion to hash. 返回 uint4 The uint4 vector hash code of the input quaternion. hashwide(uint2) Returns a uint2 vector hash code of a uint2 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(uint2 v) 参数 v uint2 Vector value to hash. 返回 uint2 uint2 hash of the argument. hashwide(uint2x2) Returns a uint2 vector hash code of a uint2x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(uint2x2 v) 参数 v uint2x2 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(uint2x3) Returns a uint2 vector hash code of a uint2x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(uint2x3 v) 参数 v uint2x3 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(uint2x4) Returns a uint2 vector hash code of a uint2x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint2 hashwide(uint2x4 v) 参数 v uint2x4 Matrix value to hash. 返回 uint2 uint2 hash of the argument. hashwide(uint3) Returns a uint3 vector hash code of a uint3 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(uint3 v) 参数 v uint3 Vector value to hash. 返回 uint3 uint3 hash of the argument. hashwide(uint3x2) Returns a uint3 vector hash code of a uint3x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(uint3x2 v) 参数 v uint3x2 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(uint3x3) Returns a uint3 vector hash code of a uint3x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(uint3x3 v) 参数 v uint3x3 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(uint3x4) Returns a uint3 vector hash code of a uint3x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint3 hashwide(uint3x4 v) 参数 v uint3x4 Matrix value to hash. 返回 uint3 uint3 hash of the argument. hashwide(uint4) Returns a uint4 vector hash code of a uint4 vector. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(uint4 v) 参数 v uint4 Vector value to hash. 返回 uint4 uint4 hash of the argument. hashwide(uint4x2) Returns a uint4 vector hash code of a uint4x2 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(uint4x2 v) 参数 v uint4x2 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(uint4x3) Returns a uint4 vector hash code of a uint4x3 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(uint4x3 v) 参数 v uint4x3 Matrix value to hash. 返回 uint4 uint4 hash of the argument. hashwide(uint4x4) Returns a uint4 vector hash code of a uint4x4 matrix. When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash that are only reduced to a narrow uint hash at the very end instead of at every step. public static uint4 hashwide(uint4x4 v) 参数 v uint4x4 Matrix value to hash. 返回 uint4 uint4 hash of the argument. int2(bool) Returns a int2 vector constructed from a single bool value by converting it to int and assigning it to every component. public static int2 int2(bool v) 参数 v bool bool to convert to int2 返回 int2 Converted value. int2(double) Returns a int2 vector constructed from a single double value by converting it to int and assigning it to every component. public static int2 int2(double v) 参数 v double double to convert to int2 返回 int2 Converted value. int2(int) Returns a int2 vector constructed from a single int value by assigning it to every component. public static int2 int2(int v) 参数 v int int to convert to int2 返回 int2 Converted value. int2(int, int) Returns a int2 vector constructed from two int values. public static int2 int2(int x, int y) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. 返回 int2 int2 constructed from arguments. int2(float) Returns a int2 vector constructed from a single float value by converting it to int and assigning it to every component. public static int2 int2(float v) 参数 v float float to convert to int2 返回 int2 Converted value. int2(uint) Returns a int2 vector constructed from a single uint value by converting it to int and assigning it to every component. public static int2 int2(uint v) 参数 v uint uint to convert to int2 返回 int2 Converted value. int2(bool2) Return a int2 vector constructed from a bool2 vector by componentwise conversion. public static int2 int2(bool2 v) 参数 v bool2 bool2 to convert to int2 返回 int2 Converted value. int2(double2) Return a int2 vector constructed from a double2 vector by componentwise conversion. public static int2 int2(double2 v) 参数 v double2 double2 to convert to int2 返回 int2 Converted value. int2(float2) Return a int2 vector constructed from a float2 vector by componentwise conversion. public static int2 int2(float2 v) 参数 v float2 float2 to convert to int2 返回 int2 Converted value. int2(int2) Returns a int2 vector constructed from an int2 vector. public static int2 int2(int2 xy) 参数 xy int2 The constructed vector's xy components will be set to this value. 返回 int2 int2 constructed from arguments. int2(uint2) Return a int2 vector constructed from a uint2 vector by componentwise conversion. public static int2 int2(uint2 v) 参数 v uint2 uint2 to convert to int2 返回 int2 Converted value. int2x2(bool) Returns a int2x2 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int2x2 int2x2(bool v) 参数 v bool bool to convert to int2x2 返回 int2x2 Converted value. int2x2(double) Returns a int2x2 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int2x2 int2x2(double v) 参数 v double double to convert to int2x2 返回 int2x2 Converted value. int2x2(int) Returns a int2x2 matrix constructed from a single int value by assigning it to every component. public static int2x2 int2x2(int v) 参数 v int int to convert to int2x2 返回 int2x2 Converted value. int2x2(int, int, int, int) Returns a int2x2 matrix constructed from from 4 int values given in row-major order. public static int2x2 int2x2(int m00, int m01, int m10, int m11) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. 返回 int2x2 int2x2 constructed from arguments. int2x2(float) Returns a int2x2 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int2x2 int2x2(float v) 参数 v float float to convert to int2x2 返回 int2x2 Converted value. int2x2(uint) Returns a int2x2 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int2x2 int2x2(uint v) 参数 v uint uint to convert to int2x2 返回 int2x2 Converted value. int2x2(bool2x2) Return a int2x2 matrix constructed from a bool2x2 matrix by componentwise conversion. public static int2x2 int2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to int2x2 返回 int2x2 Converted value. int2x2(double2x2) Return a int2x2 matrix constructed from a double2x2 matrix by componentwise conversion. public static int2x2 int2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to int2x2 返回 int2x2 Converted value. int2x2(float2x2) Return a int2x2 matrix constructed from a float2x2 matrix by componentwise conversion. public static int2x2 int2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to int2x2 返回 int2x2 Converted value. int2x2(int2, int2) Returns a int2x2 matrix constructed from two int2 vectors. public static int2x2 int2x2(int2 c0, int2 c1) 参数 c0 int2 The matrix column c0 will be set to this value. c1 int2 The matrix column c1 will be set to this value. 返回 int2x2 int2x2 constructed from arguments. int2x2(uint2x2) Return a int2x2 matrix constructed from a uint2x2 matrix by componentwise conversion. public static int2x2 int2x2(uint2x2 v) 参数 v uint2x2 uint2x2 to convert to int2x2 返回 int2x2 Converted value. int2x3(bool) Returns a int2x3 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int2x3 int2x3(bool v) 参数 v bool bool to convert to int2x3 返回 int2x3 Converted value. int2x3(double) Returns a int2x3 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int2x3 int2x3(double v) 参数 v double double to convert to int2x3 返回 int2x3 Converted value. int2x3(int) Returns a int2x3 matrix constructed from a single int value by assigning it to every component. public static int2x3 int2x3(int v) 参数 v int int to convert to int2x3 返回 int2x3 Converted value. int2x3(int, int, int, int, int, int) Returns a int2x3 matrix constructed from from 6 int values given in row-major order. public static int2x3 int2x3(int m00, int m01, int m02, int m10, int m11, int m12) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. 返回 int2x3 int2x3 constructed from arguments. int2x3(float) Returns a int2x3 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int2x3 int2x3(float v) 参数 v float float to convert to int2x3 返回 int2x3 Converted value. int2x3(uint) Returns a int2x3 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int2x3 int2x3(uint v) 参数 v uint uint to convert to int2x3 返回 int2x3 Converted value. int2x3(bool2x3) Return a int2x3 matrix constructed from a bool2x3 matrix by componentwise conversion. public static int2x3 int2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to int2x3 返回 int2x3 Converted value. int2x3(double2x3) Return a int2x3 matrix constructed from a double2x3 matrix by componentwise conversion. public static int2x3 int2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to int2x3 返回 int2x3 Converted value. int2x3(float2x3) Return a int2x3 matrix constructed from a float2x3 matrix by componentwise conversion. public static int2x3 int2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to int2x3 返回 int2x3 Converted value. int2x3(int2, int2, int2) Returns a int2x3 matrix constructed from three int2 vectors. public static int2x3 int2x3(int2 c0, int2 c1, int2 c2) 参数 c0 int2 The matrix column c0 will be set to this value. c1 int2 The matrix column c1 will be set to this value. c2 int2 The matrix column c2 will be set to this value. 返回 int2x3 int2x3 constructed from arguments. int2x3(uint2x3) Return a int2x3 matrix constructed from a uint2x3 matrix by componentwise conversion. public static int2x3 int2x3(uint2x3 v) 参数 v uint2x3 uint2x3 to convert to int2x3 返回 int2x3 Converted value. int2x4(bool) Returns a int2x4 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int2x4 int2x4(bool v) 参数 v bool bool to convert to int2x4 返回 int2x4 Converted value. int2x4(double) Returns a int2x4 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int2x4 int2x4(double v) 参数 v double double to convert to int2x4 返回 int2x4 Converted value. int2x4(int) Returns a int2x4 matrix constructed from a single int value by assigning it to every component. public static int2x4 int2x4(int v) 参数 v int int to convert to int2x4 返回 int2x4 Converted value. int2x4(int, int, int, int, int, int, int, int) Returns a int2x4 matrix constructed from from 8 int values given in row-major order. public static int2x4 int2x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m03 int The matrix at row 0, column 3 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m13 int The matrix at row 1, column 3 will be set to this value. 返回 int2x4 int2x4 constructed from arguments. int2x4(float) Returns a int2x4 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int2x4 int2x4(float v) 参数 v float float to convert to int2x4 返回 int2x4 Converted value. int2x4(uint) Returns a int2x4 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int2x4 int2x4(uint v) 参数 v uint uint to convert to int2x4 返回 int2x4 Converted value. int2x4(bool2x4) Return a int2x4 matrix constructed from a bool2x4 matrix by componentwise conversion. public static int2x4 int2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to int2x4 返回 int2x4 Converted value. int2x4(double2x4) Return a int2x4 matrix constructed from a double2x4 matrix by componentwise conversion. public static int2x4 int2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to int2x4 返回 int2x4 Converted value. int2x4(float2x4) Return a int2x4 matrix constructed from a float2x4 matrix by componentwise conversion. public static int2x4 int2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to int2x4 返回 int2x4 Converted value. int2x4(int2, int2, int2, int2) Returns a int2x4 matrix constructed from four int2 vectors. public static int2x4 int2x4(int2 c0, int2 c1, int2 c2, int2 c3) 参数 c0 int2 The matrix column c0 will be set to this value. c1 int2 The matrix column c1 will be set to this value. c2 int2 The matrix column c2 will be set to this value. c3 int2 The matrix column c3 will be set to this value. 返回 int2x4 int2x4 constructed from arguments. int2x4(uint2x4) Return a int2x4 matrix constructed from a uint2x4 matrix by componentwise conversion. public static int2x4 int2x4(uint2x4 v) 参数 v uint2x4 uint2x4 to convert to int2x4 返回 int2x4 Converted value. int3(bool) Returns a int3 vector constructed from a single bool value by converting it to int and assigning it to every component. public static int3 int3(bool v) 参数 v bool bool to convert to int3 返回 int3 Converted value. int3(double) Returns a int3 vector constructed from a single double value by converting it to int and assigning it to every component. public static int3 int3(double v) 参数 v double double to convert to int3 返回 int3 Converted value. int3(int) Returns a int3 vector constructed from a single int value by assigning it to every component. public static int3 int3(int v) 参数 v int int to convert to int3 返回 int3 Converted value. int3(int, int, int) Returns a int3 vector constructed from three int values. public static int3 int3(int x, int y, int z) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. z int The constructed vector's z component will be set to this value. 返回 int3 int3 constructed from arguments. int3(int, int2) Returns a int3 vector constructed from an int value and an int2 vector. public static int3 int3(int x, int2 yz) 参数 x int The constructed vector's x component will be set to this value. yz int2 The constructed vector's yz components will be set to this value. 返回 int3 int3 constructed from arguments. int3(float) Returns a int3 vector constructed from a single float value by converting it to int and assigning it to every component. public static int3 int3(float v) 参数 v float float to convert to int3 返回 int3 Converted value. int3(uint) Returns a int3 vector constructed from a single uint value by converting it to int and assigning it to every component. public static int3 int3(uint v) 参数 v uint uint to convert to int3 返回 int3 Converted value. int3(bool3) Return a int3 vector constructed from a bool3 vector by componentwise conversion. public static int3 int3(bool3 v) 参数 v bool3 bool3 to convert to int3 返回 int3 Converted value. int3(double3) Return a int3 vector constructed from a double3 vector by componentwise conversion. public static int3 int3(double3 v) 参数 v double3 double3 to convert to int3 返回 int3 Converted value. int3(float3) Return a int3 vector constructed from a float3 vector by componentwise conversion. public static int3 int3(float3 v) 参数 v float3 float3 to convert to int3 返回 int3 Converted value. int3(int2, int) Returns a int3 vector constructed from an int2 vector and an int value. public static int3 int3(int2 xy, int z) 参数 xy int2 The constructed vector's xy components will be set to this value. z int The constructed vector's z component will be set to this value. 返回 int3 int3 constructed from arguments. int3(int3) Returns a int3 vector constructed from an int3 vector. public static int3 int3(int3 xyz) 参数 xyz int3 The constructed vector's xyz components will be set to this value. 返回 int3 int3 constructed from arguments. int3(uint3) Return a int3 vector constructed from a uint3 vector by componentwise conversion. public static int3 int3(uint3 v) 参数 v uint3 uint3 to convert to int3 返回 int3 Converted value. int3x2(bool) Returns a int3x2 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int3x2 int3x2(bool v) 参数 v bool bool to convert to int3x2 返回 int3x2 Converted value. int3x2(double) Returns a int3x2 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int3x2 int3x2(double v) 参数 v double double to convert to int3x2 返回 int3x2 Converted value. int3x2(int) Returns a int3x2 matrix constructed from a single int value by assigning it to every component. public static int3x2 int3x2(int v) 参数 v int int to convert to int3x2 返回 int3x2 Converted value. int3x2(int, int, int, int, int, int) Returns a int3x2 matrix constructed from from 6 int values given in row-major order. public static int3x2 int3x2(int m00, int m01, int m10, int m11, int m20, int m21) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. 返回 int3x2 int3x2 constructed from arguments. int3x2(float) Returns a int3x2 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int3x2 int3x2(float v) 参数 v float float to convert to int3x2 返回 int3x2 Converted value. int3x2(uint) Returns a int3x2 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int3x2 int3x2(uint v) 参数 v uint uint to convert to int3x2 返回 int3x2 Converted value. int3x2(bool3x2) Return a int3x2 matrix constructed from a bool3x2 matrix by componentwise conversion. public static int3x2 int3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to int3x2 返回 int3x2 Converted value. int3x2(double3x2) Return a int3x2 matrix constructed from a double3x2 matrix by componentwise conversion. public static int3x2 int3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to int3x2 返回 int3x2 Converted value. int3x2(float3x2) Return a int3x2 matrix constructed from a float3x2 matrix by componentwise conversion. public static int3x2 int3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to int3x2 返回 int3x2 Converted value. int3x2(int3, int3) Returns a int3x2 matrix constructed from two int3 vectors. public static int3x2 int3x2(int3 c0, int3 c1) 参数 c0 int3 The matrix column c0 will be set to this value. c1 int3 The matrix column c1 will be set to this value. 返回 int3x2 int3x2 constructed from arguments. int3x2(uint3x2) Return a int3x2 matrix constructed from a uint3x2 matrix by componentwise conversion. public static int3x2 int3x2(uint3x2 v) 参数 v uint3x2 uint3x2 to convert to int3x2 返回 int3x2 Converted value. int3x3(bool) Returns a int3x3 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int3x3 int3x3(bool v) 参数 v bool bool to convert to int3x3 返回 int3x3 Converted value. int3x3(double) Returns a int3x3 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int3x3 int3x3(double v) 参数 v double double to convert to int3x3 返回 int3x3 Converted value. int3x3(int) Returns a int3x3 matrix constructed from a single int value by assigning it to every component. public static int3x3 int3x3(int v) 参数 v int int to convert to int3x3 返回 int3x3 Converted value. int3x3(int, int, int, int, int, int, int, int, int) Returns a int3x3 matrix constructed from from 9 int values given in row-major order. public static int3x3 int3x3(int m00, int m01, int m02, int m10, int m11, int m12, int m20, int m21, int m22) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. 返回 int3x3 int3x3 constructed from arguments. int3x3(float) Returns a int3x3 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int3x3 int3x3(float v) 参数 v float float to convert to int3x3 返回 int3x3 Converted value. int3x3(uint) Returns a int3x3 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int3x3 int3x3(uint v) 参数 v uint uint to convert to int3x3 返回 int3x3 Converted value. int3x3(bool3x3) Return a int3x3 matrix constructed from a bool3x3 matrix by componentwise conversion. public static int3x3 int3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to int3x3 返回 int3x3 Converted value. int3x3(double3x3) Return a int3x3 matrix constructed from a double3x3 matrix by componentwise conversion. public static int3x3 int3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to int3x3 返回 int3x3 Converted value. int3x3(float3x3) Return a int3x3 matrix constructed from a float3x3 matrix by componentwise conversion. public static int3x3 int3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to int3x3 返回 int3x3 Converted value. int3x3(int3, int3, int3) Returns a int3x3 matrix constructed from three int3 vectors. public static int3x3 int3x3(int3 c0, int3 c1, int3 c2) 参数 c0 int3 The matrix column c0 will be set to this value. c1 int3 The matrix column c1 will be set to this value. c2 int3 The matrix column c2 will be set to this value. 返回 int3x3 int3x3 constructed from arguments. int3x3(uint3x3) Return a int3x3 matrix constructed from a uint3x3 matrix by componentwise conversion. public static int3x3 int3x3(uint3x3 v) 参数 v uint3x3 uint3x3 to convert to int3x3 返回 int3x3 Converted value. int3x4(bool) Returns a int3x4 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int3x4 int3x4(bool v) 参数 v bool bool to convert to int3x4 返回 int3x4 Converted value. int3x4(double) Returns a int3x4 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int3x4 int3x4(double v) 参数 v double double to convert to int3x4 返回 int3x4 Converted value. int3x4(int) Returns a int3x4 matrix constructed from a single int value by assigning it to every component. public static int3x4 int3x4(int v) 参数 v int int to convert to int3x4 返回 int3x4 Converted value. int3x4(int, int, int, int, int, int, int, int, int, int, int, int) Returns a int3x4 matrix constructed from from 12 int values given in row-major order. public static int3x4 int3x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13, int m20, int m21, int m22, int m23) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m03 int The matrix at row 0, column 3 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m13 int The matrix at row 1, column 3 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. m23 int The matrix at row 2, column 3 will be set to this value. 返回 int3x4 int3x4 constructed from arguments. int3x4(float) Returns a int3x4 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int3x4 int3x4(float v) 参数 v float float to convert to int3x4 返回 int3x4 Converted value. int3x4(uint) Returns a int3x4 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int3x4 int3x4(uint v) 参数 v uint uint to convert to int3x4 返回 int3x4 Converted value. int3x4(bool3x4) Return a int3x4 matrix constructed from a bool3x4 matrix by componentwise conversion. public static int3x4 int3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to int3x4 返回 int3x4 Converted value. int3x4(double3x4) Return a int3x4 matrix constructed from a double3x4 matrix by componentwise conversion. public static int3x4 int3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to int3x4 返回 int3x4 Converted value. int3x4(float3x4) Return a int3x4 matrix constructed from a float3x4 matrix by componentwise conversion. public static int3x4 int3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to int3x4 返回 int3x4 Converted value. int3x4(int3, int3, int3, int3) Returns a int3x4 matrix constructed from four int3 vectors. public static int3x4 int3x4(int3 c0, int3 c1, int3 c2, int3 c3) 参数 c0 int3 The matrix column c0 will be set to this value. c1 int3 The matrix column c1 will be set to this value. c2 int3 The matrix column c2 will be set to this value. c3 int3 The matrix column c3 will be set to this value. 返回 int3x4 int3x4 constructed from arguments. int3x4(uint3x4) Return a int3x4 matrix constructed from a uint3x4 matrix by componentwise conversion. public static int3x4 int3x4(uint3x4 v) 参数 v uint3x4 uint3x4 to convert to int3x4 返回 int3x4 Converted value. int4(bool) Returns a int4 vector constructed from a single bool value by converting it to int and assigning it to every component. public static int4 int4(bool v) 参数 v bool bool to convert to int4 返回 int4 Converted value. int4(double) Returns a int4 vector constructed from a single double value by converting it to int and assigning it to every component. public static int4 int4(double v) 参数 v double double to convert to int4 返回 int4 Converted value. int4(int) Returns a int4 vector constructed from a single int value by assigning it to every component. public static int4 int4(int v) 参数 v int int to convert to int4 返回 int4 Converted value. int4(int, int, int, int) Returns a int4 vector constructed from four int values. public static int4 int4(int x, int y, int z, int w) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. z int The constructed vector's z component will be set to this value. w int The constructed vector's w component will be set to this value. 返回 int4 int4 constructed from arguments. int4(int, int, int2) Returns a int4 vector constructed from two int values and an int2 vector. public static int4 int4(int x, int y, int2 zw) 参数 x int The constructed vector's x component will be set to this value. y int The constructed vector's y component will be set to this value. zw int2 The constructed vector's zw components will be set to this value. 返回 int4 int4 constructed from arguments. int4(int, int2, int) Returns a int4 vector constructed from an int value, an int2 vector and an int value. public static int4 int4(int x, int2 yz, int w) 参数 x int The constructed vector's x component will be set to this value. yz int2 The constructed vector's yz components will be set to this value. w int The constructed vector's w component will be set to this value. 返回 int4 int4 constructed from arguments. int4(int, int3) Returns a int4 vector constructed from an int value and an int3 vector. public static int4 int4(int x, int3 yzw) 参数 x int The constructed vector's x component will be set to this value. yzw int3 The constructed vector's yzw components will be set to this value. 返回 int4 int4 constructed from arguments. int4(float) Returns a int4 vector constructed from a single float value by converting it to int and assigning it to every component. public static int4 int4(float v) 参数 v float float to convert to int4 返回 int4 Converted value. int4(uint) Returns a int4 vector constructed from a single uint value by converting it to int and assigning it to every component. public static int4 int4(uint v) 参数 v uint uint to convert to int4 返回 int4 Converted value. int4(bool4) Return a int4 vector constructed from a bool4 vector by componentwise conversion. public static int4 int4(bool4 v) 参数 v bool4 bool4 to convert to int4 返回 int4 Converted value. int4(double4) Return a int4 vector constructed from a double4 vector by componentwise conversion. public static int4 int4(double4 v) 参数 v double4 double4 to convert to int4 返回 int4 Converted value. int4(float4) Return a int4 vector constructed from a float4 vector by componentwise conversion. public static int4 int4(float4 v) 参数 v float4 float4 to convert to int4 返回 int4 Converted value. int4(int2, int, int) Returns a int4 vector constructed from an int2 vector and two int values. public static int4 int4(int2 xy, int z, int w) 参数 xy int2 The constructed vector's xy components will be set to this value. z int The constructed vector's z component will be set to this value. w int The constructed vector's w component will be set to this value. 返回 int4 int4 constructed from arguments. int4(int2, int2) Returns a int4 vector constructed from two int2 vectors. public static int4 int4(int2 xy, int2 zw) 参数 xy int2 The constructed vector's xy components will be set to this value. zw int2 The constructed vector's zw components will be set to this value. 返回 int4 int4 constructed from arguments. int4(int3, int) Returns a int4 vector constructed from an int3 vector and an int value. public static int4 int4(int3 xyz, int w) 参数 xyz int3 The constructed vector's xyz components will be set to this value. w int The constructed vector's w component will be set to this value. 返回 int4 int4 constructed from arguments. int4(int4) Returns a int4 vector constructed from an int4 vector. public static int4 int4(int4 xyzw) 参数 xyzw int4 The constructed vector's xyzw components will be set to this value. 返回 int4 int4 constructed from arguments. int4(uint4) Return a int4 vector constructed from a uint4 vector by componentwise conversion. public static int4 int4(uint4 v) 参数 v uint4 uint4 to convert to int4 返回 int4 Converted value. int4x2(bool) Returns a int4x2 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int4x2 int4x2(bool v) 参数 v bool bool to convert to int4x2 返回 int4x2 Converted value. int4x2(double) Returns a int4x2 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int4x2 int4x2(double v) 参数 v double double to convert to int4x2 返回 int4x2 Converted value. int4x2(int) Returns a int4x2 matrix constructed from a single int value by assigning it to every component. public static int4x2 int4x2(int v) 参数 v int int to convert to int4x2 返回 int4x2 Converted value. int4x2(int, int, int, int, int, int, int, int) Returns a int4x2 matrix constructed from from 8 int values given in row-major order. public static int4x2 int4x2(int m00, int m01, int m10, int m11, int m20, int m21, int m30, int m31) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m30 int The matrix at row 3, column 0 will be set to this value. m31 int The matrix at row 3, column 1 will be set to this value. 返回 int4x2 int4x2 constructed from arguments. int4x2(float) Returns a int4x2 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int4x2 int4x2(float v) 参数 v float float to convert to int4x2 返回 int4x2 Converted value. int4x2(uint) Returns a int4x2 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int4x2 int4x2(uint v) 参数 v uint uint to convert to int4x2 返回 int4x2 Converted value. int4x2(bool4x2) Return a int4x2 matrix constructed from a bool4x2 matrix by componentwise conversion. public static int4x2 int4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to int4x2 返回 int4x2 Converted value. int4x2(double4x2) Return a int4x2 matrix constructed from a double4x2 matrix by componentwise conversion. public static int4x2 int4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to int4x2 返回 int4x2 Converted value. int4x2(float4x2) Return a int4x2 matrix constructed from a float4x2 matrix by componentwise conversion. public static int4x2 int4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to int4x2 返回 int4x2 Converted value. int4x2(int4, int4) Returns a int4x2 matrix constructed from two int4 vectors. public static int4x2 int4x2(int4 c0, int4 c1) 参数 c0 int4 The matrix column c0 will be set to this value. c1 int4 The matrix column c1 will be set to this value. 返回 int4x2 int4x2 constructed from arguments. int4x2(uint4x2) Return a int4x2 matrix constructed from a uint4x2 matrix by componentwise conversion. public static int4x2 int4x2(uint4x2 v) 参数 v uint4x2 uint4x2 to convert to int4x2 返回 int4x2 Converted value. int4x3(bool) Returns a int4x3 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int4x3 int4x3(bool v) 参数 v bool bool to convert to int4x3 返回 int4x3 Converted value. int4x3(double) Returns a int4x3 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int4x3 int4x3(double v) 参数 v double double to convert to int4x3 返回 int4x3 Converted value. int4x3(int) Returns a int4x3 matrix constructed from a single int value by assigning it to every component. public static int4x3 int4x3(int v) 参数 v int int to convert to int4x3 返回 int4x3 Converted value. int4x3(int, int, int, int, int, int, int, int, int, int, int, int) Returns a int4x3 matrix constructed from from 12 int values given in row-major order. public static int4x3 int4x3(int m00, int m01, int m02, int m10, int m11, int m12, int m20, int m21, int m22, int m30, int m31, int m32) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. m30 int The matrix at row 3, column 0 will be set to this value. m31 int The matrix at row 3, column 1 will be set to this value. m32 int The matrix at row 3, column 2 will be set to this value. 返回 int4x3 int4x3 constructed from arguments. int4x3(float) Returns a int4x3 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int4x3 int4x3(float v) 参数 v float float to convert to int4x3 返回 int4x3 Converted value. int4x3(uint) Returns a int4x3 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int4x3 int4x3(uint v) 参数 v uint uint to convert to int4x3 返回 int4x3 Converted value. int4x3(bool4x3) Return a int4x3 matrix constructed from a bool4x3 matrix by componentwise conversion. public static int4x3 int4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to int4x3 返回 int4x3 Converted value. int4x3(double4x3) Return a int4x3 matrix constructed from a double4x3 matrix by componentwise conversion. public static int4x3 int4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to int4x3 返回 int4x3 Converted value. int4x3(float4x3) Return a int4x3 matrix constructed from a float4x3 matrix by componentwise conversion. public static int4x3 int4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to int4x3 返回 int4x3 Converted value. int4x3(int4, int4, int4) Returns a int4x3 matrix constructed from three int4 vectors. public static int4x3 int4x3(int4 c0, int4 c1, int4 c2) 参数 c0 int4 The matrix column c0 will be set to this value. c1 int4 The matrix column c1 will be set to this value. c2 int4 The matrix column c2 will be set to this value. 返回 int4x3 int4x3 constructed from arguments. int4x3(uint4x3) Return a int4x3 matrix constructed from a uint4x3 matrix by componentwise conversion. public static int4x3 int4x3(uint4x3 v) 参数 v uint4x3 uint4x3 to convert to int4x3 返回 int4x3 Converted value. int4x4(bool) Returns a int4x4 matrix constructed from a single bool value by converting it to int and assigning it to every component. public static int4x4 int4x4(bool v) 参数 v bool bool to convert to int4x4 返回 int4x4 Converted value. int4x4(double) Returns a int4x4 matrix constructed from a single double value by converting it to int and assigning it to every component. public static int4x4 int4x4(double v) 参数 v double double to convert to int4x4 返回 int4x4 Converted value. int4x4(int) Returns a int4x4 matrix constructed from a single int value by assigning it to every component. public static int4x4 int4x4(int v) 参数 v int int to convert to int4x4 返回 int4x4 Converted value. int4x4(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) Returns a int4x4 matrix constructed from from 16 int values given in row-major order. public static int4x4 int4x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13, int m20, int m21, int m22, int m23, int m30, int m31, int m32, int m33) 参数 m00 int The matrix at row 0, column 0 will be set to this value. m01 int The matrix at row 0, column 1 will be set to this value. m02 int The matrix at row 0, column 2 will be set to this value. m03 int The matrix at row 0, column 3 will be set to this value. m10 int The matrix at row 1, column 0 will be set to this value. m11 int The matrix at row 1, column 1 will be set to this value. m12 int The matrix at row 1, column 2 will be set to this value. m13 int The matrix at row 1, column 3 will be set to this value. m20 int The matrix at row 2, column 0 will be set to this value. m21 int The matrix at row 2, column 1 will be set to this value. m22 int The matrix at row 2, column 2 will be set to this value. m23 int The matrix at row 2, column 3 will be set to this value. m30 int The matrix at row 3, column 0 will be set to this value. m31 int The matrix at row 3, column 1 will be set to this value. m32 int The matrix at row 3, column 2 will be set to this value. m33 int The matrix at row 3, column 3 will be set to this value. 返回 int4x4 int4x4 constructed from arguments. int4x4(float) Returns a int4x4 matrix constructed from a single float value by converting it to int and assigning it to every component. public static int4x4 int4x4(float v) 参数 v float float to convert to int4x4 返回 int4x4 Converted value. int4x4(uint) Returns a int4x4 matrix constructed from a single uint value by converting it to int and assigning it to every component. public static int4x4 int4x4(uint v) 参数 v uint uint to convert to int4x4 返回 int4x4 Converted value. int4x4(bool4x4) Return a int4x4 matrix constructed from a bool4x4 matrix by componentwise conversion. public static int4x4 int4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to int4x4 返回 int4x4 Converted value. int4x4(double4x4) Return a int4x4 matrix constructed from a double4x4 matrix by componentwise conversion. public static int4x4 int4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to int4x4 返回 int4x4 Converted value. int4x4(float4x4) Return a int4x4 matrix constructed from a float4x4 matrix by componentwise conversion. public static int4x4 int4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to int4x4 返回 int4x4 Converted value. int4x4(int4, int4, int4, int4) Returns a int4x4 matrix constructed from four int4 vectors. public static int4x4 int4x4(int4 c0, int4 c1, int4 c2, int4 c3) 参数 c0 int4 The matrix column c0 will be set to this value. c1 int4 The matrix column c1 will be set to this value. c2 int4 The matrix column c2 will be set to this value. c3 int4 The matrix column c3 will be set to this value. 返回 int4x4 int4x4 constructed from arguments. int4x4(uint4x4) Return a int4x4 matrix constructed from a uint4x4 matrix by componentwise conversion. public static int4x4 int4x4(uint4x4 v) 参数 v uint4x4 uint4x4 to convert to int4x4 返回 int4x4 Converted value. inverse(AffineTransform) Returns the inverse of an AffineTransform. public static AffineTransform inverse(AffineTransform a) 参数 a AffineTransform The AffineTransform to invert. 返回 AffineTransform The inverse AffineTransform. inverse(RigidTransform) Returns the inverse of a RigidTransform. public static RigidTransform inverse(RigidTransform t) 参数 t RigidTransform The RigidTransform to invert. 返回 RigidTransform The inverse RigidTransform. inverse(double2x2) Returns the double2x2 full inverse of a double2x2 matrix. public static double2x2 inverse(double2x2 m) 参数 m double2x2 Matrix to invert. 返回 double2x2 The inverted matrix. inverse(double3x3) Returns the double3x3 full inverse of a double3x3 matrix. public static double3x3 inverse(double3x3 m) 参数 m double3x3 Matrix to invert. 返回 double3x3 The inverted matrix. inverse(double4x4) Returns the double4x4 full inverse of a double4x4 matrix. public static double4x4 inverse(double4x4 m) 参数 m double4x4 Matrix to invert. 返回 double4x4 The inverted matrix. inverse(float2x2) Returns the float2x2 full inverse of a float2x2 matrix. public static float2x2 inverse(float2x2 m) 参数 m float2x2 Matrix to invert. 返回 float2x2 The inverted matrix. inverse(float3x3) Returns the float3x3 full inverse of a float3x3 matrix. public static float3x3 inverse(float3x3 m) 参数 m float3x3 Matrix to invert. 返回 float3x3 The inverted matrix. inverse(float4x4) Returns the float4x4 full inverse of a float4x4 matrix. public static float4x4 inverse(float4x4 m) 参数 m float4x4 Matrix to invert. 返回 float4x4 The inverted matrix. inverse(quaternion) Returns the inverse of a quaternion value. public static quaternion inverse(quaternion q) 参数 q quaternion The quaternion to invert. 返回 quaternion The quaternion inverse of the input quaternion. isfinite(double) Returns true if the input double is a finite floating point value, false otherwise. public static bool isfinite(double x) 参数 x double The double value to test. 返回 bool True if the double is finite, false otherwise. isfinite(float) Returns true if the input float is a finite floating point value, false otherwise. public static bool isfinite(float x) 参数 x float The float value to test. 返回 bool True if the float is finite, false otherwise. isfinite(double2) Returns a bool2 indicating for each component of a double2 whether it is a finite floating point value. public static bool2 isfinite(double2 x) 参数 x double2 The double2 value to test. 返回 bool2 A bool2 where it is true in a component if that component is finite, false otherwise. isfinite(double3) Returns a bool3 indicating for each component of a double3 whether it is a finite floating point value. public static bool3 isfinite(double3 x) 参数 x double3 The double3 value to test. 返回 bool3 A bool3 where it is true in a component if that component is finite, false otherwise. isfinite(double4) Returns a bool4 indicating for each component of a double4 whether it is a finite floating point value. public static bool4 isfinite(double4 x) 参数 x double4 The double4 value to test. 返回 bool4 A bool4 where it is true in a component if that component is finite, false otherwise. isfinite(float2) Returns a bool2 indicating for each component of a float2 whether it is a finite floating point value. public static bool2 isfinite(float2 x) 参数 x float2 The float2 value to test. 返回 bool2 A bool2 where it is true in a component if that component is finite, false otherwise. isfinite(float3) Returns a bool3 indicating for each component of a float3 whether it is a finite floating point value. public static bool3 isfinite(float3 x) 参数 x float3 The float3 value to test. 返回 bool3 A bool3 where it is true in a component if that component is finite, false otherwise. isfinite(float4) Returns a bool4 indicating for each component of a float4 whether it is a finite floating point value. public static bool4 isfinite(float4 x) 参数 x float4 The float4 value to test. 返回 bool4 A bool4 where it is true in a component if that component is finite, false otherwise. isinf(double) Returns true if the input double is an infinite floating point value, false otherwise. public static bool isinf(double x) 参数 x double Input value. 返回 bool True if the input was an infinite value; false otherwise. isinf(float) Returns true if the input float is an infinite floating point value, false otherwise. public static bool isinf(float x) 参数 x float Input value. 返回 bool True if the input was an infinite value; false otherwise. isinf(double2) Returns a bool2 indicating for each component of a double2 whether it is an infinite floating point value. public static bool2 isinf(double2 x) 参数 x double2 Input value. 返回 bool2 True if the component was an infinite value; false otherwise. isinf(double3) Returns a bool3 indicating for each component of a double3 whether it is an infinite floating point value. public static bool3 isinf(double3 x) 参数 x double3 Input value. 返回 bool3 True if the component was an infinite value; false otherwise. isinf(double4) Returns a bool4 indicating for each component of a double4 whether it is an infinite floating point value. public static bool4 isinf(double4 x) 参数 x double4 Input value. 返回 bool4 True if the component was an infinite value; false otherwise. isinf(float2) Returns a bool2 indicating for each component of a float2 whether it is an infinite floating point value. public static bool2 isinf(float2 x) 参数 x float2 Input value. 返回 bool2 True if the component was an infinite value; false otherwise. isinf(float3) Returns a bool3 indicating for each component of a float3 whether it is an infinite floating point value. public static bool3 isinf(float3 x) 参数 x float3 Input value. 返回 bool3 True if the component was an infinite value; false otherwise. isinf(float4) Returns a bool4 indicating for each component of a float4 whether it is an infinite floating point value. public static bool4 isinf(float4 x) 参数 x float4 Input value. 返回 bool4 True if the component was an infinite value; false otherwise. isnan(double) Returns true if the input double is a NaN (not a number) floating point value, false otherwise. public static bool isnan(double x) 参数 x double Input value. 返回 bool True if the value was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(float) Returns true if the input float is a NaN (not a number) floating point value, false otherwise. public static bool isnan(float x) 参数 x float Input value. 返回 bool True if the value was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(double2) Returns a bool2 indicating for each component of a double2 whether it is a NaN (not a number) floating point value. public static bool2 isnan(double2 x) 参数 x double2 Input value. 返回 bool2 True if the component was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(double3) Returns a bool3 indicating for each component of a double3 whether it is a NaN (not a number) floating point value. public static bool3 isnan(double3 x) 参数 x double3 Input value. 返回 bool3 True if the component was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(double4) Returns a bool4 indicating for each component of a double4 whether it is a NaN (not a number) floating point value. public static bool4 isnan(double4 x) 参数 x double4 Input value. 返回 bool4 True if the component was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(float2) Returns a bool2 indicating for each component of a float2 whether it is a NaN (not a number) floating point value. public static bool2 isnan(float2 x) 参数 x float2 Input value. 返回 bool2 True if the component was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(float3) Returns a bool3 indicating for each component of a float3 whether it is a NaN (not a number) floating point value. public static bool3 isnan(float3 x) 参数 x float3 Input value. 返回 bool3 True if the component was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. isnan(float4) Returns a bool4 indicating for each component of a float4 whether it is a NaN (not a number) floating point value. public static bool4 isnan(float4 x) 参数 x float4 Input value. 返回 bool4 True if the component was NaN; false otherwise. 备注 NaN has several representations and may vary across architectures. Use this function to check if you have a NaN. ispow2(int) Checks if the input is a power of two. public static bool ispow2(int x) 参数 x int Integer input. 返回 bool bool where true indicates that input was a power of two. 备注 If x is less than or equal to zero, then this function returns false. ispow2(uint) Checks if the input is a power of two. public static bool ispow2(uint x) 参数 x uint Unsigned integer input. 返回 bool bool where true indicates that input was a power of two. 备注 If x is less than or equal to zero, then this function returns false. ispow2(int2) Checks if each component of the input is a power of two. public static bool2 ispow2(int2 x) 参数 x int2 int2 input 返回 bool2 bool2 where true in a component indicates the same component in the input was a power of two. 备注 If a component of x is less than or equal to zero, then this function returns false in that component. ispow2(int3) Checks if each component of the input is a power of two. public static bool3 ispow2(int3 x) 参数 x int3 int3 input 返回 bool3 bool3 where true in a component indicates the same component in the input was a power of two. 备注 If a component of x is less than or equal to zero, then this function returns false in that component. ispow2(int4) Checks if each component of the input is a power of two. public static bool4 ispow2(int4 x) 参数 x int4 int4 input 返回 bool4 bool4 where true in a component indicates the same component in the input was a power of two. 备注 If a component of x is less than or equal to zero, then this function returns false in that component. ispow2(uint2) Checks if each component of the input is a power of two. public static bool2 ispow2(uint2 x) 参数 x uint2 uint2 input 返回 bool2 bool2 where true in a component indicates the same component in the input was a power of two. 备注 If a component of x is less than or equal to zero, then this function returns false in that component. ispow2(uint3) Checks if each component of the input is a power of two. public static bool3 ispow2(uint3 x) 参数 x uint3 uint3 input 返回 bool3 bool3 where true in a component indicates the same component in the input was a power of two. 备注 If a component of x is less than or equal to zero, then this function returns false in that component. ispow2(uint4) Checks if each component of the input is a power of two. public static bool4 ispow2(uint4 x) 参数 x uint4 uint4 input 返回 bool4 bool4 where true in a component indicates the same component in the input was a power of two. 备注 If a component of x is less than or equal to zero, then this function returns false in that component. left() Unity's left axis (-1, 0, 0). public static float3 left() 返回 float3 The left axis. 备注 Matches https://docs.unity3d.com/ScriptReference/Vector3-left.html length(double) Returns the length of a double value. Equivalent to the absolute value. public static double length(double x) 参数 x double Value to use when computing squared length. 返回 double Squared length of x. length(float) Returns the length of a float value. Equivalent to the absolute value. public static float length(float x) 参数 x float Value to use when computing length. 返回 float Length of x. length(double2) Returns the length of a double2 vector. public static double length(double2 x) 参数 x double2 Vector to use when computing squared length. 返回 double Squared length of vector x. length(double3) Returns the length of a double3 vector. public static double length(double3 x) 参数 x double3 Vector to use when computing squared length. 返回 double Squared length of vector x. length(double4) Returns the length of a double4 vector. public static double length(double4 x) 参数 x double4 Vector to use when computing squared length. 返回 double Squared length of vector x. length(float2) Returns the length of a float2 vector. public static float length(float2 x) 参数 x float2 Vector to use when computing length. 返回 float Length of vector x. length(float3) Returns the length of a float3 vector. public static float length(float3 x) 参数 x float3 Vector to use when computing length. 返回 float Length of vector x. length(float4) Returns the length of a float4 vector. public static float length(float4 x) 参数 x float4 Vector to use when computing length. 返回 float Length of vector x. length(quaternion) Returns the length of a quaternion. public static float length(quaternion q) 参数 q quaternion The input quaternion. 返回 float The length of the input quaternion. lengthsq(double) Returns the squared length of a double value. Equivalent to squaring the value. public static double lengthsq(double x) 参数 x double Value to use when computing squared length. 返回 double Squared length of x. lengthsq(float) Returns the squared length of a float value. Equivalent to squaring the value. public static float lengthsq(float x) 参数 x float Value to use when computing squared length. 返回 float Squared length of x. lengthsq(double2) Returns the squared length of a double2 vector. public static double lengthsq(double2 x) 参数 x double2 Vector to use when computing squared length. 返回 double Squared length of vector x. lengthsq(double3) Returns the squared length of a double3 vector. public static double lengthsq(double3 x) 参数 x double3 Vector to use when computing squared length. 返回 double Squared length of vector x. lengthsq(double4) Returns the squared length of a double4 vector. public static double lengthsq(double4 x) 参数 x double4 Vector to use when computing squared length. 返回 double Squared length of vector x. lengthsq(float2) Returns the squared length of a float2 vector. public static float lengthsq(float2 x) 参数 x float2 Vector to use when computing squared length. 返回 float Squared length of vector x. lengthsq(float3) Returns the squared length of a float3 vector. public static float lengthsq(float3 x) 参数 x float3 Vector to use when computing squared length. 返回 float Squared length of vector x. lengthsq(float4) Returns the squared length of a float4 vector. public static float lengthsq(float4 x) 参数 x float4 Vector to use when computing squared length. 返回 float Squared length of vector x. lengthsq(quaternion) Returns the squared length of a quaternion. public static float lengthsq(quaternion q) 参数 q quaternion The input quaternion. 返回 float The length squared of the input quaternion. lerp(double, double, double) Returns the result of linearly interpolating from x to y using the interpolation parameter t. public static double lerp(double start, double end, double t) 参数 start double The start point, corresponding to the interpolation parameter value of 0. end double The end point, corresponding to the interpolation parameter value of 1. t double The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double The interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float, float, float) Returns the result of linearly interpolating from start to end using the interpolation parameter t. public static float lerp(float start, float end, float t) 参数 start float The start point, corresponding to the interpolation parameter value of 0. end float The end point, corresponding to the interpolation parameter value of 1. t float The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float The interpolation from start to end. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(double2, double2, double) Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t. public static double2 lerp(double2 start, double2 end, double t) 参数 start double2 The start point, corresponding to the interpolation parameter value of 0. end double2 The end point, corresponding to the interpolation parameter value of 1. t double The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double2 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(double2, double2, double2) Returns the result of a componentwise linear interpolating from x to y using the corresponding components of the interpolation parameter t. public static double2 lerp(double2 start, double2 end, double2 t) 参数 start double2 The start point, corresponding to the interpolation parameter value of 0. end double2 The end point, corresponding to the interpolation parameter value of 1. t double2 The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double2 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(double3, double3, double) Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t. public static double3 lerp(double3 start, double3 end, double t) 参数 start double3 The start point, corresponding to the interpolation parameter value of 0. end double3 The end point, corresponding to the interpolation parameter value of 1. t double The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double3 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(double3, double3, double3) Returns the result of a componentwise linear interpolating from x to y using the corresponding components of the interpolation parameter t. public static double3 lerp(double3 start, double3 end, double3 t) 参数 start double3 The start point, corresponding to the interpolation parameter value of 0. end double3 The end point, corresponding to the interpolation parameter value of 1. t double3 The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double3 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(double4, double4, double) Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t. public static double4 lerp(double4 start, double4 end, double t) 参数 start double4 The start point, corresponding to the interpolation parameter value of 0. end double4 The end point, corresponding to the interpolation parameter value of 1. t double The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double4 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(double4, double4, double4) Returns the result of a componentwise linear interpolating from x to y using the corresponding components of the interpolation parameter t. public static double4 lerp(double4 start, double4 end, double4 t) 参数 start double4 The start point, corresponding to the interpolation parameter value of 0. end double4 The end point, corresponding to the interpolation parameter value of 1. t double4 The interpolation parameter. May be a value outside the interval [0, 1]. 返回 double4 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float2, float2, float) Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t. public static float2 lerp(float2 start, float2 end, float t) 参数 start float2 The start point, corresponding to the interpolation parameter value of 0. end float2 The end point, corresponding to the interpolation parameter value of 1. t float The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float2 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float2, float2, float2) Returns the result of a componentwise linear interpolating from x to y using the corresponding components of the interpolation parameter t. public static float2 lerp(float2 start, float2 end, float2 t) 参数 start float2 The start point, corresponding to the interpolation parameter value of 0. end float2 The end point, corresponding to the interpolation parameter value of 1. t float2 The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float2 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float3, float3, float) Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t. public static float3 lerp(float3 start, float3 end, float t) 参数 start float3 The start point, corresponding to the interpolation parameter value of 0. end float3 The end point, corresponding to the interpolation parameter value of 1. t float The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float3 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float3, float3, float3) Returns the result of a componentwise linear interpolating from x to y using the corresponding components of the interpolation parameter t. public static float3 lerp(float3 start, float3 end, float3 t) 参数 start float3 The start point, corresponding to the interpolation parameter value of 0. end float3 The end point, corresponding to the interpolation parameter value of 1. t float3 The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float3 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float4, float4, float) Returns the result of a componentwise linear interpolating from x to y using the interpolation parameter t. public static float4 lerp(float4 start, float4 end, float t) 参数 start float4 The start point, corresponding to the interpolation parameter value of 0. end float4 The end point, corresponding to the interpolation parameter value of 1. t float The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float4 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. lerp(float4, float4, float4) Returns the result of a componentwise linear interpolating from x to y using the corresponding components of the interpolation parameter t. public static float4 lerp(float4 start, float4 end, float4 t) 参数 start float4 The start point, corresponding to the interpolation parameter value of 0. end float4 The end point, corresponding to the interpolation parameter value of 1. t float4 The interpolation parameter. May be a value outside the interval [0, 1]. 返回 float4 The componentwise interpolation from x to y. 备注 If the interpolation parameter is not in the range [0, 1], then this function extrapolates. log(double) Returns the natural logarithm of a double value. public static double log(double x) 参数 x double Input value. 返回 double The natural logarithm of the input. log(float) Returns the natural logarithm of a float value. public static float log(float x) 参数 x float Input value. 返回 float The natural logarithm of the input. log(double2) Returns the componentwise natural logarithm of a double2 vector. public static double2 log(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise natural logarithm of the input. log(double3) Returns the componentwise natural logarithm of a double3 vector. public static double3 log(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise natural logarithm of the input. log(double4) Returns the componentwise natural logarithm of a double4 vector. public static double4 log(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise natural logarithm of the input. log(float2) Returns the componentwise natural logarithm of a float2 vector. public static float2 log(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise natural logarithm of the input. log(float3) Returns the componentwise natural logarithm of a float3 vector. public static float3 log(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise natural logarithm of the input. log(float4) Returns the componentwise natural logarithm of a float4 vector. public static float4 log(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise natural logarithm of the input. log(quaternion) Returns the natural logarithm of a quaternion. public static quaternion log(quaternion q) 参数 q quaternion The quaternion. 返回 quaternion The natural logarithm of the input quaternion. log10(double) Returns the base-10 logarithm of a double value. public static double log10(double x) 参数 x double Input value. 返回 double The base-10 logarithm of the input. log10(float) Returns the base-10 logarithm of a float value. public static float log10(float x) 参数 x float Input value. 返回 float The base-10 logarithm of the input. log10(double2) Returns the componentwise base-10 logarithm of a double2 vector. public static double2 log10(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise base-10 logarithm of the input. log10(double3) Returns the componentwise base-10 logarithm of a double3 vector. public static double3 log10(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise base-10 logarithm of the input. log10(double4) Returns the componentwise base-10 logarithm of a double4 vector. public static double4 log10(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise base-10 logarithm of the input. log10(float2) Returns the componentwise base-10 logarithm of a float2 vector. public static float2 log10(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise base-10 logarithm of the input. log10(float3) Returns the componentwise base-10 logarithm of a float3 vector. public static float3 log10(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise base-10 logarithm of the input. log10(float4) Returns the componentwise base-10 logarithm of a float4 vector. public static float4 log10(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise base-10 logarithm of the input. log2(double) Returns the base-2 logarithm of a double value. public static double log2(double x) 参数 x double Input value. 返回 double The base-2 logarithm of the input. log2(float) Returns the base-2 logarithm of a float value. public static float log2(float x) 参数 x float Input value. 返回 float The base-2 logarithm of the input. log2(double2) Returns the componentwise base-2 logarithm of a double2 vector. public static double2 log2(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise base-2 logarithm of the input. log2(double3) Returns the componentwise base-2 logarithm of a double3 vector. public static double3 log2(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise base-2 logarithm of the input. log2(double4) Returns the componentwise base-2 logarithm of a double4 vector. public static double4 log2(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise base-2 logarithm of the input. log2(float2) Returns the componentwise base-2 logarithm of a float2 vector. public static float2 log2(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise base-2 logarithm of the input. log2(float3) Returns the componentwise base-2 logarithm of a float3 vector. public static float3 log2(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise base-2 logarithm of the input. log2(float4) Returns the componentwise base-2 logarithm of a float4 vector. public static float4 log2(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise base-2 logarithm of the input. lzcnt(int) Returns the componentwise number of leading zeros in the binary representations of an int vector. public static int lzcnt(int x) 参数 x int Input value. 返回 int The number of leading zeros of the input. lzcnt(long) Returns number of leading zeros in the binary representations of a long value. public static int lzcnt(long x) 参数 x long Input value. 返回 int The number of leading zeros of the input. lzcnt(uint) Returns number of leading zeros in the binary representations of a uint value. public static int lzcnt(uint x) 参数 x uint Input value. 返回 int The number of leading zeros of the input. lzcnt(ulong) Returns number of leading zeros in the binary representations of a ulong value. public static int lzcnt(ulong x) 参数 x ulong Input value. 返回 int The number of leading zeros of the input. lzcnt(int2) Returns the componentwise number of leading zeros in the binary representations of an int2 vector. public static int2 lzcnt(int2 x) 参数 x int2 Input value. 返回 int2 The componentwise number of leading zeros of the input. lzcnt(int3) Returns the componentwise number of leading zeros in the binary representations of an int3 vector. public static int3 lzcnt(int3 x) 参数 x int3 Input value. 返回 int3 The componentwise number of leading zeros of the input. lzcnt(int4) Returns the componentwise number of leading zeros in the binary representations of an int4 vector. public static int4 lzcnt(int4 x) 参数 x int4 Input value. 返回 int4 The componentwise number of leading zeros of the input. lzcnt(uint2) Returns the componentwise number of leading zeros in the binary representations of a uint2 vector. public static int2 lzcnt(uint2 x) 参数 x uint2 Input value. 返回 int2 The componentwise number of leading zeros of the input. lzcnt(uint3) Returns the componentwise number of leading zeros in the binary representations of a uint3 vector. public static int3 lzcnt(uint3 x) 参数 x uint3 Input value. 返回 int3 The componentwise number of leading zeros of the input. lzcnt(uint4) Returns the componentwise number of leading zeros in the binary representations of a uint4 vector. public static int4 lzcnt(uint4 x) 参数 x uint4 Input value. 返回 int4 The componentwise number of leading zeros of the input. mad(double, double, double) Returns the result of a multiply-add operation (a * b + c) on 3 double values. public static double mad(double mulA, double mulB, double addC) 参数 mulA double First value to multiply. mulB double Second value to multiply. addC double Third value to add to the product of a and b. 返回 double The multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(int, int, int) Returns the result of a multiply-add operation (a * b + c) on 3 int values. public static int mad(int mulA, int mulB, int addC) 参数 mulA int First value to multiply. mulB int Second value to multiply. addC int Third value to add to the product of a and b. 返回 int The multiply-add of the inputs. mad(long, long, long) Returns the result of a multiply-add operation (a * b + c) on 3 long values. public static long mad(long mulA, long mulB, long addC) 参数 mulA long First value to multiply. mulB long Second value to multiply. addC long Third value to add to the product of a and b. 返回 long The multiply-add of the inputs. mad(float, float, float) Returns the result of a multiply-add operation (a * b + c) on 3 float values. public static float mad(float mulA, float mulB, float addC) 参数 mulA float First value to multiply. mulB float Second value to multiply. addC float Third value to add to the product of a and b. 返回 float The multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(uint, uint, uint) Returns the result of a multiply-add operation (a * b + c) on 3 uint values. public static uint mad(uint mulA, uint mulB, uint addC) 参数 mulA uint First value to multiply. mulB uint Second value to multiply. addC uint Third value to add to the product of a and b. 返回 uint The multiply-add of the inputs. mad(ulong, ulong, ulong) Returns the result of a multiply-add operation (a * b + c) on 3 ulong values. public static ulong mad(ulong mulA, ulong mulB, ulong addC) 参数 mulA ulong First value to multiply. mulB ulong Second value to multiply. addC ulong Third value to add to the product of a and b. 返回 ulong The multiply-add of the inputs. mad(double2, double2, double2) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 double2 vectors. public static double2 mad(double2 mulA, double2 mulB, double2 addC) 参数 mulA double2 First value to multiply. mulB double2 Second value to multiply. addC double2 Third value to add to the product of a and b. 返回 double2 The componentwise multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(double3, double3, double3) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 double3 vectors. public static double3 mad(double3 mulA, double3 mulB, double3 addC) 参数 mulA double3 First value to multiply. mulB double3 Second value to multiply. addC double3 Third value to add to the product of a and b. 返回 double3 The componentwise multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(double4, double4, double4) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 double4 vectors. public static double4 mad(double4 mulA, double4 mulB, double4 addC) 参数 mulA double4 First value to multiply. mulB double4 Second value to multiply. addC double4 Third value to add to the product of a and b. 返回 double4 The componentwise multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(float2, float2, float2) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 float2 vectors. public static float2 mad(float2 mulA, float2 mulB, float2 addC) 参数 mulA float2 First value to multiply. mulB float2 Second value to multiply. addC float2 Third value to add to the product of a and b. 返回 float2 The componentwise multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(float3, float3, float3) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 float3 vectors. public static float3 mad(float3 mulA, float3 mulB, float3 addC) 参数 mulA float3 First value to multiply. mulB float3 Second value to multiply. addC float3 Third value to add to the product of a and b. 返回 float3 The componentwise multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(float4, float4, float4) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 float4 vectors. public static float4 mad(float4 mulA, float4 mulB, float4 addC) 参数 mulA float4 First value to multiply. mulB float4 Second value to multiply. addC float4 Third value to add to the product of a and b. 返回 float4 The componentwise multiply-add of the inputs. 备注 When Burst compiled with fast math enabled on some architectures, this could be converted to a fused multiply add (FMA). FMA is more accurate due to rounding once at the end of the computation rather than twice that is required when this computation is not fused. mad(int2, int2, int2) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 int2 vectors. public static int2 mad(int2 mulA, int2 mulB, int2 addC) 参数 mulA int2 First value to multiply. mulB int2 Second value to multiply. addC int2 Third value to add to the product of a and b. 返回 int2 The componentwise multiply-add of the inputs. mad(int3, int3, int3) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 int3 vectors. public static int3 mad(int3 mulA, int3 mulB, int3 addC) 参数 mulA int3 First value to multiply. mulB int3 Second value to multiply. addC int3 Third value to add to the product of a and b. 返回 int3 The componentwise multiply-add of the inputs. mad(int4, int4, int4) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 int4 vectors. public static int4 mad(int4 mulA, int4 mulB, int4 addC) 参数 mulA int4 First value to multiply. mulB int4 Second value to multiply. addC int4 Third value to add to the product of a and b. 返回 int4 The componentwise multiply-add of the inputs. mad(uint2, uint2, uint2) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 uint2 vectors. public static uint2 mad(uint2 mulA, uint2 mulB, uint2 addC) 参数 mulA uint2 First value to multiply. mulB uint2 Second value to multiply. addC uint2 Third value to add to the product of a and b. 返回 uint2 The componentwise multiply-add of the inputs. mad(uint3, uint3, uint3) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 uint3 vectors. public static uint3 mad(uint3 mulA, uint3 mulB, uint3 addC) 参数 mulA uint3 First value to multiply. mulB uint3 Second value to multiply. addC uint3 Third value to add to the product of a and b. 返回 uint3 The componentwise multiply-add of the inputs. mad(uint4, uint4, uint4) Returns the result of a componentwise multiply-add operation (a * b + c) on 3 uint4 vectors. public static uint4 mad(uint4 mulA, uint4 mulB, uint4 addC) 参数 mulA uint4 First value to multiply. mulB uint4 Second value to multiply. addC uint4 Third value to add to the product of a and b. 返回 uint4 The componentwise multiply-add of the inputs. max(double, double) Returns the maximum of two double values. public static double max(double x, double y) 参数 x double The first input value. y double The second input value. 返回 double The maximum of the two input values. max(int, int) Returns the maximum of two int values. public static int max(int x, int y) 参数 x int The first input value. y int The second input value. 返回 int The maximum of the two input values. max(long, long) Returns the maximum of two long values. public static long max(long x, long y) 参数 x long The first input value. y long The second input value. 返回 long The maximum of the two input values. max(float, float) Returns the maximum of two float values. public static float max(float x, float y) 参数 x float The first input value. y float The second input value. 返回 float The maximum of the two input values. max(uint, uint) Returns the maximum of two uint values. public static uint max(uint x, uint y) 参数 x uint The first input value. y uint The second input value. 返回 uint The maximum of the two input values. max(ulong, ulong) Returns the maximum of two ulong values. public static ulong max(ulong x, ulong y) 参数 x ulong The first input value. y ulong The second input value. 返回 ulong The maximum of the two input values. max(double2, double2) Returns the componentwise maximum of two double2 vectors. public static double2 max(double2 x, double2 y) 参数 x double2 The first input value. y double2 The second input value. 返回 double2 The componentwise maximum of the two input values. max(double3, double3) Returns the componentwise maximum of two double3 vectors. public static double3 max(double3 x, double3 y) 参数 x double3 The first input value. y double3 The second input value. 返回 double3 The componentwise maximum of the two input values. max(double4, double4) Returns the componentwise maximum of two double4 vectors. public static double4 max(double4 x, double4 y) 参数 x double4 The first input value. y double4 The second input value. 返回 double4 The componentwise maximum of the two input values. max(float2, float2) Returns the componentwise maximum of two float2 vectors. public static float2 max(float2 x, float2 y) 参数 x float2 The first input value. y float2 The second input value. 返回 float2 The componentwise maximum of the two input values. max(float3, float3) Returns the componentwise maximum of two float3 vectors. public static float3 max(float3 x, float3 y) 参数 x float3 The first input value. y float3 The second input value. 返回 float3 The componentwise maximum of the two input values. max(float4, float4) Returns the componentwise maximum of two float4 vectors. public static float4 max(float4 x, float4 y) 参数 x float4 The first input value. y float4 The second input value. 返回 float4 The componentwise maximum of the two input values. max(int2, int2) Returns the componentwise maximum of two int2 vectors. public static int2 max(int2 x, int2 y) 参数 x int2 The first input value. y int2 The second input value. 返回 int2 The componentwise maximum of the two input values. max(int3, int3) Returns the componentwise maximum of two int3 vectors. public static int3 max(int3 x, int3 y) 参数 x int3 The first input value. y int3 The second input value. 返回 int3 The componentwise maximum of the two input values. max(int4, int4) Returns the componentwise maximum of two int4 vectors. public static int4 max(int4 x, int4 y) 参数 x int4 The first input value. y int4 The second input value. 返回 int4 The componentwise maximum of the two input values. max(uint2, uint2) Returns the componentwise maximum of two uint2 vectors. public static uint2 max(uint2 x, uint2 y) 参数 x uint2 The first input value. y uint2 The second input value. 返回 uint2 The componentwise maximum of the two input values. max(uint3, uint3) Returns the componentwise maximum of two uint3 vectors. public static uint3 max(uint3 x, uint3 y) 参数 x uint3 The first input value. y uint3 The second input value. 返回 uint3 The componentwise maximum of the two input values. max(uint4, uint4) Returns the componentwise maximum of two uint4 vectors. public static uint4 max(uint4 x, uint4 y) 参数 x uint4 The first input value. y uint4 The second input value. 返回 uint4 The componentwise maximum of the two input values. min(double, double) Returns the minimum of two double values. public static double min(double x, double y) 参数 x double The first input value. y double The second input value. 返回 double The minimum of the two input values. min(int, int) Returns the minimum of two int values. public static int min(int x, int y) 参数 x int The first input value. y int The second input value. 返回 int The minimum of the two input values. min(long, long) Returns the minimum of two long values. public static long min(long x, long y) 参数 x long The first input value. y long The second input value. 返回 long The minimum of the two input values. min(float, float) Returns the minimum of two float values. public static float min(float x, float y) 参数 x float The first input value. y float The second input value. 返回 float The minimum of the two input values. min(uint, uint) Returns the minimum of two uint values. public static uint min(uint x, uint y) 参数 x uint The first input value. y uint The second input value. 返回 uint The minimum of the two input values. min(ulong, ulong) Returns the minimum of two ulong values. public static ulong min(ulong x, ulong y) 参数 x ulong The first input value. y ulong The second input value. 返回 ulong The minimum of the two input values. min(double2, double2) Returns the componentwise minimum of two double2 vectors. public static double2 min(double2 x, double2 y) 参数 x double2 The first input value. y double2 The second input value. 返回 double2 The componentwise minimum of the two input values. min(double3, double3) Returns the componentwise minimum of two double3 vectors. public static double3 min(double3 x, double3 y) 参数 x double3 The first input value. y double3 The second input value. 返回 double3 The componentwise minimum of the two input values. min(double4, double4) Returns the componentwise minimum of two double4 vectors. public static double4 min(double4 x, double4 y) 参数 x double4 The first input value. y double4 The second input value. 返回 double4 The componentwise minimum of the two input values. min(float2, float2) Returns the componentwise minimum of two float2 vectors. public static float2 min(float2 x, float2 y) 参数 x float2 The first input value. y float2 The second input value. 返回 float2 The componentwise minimum of the two input values. min(float3, float3) Returns the componentwise minimum of two float3 vectors. public static float3 min(float3 x, float3 y) 参数 x float3 The first input value. y float3 The second input value. 返回 float3 The componentwise minimum of the two input values. min(float4, float4) Returns the componentwise minimum of two float4 vectors. public static float4 min(float4 x, float4 y) 参数 x float4 The first input value. y float4 The second input value. 返回 float4 The componentwise minimum of the two input values. min(int2, int2) Returns the componentwise minimum of two int2 vectors. public static int2 min(int2 x, int2 y) 参数 x int2 The first input value. y int2 The second input value. 返回 int2 The componentwise minimum of the two input values. min(int3, int3) Returns the componentwise minimum of two int3 vectors. public static int3 min(int3 x, int3 y) 参数 x int3 The first input value. y int3 The second input value. 返回 int3 The componentwise minimum of the two input values. min(int4, int4) Returns the componentwise minimum of two int4 vectors. public static int4 min(int4 x, int4 y) 参数 x int4 The first input value. y int4 The second input value. 返回 int4 The componentwise minimum of the two input values. min(uint2, uint2) Returns the componentwise minimum of two uint2 vectors. public static uint2 min(uint2 x, uint2 y) 参数 x uint2 The first input value. y uint2 The second input value. 返回 uint2 The componentwise minimum of the two input values. min(uint3, uint3) Returns the componentwise minimum of two uint3 vectors. public static uint3 min(uint3 x, uint3 y) 参数 x uint3 The first input value. y uint3 The second input value. 返回 uint3 The componentwise minimum of the two input values. min(uint4, uint4) Returns the componentwise minimum of two uint4 vectors. public static uint4 min(uint4 x, uint4 y) 参数 x uint4 The first input value. y uint4 The second input value. 返回 uint4 The componentwise minimum of the two input values. modf(double, out double) Splits a double value into an integral part i and a fractional part that gets returned. Both parts take the sign of the input. public static double modf(double x, out double i) 参数 x double Value to split into integral and fractional part. i double Output value containing integral part of x. 返回 double The fractional part of x. modf(float, out float) Splits a float value into an integral part i and a fractional part that gets returned. Both parts take the sign of the input. public static float modf(float x, out float i) 参数 x float Value to split into integral and fractional part. i float Output value containing integral part of x. 返回 float The fractional part of x. modf(double2, out double2) Performs a componentwise split of a double2 vector into an integral part i and a fractional part that gets returned. Both parts take the sign of the corresponding input component. public static double2 modf(double2 x, out double2 i) 参数 x double2 Value to split into integral and fractional part. i double2 Output value containing integral part of x. 返回 double2 The componentwise fractional part of x. modf(double3, out double3) Performs a componentwise split of a double3 vector into an integral part i and a fractional part that gets returned. Both parts take the sign of the corresponding input component. public static double3 modf(double3 x, out double3 i) 参数 x double3 Value to split into integral and fractional part. i double3 Output value containing integral part of x. 返回 double3 The componentwise fractional part of x. modf(double4, out double4) Performs a componentwise split of a double4 vector into an integral part i and a fractional part that gets returned. Both parts take the sign of the corresponding input component. public static double4 modf(double4 x, out double4 i) 参数 x double4 Value to split into integral and fractional part. i double4 Output value containing integral part of x. 返回 double4 The componentwise fractional part of x. modf(float2, out float2) Performs a componentwise split of a float2 vector into an integral part i and a fractional part that gets returned. Both parts take the sign of the corresponding input component. public static float2 modf(float2 x, out float2 i) 参数 x float2 Value to split into integral and fractional part. i float2 Output value containing integral part of x. 返回 float2 The componentwise fractional part of x. modf(float3, out float3) Performs a componentwise split of a float3 vector into an integral part i and a fractional part that gets returned. Both parts take the sign of the corresponding input component. public static float3 modf(float3 x, out float3 i) 参数 x float3 Value to split into integral and fractional part. i float3 Output value containing integral part of x. 返回 float3 The componentwise fractional part of x. modf(float4, out float4) Performs a componentwise split of a float4 vector into an integral part i and a fractional part that gets returned. Both parts take the sign of the corresponding input component. public static float4 modf(float4 x, out float4 i) 参数 x float4 Value to split into integral and fractional part. i float4 Output value containing integral part of x. 返回 float4 The componentwise fractional part of x. mul(double, double) Returns the double value result of a matrix multiplication between a double value and a double value. public static double mul(double a, double b) 参数 a double Left hand side argument of the matrix multiply. b double Right hand side argument of the matrix multiply. 返回 double The computed matrix multiplication. mul(int, int) Returns the int value result of a matrix multiplication between an int value and an int value. public static int mul(int a, int b) 参数 a int Left hand side argument of the matrix multiply. b int Right hand side argument of the matrix multiply. 返回 int The computed matrix multiplication. mul(float, float) Returns the float value result of a matrix multiplication between a float value and a float value. public static float mul(float a, float b) 参数 a float Left hand side argument of the matrix multiply. b float Right hand side argument of the matrix multiply. 返回 float The computed matrix multiplication. mul(uint, uint) Returns the uint value result of a matrix multiplication between a uint value and a uint value. public static uint mul(uint a, uint b) 参数 a uint Left hand side argument of the matrix multiply. b uint Right hand side argument of the matrix multiply. 返回 uint The computed matrix multiplication. mul(AffineTransform, AffineTransform) Returns the result of transforming the AffineTransform b by the AffineTransform a. public static AffineTransform mul(AffineTransform a, AffineTransform b) 参数 a AffineTransform The AffineTransform on the left. b AffineTransform The AffineTransform on the right. 返回 AffineTransform The AffineTransform of a transforming b. mul(AffineTransform, float3x3) Returns the result of transforming the float3x3 b by an AffineTransform a. public static AffineTransform mul(AffineTransform a, float3x3 b) 参数 a AffineTransform The AffineTransform on the left. b float3x3 The float3x3 matrix on the right. 返回 AffineTransform The AffineTransform of a transforming b. mul(AffineTransform, float4) Returns the result of transforming a float4 homogeneous coordinate by an AffineTransform. public static float4 mul(AffineTransform a, float4 pos) 参数 a AffineTransform The AffineTransform. pos float4 The position to be transformed. 返回 float4 The transformed position. mul(RigidTransform, RigidTransform) Returns the result of transforming the RigidTransform b by the RigidTransform a. public static RigidTransform mul(RigidTransform a, RigidTransform b) 参数 a RigidTransform The RigidTransform on the left. b RigidTransform The RigidTransform on the right. 返回 RigidTransform The RigidTransform of a transforming b. mul(RigidTransform, float4) Returns the result of transforming a float4 homogeneous coordinate by a RigidTransform. public static float4 mul(RigidTransform a, float4 pos) 参数 a RigidTransform The RigidTransform. pos float4 The position to be transformed. 返回 float4 The transformed position. mul(double2, double2) Returns the double value result of a matrix multiplication between a double2 row vector and a double2 column vector. public static double mul(double2 a, double2 b) 参数 a double2 Left hand side argument of the matrix multiply. b double2 Right hand side argument of the matrix multiply. 返回 double The computed matrix multiplication. mul(double2, double2x2) Returns the double2 row vector result of a matrix multiplication between a double2 row vector and a double2x2 matrix. public static double2 mul(double2 a, double2x2 b) 参数 a double2 Left hand side argument of the matrix multiply. b double2x2 Right hand side argument of the matrix multiply. 返回 double2 The computed matrix multiplication. mul(double2, double2x3) Returns the double3 row vector result of a matrix multiplication between a double2 row vector and a double2x3 matrix. public static double3 mul(double2 a, double2x3 b) 参数 a double2 Left hand side argument of the matrix multiply. b double2x3 Right hand side argument of the matrix multiply. 返回 double3 The computed matrix multiplication. mul(double2, double2x4) Returns the double4 row vector result of a matrix multiplication between a double2 row vector and a double2x4 matrix. public static double4 mul(double2 a, double2x4 b) 参数 a double2 Left hand side argument of the matrix multiply. b double2x4 Right hand side argument of the matrix multiply. 返回 double4 The computed matrix multiplication. mul(double2x2, double2) Returns the double2 column vector result of a matrix multiplication between a double2x2 matrix and a double2 column vector. public static double2 mul(double2x2 a, double2 b) 参数 a double2x2 Left hand side argument of the matrix multiply. b double2 Right hand side argument of the matrix multiply. 返回 double2 The computed matrix multiplication. mul(double2x2, double2x2) Returns the double2x2 matrix result of a matrix multiplication between a double2x2 matrix and a double2x2 matrix. public static double2x2 mul(double2x2 a, double2x2 b) 参数 a double2x2 Left hand side argument of the matrix multiply. b double2x2 Right hand side argument of the matrix multiply. 返回 double2x2 The computed matrix multiplication. mul(double2x2, double2x3) Returns the double2x3 matrix result of a matrix multiplication between a double2x2 matrix and a double2x3 matrix. public static double2x3 mul(double2x2 a, double2x3 b) 参数 a double2x2 Left hand side argument of the matrix multiply. b double2x3 Right hand side argument of the matrix multiply. 返回 double2x3 The computed matrix multiplication. mul(double2x2, double2x4) Returns the double2x4 matrix result of a matrix multiplication between a double2x2 matrix and a double2x4 matrix. public static double2x4 mul(double2x2 a, double2x4 b) 参数 a double2x2 Left hand side argument of the matrix multiply. b double2x4 Right hand side argument of the matrix multiply. 返回 double2x4 The computed matrix multiplication. mul(double2x3, double3) Returns the double2 column vector result of a matrix multiplication between a double2x3 matrix and a double3 column vector. public static double2 mul(double2x3 a, double3 b) 参数 a double2x3 Left hand side argument of the matrix multiply. b double3 Right hand side argument of the matrix multiply. 返回 double2 The computed matrix multiplication. mul(double2x3, double3x2) Returns the double2x2 matrix result of a matrix multiplication between a double2x3 matrix and a double3x2 matrix. public static double2x2 mul(double2x3 a, double3x2 b) 参数 a double2x3 Left hand side argument of the matrix multiply. b double3x2 Right hand side argument of the matrix multiply. 返回 double2x2 The computed matrix multiplication. mul(double2x3, double3x3) Returns the double2x3 matrix result of a matrix multiplication between a double2x3 matrix and a double3x3 matrix. public static double2x3 mul(double2x3 a, double3x3 b) 参数 a double2x3 Left hand side argument of the matrix multiply. b double3x3 Right hand side argument of the matrix multiply. 返回 double2x3 The computed matrix multiplication. mul(double2x3, double3x4) Returns the double2x4 matrix result of a matrix multiplication between a double2x3 matrix and a double3x4 matrix. public static double2x4 mul(double2x3 a, double3x4 b) 参数 a double2x3 Left hand side argument of the matrix multiply. b double3x4 Right hand side argument of the matrix multiply. 返回 double2x4 The computed matrix multiplication. mul(double2x4, double4) Returns the double2 column vector result of a matrix multiplication between a double2x4 matrix and a double4 column vector. public static double2 mul(double2x4 a, double4 b) 参数 a double2x4 Left hand side argument of the matrix multiply. b double4 Right hand side argument of the matrix multiply. 返回 double2 The computed matrix multiplication. mul(double2x4, double4x2) Returns the double2x2 matrix result of a matrix multiplication between a double2x4 matrix and a double4x2 matrix. public static double2x2 mul(double2x4 a, double4x2 b) 参数 a double2x4 Left hand side argument of the matrix multiply. b double4x2 Right hand side argument of the matrix multiply. 返回 double2x2 The computed matrix multiplication. mul(double2x4, double4x3) Returns the double2x3 matrix result of a matrix multiplication between a double2x4 matrix and a double4x3 matrix. public static double2x3 mul(double2x4 a, double4x3 b) 参数 a double2x4 Left hand side argument of the matrix multiply. b double4x3 Right hand side argument of the matrix multiply. 返回 double2x3 The computed matrix multiplication. mul(double2x4, double4x4) Returns the double2x4 matrix result of a matrix multiplication between a double2x4 matrix and a double4x4 matrix. public static double2x4 mul(double2x4 a, double4x4 b) 参数 a double2x4 Left hand side argument of the matrix multiply. b double4x4 Right hand side argument of the matrix multiply. 返回 double2x4 The computed matrix multiplication. mul(double3, double3) Returns the double value result of a matrix multiplication between a double3 row vector and a double3 column vector. public static double mul(double3 a, double3 b) 参数 a double3 Left hand side argument of the matrix multiply. b double3 Right hand side argument of the matrix multiply. 返回 double The computed matrix multiplication. mul(double3, double3x2) Returns the double2 row vector result of a matrix multiplication between a double3 row vector and a double3x2 matrix. public static double2 mul(double3 a, double3x2 b) 参数 a double3 Left hand side argument of the matrix multiply. b double3x2 Right hand side argument of the matrix multiply. 返回 double2 The computed matrix multiplication. mul(double3, double3x3) Returns the double3 row vector result of a matrix multiplication between a double3 row vector and a double3x3 matrix. public static double3 mul(double3 a, double3x3 b) 参数 a double3 Left hand side argument of the matrix multiply. b double3x3 Right hand side argument of the matrix multiply. 返回 double3 The computed matrix multiplication. mul(double3, double3x4) Returns the double4 row vector result of a matrix multiplication between a double3 row vector and a double3x4 matrix. public static double4 mul(double3 a, double3x4 b) 参数 a double3 Left hand side argument of the matrix multiply. b double3x4 Right hand side argument of the matrix multiply. 返回 double4 The computed matrix multiplication. mul(double3x2, double2) Returns the double3 column vector result of a matrix multiplication between a double3x2 matrix and a double2 column vector. public static double3 mul(double3x2 a, double2 b) 参数 a double3x2 Left hand side argument of the matrix multiply. b double2 Right hand side argument of the matrix multiply. 返回 double3 The computed matrix multiplication. mul(double3x2, double2x2) Returns the double3x2 matrix result of a matrix multiplication between a double3x2 matrix and a double2x2 matrix. public static double3x2 mul(double3x2 a, double2x2 b) 参数 a double3x2 Left hand side argument of the matrix multiply. b double2x2 Right hand side argument of the matrix multiply. 返回 double3x2 The computed matrix multiplication. mul(double3x2, double2x3) Returns the double3x3 matrix result of a matrix multiplication between a double3x2 matrix and a double2x3 matrix. public static double3x3 mul(double3x2 a, double2x3 b) 参数 a double3x2 Left hand side argument of the matrix multiply. b double2x3 Right hand side argument of the matrix multiply. 返回 double3x3 The computed matrix multiplication. mul(double3x2, double2x4) Returns the double3x4 matrix result of a matrix multiplication between a double3x2 matrix and a double2x4 matrix. public static double3x4 mul(double3x2 a, double2x4 b) 参数 a double3x2 Left hand side argument of the matrix multiply. b double2x4 Right hand side argument of the matrix multiply. 返回 double3x4 The computed matrix multiplication. mul(double3x3, double3) Returns the double3 column vector result of a matrix multiplication between a double3x3 matrix and a double3 column vector. public static double3 mul(double3x3 a, double3 b) 参数 a double3x3 Left hand side argument of the matrix multiply. b double3 Right hand side argument of the matrix multiply. 返回 double3 The computed matrix multiplication. mul(double3x3, double3x2) Returns the double3x2 matrix result of a matrix multiplication between a double3x3 matrix and a double3x2 matrix. public static double3x2 mul(double3x3 a, double3x2 b) 参数 a double3x3 Left hand side argument of the matrix multiply. b double3x2 Right hand side argument of the matrix multiply. 返回 double3x2 The computed matrix multiplication. mul(double3x3, double3x3) Returns the double3x3 matrix result of a matrix multiplication between a double3x3 matrix and a double3x3 matrix. public static double3x3 mul(double3x3 a, double3x3 b) 参数 a double3x3 Left hand side argument of the matrix multiply. b double3x3 Right hand side argument of the matrix multiply. 返回 double3x3 The computed matrix multiplication. mul(double3x3, double3x4) Returns the double3x4 matrix result of a matrix multiplication between a double3x3 matrix and a double3x4 matrix. public static double3x4 mul(double3x3 a, double3x4 b) 参数 a double3x3 Left hand side argument of the matrix multiply. b double3x4 Right hand side argument of the matrix multiply. 返回 double3x4 The computed matrix multiplication. mul(double3x4, double4) Returns the double3 column vector result of a matrix multiplication between a double3x4 matrix and a double4 column vector. public static double3 mul(double3x4 a, double4 b) 参数 a double3x4 Left hand side argument of the matrix multiply. b double4 Right hand side argument of the matrix multiply. 返回 double3 The computed matrix multiplication. mul(double3x4, double4x2) Returns the double3x2 matrix result of a matrix multiplication between a double3x4 matrix and a double4x2 matrix. public static double3x2 mul(double3x4 a, double4x2 b) 参数 a double3x4 Left hand side argument of the matrix multiply. b double4x2 Right hand side argument of the matrix multiply. 返回 double3x2 The computed matrix multiplication. mul(double3x4, double4x3) Returns the double3x3 matrix result of a matrix multiplication between a double3x4 matrix and a double4x3 matrix. public static double3x3 mul(double3x4 a, double4x3 b) 参数 a double3x4 Left hand side argument of the matrix multiply. b double4x3 Right hand side argument of the matrix multiply. 返回 double3x3 The computed matrix multiplication. mul(double3x4, double4x4) Returns the double3x4 matrix result of a matrix multiplication between a double3x4 matrix and a double4x4 matrix. public static double3x4 mul(double3x4 a, double4x4 b) 参数 a double3x4 Left hand side argument of the matrix multiply. b double4x4 Right hand side argument of the matrix multiply. 返回 double3x4 The computed matrix multiplication. mul(double4, double4) Returns the double value result of a matrix multiplication between a double4 row vector and a double4 column vector. public static double mul(double4 a, double4 b) 参数 a double4 Left hand side argument of the matrix multiply. b double4 Right hand side argument of the matrix multiply. 返回 double The computed matrix multiplication. mul(double4, double4x2) Returns the double2 row vector result of a matrix multiplication between a double4 row vector and a double4x2 matrix. public static double2 mul(double4 a, double4x2 b) 参数 a double4 Left hand side argument of the matrix multiply. b double4x2 Right hand side argument of the matrix multiply. 返回 double2 The computed matrix multiplication. mul(double4, double4x3) Returns the double3 row vector result of a matrix multiplication between a double4 row vector and a double4x3 matrix. public static double3 mul(double4 a, double4x3 b) 参数 a double4 Left hand side argument of the matrix multiply. b double4x3 Right hand side argument of the matrix multiply. 返回 double3 The computed matrix multiplication. mul(double4, double4x4) Returns the double4 row vector result of a matrix multiplication between a double4 row vector and a double4x4 matrix. public static double4 mul(double4 a, double4x4 b) 参数 a double4 Left hand side argument of the matrix multiply. b double4x4 Right hand side argument of the matrix multiply. 返回 double4 The computed matrix multiplication. mul(double4x2, double2) Returns the double4 column vector result of a matrix multiplication between a double4x2 matrix and a double2 column vector. public static double4 mul(double4x2 a, double2 b) 参数 a double4x2 Left hand side argument of the matrix multiply. b double2 Right hand side argument of the matrix multiply. 返回 double4 The computed matrix multiplication. mul(double4x2, double2x2) Returns the double4x2 matrix result of a matrix multiplication between a double4x2 matrix and a double2x2 matrix. public static double4x2 mul(double4x2 a, double2x2 b) 参数 a double4x2 Left hand side argument of the matrix multiply. b double2x2 Right hand side argument of the matrix multiply. 返回 double4x2 The computed matrix multiplication. mul(double4x2, double2x3) Returns the double4x3 matrix result of a matrix multiplication between a double4x2 matrix and a double2x3 matrix. public static double4x3 mul(double4x2 a, double2x3 b) 参数 a double4x2 Left hand side argument of the matrix multiply. b double2x3 Right hand side argument of the matrix multiply. 返回 double4x3 The computed matrix multiplication. mul(double4x2, double2x4) Returns the double4x4 matrix result of a matrix multiplication between a double4x2 matrix and a double2x4 matrix. public static double4x4 mul(double4x2 a, double2x4 b) 参数 a double4x2 Left hand side argument of the matrix multiply. b double2x4 Right hand side argument of the matrix multiply. 返回 double4x4 The computed matrix multiplication. mul(double4x3, double3) Returns the double4 column vector result of a matrix multiplication between a double4x3 matrix and a double3 column vector. public static double4 mul(double4x3 a, double3 b) 参数 a double4x3 Left hand side argument of the matrix multiply. b double3 Right hand side argument of the matrix multiply. 返回 double4 The computed matrix multiplication. mul(double4x3, double3x2) Returns the double4x2 matrix result of a matrix multiplication between a double4x3 matrix and a double3x2 matrix. public static double4x2 mul(double4x3 a, double3x2 b) 参数 a double4x3 Left hand side argument of the matrix multiply. b double3x2 Right hand side argument of the matrix multiply. 返回 double4x2 The computed matrix multiplication. mul(double4x3, double3x3) Returns the double4x3 matrix result of a matrix multiplication between a double4x3 matrix and a double3x3 matrix. public static double4x3 mul(double4x3 a, double3x3 b) 参数 a double4x3 Left hand side argument of the matrix multiply. b double3x3 Right hand side argument of the matrix multiply. 返回 double4x3 The computed matrix multiplication. mul(double4x3, double3x4) Returns the double4x4 matrix result of a matrix multiplication between a double4x3 matrix and a double3x4 matrix. public static double4x4 mul(double4x3 a, double3x4 b) 参数 a double4x3 Left hand side argument of the matrix multiply. b double3x4 Right hand side argument of the matrix multiply. 返回 double4x4 The computed matrix multiplication. mul(double4x4, double4) Returns the double4 column vector result of a matrix multiplication between a double4x4 matrix and a double4 column vector. public static double4 mul(double4x4 a, double4 b) 参数 a double4x4 Left hand side argument of the matrix multiply. b double4 Right hand side argument of the matrix multiply. 返回 double4 The computed matrix multiplication. mul(double4x4, double4x2) Returns the double4x2 matrix result of a matrix multiplication between a double4x4 matrix and a double4x2 matrix. public static double4x2 mul(double4x4 a, double4x2 b) 参数 a double4x4 Left hand side argument of the matrix multiply. b double4x2 Right hand side argument of the matrix multiply. 返回 double4x2 The computed matrix multiplication. mul(double4x4, double4x3) Returns the double4x3 matrix result of a matrix multiplication between a double4x4 matrix and a double4x3 matrix. public static double4x3 mul(double4x4 a, double4x3 b) 参数 a double4x4 Left hand side argument of the matrix multiply. b double4x3 Right hand side argument of the matrix multiply. 返回 double4x3 The computed matrix multiplication. mul(double4x4, double4x4) Returns the double4x4 matrix result of a matrix multiplication between a double4x4 matrix and a double4x4 matrix. public static double4x4 mul(double4x4 a, double4x4 b) 参数 a double4x4 Left hand side argument of the matrix multiply. b double4x4 Right hand side argument of the matrix multiply. 返回 double4x4 The computed matrix multiplication. mul(float2, float2) Returns the float value result of a matrix multiplication between a float2 row vector and a float2 column vector. public static float mul(float2 a, float2 b) 参数 a float2 Left hand side argument of the matrix multiply. b float2 Right hand side argument of the matrix multiply. 返回 float The computed matrix multiplication. mul(float2, float2x2) Returns the float2 row vector result of a matrix multiplication between a float2 row vector and a float2x2 matrix. public static float2 mul(float2 a, float2x2 b) 参数 a float2 Left hand side argument of the matrix multiply. b float2x2 Right hand side argument of the matrix multiply. 返回 float2 The computed matrix multiplication. mul(float2, float2x3) Returns the float3 row vector result of a matrix multiplication between a float2 row vector and a float2x3 matrix. public static float3 mul(float2 a, float2x3 b) 参数 a float2 Left hand side argument of the matrix multiply. b float2x3 Right hand side argument of the matrix multiply. 返回 float3 The computed matrix multiplication. mul(float2, float2x4) Returns the float4 row vector result of a matrix multiplication between a float2 row vector and a float2x4 matrix. public static float4 mul(float2 a, float2x4 b) 参数 a float2 Left hand side argument of the matrix multiply. b float2x4 Right hand side argument of the matrix multiply. 返回 float4 The computed matrix multiplication. mul(float2x2, float2) Returns the float2 column vector result of a matrix multiplication between a float2x2 matrix and a float2 column vector. public static float2 mul(float2x2 a, float2 b) 参数 a float2x2 Left hand side argument of the matrix multiply. b float2 Right hand side argument of the matrix multiply. 返回 float2 The computed matrix multiplication. mul(float2x2, float2x2) Returns the float2x2 matrix result of a matrix multiplication between a float2x2 matrix and a float2x2 matrix. public static float2x2 mul(float2x2 a, float2x2 b) 参数 a float2x2 Left hand side argument of the matrix multiply. b float2x2 Right hand side argument of the matrix multiply. 返回 float2x2 The computed matrix multiplication. mul(float2x2, float2x3) Returns the float2x3 matrix result of a matrix multiplication between a float2x2 matrix and a float2x3 matrix. public static float2x3 mul(float2x2 a, float2x3 b) 参数 a float2x2 Left hand side argument of the matrix multiply. b float2x3 Right hand side argument of the matrix multiply. 返回 float2x3 The computed matrix multiplication. mul(float2x2, float2x4) Returns the float2x4 matrix result of a matrix multiplication between a float2x2 matrix and a float2x4 matrix. public static float2x4 mul(float2x2 a, float2x4 b) 参数 a float2x2 Left hand side argument of the matrix multiply. b float2x4 Right hand side argument of the matrix multiply. 返回 float2x4 The computed matrix multiplication. mul(float2x3, float3) Returns the float2 column vector result of a matrix multiplication between a float2x3 matrix and a float3 column vector. public static float2 mul(float2x3 a, float3 b) 参数 a float2x3 Left hand side argument of the matrix multiply. b float3 Right hand side argument of the matrix multiply. 返回 float2 The computed matrix multiplication. mul(float2x3, float3x2) Returns the float2x2 matrix result of a matrix multiplication between a float2x3 matrix and a float3x2 matrix. public static float2x2 mul(float2x3 a, float3x2 b) 参数 a float2x3 Left hand side argument of the matrix multiply. b float3x2 Right hand side argument of the matrix multiply. 返回 float2x2 The computed matrix multiplication. mul(float2x3, float3x3) Returns the float2x3 matrix result of a matrix multiplication between a float2x3 matrix and a float3x3 matrix. public static float2x3 mul(float2x3 a, float3x3 b) 参数 a float2x3 Left hand side argument of the matrix multiply. b float3x3 Right hand side argument of the matrix multiply. 返回 float2x3 The computed matrix multiplication. mul(float2x3, float3x4) Returns the float2x4 matrix result of a matrix multiplication between a float2x3 matrix and a float3x4 matrix. public static float2x4 mul(float2x3 a, float3x4 b) 参数 a float2x3 Left hand side argument of the matrix multiply. b float3x4 Right hand side argument of the matrix multiply. 返回 float2x4 The computed matrix multiplication. mul(float2x4, float4) Returns the float2 column vector result of a matrix multiplication between a float2x4 matrix and a float4 column vector. public static float2 mul(float2x4 a, float4 b) 参数 a float2x4 Left hand side argument of the matrix multiply. b float4 Right hand side argument of the matrix multiply. 返回 float2 The computed matrix multiplication. mul(float2x4, float4x2) Returns the float2x2 matrix result of a matrix multiplication between a float2x4 matrix and a float4x2 matrix. public static float2x2 mul(float2x4 a, float4x2 b) 参数 a float2x4 Left hand side argument of the matrix multiply. b float4x2 Right hand side argument of the matrix multiply. 返回 float2x2 The computed matrix multiplication. mul(float2x4, float4x3) Returns the float2x3 matrix result of a matrix multiplication between a float2x4 matrix and a float4x3 matrix. public static float2x3 mul(float2x4 a, float4x3 b) 参数 a float2x4 Left hand side argument of the matrix multiply. b float4x3 Right hand side argument of the matrix multiply. 返回 float2x3 The computed matrix multiplication. mul(float2x4, float4x4) Returns the float2x4 matrix result of a matrix multiplication between a float2x4 matrix and a float4x4 matrix. public static float2x4 mul(float2x4 a, float4x4 b) 参数 a float2x4 Left hand side argument of the matrix multiply. b float4x4 Right hand side argument of the matrix multiply. 返回 float2x4 The computed matrix multiplication. mul(float3, float3) Returns the float value result of a matrix multiplication between a float3 row vector and a float3 column vector. public static float mul(float3 a, float3 b) 参数 a float3 Left hand side argument of the matrix multiply. b float3 Right hand side argument of the matrix multiply. 返回 float The computed matrix multiplication. mul(float3, float3x2) Returns the float2 row vector result of a matrix multiplication between a float3 row vector and a float3x2 matrix. public static float2 mul(float3 a, float3x2 b) 参数 a float3 Left hand side argument of the matrix multiply. b float3x2 Right hand side argument of the matrix multiply. 返回 float2 The computed matrix multiplication. mul(float3, float3x3) Returns the float3 row vector result of a matrix multiplication between a float3 row vector and a float3x3 matrix. public static float3 mul(float3 a, float3x3 b) 参数 a float3 Left hand side argument of the matrix multiply. b float3x3 Right hand side argument of the matrix multiply. 返回 float3 The computed matrix multiplication. mul(float3, float3x4) Returns the float4 row vector result of a matrix multiplication between a float3 row vector and a float3x4 matrix. public static float4 mul(float3 a, float3x4 b) 参数 a float3 Left hand side argument of the matrix multiply. b float3x4 Right hand side argument of the matrix multiply. 返回 float4 The computed matrix multiplication. mul(float3x2, float2) Returns the float3 column vector result of a matrix multiplication between a float3x2 matrix and a float2 column vector. public static float3 mul(float3x2 a, float2 b) 参数 a float3x2 Left hand side argument of the matrix multiply. b float2 Right hand side argument of the matrix multiply. 返回 float3 The computed matrix multiplication. mul(float3x2, float2x2) Returns the float3x2 matrix result of a matrix multiplication between a float3x2 matrix and a float2x2 matrix. public static float3x2 mul(float3x2 a, float2x2 b) 参数 a float3x2 Left hand side argument of the matrix multiply. b float2x2 Right hand side argument of the matrix multiply. 返回 float3x2 The computed matrix multiplication. mul(float3x2, float2x3) Returns the float3x3 matrix result of a matrix multiplication between a float3x2 matrix and a float2x3 matrix. public static float3x3 mul(float3x2 a, float2x3 b) 参数 a float3x2 Left hand side argument of the matrix multiply. b float2x3 Right hand side argument of the matrix multiply. 返回 float3x3 The computed matrix multiplication. mul(float3x2, float2x4) Returns the float3x4 matrix result of a matrix multiplication between a float3x2 matrix and a float2x4 matrix. public static float3x4 mul(float3x2 a, float2x4 b) 参数 a float3x2 Left hand side argument of the matrix multiply. b float2x4 Right hand side argument of the matrix multiply. 返回 float3x4 The computed matrix multiplication. mul(float3x3, AffineTransform) Returns the result of transforming the AffineTransform b by a float3x3 matrix a. public static AffineTransform mul(float3x3 a, AffineTransform b) 参数 a float3x3 The float3x3 matrix on the left. b AffineTransform The AffineTransform on the right. 返回 AffineTransform The AffineTransform of a transforming b. mul(float3x3, float3) Returns the float3 column vector result of a matrix multiplication between a float3x3 matrix and a float3 column vector. public static float3 mul(float3x3 a, float3 b) 参数 a float3x3 Left hand side argument of the matrix multiply. b float3 Right hand side argument of the matrix multiply. 返回 float3 The computed matrix multiplication. mul(float3x3, float3x2) Returns the float3x2 matrix result of a matrix multiplication between a float3x3 matrix and a float3x2 matrix. public static float3x2 mul(float3x3 a, float3x2 b) 参数 a float3x3 Left hand side argument of the matrix multiply. b float3x2 Right hand side argument of the matrix multiply. 返回 float3x2 The computed matrix multiplication. mul(float3x3, float3x3) Returns the float3x3 matrix result of a matrix multiplication between a float3x3 matrix and a float3x3 matrix. public static float3x3 mul(float3x3 a, float3x3 b) 参数 a float3x3 Left hand side argument of the matrix multiply. b float3x3 Right hand side argument of the matrix multiply. 返回 float3x3 The computed matrix multiplication. mul(float3x3, float3x4) Returns the float3x4 matrix result of a matrix multiplication between a float3x3 matrix and a float3x4 matrix. public static float3x4 mul(float3x3 a, float3x4 b) 参数 a float3x3 Left hand side argument of the matrix multiply. b float3x4 Right hand side argument of the matrix multiply. 返回 float3x4 The computed matrix multiplication. mul(float3x4, float4) Returns the float3 column vector result of a matrix multiplication between a float3x4 matrix and a float4 column vector. public static float3 mul(float3x4 a, float4 b) 参数 a float3x4 Left hand side argument of the matrix multiply. b float4 Right hand side argument of the matrix multiply. 返回 float3 The computed matrix multiplication. mul(float3x4, float4x2) Returns the float3x2 matrix result of a matrix multiplication between a float3x4 matrix and a float4x2 matrix. public static float3x2 mul(float3x4 a, float4x2 b) 参数 a float3x4 Left hand side argument of the matrix multiply. b float4x2 Right hand side argument of the matrix multiply. 返回 float3x2 The computed matrix multiplication. mul(float3x4, float4x3) Returns the float3x3 matrix result of a matrix multiplication between a float3x4 matrix and a float4x3 matrix. public static float3x3 mul(float3x4 a, float4x3 b) 参数 a float3x4 Left hand side argument of the matrix multiply. b float4x3 Right hand side argument of the matrix multiply. 返回 float3x3 The computed matrix multiplication. mul(float3x4, float4x4) Returns the float3x4 matrix result of a matrix multiplication between a float3x4 matrix and a float4x4 matrix. public static float3x4 mul(float3x4 a, float4x4 b) 参数 a float3x4 Left hand side argument of the matrix multiply. b float4x4 Right hand side argument of the matrix multiply. 返回 float3x4 The computed matrix multiplication. mul(float4, float4) Returns the float value result of a matrix multiplication between a float4 row vector and a float4 column vector. public static float mul(float4 a, float4 b) 参数 a float4 Left hand side argument of the matrix multiply. b float4 Right hand side argument of the matrix multiply. 返回 float The computed matrix multiplication. mul(float4, float4x2) Returns the float2 row vector result of a matrix multiplication between a float4 row vector and a float4x2 matrix. public static float2 mul(float4 a, float4x2 b) 参数 a float4 Left hand side argument of the matrix multiply. b float4x2 Right hand side argument of the matrix multiply. 返回 float2 The computed matrix multiplication. mul(float4, float4x3) Returns the float3 row vector result of a matrix multiplication between a float4 row vector and a float4x3 matrix. public static float3 mul(float4 a, float4x3 b) 参数 a float4 Left hand side argument of the matrix multiply. b float4x3 Right hand side argument of the matrix multiply. 返回 float3 The computed matrix multiplication. mul(float4, float4x4) Returns the float4 row vector result of a matrix multiplication between a float4 row vector and a float4x4 matrix. public static float4 mul(float4 a, float4x4 b) 参数 a float4 Left hand side argument of the matrix multiply. b float4x4 Right hand side argument of the matrix multiply. 返回 float4 The computed matrix multiplication. mul(float4x2, float2) Returns the float4 column vector result of a matrix multiplication between a float4x2 matrix and a float2 column vector. public static float4 mul(float4x2 a, float2 b) 参数 a float4x2 Left hand side argument of the matrix multiply. b float2 Right hand side argument of the matrix multiply. 返回 float4 The computed matrix multiplication. mul(float4x2, float2x2) Returns the float4x2 matrix result of a matrix multiplication between a float4x2 matrix and a float2x2 matrix. public static float4x2 mul(float4x2 a, float2x2 b) 参数 a float4x2 Left hand side argument of the matrix multiply. b float2x2 Right hand side argument of the matrix multiply. 返回 float4x2 The computed matrix multiplication. mul(float4x2, float2x3) Returns the float4x3 matrix result of a matrix multiplication between a float4x2 matrix and a float2x3 matrix. public static float4x3 mul(float4x2 a, float2x3 b) 参数 a float4x2 Left hand side argument of the matrix multiply. b float2x3 Right hand side argument of the matrix multiply. 返回 float4x3 The computed matrix multiplication. mul(float4x2, float2x4) Returns the float4x4 matrix result of a matrix multiplication between a float4x2 matrix and a float2x4 matrix. public static float4x4 mul(float4x2 a, float2x4 b) 参数 a float4x2 Left hand side argument of the matrix multiply. b float2x4 Right hand side argument of the matrix multiply. 返回 float4x4 The computed matrix multiplication. mul(float4x3, float3) Returns the float4 column vector result of a matrix multiplication between a float4x3 matrix and a float3 column vector. public static float4 mul(float4x3 a, float3 b) 参数 a float4x3 Left hand side argument of the matrix multiply. b float3 Right hand side argument of the matrix multiply. 返回 float4 The computed matrix multiplication. mul(float4x3, float3x2) Returns the float4x2 matrix result of a matrix multiplication between a float4x3 matrix and a float3x2 matrix. public static float4x2 mul(float4x3 a, float3x2 b) 参数 a float4x3 Left hand side argument of the matrix multiply. b float3x2 Right hand side argument of the matrix multiply. 返回 float4x2 The computed matrix multiplication. mul(float4x3, float3x3) Returns the float4x3 matrix result of a matrix multiplication between a float4x3 matrix and a float3x3 matrix. public static float4x3 mul(float4x3 a, float3x3 b) 参数 a float4x3 Left hand side argument of the matrix multiply. b float3x3 Right hand side argument of the matrix multiply. 返回 float4x3 The computed matrix multiplication. mul(float4x3, float3x4) Returns the float4x4 matrix result of a matrix multiplication between a float4x3 matrix and a float3x4 matrix. public static float4x4 mul(float4x3 a, float3x4 b) 参数 a float4x3 Left hand side argument of the matrix multiply. b float3x4 Right hand side argument of the matrix multiply. 返回 float4x4 The computed matrix multiplication. mul(float4x4, float4) Returns the float4 column vector result of a matrix multiplication between a float4x4 matrix and a float4 column vector. public static float4 mul(float4x4 a, float4 b) 参数 a float4x4 Left hand side argument of the matrix multiply. b float4 Right hand side argument of the matrix multiply. 返回 float4 The computed matrix multiplication. mul(float4x4, float4x2) Returns the float4x2 matrix result of a matrix multiplication between a float4x4 matrix and a float4x2 matrix. public static float4x2 mul(float4x4 a, float4x2 b) 参数 a float4x4 Left hand side argument of the matrix multiply. b float4x2 Right hand side argument of the matrix multiply. 返回 float4x2 The computed matrix multiplication. mul(float4x4, float4x3) Returns the float4x3 matrix result of a matrix multiplication between a float4x4 matrix and a float4x3 matrix. public static float4x3 mul(float4x4 a, float4x3 b) 参数 a float4x4 Left hand side argument of the matrix multiply. b float4x3 Right hand side argument of the matrix multiply. 返回 float4x3 The computed matrix multiplication. mul(float4x4, float4x4) Returns the float4x4 matrix result of a matrix multiplication between a float4x4 matrix and a float4x4 matrix. public static float4x4 mul(float4x4 a, float4x4 b) 参数 a float4x4 Left hand side argument of the matrix multiply. b float4x4 Right hand side argument of the matrix multiply. 返回 float4x4 The computed matrix multiplication. mul(int2, int2) Returns the int value result of a matrix multiplication between an int2 row vector and an int2 column vector. public static int mul(int2 a, int2 b) 参数 a int2 Left hand side argument of the matrix multiply. b int2 Right hand side argument of the matrix multiply. 返回 int The computed matrix multiplication. mul(int2, int2x2) Returns the int2 row vector result of a matrix multiplication between an int2 row vector and an int2x2 matrix. public static int2 mul(int2 a, int2x2 b) 参数 a int2 Left hand side argument of the matrix multiply. b int2x2 Right hand side argument of the matrix multiply. 返回 int2 The computed matrix multiplication. mul(int2, int2x3) Returns the int3 row vector result of a matrix multiplication between an int2 row vector and an int2x3 matrix. public static int3 mul(int2 a, int2x3 b) 参数 a int2 Left hand side argument of the matrix multiply. b int2x3 Right hand side argument of the matrix multiply. 返回 int3 The computed matrix multiplication. mul(int2, int2x4) Returns the int4 row vector result of a matrix multiplication between an int2 row vector and an int2x4 matrix. public static int4 mul(int2 a, int2x4 b) 参数 a int2 Left hand side argument of the matrix multiply. b int2x4 Right hand side argument of the matrix multiply. 返回 int4 The computed matrix multiplication. mul(int2x2, int2) Returns the int2 column vector result of a matrix multiplication between an int2x2 matrix and an int2 column vector. public static int2 mul(int2x2 a, int2 b) 参数 a int2x2 Left hand side argument of the matrix multiply. b int2 Right hand side argument of the matrix multiply. 返回 int2 The computed matrix multiplication. mul(int2x2, int2x2) Returns the int2x2 matrix result of a matrix multiplication between an int2x2 matrix and an int2x2 matrix. public static int2x2 mul(int2x2 a, int2x2 b) 参数 a int2x2 Left hand side argument of the matrix multiply. b int2x2 Right hand side argument of the matrix multiply. 返回 int2x2 The computed matrix multiplication. mul(int2x2, int2x3) Returns the int2x3 matrix result of a matrix multiplication between an int2x2 matrix and an int2x3 matrix. public static int2x3 mul(int2x2 a, int2x3 b) 参数 a int2x2 Left hand side argument of the matrix multiply. b int2x3 Right hand side argument of the matrix multiply. 返回 int2x3 The computed matrix multiplication. mul(int2x2, int2x4) Returns the int2x4 matrix result of a matrix multiplication between an int2x2 matrix and an int2x4 matrix. public static int2x4 mul(int2x2 a, int2x4 b) 参数 a int2x2 Left hand side argument of the matrix multiply. b int2x4 Right hand side argument of the matrix multiply. 返回 int2x4 The computed matrix multiplication. mul(int2x3, int3) Returns the int2 column vector result of a matrix multiplication between an int2x3 matrix and an int3 column vector. public static int2 mul(int2x3 a, int3 b) 参数 a int2x3 Left hand side argument of the matrix multiply. b int3 Right hand side argument of the matrix multiply. 返回 int2 The computed matrix multiplication. mul(int2x3, int3x2) Returns the int2x2 matrix result of a matrix multiplication between an int2x3 matrix and an int3x2 matrix. public static int2x2 mul(int2x3 a, int3x2 b) 参数 a int2x3 Left hand side argument of the matrix multiply. b int3x2 Right hand side argument of the matrix multiply. 返回 int2x2 The computed matrix multiplication. mul(int2x3, int3x3) Returns the int2x3 matrix result of a matrix multiplication between an int2x3 matrix and an int3x3 matrix. public static int2x3 mul(int2x3 a, int3x3 b) 参数 a int2x3 Left hand side argument of the matrix multiply. b int3x3 Right hand side argument of the matrix multiply. 返回 int2x3 The computed matrix multiplication. mul(int2x3, int3x4) Returns the int2x4 matrix result of a matrix multiplication between an int2x3 matrix and an int3x4 matrix. public static int2x4 mul(int2x3 a, int3x4 b) 参数 a int2x3 Left hand side argument of the matrix multiply. b int3x4 Right hand side argument of the matrix multiply. 返回 int2x4 The computed matrix multiplication. mul(int2x4, int4) Returns the int2 column vector result of a matrix multiplication between an int2x4 matrix and an int4 column vector. public static int2 mul(int2x4 a, int4 b) 参数 a int2x4 Left hand side argument of the matrix multiply. b int4 Right hand side argument of the matrix multiply. 返回 int2 The computed matrix multiplication. mul(int2x4, int4x2) Returns the int2x2 matrix result of a matrix multiplication between an int2x4 matrix and an int4x2 matrix. public static int2x2 mul(int2x4 a, int4x2 b) 参数 a int2x4 Left hand side argument of the matrix multiply. b int4x2 Right hand side argument of the matrix multiply. 返回 int2x2 The computed matrix multiplication. mul(int2x4, int4x3) Returns the int2x3 matrix result of a matrix multiplication between an int2x4 matrix and an int4x3 matrix. public static int2x3 mul(int2x4 a, int4x3 b) 参数 a int2x4 Left hand side argument of the matrix multiply. b int4x3 Right hand side argument of the matrix multiply. 返回 int2x3 The computed matrix multiplication. mul(int2x4, int4x4) Returns the int2x4 matrix result of a matrix multiplication between an int2x4 matrix and an int4x4 matrix. public static int2x4 mul(int2x4 a, int4x4 b) 参数 a int2x4 Left hand side argument of the matrix multiply. b int4x4 Right hand side argument of the matrix multiply. 返回 int2x4 The computed matrix multiplication. mul(int3, int3) Returns the int value result of a matrix multiplication between an int3 row vector and an int3 column vector. public static int mul(int3 a, int3 b) 参数 a int3 Left hand side argument of the matrix multiply. b int3 Right hand side argument of the matrix multiply. 返回 int The computed matrix multiplication. mul(int3, int3x2) Returns the int2 row vector result of a matrix multiplication between an int3 row vector and an int3x2 matrix. public static int2 mul(int3 a, int3x2 b) 参数 a int3 Left hand side argument of the matrix multiply. b int3x2 Right hand side argument of the matrix multiply. 返回 int2 The computed matrix multiplication. mul(int3, int3x3) Returns the int3 row vector result of a matrix multiplication between an int3 row vector and an int3x3 matrix. public static int3 mul(int3 a, int3x3 b) 参数 a int3 Left hand side argument of the matrix multiply. b int3x3 Right hand side argument of the matrix multiply. 返回 int3 The computed matrix multiplication. mul(int3, int3x4) Returns the int4 row vector result of a matrix multiplication between an int3 row vector and an int3x4 matrix. public static int4 mul(int3 a, int3x4 b) 参数 a int3 Left hand side argument of the matrix multiply. b int3x4 Right hand side argument of the matrix multiply. 返回 int4 The computed matrix multiplication. mul(int3x2, int2) Returns the int3 column vector result of a matrix multiplication between an int3x2 matrix and an int2 column vector. public static int3 mul(int3x2 a, int2 b) 参数 a int3x2 Left hand side argument of the matrix multiply. b int2 Right hand side argument of the matrix multiply. 返回 int3 The computed matrix multiplication. mul(int3x2, int2x2) Returns the int3x2 matrix result of a matrix multiplication between an int3x2 matrix and an int2x2 matrix. public static int3x2 mul(int3x2 a, int2x2 b) 参数 a int3x2 Left hand side argument of the matrix multiply. b int2x2 Right hand side argument of the matrix multiply. 返回 int3x2 The computed matrix multiplication. mul(int3x2, int2x3) Returns the int3x3 matrix result of a matrix multiplication between an int3x2 matrix and an int2x3 matrix. public static int3x3 mul(int3x2 a, int2x3 b) 参数 a int3x2 Left hand side argument of the matrix multiply. b int2x3 Right hand side argument of the matrix multiply. 返回 int3x3 The computed matrix multiplication. mul(int3x2, int2x4) Returns the int3x4 matrix result of a matrix multiplication between an int3x2 matrix and an int2x4 matrix. public static int3x4 mul(int3x2 a, int2x4 b) 参数 a int3x2 Left hand side argument of the matrix multiply. b int2x4 Right hand side argument of the matrix multiply. 返回 int3x4 The computed matrix multiplication. mul(int3x3, int3) Returns the int3 column vector result of a matrix multiplication between an int3x3 matrix and an int3 column vector. public static int3 mul(int3x3 a, int3 b) 参数 a int3x3 Left hand side argument of the matrix multiply. b int3 Right hand side argument of the matrix multiply. 返回 int3 The computed matrix multiplication. mul(int3x3, int3x2) Returns the int3x2 matrix result of a matrix multiplication between an int3x3 matrix and an int3x2 matrix. public static int3x2 mul(int3x3 a, int3x2 b) 参数 a int3x3 Left hand side argument of the matrix multiply. b int3x2 Right hand side argument of the matrix multiply. 返回 int3x2 The computed matrix multiplication. mul(int3x3, int3x3) Returns the int3x3 matrix result of a matrix multiplication between an int3x3 matrix and an int3x3 matrix. public static int3x3 mul(int3x3 a, int3x3 b) 参数 a int3x3 Left hand side argument of the matrix multiply. b int3x3 Right hand side argument of the matrix multiply. 返回 int3x3 The computed matrix multiplication. mul(int3x3, int3x4) Returns the int3x4 matrix result of a matrix multiplication between an int3x3 matrix and an int3x4 matrix. public static int3x4 mul(int3x3 a, int3x4 b) 参数 a int3x3 Left hand side argument of the matrix multiply. b int3x4 Right hand side argument of the matrix multiply. 返回 int3x4 The computed matrix multiplication. mul(int3x4, int4) Returns the int3 column vector result of a matrix multiplication between an int3x4 matrix and an int4 column vector. public static int3 mul(int3x4 a, int4 b) 参数 a int3x4 Left hand side argument of the matrix multiply. b int4 Right hand side argument of the matrix multiply. 返回 int3 The computed matrix multiplication. mul(int3x4, int4x2) Returns the int3x2 matrix result of a matrix multiplication between an int3x4 matrix and an int4x2 matrix. public static int3x2 mul(int3x4 a, int4x2 b) 参数 a int3x4 Left hand side argument of the matrix multiply. b int4x2 Right hand side argument of the matrix multiply. 返回 int3x2 The computed matrix multiplication. mul(int3x4, int4x3) Returns the int3x3 matrix result of a matrix multiplication between an int3x4 matrix and an int4x3 matrix. public static int3x3 mul(int3x4 a, int4x3 b) 参数 a int3x4 Left hand side argument of the matrix multiply. b int4x3 Right hand side argument of the matrix multiply. 返回 int3x3 The computed matrix multiplication. mul(int3x4, int4x4) Returns the int3x4 matrix result of a matrix multiplication between an int3x4 matrix and an int4x4 matrix. public static int3x4 mul(int3x4 a, int4x4 b) 参数 a int3x4 Left hand side argument of the matrix multiply. b int4x4 Right hand side argument of the matrix multiply. 返回 int3x4 The computed matrix multiplication. mul(int4, int4) Returns the int value result of a matrix multiplication between an int4 row vector and an int4 column vector. public static int mul(int4 a, int4 b) 参数 a int4 Left hand side argument of the matrix multiply. b int4 Right hand side argument of the matrix multiply. 返回 int The computed matrix multiplication. mul(int4, int4x2) Returns the int2 row vector result of a matrix multiplication between an int4 row vector and an int4x2 matrix. public static int2 mul(int4 a, int4x2 b) 参数 a int4 Left hand side argument of the matrix multiply. b int4x2 Right hand side argument of the matrix multiply. 返回 int2 The computed matrix multiplication. mul(int4, int4x3) Returns the int3 row vector result of a matrix multiplication between an int4 row vector and an int4x3 matrix. public static int3 mul(int4 a, int4x3 b) 参数 a int4 Left hand side argument of the matrix multiply. b int4x3 Right hand side argument of the matrix multiply. 返回 int3 The computed matrix multiplication. mul(int4, int4x4) Returns the int4 row vector result of a matrix multiplication between an int4 row vector and an int4x4 matrix. public static int4 mul(int4 a, int4x4 b) 参数 a int4 Left hand side argument of the matrix multiply. b int4x4 Right hand side argument of the matrix multiply. 返回 int4 The computed matrix multiplication. mul(int4x2, int2) Returns the int4 column vector result of a matrix multiplication between an int4x2 matrix and an int2 column vector. public static int4 mul(int4x2 a, int2 b) 参数 a int4x2 Left hand side argument of the matrix multiply. b int2 Right hand side argument of the matrix multiply. 返回 int4 The computed matrix multiplication. mul(int4x2, int2x2) Returns the int4x2 matrix result of a matrix multiplication between an int4x2 matrix and an int2x2 matrix. public static int4x2 mul(int4x2 a, int2x2 b) 参数 a int4x2 Left hand side argument of the matrix multiply. b int2x2 Right hand side argument of the matrix multiply. 返回 int4x2 The computed matrix multiplication. mul(int4x2, int2x3) Returns the int4x3 matrix result of a matrix multiplication between an int4x2 matrix and an int2x3 matrix. public static int4x3 mul(int4x2 a, int2x3 b) 参数 a int4x2 Left hand side argument of the matrix multiply. b int2x3 Right hand side argument of the matrix multiply. 返回 int4x3 The computed matrix multiplication. mul(int4x2, int2x4) Returns the int4x4 matrix result of a matrix multiplication between an int4x2 matrix and an int2x4 matrix. public static int4x4 mul(int4x2 a, int2x4 b) 参数 a int4x2 Left hand side argument of the matrix multiply. b int2x4 Right hand side argument of the matrix multiply. 返回 int4x4 The computed matrix multiplication. mul(int4x3, int3) Returns the int4 column vector result of a matrix multiplication between an int4x3 matrix and an int3 column vector. public static int4 mul(int4x3 a, int3 b) 参数 a int4x3 Left hand side argument of the matrix multiply. b int3 Right hand side argument of the matrix multiply. 返回 int4 The computed matrix multiplication. mul(int4x3, int3x2) Returns the int4x2 matrix result of a matrix multiplication between an int4x3 matrix and an int3x2 matrix. public static int4x2 mul(int4x3 a, int3x2 b) 参数 a int4x3 Left hand side argument of the matrix multiply. b int3x2 Right hand side argument of the matrix multiply. 返回 int4x2 The computed matrix multiplication. mul(int4x3, int3x3) Returns the int4x3 matrix result of a matrix multiplication between an int4x3 matrix and an int3x3 matrix. public static int4x3 mul(int4x3 a, int3x3 b) 参数 a int4x3 Left hand side argument of the matrix multiply. b int3x3 Right hand side argument of the matrix multiply. 返回 int4x3 The computed matrix multiplication. mul(int4x3, int3x4) Returns the int4x4 matrix result of a matrix multiplication between an int4x3 matrix and an int3x4 matrix. public static int4x4 mul(int4x3 a, int3x4 b) 参数 a int4x3 Left hand side argument of the matrix multiply. b int3x4 Right hand side argument of the matrix multiply. 返回 int4x4 The computed matrix multiplication. mul(int4x4, int4) Returns the int4 column vector result of a matrix multiplication between an int4x4 matrix and an int4 column vector. public static int4 mul(int4x4 a, int4 b) 参数 a int4x4 Left hand side argument of the matrix multiply. b int4 Right hand side argument of the matrix multiply. 返回 int4 The computed matrix multiplication. mul(int4x4, int4x2) Returns the int4x2 matrix result of a matrix multiplication between an int4x4 matrix and an int4x2 matrix. public static int4x2 mul(int4x4 a, int4x2 b) 参数 a int4x4 Left hand side argument of the matrix multiply. b int4x2 Right hand side argument of the matrix multiply. 返回 int4x2 The computed matrix multiplication. mul(int4x4, int4x3) Returns the int4x3 matrix result of a matrix multiplication between an int4x4 matrix and an int4x3 matrix. public static int4x3 mul(int4x4 a, int4x3 b) 参数 a int4x4 Left hand side argument of the matrix multiply. b int4x3 Right hand side argument of the matrix multiply. 返回 int4x3 The computed matrix multiplication. mul(int4x4, int4x4) Returns the int4x4 matrix result of a matrix multiplication between an int4x4 matrix and an int4x4 matrix. public static int4x4 mul(int4x4 a, int4x4 b) 参数 a int4x4 Left hand side argument of the matrix multiply. b int4x4 Right hand side argument of the matrix multiply. 返回 int4x4 The computed matrix multiplication. mul(quaternion, float3) Returns the result of transforming a vector by a quaternion. public static float3 mul(quaternion q, float3 v) 参数 q quaternion The quaternion transformation. v float3 The vector to transform. 返回 float3 The transformation of vector v by quaternion q. mul(quaternion, quaternion) Returns the result of transforming the quaternion b by the quaternion a. public static quaternion mul(quaternion a, quaternion b) 参数 a quaternion The quaternion on the left. b quaternion The quaternion on the right. 返回 quaternion The result of transforming quaternion b by the quaternion a. mul(uint2, uint2) Returns the uint value result of a matrix multiplication between a uint2 row vector and a uint2 column vector. public static uint mul(uint2 a, uint2 b) 参数 a uint2 Left hand side argument of the matrix multiply. b uint2 Right hand side argument of the matrix multiply. 返回 uint The computed matrix multiplication. mul(uint2, uint2x2) Returns the uint2 row vector result of a matrix multiplication between a uint2 row vector and a uint2x2 matrix. public static uint2 mul(uint2 a, uint2x2 b) 参数 a uint2 Left hand side argument of the matrix multiply. b uint2x2 Right hand side argument of the matrix multiply. 返回 uint2 The computed matrix multiplication. mul(uint2, uint2x3) Returns the uint3 row vector result of a matrix multiplication between a uint2 row vector and a uint2x3 matrix. public static uint3 mul(uint2 a, uint2x3 b) 参数 a uint2 Left hand side argument of the matrix multiply. b uint2x3 Right hand side argument of the matrix multiply. 返回 uint3 The computed matrix multiplication. mul(uint2, uint2x4) Returns the uint4 row vector result of a matrix multiplication between a uint2 row vector and a uint2x4 matrix. public static uint4 mul(uint2 a, uint2x4 b) 参数 a uint2 Left hand side argument of the matrix multiply. b uint2x4 Right hand side argument of the matrix multiply. 返回 uint4 The computed matrix multiplication. mul(uint2x2, uint2) Returns the uint2 column vector result of a matrix multiplication between a uint2x2 matrix and a uint2 column vector. public static uint2 mul(uint2x2 a, uint2 b) 参数 a uint2x2 Left hand side argument of the matrix multiply. b uint2 Right hand side argument of the matrix multiply. 返回 uint2 The computed matrix multiplication. mul(uint2x2, uint2x2) Returns the uint2x2 matrix result of a matrix multiplication between a uint2x2 matrix and a uint2x2 matrix. public static uint2x2 mul(uint2x2 a, uint2x2 b) 参数 a uint2x2 Left hand side argument of the matrix multiply. b uint2x2 Right hand side argument of the matrix multiply. 返回 uint2x2 The computed matrix multiplication. mul(uint2x2, uint2x3) Returns the uint2x3 matrix result of a matrix multiplication between a uint2x2 matrix and a uint2x3 matrix. public static uint2x3 mul(uint2x2 a, uint2x3 b) 参数 a uint2x2 Left hand side argument of the matrix multiply. b uint2x3 Right hand side argument of the matrix multiply. 返回 uint2x3 The computed matrix multiplication. mul(uint2x2, uint2x4) Returns the uint2x4 matrix result of a matrix multiplication between a uint2x2 matrix and a uint2x4 matrix. public static uint2x4 mul(uint2x2 a, uint2x4 b) 参数 a uint2x2 Left hand side argument of the matrix multiply. b uint2x4 Right hand side argument of the matrix multiply. 返回 uint2x4 The computed matrix multiplication. mul(uint2x3, uint3) Returns the uint2 column vector result of a matrix multiplication between a uint2x3 matrix and a uint3 column vector. public static uint2 mul(uint2x3 a, uint3 b) 参数 a uint2x3 Left hand side argument of the matrix multiply. b uint3 Right hand side argument of the matrix multiply. 返回 uint2 The computed matrix multiplication. mul(uint2x3, uint3x2) Returns the uint2x2 matrix result of a matrix multiplication between a uint2x3 matrix and a uint3x2 matrix. public static uint2x2 mul(uint2x3 a, uint3x2 b) 参数 a uint2x3 Left hand side argument of the matrix multiply. b uint3x2 Right hand side argument of the matrix multiply. 返回 uint2x2 The computed matrix multiplication. mul(uint2x3, uint3x3) Returns the uint2x3 matrix result of a matrix multiplication between a uint2x3 matrix and a uint3x3 matrix. public static uint2x3 mul(uint2x3 a, uint3x3 b) 参数 a uint2x3 Left hand side argument of the matrix multiply. b uint3x3 Right hand side argument of the matrix multiply. 返回 uint2x3 The computed matrix multiplication. mul(uint2x3, uint3x4) Returns the uint2x4 matrix result of a matrix multiplication between a uint2x3 matrix and a uint3x4 matrix. public static uint2x4 mul(uint2x3 a, uint3x4 b) 参数 a uint2x3 Left hand side argument of the matrix multiply. b uint3x4 Right hand side argument of the matrix multiply. 返回 uint2x4 The computed matrix multiplication. mul(uint2x4, uint4) Returns the uint2 column vector result of a matrix multiplication between a uint2x4 matrix and a uint4 column vector. public static uint2 mul(uint2x4 a, uint4 b) 参数 a uint2x4 Left hand side argument of the matrix multiply. b uint4 Right hand side argument of the matrix multiply. 返回 uint2 The computed matrix multiplication. mul(uint2x4, uint4x2) Returns the uint2x2 matrix result of a matrix multiplication between a uint2x4 matrix and a uint4x2 matrix. public static uint2x2 mul(uint2x4 a, uint4x2 b) 参数 a uint2x4 Left hand side argument of the matrix multiply. b uint4x2 Right hand side argument of the matrix multiply. 返回 uint2x2 The computed matrix multiplication. mul(uint2x4, uint4x3) Returns the uint2x3 matrix result of a matrix multiplication between a uint2x4 matrix and a uint4x3 matrix. public static uint2x3 mul(uint2x4 a, uint4x3 b) 参数 a uint2x4 Left hand side argument of the matrix multiply. b uint4x3 Right hand side argument of the matrix multiply. 返回 uint2x3 The computed matrix multiplication. mul(uint2x4, uint4x4) Returns the uint2x4 matrix result of a matrix multiplication between a uint2x4 matrix and a uint4x4 matrix. public static uint2x4 mul(uint2x4 a, uint4x4 b) 参数 a uint2x4 Left hand side argument of the matrix multiply. b uint4x4 Right hand side argument of the matrix multiply. 返回 uint2x4 The computed matrix multiplication. mul(uint3, uint3) Returns the uint value result of a matrix multiplication between a uint3 row vector and a uint3 column vector. public static uint mul(uint3 a, uint3 b) 参数 a uint3 Left hand side argument of the matrix multiply. b uint3 Right hand side argument of the matrix multiply. 返回 uint The computed matrix multiplication. mul(uint3, uint3x2) Returns the uint2 row vector result of a matrix multiplication between a uint3 row vector and a uint3x2 matrix. public static uint2 mul(uint3 a, uint3x2 b) 参数 a uint3 Left hand side argument of the matrix multiply. b uint3x2 Right hand side argument of the matrix multiply. 返回 uint2 The computed matrix multiplication. mul(uint3, uint3x3) Returns the uint3 row vector result of a matrix multiplication between a uint3 row vector and a uint3x3 matrix. public static uint3 mul(uint3 a, uint3x3 b) 参数 a uint3 Left hand side argument of the matrix multiply. b uint3x3 Right hand side argument of the matrix multiply. 返回 uint3 The computed matrix multiplication. mul(uint3, uint3x4) Returns the uint4 row vector result of a matrix multiplication between a uint3 row vector and a uint3x4 matrix. public static uint4 mul(uint3 a, uint3x4 b) 参数 a uint3 Left hand side argument of the matrix multiply. b uint3x4 Right hand side argument of the matrix multiply. 返回 uint4 The computed matrix multiplication. mul(uint3x2, uint2) Returns the uint3 column vector result of a matrix multiplication between a uint3x2 matrix and a uint2 column vector. public static uint3 mul(uint3x2 a, uint2 b) 参数 a uint3x2 Left hand side argument of the matrix multiply. b uint2 Right hand side argument of the matrix multiply. 返回 uint3 The computed matrix multiplication. mul(uint3x2, uint2x2) Returns the uint3x2 matrix result of a matrix multiplication between a uint3x2 matrix and a uint2x2 matrix. public static uint3x2 mul(uint3x2 a, uint2x2 b) 参数 a uint3x2 Left hand side argument of the matrix multiply. b uint2x2 Right hand side argument of the matrix multiply. 返回 uint3x2 The computed matrix multiplication. mul(uint3x2, uint2x3) Returns the uint3x3 matrix result of a matrix multiplication between a uint3x2 matrix and a uint2x3 matrix. public static uint3x3 mul(uint3x2 a, uint2x3 b) 参数 a uint3x2 Left hand side argument of the matrix multiply. b uint2x3 Right hand side argument of the matrix multiply. 返回 uint3x3 The computed matrix multiplication. mul(uint3x2, uint2x4) Returns the uint3x4 matrix result of a matrix multiplication between a uint3x2 matrix and a uint2x4 matrix. public static uint3x4 mul(uint3x2 a, uint2x4 b) 参数 a uint3x2 Left hand side argument of the matrix multiply. b uint2x4 Right hand side argument of the matrix multiply. 返回 uint3x4 The computed matrix multiplication. mul(uint3x3, uint3) Returns the uint3 column vector result of a matrix multiplication between a uint3x3 matrix and a uint3 column vector. public static uint3 mul(uint3x3 a, uint3 b) 参数 a uint3x3 Left hand side argument of the matrix multiply. b uint3 Right hand side argument of the matrix multiply. 返回 uint3 The computed matrix multiplication. mul(uint3x3, uint3x2) Returns the uint3x2 matrix result of a matrix multiplication between a uint3x3 matrix and a uint3x2 matrix. public static uint3x2 mul(uint3x3 a, uint3x2 b) 参数 a uint3x3 Left hand side argument of the matrix multiply. b uint3x2 Right hand side argument of the matrix multiply. 返回 uint3x2 The computed matrix multiplication. mul(uint3x3, uint3x3) Returns the uint3x3 matrix result of a matrix multiplication between a uint3x3 matrix and a uint3x3 matrix. public static uint3x3 mul(uint3x3 a, uint3x3 b) 参数 a uint3x3 Left hand side argument of the matrix multiply. b uint3x3 Right hand side argument of the matrix multiply. 返回 uint3x3 The computed matrix multiplication. mul(uint3x3, uint3x4) Returns the uint3x4 matrix result of a matrix multiplication between a uint3x3 matrix and a uint3x4 matrix. public static uint3x4 mul(uint3x3 a, uint3x4 b) 参数 a uint3x3 Left hand side argument of the matrix multiply. b uint3x4 Right hand side argument of the matrix multiply. 返回 uint3x4 The computed matrix multiplication. mul(uint3x4, uint4) Returns the uint3 column vector result of a matrix multiplication between a uint3x4 matrix and a uint4 column vector. public static uint3 mul(uint3x4 a, uint4 b) 参数 a uint3x4 Left hand side argument of the matrix multiply. b uint4 Right hand side argument of the matrix multiply. 返回 uint3 The computed matrix multiplication. mul(uint3x4, uint4x2) Returns the uint3x2 matrix result of a matrix multiplication between a uint3x4 matrix and a uint4x2 matrix. public static uint3x2 mul(uint3x4 a, uint4x2 b) 参数 a uint3x4 Left hand side argument of the matrix multiply. b uint4x2 Right hand side argument of the matrix multiply. 返回 uint3x2 The computed matrix multiplication. mul(uint3x4, uint4x3) Returns the uint3x3 matrix result of a matrix multiplication between a uint3x4 matrix and a uint4x3 matrix. public static uint3x3 mul(uint3x4 a, uint4x3 b) 参数 a uint3x4 Left hand side argument of the matrix multiply. b uint4x3 Right hand side argument of the matrix multiply. 返回 uint3x3 The computed matrix multiplication. mul(uint3x4, uint4x4) Returns the uint3x4 matrix result of a matrix multiplication between a uint3x4 matrix and a uint4x4 matrix. public static uint3x4 mul(uint3x4 a, uint4x4 b) 参数 a uint3x4 Left hand side argument of the matrix multiply. b uint4x4 Right hand side argument of the matrix multiply. 返回 uint3x4 The computed matrix multiplication. mul(uint4, uint4) Returns the uint value result of a matrix multiplication between a uint4 row vector and a uint4 column vector. public static uint mul(uint4 a, uint4 b) 参数 a uint4 Left hand side argument of the matrix multiply. b uint4 Right hand side argument of the matrix multiply. 返回 uint The computed matrix multiplication. mul(uint4, uint4x2) Returns the uint2 row vector result of a matrix multiplication between a uint4 row vector and a uint4x2 matrix. public static uint2 mul(uint4 a, uint4x2 b) 参数 a uint4 Left hand side argument of the matrix multiply. b uint4x2 Right hand side argument of the matrix multiply. 返回 uint2 The computed matrix multiplication. mul(uint4, uint4x3) Returns the uint3 row vector result of a matrix multiplication between a uint4 row vector and a uint4x3 matrix. public static uint3 mul(uint4 a, uint4x3 b) 参数 a uint4 Left hand side argument of the matrix multiply. b uint4x3 Right hand side argument of the matrix multiply. 返回 uint3 The computed matrix multiplication. mul(uint4, uint4x4) Returns the uint4 row vector result of a matrix multiplication between a uint4 row vector and a uint4x4 matrix. public static uint4 mul(uint4 a, uint4x4 b) 参数 a uint4 Left hand side argument of the matrix multiply. b uint4x4 Right hand side argument of the matrix multiply. 返回 uint4 The computed matrix multiplication. mul(uint4x2, uint2) Returns the uint4 column vector result of a matrix multiplication between a uint4x2 matrix and a uint2 column vector. public static uint4 mul(uint4x2 a, uint2 b) 参数 a uint4x2 Left hand side argument of the matrix multiply. b uint2 Right hand side argument of the matrix multiply. 返回 uint4 The computed matrix multiplication. mul(uint4x2, uint2x2) Returns the uint4x2 matrix result of a matrix multiplication between a uint4x2 matrix and a uint2x2 matrix. public static uint4x2 mul(uint4x2 a, uint2x2 b) 参数 a uint4x2 Left hand side argument of the matrix multiply. b uint2x2 Right hand side argument of the matrix multiply. 返回 uint4x2 The computed matrix multiplication. mul(uint4x2, uint2x3) Returns the uint4x3 matrix result of a matrix multiplication between a uint4x2 matrix and a uint2x3 matrix. public static uint4x3 mul(uint4x2 a, uint2x3 b) 参数 a uint4x2 Left hand side argument of the matrix multiply. b uint2x3 Right hand side argument of the matrix multiply. 返回 uint4x3 The computed matrix multiplication. mul(uint4x2, uint2x4) Returns the uint4x4 matrix result of a matrix multiplication between a uint4x2 matrix and a uint2x4 matrix. public static uint4x4 mul(uint4x2 a, uint2x4 b) 参数 a uint4x2 Left hand side argument of the matrix multiply. b uint2x4 Right hand side argument of the matrix multiply. 返回 uint4x4 The computed matrix multiplication. mul(uint4x3, uint3) Returns the uint4 column vector result of a matrix multiplication between a uint4x3 matrix and a uint3 column vector. public static uint4 mul(uint4x3 a, uint3 b) 参数 a uint4x3 Left hand side argument of the matrix multiply. b uint3 Right hand side argument of the matrix multiply. 返回 uint4 The computed matrix multiplication. mul(uint4x3, uint3x2) Returns the uint4x2 matrix result of a matrix multiplication between a uint4x3 matrix and a uint3x2 matrix. public static uint4x2 mul(uint4x3 a, uint3x2 b) 参数 a uint4x3 Left hand side argument of the matrix multiply. b uint3x2 Right hand side argument of the matrix multiply. 返回 uint4x2 The computed matrix multiplication. mul(uint4x3, uint3x3) Returns the uint4x3 matrix result of a matrix multiplication between a uint4x3 matrix and a uint3x3 matrix. public static uint4x3 mul(uint4x3 a, uint3x3 b) 参数 a uint4x3 Left hand side argument of the matrix multiply. b uint3x3 Right hand side argument of the matrix multiply. 返回 uint4x3 The computed matrix multiplication. mul(uint4x3, uint3x4) Returns the uint4x4 matrix result of a matrix multiplication between a uint4x3 matrix and a uint3x4 matrix. public static uint4x4 mul(uint4x3 a, uint3x4 b) 参数 a uint4x3 Left hand side argument of the matrix multiply. b uint3x4 Right hand side argument of the matrix multiply. 返回 uint4x4 The computed matrix multiplication. mul(uint4x4, uint4) Returns the uint4 column vector result of a matrix multiplication between a uint4x4 matrix and a uint4 column vector. public static uint4 mul(uint4x4 a, uint4 b) 参数 a uint4x4 Left hand side argument of the matrix multiply. b uint4 Right hand side argument of the matrix multiply. 返回 uint4 The computed matrix multiplication. mul(uint4x4, uint4x2) Returns the uint4x2 matrix result of a matrix multiplication between a uint4x4 matrix and a uint4x2 matrix. public static uint4x2 mul(uint4x4 a, uint4x2 b) 参数 a uint4x4 Left hand side argument of the matrix multiply. b uint4x2 Right hand side argument of the matrix multiply. 返回 uint4x2 The computed matrix multiplication. mul(uint4x4, uint4x3) Returns the uint4x3 matrix result of a matrix multiplication between a uint4x4 matrix and a uint4x3 matrix. public static uint4x3 mul(uint4x4 a, uint4x3 b) 参数 a uint4x4 Left hand side argument of the matrix multiply. b uint4x3 Right hand side argument of the matrix multiply. 返回 uint4x3 The computed matrix multiplication. mul(uint4x4, uint4x4) Returns the uint4x4 matrix result of a matrix multiplication between a uint4x4 matrix and a uint4x4 matrix. public static uint4x4 mul(uint4x4 a, uint4x4 b) 参数 a uint4x4 Left hand side argument of the matrix multiply. b uint4x4 Right hand side argument of the matrix multiply. 返回 uint4x4 The computed matrix multiplication. mulScale(float3x3, float3) Matrix columns multiplied by scale components m.c0.x * s.x | m.c1.x * s.y | m.c2.x * s.z m.c0.y * s.x | m.c1.y * s.y | m.c2.y * s.z m.c0.z * s.x | m.c1.z * s.y | m.c2.z * s.z public static float3x3 mulScale(float3x3 m, float3 s) 参数 m float3x3 Matrix to scale. s float3 Scaling coefficients for each column. 返回 float3x3 The scaled matrix. nlerp(quaternion, quaternion, float) Returns the result of a normalized linear interpolation between two quaternions q1 and a2 using an interpolation parameter t. public static quaternion nlerp(quaternion q1, quaternion q2, float t) 参数 q1 quaternion The first quaternion. q2 quaternion The second quaternion. t float The interpolation parameter. 返回 quaternion The normalized linear interpolation of two quaternions. 备注 Prefer to use this over slerp() when you know the distance between q1 and q2 is small. This can be much higher performance due to avoiding trigonometric function evaluations that occur in slerp(). normalize(double2) Returns a normalized version of the double2 vector x by scaling it by 1 / length(x). public static double2 normalize(double2 x) 参数 x double2 Vector to normalize. 返回 double2 The normalized vector. normalize(double3) Returns a normalized version of the double3 vector x by scaling it by 1 / length(x). public static double3 normalize(double3 x) 参数 x double3 Vector to normalize. 返回 double3 The normalized vector. normalize(double4) Returns a normalized version of the double4 vector x by scaling it by 1 / length(x). public static double4 normalize(double4 x) 参数 x double4 Vector to normalize. 返回 double4 The normalized vector. normalize(float2) Returns a normalized version of the float2 vector x by scaling it by 1 / length(x). public static float2 normalize(float2 x) 参数 x float2 Vector to normalize. 返回 float2 The normalized vector. normalize(float3) Returns a normalized version of the float3 vector x by scaling it by 1 / length(x). public static float3 normalize(float3 x) 参数 x float3 Vector to normalize. 返回 float3 The normalized vector. normalize(float4) Returns a normalized version of the float4 vector x by scaling it by 1 / length(x). public static float4 normalize(float4 x) 参数 x float4 Vector to normalize. 返回 float4 The normalized vector. normalize(quaternion) Returns a normalized version of a quaternion q by scaling it by 1 / length(q). public static quaternion normalize(quaternion q) 参数 q quaternion The quaternion to normalize. 返回 quaternion The normalized quaternion. normalizesafe(double2, double2) Returns a safe normalized version of the double4 vector x by scaling it by 1 / length(x). Returns the given default value when 1 / length(x) does not produce a finite number. public static double2 normalizesafe(double2 x, double2 defaultvalue = default) 参数 x double2 Vector to normalize. defaultvalue double2 Vector to return if normalized vector is not finite. 返回 double2 The normalized vector or the default value if the normalized vector is not finite. normalizesafe(double3, double3) Returns a safe normalized version of the double4 vector x by scaling it by 1 / length(x). Returns the given default value when 1 / length(x) does not produce a finite number. public static double3 normalizesafe(double3 x, double3 defaultvalue = default) 参数 x double3 Vector to normalize. defaultvalue double3 Vector to return if normalized vector is not finite. 返回 double3 The normalized vector or the default value if the normalized vector is not finite. normalizesafe(double4, double4) Returns a safe normalized version of the double4 vector x by scaling it by 1 / length(x). Returns the given default value when 1 / length(x) does not produce a finite number. public static double4 normalizesafe(double4 x, double4 defaultvalue = default) 参数 x double4 Vector to normalize. defaultvalue double4 Vector to return if normalized vector is not finite. 返回 double4 The normalized vector or the default value if the normalized vector is not finite. normalizesafe(float2, float2) Returns a safe normalized version of the float2 vector x by scaling it by 1 / length(x). Returns the given default value when 1 / length(x) does not produce a finite number. public static float2 normalizesafe(float2 x, float2 defaultvalue = default) 参数 x float2 Vector to normalize. defaultvalue float2 Vector to return if normalized vector is not finite. 返回 float2 The normalized vector or the default value if the normalized vector is not finite. normalizesafe(float3, float3) Returns a safe normalized version of the float3 vector x by scaling it by 1 / length(x). Returns the given default value when 1 / length(x) does not produce a finite number. public static float3 normalizesafe(float3 x, float3 defaultvalue = default) 参数 x float3 Vector to normalize. defaultvalue float3 Vector to return if normalized vector is not finite. 返回 float3 The normalized vector or the default value if the normalized vector is not finite. normalizesafe(float4, float4) Returns a safe normalized version of the float4 vector x by scaling it by 1 / length(x). Returns the given default value when 1 / length(x) does not produce a finite number. public static float4 normalizesafe(float4 x, float4 defaultvalue = default) 参数 x float4 Vector to normalize. defaultvalue float4 Vector to return if normalized vector is not finite. 返回 float4 The normalized vector or the default value if the normalized vector is not finite. normalizesafe(quaternion) Returns a safe normalized version of the q by scaling it by 1 / length(q). Returns the identity when 1 / length(q) does not produce a finite number. public static quaternion normalizesafe(quaternion q) 参数 q quaternion The quaternion to normalize. 返回 quaternion The normalized quaternion or the identity quaternion. normalizesafe(quaternion, quaternion) Returns a safe normalized version of the q by scaling it by 1 / length(q). Returns the given default value when 1 / length(q) does not produce a finite number. public static quaternion normalizesafe(quaternion q, quaternion defaultvalue) 参数 q quaternion The quaternion to normalize. defaultvalue quaternion The default value. 返回 quaternion The normalized quaternion or the default value. orthonormal_basis(double3, out double3, out double3) Generate an orthonormal basis given a single unit length normal vector. public static void orthonormal_basis(double3 normal, out double3 basis1, out double3 basis2) 参数 normal double3 Unit length normal vector. basis1 double3 Output unit length vector, orthogonal to normal vector. basis2 double3 Output unit length vector, orthogonal to normal vector and basis1. 备注 This implementation is from \"Building an Orthonormal Basis, Revisited\" https://graphics.pixar.com/library/OrthonormalB/paper.pdf orthonormal_basis(float3, out float3, out float3) Generate an orthonormal basis given a single unit length normal vector. public static void orthonormal_basis(float3 normal, out float3 basis1, out float3 basis2) 参数 normal float3 Unit length normal vector. basis1 float3 Output unit length vector, orthogonal to normal vector. basis2 float3 Output unit length vector, orthogonal to normal vector and basis1. 备注 This implementation is from \"Building an Orthonormal Basis, Revisited\" https://graphics.pixar.com/library/OrthonormalB/paper.pdf orthonormalize(float3x3) Returns an orthonormalized version of a float3x3 matrix. public static float3x3 orthonormalize(float3x3 i) 参数 i float3x3 The float3x3 to be orthonormalized. 返回 float3x3 The orthonormalized float3x3 matrix. pow(double, double) Returns x raised to the power y. public static double pow(double x, double y) 参数 x double The exponent base. y double The exponent power. 返回 double The result of raising x to the power y. pow(float, float) Returns x raised to the power y. public static float pow(float x, float y) 参数 x float The exponent base. y float The exponent power. 返回 float The result of raising x to the power y. pow(double2, double2) Returns the componentwise result of raising x to the power y. public static double2 pow(double2 x, double2 y) 参数 x double2 The exponent base. y double2 The exponent power. 返回 double2 The componentwise result of raising x to the power y. pow(double3, double3) Returns the componentwise result of raising x to the power y. public static double3 pow(double3 x, double3 y) 参数 x double3 The exponent base. y double3 The exponent power. 返回 double3 The componentwise result of raising x to the power y. pow(double4, double4) Returns the componentwise result of raising x to the power y. public static double4 pow(double4 x, double4 y) 参数 x double4 The exponent base. y double4 The exponent power. 返回 double4 The componentwise result of raising x to the power y. pow(float2, float2) Returns the componentwise result of raising x to the power y. public static float2 pow(float2 x, float2 y) 参数 x float2 The exponent base. y float2 The exponent power. 返回 float2 The componentwise result of raising x to the power y. pow(float3, float3) Returns the componentwise result of raising x to the power y. public static float3 pow(float3 x, float3 y) 参数 x float3 The exponent base. y float3 The exponent power. 返回 float3 The componentwise result of raising x to the power y. pow(float4, float4) Returns the componentwise result of raising x to the power y. public static float4 pow(float4 x, float4 y) 参数 x float4 The exponent base. y float4 The exponent power. 返回 float4 The componentwise result of raising x to the power y. project(double2, double2) Compute vector projection of a onto b. public static double2 project(double2 a, double2 ontoB) 参数 a double2 Vector to project. ontoB double2 Non-zero vector to project onto. 返回 double2 Vector projection of a onto b. 备注 Some finite vectors a and b could generate a non-finite result. This is most likely when a's components are very large (close to Double.MaxValue) or when b's components are very small (close to DBL_MIN_NORMAL). In these cases, you can call projectsafe(double2, double2, double2) which will use a given default value if the result is not finite. project(double3, double3) Compute vector projection of a onto b. public static double3 project(double3 a, double3 ontoB) 参数 a double3 Vector to project. ontoB double3 Non-zero vector to project onto. 返回 double3 Vector projection of a onto b. 备注 Some finite vectors a and b could generate a non-finite result. This is most likely when a's components are very large (close to Double.MaxValue) or when b's components are very small (close to DBL_MIN_NORMAL). In these cases, you can call projectsafe(double3, double3, double3) which will use a given default value if the result is not finite. project(double4, double4) Compute vector projection of a onto b. public static double4 project(double4 a, double4 ontoB) 参数 a double4 Vector to project. ontoB double4 Non-zero vector to project onto. 返回 double4 Vector projection of a onto b. 备注 Some finite vectors a and b could generate a non-finite result. This is most likely when a's components are very large (close to Double.MaxValue) or when b's components are very small (close to DBL_MIN_NORMAL). In these cases, you can call projectsafe(double4, double4, double4) which will use a given default value if the result is not finite. project(float2, float2) Compute vector projection of a onto b. public static float2 project(float2 a, float2 ontoB) 参数 a float2 Vector to project. ontoB float2 Non-zero vector to project onto. 返回 float2 Vector projection of a onto b. 备注 Some finite vectors a and b could generate a non-finite result. This is most likely when a's components are very large (close to Single.MaxValue) or when b's components are very small (close to FLT_MIN_NORMAL). In these cases, you can call projectsafe(float2, float2, float2) which will use a given default value if the result is not finite. project(float3, float3) Compute vector projection of a onto b. public static float3 project(float3 a, float3 ontoB) 参数 a float3 Vector to project. ontoB float3 Non-zero vector to project onto. 返回 float3 Vector projection of a onto b. 备注 Some finite vectors a and b could generate a non-finite result. This is most likely when a's components are very large (close to Single.MaxValue) or when b's components are very small (close to FLT_MIN_NORMAL). In these cases, you can call projectsafe(float3, float3, float3) which will use a given default value if the result is not finite. project(float4, float4) Compute vector projection of a onto b. public static float4 project(float4 a, float4 ontoB) 参数 a float4 Vector to project. ontoB float4 Non-zero vector to project onto. 返回 float4 Vector projection of a onto b. 备注 Some finite vectors a and b could generate a non-finite result. This is most likely when a's components are very large (close to Single.MaxValue) or when b's components are very small (close to FLT_MIN_NORMAL). In these cases, you can call projectsafe(float4, float4, float4) which will use a given default value if the result is not finite. projectsafe(double2, double2, double2) Compute vector projection of a onto b. If result is not finite, then return the default value instead. public static double2 projectsafe(double2 a, double2 ontoB, double2 defaultValue = default) 参数 a double2 Vector to project. ontoB double2 Non-zero vector to project onto. defaultValue double2 Default value to return if projection is not finite. 返回 double2 Vector projection of a onto b or the default value. 备注 This function performs extra checks to see if the result of projecting a onto b is finite. If you know that your inputs will generate a finite result or you don't care if the result is finite, then you can call project(double2, double2) instead which is faster than this function. projectsafe(double3, double3, double3) Compute vector projection of a onto b. If result is not finite, then return the default value instead. public static double3 projectsafe(double3 a, double3 ontoB, double3 defaultValue = default) 参数 a double3 Vector to project. ontoB double3 Non-zero vector to project onto. defaultValue double3 Default value to return if projection is not finite. 返回 double3 Vector projection of a onto b or the default value. 备注 This function performs extra checks to see if the result of projecting a onto b is finite. If you know that your inputs will generate a finite result or you don't care if the result is finite, then you can call project(double3, double3) instead which is faster than this function. projectsafe(double4, double4, double4) Compute vector projection of a onto b. If result is not finite, then return the default value instead. public static double4 projectsafe(double4 a, double4 ontoB, double4 defaultValue = default) 参数 a double4 Vector to project. ontoB double4 Non-zero vector to project onto. defaultValue double4 Default value to return if projection is not finite. 返回 double4 Vector projection of a onto b or the default value. 备注 This function performs extra checks to see if the result of projecting a onto b is finite. If you know that your inputs will generate a finite result or you don't care if the result is finite, then you can call project(double4, double4) instead which is faster than this function. projectsafe(float2, float2, float2) Compute vector projection of a onto b. If result is not finite, then return the default value instead. public static float2 projectsafe(float2 a, float2 ontoB, float2 defaultValue = default) 参数 a float2 Vector to project. ontoB float2 Non-zero vector to project onto. defaultValue float2 Default value to return if projection is not finite. 返回 float2 Vector projection of a onto b or the default value. 备注 This function performs extra checks to see if the result of projecting a onto b is finite. If you know that your inputs will generate a finite result or you don't care if the result is finite, then you can call project(float2, float2) instead which is faster than this function. projectsafe(float3, float3, float3) Compute vector projection of a onto b. If result is not finite, then return the default value instead. public static float3 projectsafe(float3 a, float3 ontoB, float3 defaultValue = default) 参数 a float3 Vector to project. ontoB float3 Non-zero vector to project onto. defaultValue float3 Default value to return if projection is not finite. 返回 float3 Vector projection of a onto b or the default value. 备注 This function performs extra checks to see if the result of projecting a onto b is finite. If you know that your inputs will generate a finite result or you don't care if the result is finite, then you can call project(float3, float3) instead which is faster than this function. projectsafe(float4, float4, float4) Compute vector projection of a onto b. If result is not finite, then return the default value instead. public static float4 projectsafe(float4 a, float4 ontoB, float4 defaultValue = default) 参数 a float4 Vector to project. ontoB float4 Non-zero vector to project onto. defaultValue float4 Default value to return if projection is not finite. 返回 float4 Vector projection of a onto b or the default value. 备注 This function performs extra checks to see if the result of projecting a onto b is finite. If you know that your inputs will generate a finite result or you don't care if the result is finite, then you can call project(float4, float4) instead which is faster than this function. pseudoinverse(float3x3) Computes the pseudoinverse of a matrix. public static float3x3 pseudoinverse(float3x3 m) 参数 m float3x3 Matrix to invert. 返回 float3x3 The pseudoinverse of m. quaternion(float, float, float, float) Returns a quaternion constructed from four float values. public static quaternion quaternion(float x, float y, float z, float w) 参数 x float The x component of the quaternion. y float The y component of the quaternion. z float The z component of the quaternion. w float The w component of the quaternion. 返回 quaternion The quaternion constructed from individual components. quaternion(float3x3) Returns a unit quaternion constructed from a float3x3 rotation matrix. The matrix must be orthonormal. public static quaternion quaternion(float3x3 m) 参数 m float3x3 The float3x3 rotation matrix. 返回 quaternion The quaternion constructed from a float3x3 matrix. quaternion(float4) Returns a quaternion constructed from a float4 vector. public static quaternion quaternion(float4 value) 参数 value float4 The float4 containing the components of the quaternion. 返回 quaternion The quaternion constructed from a float4. quaternion(float4x4) Returns a unit quaternion constructed from a float4x4 matrix. The matrix must be orthonormal. public static quaternion quaternion(float4x4 m) 参数 m float4x4 The float4x4 matrix (must be orthonormal). 返回 quaternion The quaternion constructed from a float4x4 matrix. radians(double) Returns the result of converting a float value from degrees to radians. public static double radians(double x) 参数 x double Angle in degrees. 返回 double Angle converted to radians. radians(float) Returns the result of converting a float value from degrees to radians. public static float radians(float x) 参数 x float Angle in degrees. 返回 float Angle converted to radians. radians(double2) Returns the result of a componentwise conversion of a float2 vector from degrees to radians. public static double2 radians(double2 x) 参数 x double2 Vector containing angles in degrees. 返回 double2 Vector containing angles converted to radians. radians(double3) Returns the result of a componentwise conversion of a float3 vector from degrees to radians. public static double3 radians(double3 x) 参数 x double3 Vector containing angles in degrees. 返回 double3 Vector containing angles converted to radians. radians(double4) Returns the result of a componentwise conversion of a float4 vector from degrees to radians. public static double4 radians(double4 x) 参数 x double4 Vector containing angles in degrees. 返回 double4 Vector containing angles converted to radians. radians(float2) Returns the result of a componentwise conversion of a float2 vector from degrees to radians. public static float2 radians(float2 x) 参数 x float2 Vector containing angles in degrees. 返回 float2 Vector containing angles converted to radians. radians(float3) Returns the result of a componentwise conversion of a float3 vector from degrees to radians. public static float3 radians(float3 x) 参数 x float3 Vector containing angles in degrees. 返回 float3 Vector containing angles converted to radians. radians(float4) Returns the result of a componentwise conversion of a float4 vector from degrees to radians. public static float4 radians(float4 x) 参数 x float4 Vector containing angles in degrees. 返回 float4 Vector containing angles converted to radians. rcp(double) Returns the reciprocal a double value. public static double rcp(double x) 参数 x double Input value. 返回 double The reciprocal of the input. rcp(float) Returns the reciprocal a float value. public static float rcp(float x) 参数 x float Input value. 返回 float The reciprocal of the input. rcp(double2) Returns the componentwise reciprocal a double2 vector. public static double2 rcp(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise reciprocal of the input. rcp(double3) Returns the componentwise reciprocal a double3 vector. public static double3 rcp(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise reciprocal of the input. rcp(double4) Returns the componentwise reciprocal a double4 vector. public static double4 rcp(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise reciprocal of the input. rcp(float2) Returns the componentwise reciprocal a float2 vector. public static float2 rcp(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise reciprocal of the input. rcp(float3) Returns the componentwise reciprocal a float3 vector. public static float3 rcp(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise reciprocal of the input. rcp(float4) Returns the componentwise reciprocal a float4 vector. public static float4 rcp(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise reciprocal of the input. reflect(double2, double2) Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2.0 * dot(i, n) * n. public static double2 reflect(double2 i, double2 n) 参数 i double2 Incident vector. n double2 Normal vector. 返回 double2 Reflection vector. reflect(double3, double3) Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2.0 * dot(i, n) * n. public static double3 reflect(double3 i, double3 n) 参数 i double3 Incident vector. n double3 Normal vector. 返回 double3 Reflection vector. reflect(double4, double4) Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2.0 * dot(i, n) * n. public static double4 reflect(double4 i, double4 n) 参数 i double4 Incident vector. n double4 Normal vector. 返回 double4 Reflection vector. reflect(float2, float2) Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2.0f * dot(i, n) * n. public static float2 reflect(float2 i, float2 n) 参数 i float2 Incident vector. n float2 Normal vector. 返回 float2 Reflection vector. reflect(float3, float3) Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2.0f * dot(i, n) * n. public static float3 reflect(float3 i, float3 n) 参数 i float3 Incident vector. n float3 Normal vector. 返回 float3 Reflection vector. reflect(float4, float4) Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2.0f * dot(i, n) * n. public static float4 reflect(float4 i, float4 n) 参数 i float4 Incident vector. n float4 Normal vector. 返回 float4 Reflection vector. refract(double2, double2, double) Returns the refraction vector given the incident vector i, the normal vector n and the refraction index. public static double2 refract(double2 i, double2 n, double indexOfRefraction) 参数 i double2 Incident vector. n double2 Normal vector. indexOfRefraction double Index of refraction. 返回 double2 Refraction vector. refract(double3, double3, double) Returns the refraction vector given the incident vector i, the normal vector n and the refraction index. public static double3 refract(double3 i, double3 n, double indexOfRefraction) 参数 i double3 Incident vector. n double3 Normal vector. indexOfRefraction double Index of refraction. 返回 double3 Refraction vector. refract(double4, double4, double) Returns the refraction vector given the incident vector i, the normal vector n and the refraction index. public static double4 refract(double4 i, double4 n, double indexOfRefraction) 参数 i double4 Incident vector. n double4 Normal vector. indexOfRefraction double Index of refraction. 返回 double4 Refraction vector. refract(float2, float2, float) Returns the refraction vector given the incident vector i, the normal vector n and the refraction index. public static float2 refract(float2 i, float2 n, float indexOfRefraction) 参数 i float2 Incident vector. n float2 Normal vector. indexOfRefraction float Index of refraction. 返回 float2 Refraction vector. refract(float3, float3, float) Returns the refraction vector given the incident vector i, the normal vector n and the refraction index. public static float3 refract(float3 i, float3 n, float indexOfRefraction) 参数 i float3 Incident vector. n float3 Normal vector. indexOfRefraction float Index of refraction. 返回 float3 Refraction vector. refract(float4, float4, float) Returns the refraction vector given the incident vector i, the normal vector n and the refraction index. public static float4 refract(float4 i, float4 n, float indexOfRefraction) 参数 i float4 Incident vector. n float4 Normal vector. indexOfRefraction float Index of refraction. 返回 float4 Refraction vector. remap(double, double, double, double, double) Returns the result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static double remap(double srcStart, double srcEnd, double dstStart, double dstEnd, double x) 参数 srcStart double The start point of the source range [srcStart, srcEnd]. srcEnd double The end point of the source range [srcStart, srcEnd]. dstStart double The start point of the destination range [dstStart, dstEnd]. dstEnd double The end point of the destination range [dstStart, dstEnd]. x double The value to remap from the source to destination range. 返回 double The remap of input x from the source range to the destination range. remap(float, float, float, float, float) Returns the result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static float remap(float srcStart, float srcEnd, float dstStart, float dstEnd, float x) 参数 srcStart float The start point of the source range [srcStart, srcEnd]. srcEnd float The end point of the source range [srcStart, srcEnd]. dstStart float The start point of the destination range [dstStart, dstEnd]. dstEnd float The end point of the destination range [dstStart, dstEnd]. x float The value to remap from the source to destination range. 返回 float The remap of input x from the source range to the destination range. remap(double2, double2, double2, double2, double2) Returns the componentwise result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static double2 remap(double2 srcStart, double2 srcEnd, double2 dstStart, double2 dstEnd, double2 x) 参数 srcStart double2 The start point of the source range [srcStart, srcEnd]. srcEnd double2 The end point of the source range [srcStart, srcEnd]. dstStart double2 The start point of the destination range [dstStart, dstEnd]. dstEnd double2 The end point of the destination range [dstStart, dstEnd]. x double2 The value to remap from the source to destination range. 返回 double2 The componentwise remap of input x from the source range to the destination range. remap(double3, double3, double3, double3, double3) Returns the componentwise result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static double3 remap(double3 srcStart, double3 srcEnd, double3 dstStart, double3 dstEnd, double3 x) 参数 srcStart double3 The start point of the source range [srcStart, srcEnd]. srcEnd double3 The end point of the source range [srcStart, srcEnd]. dstStart double3 The start point of the destination range [dstStart, dstEnd]. dstEnd double3 The end point of the destination range [dstStart, dstEnd]. x double3 The value to remap from the source to destination range. 返回 double3 The componentwise remap of input x from the source range to the destination range. remap(double4, double4, double4, double4, double4) Returns the componentwise result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static double4 remap(double4 srcStart, double4 srcEnd, double4 dstStart, double4 dstEnd, double4 x) 参数 srcStart double4 The start point of the source range [srcStart, srcEnd]. srcEnd double4 The end point of the source range [srcStart, srcEnd]. dstStart double4 The start point of the destination range [dstStart, dstEnd]. dstEnd double4 The end point of the destination range [dstStart, dstEnd]. x double4 The value to remap from the source to destination range. 返回 double4 The componentwise remap of input x from the source range to the destination range. remap(float2, float2, float2, float2, float2) Returns the componentwise result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static float2 remap(float2 srcStart, float2 srcEnd, float2 dstStart, float2 dstEnd, float2 x) 参数 srcStart float2 The start point of the source range [srcStart, srcEnd]. srcEnd float2 The end point of the source range [srcStart, srcEnd]. dstStart float2 The start point of the destination range [dstStart, dstEnd]. dstEnd float2 The end point of the destination range [dstStart, dstEnd]. x float2 The value to remap from the source to destination range. 返回 float2 The componentwise remap of input x from the source range to the destination range. remap(float3, float3, float3, float3, float3) Returns the componentwise result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static float3 remap(float3 srcStart, float3 srcEnd, float3 dstStart, float3 dstEnd, float3 x) 参数 srcStart float3 The start point of the source range [srcStart, srcEnd]. srcEnd float3 The end point of the source range [srcStart, srcEnd]. dstStart float3 The start point of the destination range [dstStart, dstEnd]. dstEnd float3 The end point of the destination range [dstStart, dstEnd]. x float3 The value to remap from the source to destination range. 返回 float3 The componentwise remap of input x from the source range to the destination range. remap(float4, float4, float4, float4, float4) Returns the componentwise result of a non-clamping linear remapping of a value x from source range [srcStart, srcEnd] to the destination range [dstStart, dstEnd]. public static float4 remap(float4 srcStart, float4 srcEnd, float4 dstStart, float4 dstEnd, float4 x) 参数 srcStart float4 The start point of the source range [srcStart, srcEnd]. srcEnd float4 The end point of the source range [srcStart, srcEnd]. dstStart float4 The start point of the destination range [dstStart, dstEnd]. dstEnd float4 The end point of the destination range [dstStart, dstEnd]. x float4 The value to remap from the source to destination range. 返回 float4 The componentwise remap of input x from the source range to the destination range. reversebits(int) Returns the result of performing a reversal of the bit pattern of an int value. public static int reversebits(int x) 参数 x int Value to reverse. 返回 int Value with reversed bits. reversebits(long) Returns the result of performing a reversal of the bit pattern of a long value. public static long reversebits(long x) 参数 x long Value to reverse. 返回 long Value with reversed bits. reversebits(uint) Returns the result of performing a reversal of the bit pattern of a uint value. public static uint reversebits(uint x) 参数 x uint Value to reverse. 返回 uint Value with reversed bits. reversebits(ulong) Returns the result of performing a reversal of the bit pattern of a ulong value. public static ulong reversebits(ulong x) 参数 x ulong Value to reverse. 返回 ulong Value with reversed bits. reversebits(int2) Returns the result of performing a componentwise reversal of the bit pattern of an int2 vector. public static int2 reversebits(int2 x) 参数 x int2 Value to reverse. 返回 int2 Value with componentwise reversed bits. reversebits(int3) Returns the result of performing a componentwise reversal of the bit pattern of an int3 vector. public static int3 reversebits(int3 x) 参数 x int3 Value to reverse. 返回 int3 Value with componentwise reversed bits. reversebits(int4) Returns the result of performing a componentwise reversal of the bit pattern of an int4 vector. public static int4 reversebits(int4 x) 参数 x int4 Value to reverse. 返回 int4 Value with componentwise reversed bits. reversebits(uint2) Returns the result of performing a componentwise reversal of the bit pattern of an uint2 vector. public static uint2 reversebits(uint2 x) 参数 x uint2 Value to reverse. 返回 uint2 Value with componentwise reversed bits. reversebits(uint3) Returns the result of performing a componentwise reversal of the bit pattern of an uint3 vector. public static uint3 reversebits(uint3 x) 参数 x uint3 Value to reverse. 返回 uint3 Value with componentwise reversed bits. reversebits(uint4) Returns the result of performing a componentwise reversal of the bit pattern of an uint4 vector. public static uint4 reversebits(uint4 x) 参数 x uint4 Value to reverse. 返回 uint4 Value with componentwise reversed bits. right() Unity's right axis (1, 0, 0). public static float3 right() 返回 float3 The right axis. 备注 Matches https://docs.unity3d.com/ScriptReference/Vector3-right.html rol(int, int) Returns the result of rotating the bits of an int left by bits n. public static int rol(int x, int n) 参数 x int Value to rotate. n int Number of bits to rotate. 返回 int The rotated value. rol(long, int) Returns the result of rotating the bits of a long left by bits n. public static long rol(long x, int n) 参数 x long Value to rotate. n int Number of bits to rotate. 返回 long The rotated value. rol(uint, int) Returns the result of rotating the bits of a uint left by bits n. public static uint rol(uint x, int n) 参数 x uint Value to rotate. n int Number of bits to rotate. 返回 uint The rotated value. rol(ulong, int) Returns the result of rotating the bits of a ulong left by bits n. public static ulong rol(ulong x, int n) 参数 x ulong Value to rotate. n int Number of bits to rotate. 返回 ulong The rotated value. rol(int2, int) Returns the componentwise result of rotating the bits of an int2 left by bits n. public static int2 rol(int2 x, int n) 参数 x int2 Value to rotate. n int Number of bits to rotate. 返回 int2 The componentwise rotated value. rol(int3, int) Returns the componentwise result of rotating the bits of an int3 left by bits n. public static int3 rol(int3 x, int n) 参数 x int3 Value to rotate. n int Number of bits to rotate. 返回 int3 The componentwise rotated value. rol(int4, int) Returns the componentwise result of rotating the bits of an int4 left by bits n. public static int4 rol(int4 x, int n) 参数 x int4 Value to rotate. n int Number of bits to rotate. 返回 int4 The componentwise rotated value. rol(uint2, int) Returns the componentwise result of rotating the bits of a uint2 left by bits n. public static uint2 rol(uint2 x, int n) 参数 x uint2 Value to rotate. n int Number of bits to rotate. 返回 uint2 The componentwise rotated value. rol(uint3, int) Returns the componentwise result of rotating the bits of a uint3 left by bits n. public static uint3 rol(uint3 x, int n) 参数 x uint3 Value to rotate. n int Number of bits to rotate. 返回 uint3 The componentwise rotated value. rol(uint4, int) Returns the componentwise result of rotating the bits of a uint4 left by bits n. public static uint4 rol(uint4 x, int n) 参数 x uint4 Value to rotate. n int Number of bits to rotate. 返回 uint4 The componentwise rotated value. ror(int, int) Returns the result of rotating the bits of an int right by bits n. public static int ror(int x, int n) 参数 x int Value to rotate. n int Number of bits to rotate. 返回 int The rotated value. ror(long, int) Returns the result of rotating the bits of a long right by bits n. public static long ror(long x, int n) 参数 x long Value to rotate. n int Number of bits to rotate. 返回 long The rotated value. ror(uint, int) Returns the result of rotating the bits of a uint right by bits n. public static uint ror(uint x, int n) 参数 x uint Value to rotate. n int Number of bits to rotate. 返回 uint The rotated value. ror(ulong, int) Returns the result of rotating the bits of a ulong right by bits n. public static ulong ror(ulong x, int n) 参数 x ulong Value to rotate. n int Number of bits to rotate. 返回 ulong The rotated value. ror(int2, int) Returns the componentwise result of rotating the bits of an int2 right by bits n. public static int2 ror(int2 x, int n) 参数 x int2 Value to rotate. n int Number of bits to rotate. 返回 int2 The componentwise rotated value. ror(int3, int) Returns the componentwise result of rotating the bits of an int3 right by bits n. public static int3 ror(int3 x, int n) 参数 x int3 Value to rotate. n int Number of bits to rotate. 返回 int3 The componentwise rotated value. ror(int4, int) Returns the componentwise result of rotating the bits of an int4 right by bits n. public static int4 ror(int4 x, int n) 参数 x int4 Value to rotate. n int Number of bits to rotate. 返回 int4 The componentwise rotated value. ror(uint2, int) Returns the componentwise result of rotating the bits of a uint2 right by bits n. public static uint2 ror(uint2 x, int n) 参数 x uint2 Value to rotate. n int Number of bits to rotate. 返回 uint2 The componentwise rotated value. ror(uint3, int) Returns the componentwise result of rotating the bits of a uint3 right by bits n. public static uint3 ror(uint3 x, int n) 参数 x uint3 Value to rotate. n int Number of bits to rotate. 返回 uint3 The componentwise rotated value. ror(uint4, int) Returns the componentwise result of rotating the bits of a uint4 right by bits n. public static uint4 ror(uint4 x, int n) 参数 x uint4 Value to rotate. n int Number of bits to rotate. 返回 uint4 The componentwise rotated value. rotate(AffineTransform, float3) Returns the result of rotating a float3 vector by an AffineTransform. public static float3 rotate(AffineTransform a, float3 dir) 参数 a AffineTransform The AffineTransform. dir float3 The direction vector to rotate. 返回 float3 The rotated direction vector. rotate(RigidTransform, float3) Returns the result of rotating a float3 vector by a RigidTransform. public static float3 rotate(RigidTransform a, float3 dir) 参数 a RigidTransform The RigidTransform. dir float3 The direction vector to rotate. 返回 float3 The rotated direction vector. rotate(double4x4, double3) Return the result of rotating a double3 vector by a double4x4 matrix public static double3 rotate(double4x4 a, double3 b) 参数 a double4x4 Left hand side matrix argument that specifies the rotation. b double3 Right hand side vector argument to be rotated. 返回 double3 The rotated vector. rotate(float4x4, float3) Return the result of rotating a float3 vector by a float4x4 matrix public static float3 rotate(float4x4 a, float3 b) 参数 a float4x4 Left hand side matrix argument that specifies the rotation. b float3 Right hand side vector argument to be rotated. 返回 float3 The rotated vector. rotate(quaternion, float3) Returns the result of rotating a vector by a unit quaternion. public static float3 rotate(quaternion q, float3 v) 参数 q quaternion The quaternion rotation. v float3 The vector to rotate. 返回 float3 The rotation of vector v by quaternion q. rotation(float3x3) Extracts the rotation from a matrix. public static quaternion rotation(float3x3 m) 参数 m float3x3 Matrix to extract rotation from 返回 quaternion Extracted rotation 备注 This method supports any type of rotation matrix: if the matrix has a non uniform scale you should use this method. round(double) Returns the result of rounding a double value to the nearest integral value. public static double round(double x) 参数 x double Input value. 返回 double The round to nearest integral value of the input. round(float) Returns the result of rounding a float value to the nearest integral value. public static float round(float x) 参数 x float Input value. 返回 float The round to nearest integral value of the input. round(double2) Returns the result of rounding each component of a double2 vector value to the nearest integral value. public static double2 round(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise round to nearest integral value of the input. round(double3) Returns the result of rounding each component of a double3 vector value to the nearest integral value. public static double3 round(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise round to nearest integral value of the input. round(double4) Returns the result of rounding each component of a double4 vector value to the nearest integral value. public static double4 round(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise round to nearest integral value of the input. round(float2) Returns the result of rounding each component of a float2 vector value to the nearest integral value. public static float2 round(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise round to nearest integral value of the input. round(float3) Returns the result of rounding each component of a float3 vector value to the nearest integral value. public static float3 round(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise round to nearest integral value of the input. round(float4) Returns the result of rounding each component of a float4 vector value to the nearest integral value. public static float4 round(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise round to nearest integral value of the input. rsqrt(double) Returns the reciprocal square root of a double value. public static double rsqrt(double x) 参数 x double Value to use when computing reciprocal square root. 返回 double The reciprocal square root. rsqrt(float) Returns the reciprocal square root of a float value. public static float rsqrt(float x) 参数 x float Value to use when computing reciprocal square root. 返回 float The reciprocal square root. rsqrt(double2) Returns the componentwise reciprocal square root of a double2 vector. public static double2 rsqrt(double2 x) 参数 x double2 Value to use when computing reciprocal square root. 返回 double2 The componentwise reciprocal square root. rsqrt(double3) Returns the componentwise reciprocal square root of a double3 vector. public static double3 rsqrt(double3 x) 参数 x double3 Value to use when computing reciprocal square root. 返回 double3 The componentwise reciprocal square root. rsqrt(double4) Returns the componentwise reciprocal square root of a double4 vector. public static double4 rsqrt(double4 x) 参数 x double4 Value to use when computing reciprocal square root. 返回 double4 The componentwise reciprocal square root. rsqrt(float2) Returns the componentwise reciprocal square root of a float2 vector. public static float2 rsqrt(float2 x) 参数 x float2 Value to use when computing reciprocal square root. 返回 float2 The componentwise reciprocal square root. rsqrt(float3) Returns the componentwise reciprocal square root of a float3 vector. public static float3 rsqrt(float3 x) 参数 x float3 Value to use when computing reciprocal square root. 返回 float3 The componentwise reciprocal square root. rsqrt(float4) Returns the componentwise reciprocal square root of a float4 vector public static float4 rsqrt(float4 x) 参数 x float4 Value to use when computing reciprocal square root. 返回 float4 The componentwise reciprocal square root. saturate(double) Returns the result of clamping the double value x into the interval [0, 1]. public static double saturate(double x) 参数 x double Input value. 返回 double The clamping of the input into the interval [0, 1]. saturate(float) Returns the result of clamping the float value x into the interval [0, 1]. public static float saturate(float x) 参数 x float Input value. 返回 float The clamping of the input into the interval [0, 1]. saturate(double2) Returns the result of a componentwise clamping of the double2 vector x into the interval [0, 1]. public static double2 saturate(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise clamping of the input into the interval [0, 1]. saturate(double3) Returns the result of a componentwise clamping of the double3 vector x into the interval [0, 1]. public static double3 saturate(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise clamping of the input into the interval [0, 1]. saturate(double4) Returns the result of a componentwise clamping of the double4 vector x into the interval [0, 1]. public static double4 saturate(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise clamping of the input into the interval [0, 1]. saturate(float2) Returns the result of a componentwise clamping of the float2 vector x into the interval [0, 1]. public static float2 saturate(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise clamping of the input into the interval [0, 1]. saturate(float3) Returns the result of a componentwise clamping of the float3 vector x into the interval [0, 1]. public static float3 saturate(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise clamping of the input into the interval [0, 1]. saturate(float4) Returns the result of a componentwise clamping of the float4 vector x into the interval [0, 1]. public static float4 saturate(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise clamping of the input into the interval [0, 1]. scaleMul(float3, float3x3) Matrix rows multiplied by scale components m.c0.x * s.x | m.c1.x * s.x | m.c2.x * s.x m.c0.y * s.y | m.c1.y * s.y | m.c2.y * s.y m.c0.z * s.z | m.c1.z * s.z | m.c2.z * s.z public static float3x3 scaleMul(float3 s, float3x3 m) 参数 s float3 Scaling coefficients for each row. m float3x3 Matrix to scale. 返回 float3x3 The scaled matrix. select(double, double, bool) Returns trueValue if test is true, falseValue otherwise. public static double select(double falseValue, double trueValue, bool test) 参数 falseValue double Value to use if test is false. trueValue double Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 double The selection between falseValue and trueValue according to bool test. select(int, int, bool) Returns trueValue if test is true, falseValue otherwise. public static int select(int falseValue, int trueValue, bool test) 参数 falseValue int Value to use if test is false. trueValue int Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 int The selection between falseValue and trueValue according to bool test. select(long, long, bool) Returns trueValue if test is true, falseValue otherwise. public static long select(long falseValue, long trueValue, bool test) 参数 falseValue long Value to use if test is false. trueValue long Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 long The selection between falseValue and trueValue according to bool test. select(float, float, bool) Returns trueValue if test is true, falseValue otherwise. public static float select(float falseValue, float trueValue, bool test) 参数 falseValue float Value to use if test is false. trueValue float Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 float The selection between falseValue and trueValue according to bool test. select(uint, uint, bool) Returns trueValue if test is true, falseValue otherwise. public static uint select(uint falseValue, uint trueValue, bool test) 参数 falseValue uint Value to use if test is false. trueValue uint Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 uint The selection between falseValue and trueValue according to bool test. select(ulong, ulong, bool) Returns trueValue if test is true, falseValue otherwise. public static ulong select(ulong falseValue, ulong trueValue, bool test) 参数 falseValue ulong Value to use if test is false. trueValue ulong Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 ulong The selection between falseValue and trueValue according to bool test. select(double2, double2, bool) Returns trueValue if test is true, falseValue otherwise. public static double2 select(double2 falseValue, double2 trueValue, bool test) 参数 falseValue double2 Value to use if test is false. trueValue double2 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 double2 The selection between falseValue and trueValue according to bool test. select(double2, double2, bool2) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static double2 select(double2 falseValue, double2 trueValue, bool2 test) 参数 falseValue double2 Values to use if test is false. trueValue double2 Values to use if test is true. test bool2 Selection mask to choose between falseValue and trueValue. 返回 double2 The componentwise selection between falseValue and trueValue according to selection mask test. select(double3, double3, bool) Returns trueValue if test is true, falseValue otherwise. public static double3 select(double3 falseValue, double3 trueValue, bool test) 参数 falseValue double3 Value to use if test is false. trueValue double3 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 double3 The selection between falseValue and trueValue according to bool test. select(double3, double3, bool3) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static double3 select(double3 falseValue, double3 trueValue, bool3 test) 参数 falseValue double3 Values to use if test is false. trueValue double3 Values to use if test is true. test bool3 Selection mask to choose between falseValue and trueValue. 返回 double3 The componentwise selection between falseValue and trueValue according to selection mask test. select(double4, double4, bool) Returns trueValue if test is true, falseValue otherwise. public static double4 select(double4 falseValue, double4 trueValue, bool test) 参数 falseValue double4 Value to use if test is false. trueValue double4 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 double4 The selection between falseValue and trueValue according to bool test. select(double4, double4, bool4) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static double4 select(double4 falseValue, double4 trueValue, bool4 test) 参数 falseValue double4 Values to use if test is false. trueValue double4 Values to use if test is true. test bool4 Selection mask to choose between falseValue and trueValue. 返回 double4 The componentwise selection between falseValue and trueValue according to selection mask test. select(float2, float2, bool) Returns trueValue if test is true, falseValue otherwise. public static float2 select(float2 falseValue, float2 trueValue, bool test) 参数 falseValue float2 Value to use if test is false. trueValue float2 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 float2 The selection between falseValue and trueValue according to bool test. select(float2, float2, bool2) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static float2 select(float2 falseValue, float2 trueValue, bool2 test) 参数 falseValue float2 Values to use if test is false. trueValue float2 Values to use if test is true. test bool2 Selection mask to choose between falseValue and trueValue. 返回 float2 The componentwise selection between falseValue and trueValue according to selection mask test. select(float3, float3, bool) Returns trueValue if test is true, falseValue otherwise. public static float3 select(float3 falseValue, float3 trueValue, bool test) 参数 falseValue float3 Value to use if test is false. trueValue float3 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 float3 The selection between falseValue and trueValue according to bool test. select(float3, float3, bool3) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static float3 select(float3 falseValue, float3 trueValue, bool3 test) 参数 falseValue float3 Values to use if test is false. trueValue float3 Values to use if test is true. test bool3 Selection mask to choose between falseValue and trueValue. 返回 float3 The componentwise selection between falseValue and trueValue according to selection mask test. select(float4, float4, bool) Returns trueValue if test is true, falseValue otherwise. public static float4 select(float4 falseValue, float4 trueValue, bool test) 参数 falseValue float4 Value to use if test is false. trueValue float4 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 float4 The selection between falseValue and trueValue according to bool test. select(float4, float4, bool4) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static float4 select(float4 falseValue, float4 trueValue, bool4 test) 参数 falseValue float4 Values to use if test is false. trueValue float4 Values to use if test is true. test bool4 Selection mask to choose between falseValue and trueValue. 返回 float4 The componentwise selection between falseValue and trueValue according to selection mask test. select(int2, int2, bool) Returns trueValue if test is true, falseValue otherwise. public static int2 select(int2 falseValue, int2 trueValue, bool test) 参数 falseValue int2 Value to use if test is false. trueValue int2 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 int2 The selection between falseValue and trueValue according to bool test. select(int2, int2, bool2) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static int2 select(int2 falseValue, int2 trueValue, bool2 test) 参数 falseValue int2 Values to use if test is false. trueValue int2 Values to use if test is true. test bool2 Selection mask to choose between falseValue and trueValue. 返回 int2 The componentwise selection between falseValue and trueValue according to selection mask test. select(int3, int3, bool) Returns trueValue if test is true, falseValue otherwise. public static int3 select(int3 falseValue, int3 trueValue, bool test) 参数 falseValue int3 Value to use if test is false. trueValue int3 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 int3 The selection between falseValue and trueValue according to bool test. select(int3, int3, bool3) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static int3 select(int3 falseValue, int3 trueValue, bool3 test) 参数 falseValue int3 Values to use if test is false. trueValue int3 Values to use if test is true. test bool3 Selection mask to choose between falseValue and trueValue. 返回 int3 The componentwise selection between falseValue and trueValue according to selection mask test. select(int4, int4, bool) Returns trueValue if test is true, falseValue otherwise. public static int4 select(int4 falseValue, int4 trueValue, bool test) 参数 falseValue int4 Value to use if test is false. trueValue int4 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 int4 The selection between falseValue and trueValue according to bool test. select(int4, int4, bool4) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static int4 select(int4 falseValue, int4 trueValue, bool4 test) 参数 falseValue int4 Values to use if test is false. trueValue int4 Values to use if test is true. test bool4 Selection mask to choose between falseValue and trueValue. 返回 int4 The componentwise selection between falseValue and trueValue according to selection mask test. select(uint2, uint2, bool) Returns trueValue if test is true, falseValue otherwise. public static uint2 select(uint2 falseValue, uint2 trueValue, bool test) 参数 falseValue uint2 Value to use if test is false. trueValue uint2 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 uint2 The selection between falseValue and trueValue according to bool test. select(uint2, uint2, bool2) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static uint2 select(uint2 falseValue, uint2 trueValue, bool2 test) 参数 falseValue uint2 Values to use if test is false. trueValue uint2 Values to use if test is true. test bool2 Selection mask to choose between falseValue and trueValue. 返回 uint2 The componentwise selection between falseValue and trueValue according to selection mask test. select(uint3, uint3, bool) Returns trueValue if test is true, falseValue otherwise. public static uint3 select(uint3 falseValue, uint3 trueValue, bool test) 参数 falseValue uint3 Value to use if test is false. trueValue uint3 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 uint3 The selection between falseValue and trueValue according to bool test. select(uint3, uint3, bool3) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static uint3 select(uint3 falseValue, uint3 trueValue, bool3 test) 参数 falseValue uint3 Values to use if test is false. trueValue uint3 Values to use if test is true. test bool3 Selection mask to choose between falseValue and trueValue. 返回 uint3 The componentwise selection between falseValue and trueValue according to selection mask test. select(uint4, uint4, bool) Returns trueValue if test is true, falseValue otherwise. public static uint4 select(uint4 falseValue, uint4 trueValue, bool test) 参数 falseValue uint4 Value to use if test is false. trueValue uint4 Value to use if test is true. test bool Bool value to choose between falseValue and trueValue. 返回 uint4 The selection between falseValue and trueValue according to bool test. select(uint4, uint4, bool4) Returns a componentwise selection between two double4 vectors falseValue and trueValue based on a bool4 selection mask test. Per component, the component from trueValue is selected when test is true, otherwise the component from falseValue is selected. public static uint4 select(uint4 falseValue, uint4 trueValue, bool4 test) 参数 falseValue uint4 Values to use if test is false. trueValue uint4 Values to use if test is true. test bool4 Selection mask to choose between falseValue and trueValue. 返回 uint4 The componentwise selection between falseValue and trueValue according to selection mask test. shuffle(bool2, bool2, ShuffleComponent) Returns the result of specified shuffling of the components from two bool2 vectors into a bool value. public static bool shuffle(bool2 left, bool2 right, math.ShuffleComponent x) 参数 left bool2 bool2 to use as the left argument of the shuffle operation. right bool2 bool2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool. 返回 bool bool result of the shuffle operation. shuffle(bool2, bool2, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool2 vectors into a bool2 vector. public static bool2 shuffle(bool2 left, bool2 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left bool2 bool2 to use as the left argument of the shuffle operation. right bool2 bool2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool2 y component. 返回 bool2 bool2 result of the shuffle operation. shuffle(bool2, bool2, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool2 vectors into a bool3 vector. public static bool3 shuffle(bool2 left, bool2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left bool2 bool2 to use as the left argument of the shuffle operation. right bool2 bool2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 z component. 返回 bool3 bool3 result of the shuffle operation. shuffle(bool2, bool2, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool2 vectors into a bool4 vector. public static bool4 shuffle(bool2 left, bool2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left bool2 bool2 to use as the left argument of the shuffle operation. right bool2 bool2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 w component. 返回 bool4 bool4 result of the shuffle operation. shuffle(bool3, bool3, ShuffleComponent) Returns the result of specified shuffling of the components from two bool3 vectors into a bool value. public static bool shuffle(bool3 left, bool3 right, math.ShuffleComponent x) 参数 left bool3 bool3 to use as the left argument of the shuffle operation. right bool3 bool3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool. 返回 bool bool result of the shuffle operation. shuffle(bool3, bool3, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool3 vectors into a bool2 vector. public static bool2 shuffle(bool3 left, bool3 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left bool3 bool3 to use as the left argument of the shuffle operation. right bool3 bool3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool2 y component. 返回 bool2 bool2 result of the shuffle operation. shuffle(bool3, bool3, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool3 vectors into a bool3 vector. public static bool3 shuffle(bool3 left, bool3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left bool3 bool3 to use as the left argument of the shuffle operation. right bool3 bool3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 z component. 返回 bool3 bool3 result of the shuffle operation. shuffle(bool3, bool3, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool3 vectors into a bool4 vector. public static bool4 shuffle(bool3 left, bool3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left bool3 bool3 to use as the left argument of the shuffle operation. right bool3 bool3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 w component. 返回 bool4 bool4 result of the shuffle operation. shuffle(bool4, bool4, ShuffleComponent) Returns the result of specified shuffling of the components from two bool4 vectors into a bool value. public static bool shuffle(bool4 left, bool4 right, math.ShuffleComponent x) 参数 left bool4 bool4 to use as the left argument of the shuffle operation. right bool4 bool4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool. 返回 bool bool result of the shuffle operation. shuffle(bool4, bool4, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool4 vectors into a bool2 vector. public static bool2 shuffle(bool4 left, bool4 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left bool4 bool4 to use as the left argument of the shuffle operation. right bool4 bool4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool2 y component. 返回 bool2 bool2 result of the shuffle operation. shuffle(bool4, bool4, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool4 vectors into a bool3 vector. public static bool3 shuffle(bool4 left, bool4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left bool4 bool4 to use as the left argument of the shuffle operation. right bool4 bool4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool3 z component. 返回 bool3 bool3 result of the shuffle operation. shuffle(bool4, bool4, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two bool4 vectors into a bool4 vector. public static bool4 shuffle(bool4 left, bool4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left bool4 bool4 to use as the left argument of the shuffle operation. right bool4 bool4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting bool4 w component. 返回 bool4 bool4 result of the shuffle operation. shuffle(double2, double2, ShuffleComponent) Returns the result of specified shuffling of the components from two double2 vectors into a double value. public static double shuffle(double2 left, double2 right, math.ShuffleComponent x) 参数 left double2 double2 to use as the left argument of the shuffle operation. right double2 double2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double. 返回 double double result of the shuffle operation. shuffle(double2, double2, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double2 vectors into a double2 vector. public static double2 shuffle(double2 left, double2 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left double2 double2 to use as the left argument of the shuffle operation. right double2 double2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double2 y component. 返回 double2 double2 result of the shuffle operation. shuffle(double2, double2, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double2 vectors into a double3 vector. public static double3 shuffle(double2 left, double2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left double2 double2 to use as the left argument of the shuffle operation. right double2 double2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 z component. 返回 double3 double3 result of the shuffle operation. shuffle(double2, double2, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double2 vectors into a double4 vector. public static double4 shuffle(double2 left, double2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left double2 double2 to use as the left argument of the shuffle operation. right double2 double2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 w component. 返回 double4 double4 result of the shuffle operation. shuffle(double3, double3, ShuffleComponent) Returns the result of specified shuffling of the components from two double3 vectors into a double value. public static double shuffle(double3 left, double3 right, math.ShuffleComponent x) 参数 left double3 double3 to use as the left argument of the shuffle operation. right double3 double3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double. 返回 double double result of the shuffle operation. shuffle(double3, double3, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double3 vectors into a double2 vector. public static double2 shuffle(double3 left, double3 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left double3 double3 to use as the left argument of the shuffle operation. right double3 double3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double2 y component. 返回 double2 double2 result of the shuffle operation. shuffle(double3, double3, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double3 vectors into a double3 vector. public static double3 shuffle(double3 left, double3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left double3 double3 to use as the left argument of the shuffle operation. right double3 double3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 z component. 返回 double3 double3 result of the shuffle operation. shuffle(double3, double3, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double3 vectors into a double4 vector. public static double4 shuffle(double3 left, double3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left double3 double3 to use as the left argument of the shuffle operation. right double3 double3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 w component. 返回 double4 double4 result of the shuffle operation. shuffle(double4, double4, ShuffleComponent) Returns the result of specified shuffling of the components from two double4 vectors into a double value. public static double shuffle(double4 left, double4 right, math.ShuffleComponent x) 参数 left double4 double4 to use as the left argument of the shuffle operation. right double4 double4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double. 返回 double double result of the shuffle operation. shuffle(double4, double4, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double4 vectors into a double2 vector. public static double2 shuffle(double4 left, double4 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left double4 double4 to use as the left argument of the shuffle operation. right double4 double4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double2 y component. 返回 double2 double2 result of the shuffle operation. shuffle(double4, double4, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double4 vectors into a double3 vector. public static double3 shuffle(double4 left, double4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left double4 double4 to use as the left argument of the shuffle operation. right double4 double4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting double3 z component. 返回 double3 double3 result of the shuffle operation. shuffle(double4, double4, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two double4 vectors into a double4 vector. public static double4 shuffle(double4 left, double4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left double4 double4 to use as the left argument of the shuffle operation. right double4 double4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting double4 w component. 返回 double4 double4 result of the shuffle operation. shuffle(float2, float2, ShuffleComponent) Returns the result of specified shuffling of the components from two float2 vectors into a float value. public static float shuffle(float2 left, float2 right, math.ShuffleComponent x) 参数 left float2 float2 to use as the left argument of the shuffle operation. right float2 float2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float. 返回 float float result of the shuffle operation. shuffle(float2, float2, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float2 vectors into a float2 vector. public static float2 shuffle(float2 left, float2 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left float2 float2 to use as the left argument of the shuffle operation. right float2 float2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float2 y component. 返回 float2 float2 result of the shuffle operation. shuffle(float2, float2, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float2 vectors into a float3 vector. public static float3 shuffle(float2 left, float2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left float2 float2 to use as the left argument of the shuffle operation. right float2 float2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 z component. 返回 float3 float3 result of the shuffle operation. shuffle(float2, float2, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float2 vectors into a float4 vector. public static float4 shuffle(float2 left, float2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left float2 float2 to use as the left argument of the shuffle operation. right float2 float2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 w component. 返回 float4 float4 result of the shuffle operation. shuffle(float3, float3, ShuffleComponent) Returns the result of specified shuffling of the components from two float3 vectors into a float value. public static float shuffle(float3 left, float3 right, math.ShuffleComponent x) 参数 left float3 float3 to use as the left argument of the shuffle operation. right float3 float3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float. 返回 float float result of the shuffle operation. shuffle(float3, float3, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float3 vectors into a float2 vector. public static float2 shuffle(float3 left, float3 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left float3 float3 to use as the left argument of the shuffle operation. right float3 float3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float2 y component. 返回 float2 float2 result of the shuffle operation. shuffle(float3, float3, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float3 vectors into a float3 vector. public static float3 shuffle(float3 left, float3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left float3 float3 to use as the left argument of the shuffle operation. right float3 float3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 z component. 返回 float3 float3 result of the shuffle operation. shuffle(float3, float3, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float3 vectors into a float4 vector. public static float4 shuffle(float3 left, float3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left float3 float3 to use as the left argument of the shuffle operation. right float3 float3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 w component. 返回 float4 float4 result of the shuffle operation. shuffle(float4, float4, ShuffleComponent) Returns the result of specified shuffling of the components from two float4 vectors into a float value. public static float shuffle(float4 left, float4 right, math.ShuffleComponent x) 参数 left float4 float4 to use as the left argument of the shuffle operation. right float4 float4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float. 返回 float float result of the shuffle operation. shuffle(float4, float4, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float4 vectors into a float2 vector. public static float2 shuffle(float4 left, float4 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left float4 float4 to use as the left argument of the shuffle operation. right float4 float4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float2 y component. 返回 float2 float2 result of the shuffle operation. shuffle(float4, float4, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float4 vectors into a float3 vector. public static float3 shuffle(float4 left, float4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left float4 float4 to use as the left argument of the shuffle operation. right float4 float4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting float3 z component. 返回 float3 float3 result of the shuffle operation. shuffle(float4, float4, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two float4 vectors into a float4 vector. public static float4 shuffle(float4 left, float4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left float4 float4 to use as the left argument of the shuffle operation. right float4 float4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting float4 w component. 返回 float4 float4 result of the shuffle operation. shuffle(int2, int2, ShuffleComponent) Returns the result of specified shuffling of the components from two int2 vectors into an int value. public static int shuffle(int2 left, int2 right, math.ShuffleComponent x) 参数 left int2 int2 to use as the left argument of the shuffle operation. right int2 int2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int. 返回 int int result of the shuffle operation. shuffle(int2, int2, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int2 vectors into an int2 vector. public static int2 shuffle(int2 left, int2 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left int2 int2 to use as the left argument of the shuffle operation. right int2 int2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int2 y component. 返回 int2 int2 result of the shuffle operation. shuffle(int2, int2, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int2 vectors into an int3 vector. public static int3 shuffle(int2 left, int2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left int2 int2 to use as the left argument of the shuffle operation. right int2 int2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 z component. 返回 int3 int3 result of the shuffle operation. shuffle(int2, int2, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int2 vectors into an int4 vector. public static int4 shuffle(int2 left, int2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left int2 int2 to use as the left argument of the shuffle operation. right int2 int2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 w component. 返回 int4 int4 result of the shuffle operation. shuffle(int3, int3, ShuffleComponent) Returns the result of specified shuffling of the components from two int3 vectors into an int value. public static int shuffle(int3 left, int3 right, math.ShuffleComponent x) 参数 left int3 int3 to use as the left argument of the shuffle operation. right int3 int3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int. 返回 int int result of the shuffle operation. shuffle(int3, int3, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int3 vectors into an int2 vector. public static int2 shuffle(int3 left, int3 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left int3 int3 to use as the left argument of the shuffle operation. right int3 int3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int2 y component. 返回 int2 int2 result of the shuffle operation. shuffle(int3, int3, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int3 vectors into an int3 vector. public static int3 shuffle(int3 left, int3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left int3 int3 to use as the left argument of the shuffle operation. right int3 int3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 z component. 返回 int3 int3 result of the shuffle operation. shuffle(int3, int3, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int3 vectors into an int4 vector. public static int4 shuffle(int3 left, int3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left int3 int3 to use as the left argument of the shuffle operation. right int3 int3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 w component. 返回 int4 int4 result of the shuffle operation. shuffle(int4, int4, ShuffleComponent) Returns the result of specified shuffling of the components from two int4 vectors into an int value. public static int shuffle(int4 left, int4 right, math.ShuffleComponent x) 参数 left int4 int4 to use as the left argument of the shuffle operation. right int4 int4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int. 返回 int int result of the shuffle operation. shuffle(int4, int4, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int4 vectors into an int2 vector. public static int2 shuffle(int4 left, int4 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left int4 int4 to use as the left argument of the shuffle operation. right int4 int4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int2 y component. 返回 int2 int2 result of the shuffle operation. shuffle(int4, int4, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int4 vectors into an int3 vector. public static int3 shuffle(int4 left, int4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left int4 int4 to use as the left argument of the shuffle operation. right int4 int4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting int3 z component. 返回 int3 int3 result of the shuffle operation. shuffle(int4, int4, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two int4 vectors into an int4 vector. public static int4 shuffle(int4 left, int4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left int4 int4 to use as the left argument of the shuffle operation. right int4 int4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting int4 w component. 返回 int4 int4 result of the shuffle operation. shuffle(uint2, uint2, ShuffleComponent) Returns the result of specified shuffling of the components from two uint2 vectors into a uint value. public static uint shuffle(uint2 left, uint2 right, math.ShuffleComponent x) 参数 left uint2 uint2 to use as the left argument of the shuffle operation. right uint2 uint2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint. 返回 uint uint result of the shuffle operation. shuffle(uint2, uint2, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint2 vectors into a uint2 vector. public static uint2 shuffle(uint2 left, uint2 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left uint2 uint2 to use as the left argument of the shuffle operation. right uint2 uint2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint2 y component. 返回 uint2 uint2 result of the shuffle operation. shuffle(uint2, uint2, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint2 vectors into a uint3 vector. public static uint3 shuffle(uint2 left, uint2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left uint2 uint2 to use as the left argument of the shuffle operation. right uint2 uint2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 z component. 返回 uint3 uint3 result of the shuffle operation. shuffle(uint2, uint2, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint2 vectors into a uint4 vector. public static uint4 shuffle(uint2 left, uint2 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left uint2 uint2 to use as the left argument of the shuffle operation. right uint2 uint2 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 w component. 返回 uint4 uint4 result of the shuffle operation. shuffle(uint3, uint3, ShuffleComponent) Returns the result of specified shuffling of the components from two uint3 vectors into a uint value. public static uint shuffle(uint3 left, uint3 right, math.ShuffleComponent x) 参数 left uint3 uint3 to use as the left argument of the shuffle operation. right uint3 uint3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint. 返回 uint uint result of the shuffle operation. shuffle(uint3, uint3, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint3 vectors into a uint2 vector. public static uint2 shuffle(uint3 left, uint3 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left uint3 uint3 to use as the left argument of the shuffle operation. right uint3 uint3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint2 y component. 返回 uint2 uint2 result of the shuffle operation. shuffle(uint3, uint3, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint3 vectors into a uint3 vector. public static uint3 shuffle(uint3 left, uint3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left uint3 uint3 to use as the left argument of the shuffle operation. right uint3 uint3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 z component. 返回 uint3 uint3 result of the shuffle operation. shuffle(uint3, uint3, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint3 vectors into a uint4 vector. public static uint4 shuffle(uint3 left, uint3 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left uint3 uint3 to use as the left argument of the shuffle operation. right uint3 uint3 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 w component. 返回 uint4 uint4 result of the shuffle operation. shuffle(uint4, uint4, ShuffleComponent) Returns the result of specified shuffling of the components from two uint4 vectors into a uint value. public static uint shuffle(uint4 left, uint4 right, math.ShuffleComponent x) 参数 left uint4 uint4 to use as the left argument of the shuffle operation. right uint4 uint4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint. 返回 uint uint result of the shuffle operation. shuffle(uint4, uint4, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint4 vectors into a uint2 vector. public static uint2 shuffle(uint4 left, uint4 right, math.ShuffleComponent x, math.ShuffleComponent y) 参数 left uint4 uint4 to use as the left argument of the shuffle operation. right uint4 uint4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint2 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint2 y component. 返回 uint2 uint2 result of the shuffle operation. shuffle(uint4, uint4, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint4 vectors into a uint3 vector. public static uint3 shuffle(uint4 left, uint4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z) 参数 left uint4 uint4 to use as the left argument of the shuffle operation. right uint4 uint4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint3 z component. 返回 uint3 uint3 result of the shuffle operation. shuffle(uint4, uint4, ShuffleComponent, ShuffleComponent, ShuffleComponent, ShuffleComponent) Returns the result of specified shuffling of the components from two uint4 vectors into a uint4 vector. public static uint4 shuffle(uint4 left, uint4 right, math.ShuffleComponent x, math.ShuffleComponent y, math.ShuffleComponent z, math.ShuffleComponent w) 参数 left uint4 uint4 to use as the left argument of the shuffle operation. right uint4 uint4 to use as the right argument of the shuffle operation. x math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 x component. y math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 y component. z math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 z component. w math.ShuffleComponent The ShuffleComponent to use when setting the resulting uint4 w component. 返回 uint4 uint4 result of the shuffle operation. sign(double) Returns the sign of a double value. -1.0 if it is less than zero, 0.0 if it is zero and 1.0 if it greater than zero. public static double sign(double x) 参数 x double Input value. 返回 double The sign of the input. sign(int) Returns the sign of a int value. -1 if it is less than zero, 0 if it is zero and 1 if it greater than zero. public static int sign(int x) 参数 x int Input value. 返回 int The sign of the input. sign(float) Returns the sign of a float value. -1.0f if it is less than zero, 0.0f if it is zero and 1.0f if it greater than zero. public static float sign(float x) 参数 x float Input value. 返回 float The sign of the input. sign(double2) Returns the componentwise sign of a double2 value. 1.0 for positive components, 0.0 for zero components and -1.0 for negative components. public static double2 sign(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise sign of the input. sign(double3) Returns the componentwise sign of a double3 value. 1.0 for positive components, 0.0 for zero components and -1.0 for negative components. public static double3 sign(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise sign of the input. sign(double4) Returns the componentwise sign of a double4 value. 1.0 for positive components, 0.0 for zero components and -1.0 for negative components. public static double4 sign(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise sign of the input. sign(float2) Returns the componentwise sign of a float2 value. 1.0f for positive components, 0.0f for zero components and -1.0f for negative components. public static float2 sign(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise sign of the input. sign(float3) Returns the componentwise sign of a float3 value. 1.0f for positive components, 0.0f for zero components and -1.0f for negative components. public static float3 sign(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise sign of the input. sign(float4) Returns the componentwise sign of a float4 value. 1.0f for positive components, 0.0f for zero components and -1.0f for negative components. public static float4 sign(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise sign of the input. sign(int2) Returns the componentwise sign of a int2 value. 1 for positive components, 0 for zero components and -1 for negative components. public static int2 sign(int2 x) 参数 x int2 Input value. 返回 int2 The componentwise sign of the input. sign(int3) Returns the componentwise sign of a int3 value. 1 for positive components, 0 for zero components and -1 for negative components. public static int3 sign(int3 x) 参数 x int3 Input value. 返回 int3 The componentwise sign of the input. sign(int4) Returns the componentwise sign of a int4 value. 1 for positive components, 0 for zero components and -1 for negative components. public static int4 sign(int4 x) 参数 x int4 Input value. 返回 int4 The componentwise sign of the input. sin(double) Returns the sine of a double value. public static double sin(double x) 参数 x double Input value. 返回 double The sine of the input. sin(float) Returns the sine of a float value. public static float sin(float x) 参数 x float Input value. 返回 float The sine of the input. sin(double2) Returns the componentwise sine of a double2 vector. public static double2 sin(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise sine of the input. sin(double3) Returns the componentwise sine of a double3 vector. public static double3 sin(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise sine of the input. sin(double4) Returns the componentwise sine of a double4 vector. public static double4 sin(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise sine of the input. sin(float2) Returns the componentwise sine of a float2 vector. public static float2 sin(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise sine of the input. sin(float3) Returns the componentwise sine of a float3 vector. public static float3 sin(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise sine of the input. sin(float4) Returns the componentwise sine of a float4 vector. public static float4 sin(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise sine of the input. sincos(double, out double, out double) Returns the sine and cosine of the input double value x through the out parameters s and c. public static void sincos(double x, out double s, out double c) 参数 x double Input angle in radians. s double Output sine of the input. c double Output cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(float, out float, out float) Returns the sine and cosine of the input float value x through the out parameters s and c. public static void sincos(float x, out float s, out float c) 参数 x float Input angle in radians. s float Output sine of the input. c float Output cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(double2, out double2, out double2) Returns the componentwise sine and cosine of the input double2 vector x through the out parameters s and c. public static void sincos(double2 x, out double2 s, out double2 c) 参数 x double2 Input vector containing angles in radians. s double2 Output vector containing the componentwise sine of the input. c double2 Output vector containing the componentwise cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(double3, out double3, out double3) Returns the componentwise sine and cosine of the input double3 vector x through the out parameters s and c. public static void sincos(double3 x, out double3 s, out double3 c) 参数 x double3 Input vector containing angles in radians. s double3 Output vector containing the componentwise sine of the input. c double3 Output vector containing the componentwise cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(double4, out double4, out double4) Returns the componentwise sine and cosine of the input double4 vector x through the out parameters s and c. public static void sincos(double4 x, out double4 s, out double4 c) 参数 x double4 Input vector containing angles in radians. s double4 Output vector containing the componentwise sine of the input. c double4 Output vector containing the componentwise cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(float2, out float2, out float2) Returns the componentwise sine and cosine of the input float2 vector x through the out parameters s and c. public static void sincos(float2 x, out float2 s, out float2 c) 参数 x float2 Input vector containing angles in radians. s float2 Output vector containing the componentwise sine of the input. c float2 Output vector containing the componentwise cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(float3, out float3, out float3) Returns the componentwise sine and cosine of the input float3 vector x through the out parameters s and c. public static void sincos(float3 x, out float3 s, out float3 c) 参数 x float3 Input vector containing angles in radians. s float3 Output vector containing the componentwise sine of the input. c float3 Output vector containing the componentwise cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sincos(float4, out float4, out float4) Returns the componentwise sine and cosine of the input float4 vector x through the out parameters s and c. public static void sincos(float4 x, out float4 s, out float4 c) 参数 x float4 Input vector containing angles in radians. s float4 Output vector containing the componentwise sine of the input. c float4 Output vector containing the componentwise cosine of the input. 备注 When Burst compiled, his method is faster than calling sin() and cos() separately. sinh(double) Returns the hyperbolic sine of a double value. public static double sinh(double x) 参数 x double Input value. 返回 double The hyperbolic sine of the input. sinh(float) Returns the hyperbolic sine of a float value. public static float sinh(float x) 参数 x float Input value. 返回 float The hyperbolic sine of the input. sinh(double2) Returns the componentwise hyperbolic sine of a double2 vector. public static double2 sinh(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise hyperbolic sine of the input. sinh(double3) Returns the componentwise hyperbolic sine of a double3 vector. public static double3 sinh(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise hyperbolic sine of the input. sinh(double4) Returns the componentwise hyperbolic sine of a double4 vector. public static double4 sinh(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise hyperbolic sine of the input. sinh(float2) Returns the componentwise hyperbolic sine of a float2 vector. public static float2 sinh(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise hyperbolic sine of the input. sinh(float3) Returns the componentwise hyperbolic sine of a float3 vector. public static float3 sinh(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise hyperbolic sine of the input. sinh(float4) Returns the componentwise hyperbolic sine of a float4 vector. public static float4 sinh(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise hyperbolic sine of the input. slerp(quaternion, quaternion, float) Returns the result of a spherical interpolation between two quaternions q1 and a2 using an interpolation parameter t. public static quaternion slerp(quaternion q1, quaternion q2, float t) 参数 q1 quaternion The first quaternion. q2 quaternion The second quaternion. t float The interpolation parameter. 返回 quaternion The spherical linear interpolation of two quaternions. smoothstep(double, double, double) Returns a smooth Hermite interpolation between 0.0 and 1.0 when x is in the interval (inclusive) [xMin, xMax]. public static double smoothstep(double xMin, double xMax, double x) 参数 xMin double The minimum range of the x parameter. xMax double The maximum range of the x parameter. x double The value to be interpolated. 返回 double Returns a value camped to the range [0, 1]. smoothstep(float, float, float) Returns a smooth Hermite interpolation between 0.0f and 1.0f when x is in the interval (inclusive) [xMin, xMax]. public static float smoothstep(float xMin, float xMax, float x) 参数 xMin float The minimum range of the x parameter. xMax float The maximum range of the x parameter. x float The value to be interpolated. 返回 float Returns a value camped to the range [0, 1]. smoothstep(double2, double2, double2) Returns a componentwise smooth Hermite interpolation between 0.0 and 1.0 when x is in the interval (inclusive) [xMin, xMax]. public static double2 smoothstep(double2 xMin, double2 xMax, double2 x) 参数 xMin double2 The minimum range of the x parameter. xMax double2 The maximum range of the x parameter. x double2 The value to be interpolated. 返回 double2 Returns component values camped to the range [0, 1]. smoothstep(double3, double3, double3) Returns a componentwise smooth Hermite interpolation between 0.0 and 1.0 when x is in the interval (inclusive) [xMin, xMax]. public static double3 smoothstep(double3 xMin, double3 xMax, double3 x) 参数 xMin double3 The minimum range of the x parameter. xMax double3 The maximum range of the x parameter. x double3 The value to be interpolated. 返回 double3 Returns component values camped to the range [0, 1]. smoothstep(double4, double4, double4) Returns a componentwise smooth Hermite interpolation between 0.0 and 1.0 when x is in the interval (inclusive) [xMin, xMax]. public static double4 smoothstep(double4 xMin, double4 xMax, double4 x) 参数 xMin double4 The minimum range of the x parameter. xMax double4 The maximum range of the x parameter. x double4 The value to be interpolated. 返回 double4 Returns component values camped to the range [0, 1]. smoothstep(float2, float2, float2) Returns a componentwise smooth Hermite interpolation between 0.0f and 1.0f when x is in the interval (inclusive) [xMin, xMax]. public static float2 smoothstep(float2 xMin, float2 xMax, float2 x) 参数 xMin float2 The minimum range of the x parameter. xMax float2 The maximum range of the x parameter. x float2 The value to be interpolated. 返回 float2 Returns component values camped to the range [0, 1]. smoothstep(float3, float3, float3) Returns a componentwise smooth Hermite interpolation between 0.0f and 1.0f when x is in the interval (inclusive) [xMin, xMax]. public static float3 smoothstep(float3 xMin, float3 xMax, float3 x) 参数 xMin float3 The minimum range of the x parameter. xMax float3 The maximum range of the x parameter. x float3 The value to be interpolated. 返回 float3 Returns component values camped to the range [0, 1]. smoothstep(float4, float4, float4) Returns a componentwise smooth Hermite interpolation between 0.0f and 1.0f when x is in the interval (inclusive) [xMin, xMax]. public static float4 smoothstep(float4 xMin, float4 xMax, float4 x) 参数 xMin float4 The minimum range of the x parameter. xMax float4 The maximum range of the x parameter. x float4 The value to be interpolated. 返回 float4 Returns component values camped to the range [0, 1]. sqrt(double) Returns the square root of a double value. public static double sqrt(double x) 参数 x double Value to use when computing square root. 返回 double The square root. sqrt(float) Returns the square root of a float value. public static float sqrt(float x) 参数 x float Value to use when computing square root. 返回 float The square root. sqrt(double2) Returns the componentwise square root of a double2 vector. public static double2 sqrt(double2 x) 参数 x double2 Value to use when computing square root. 返回 double2 The componentwise square root. sqrt(double3) Returns the componentwise square root of a double3 vector. public static double3 sqrt(double3 x) 参数 x double3 Value to use when computing square root. 返回 double3 The componentwise square root. sqrt(double4) Returns the componentwise square root of a double4 vector. public static double4 sqrt(double4 x) 参数 x double4 Value to use when computing square root. 返回 double4 The componentwise square root. sqrt(float2) Returns the componentwise square root of a float2 vector. public static float2 sqrt(float2 x) 参数 x float2 Value to use when computing square root. 返回 float2 The componentwise square root. sqrt(float3) Returns the componentwise square root of a float3 vector. public static float3 sqrt(float3 x) 参数 x float3 Value to use when computing square root. 返回 float3 The componentwise square root. sqrt(float4) Returns the componentwise square root of a float4 vector. public static float4 sqrt(float4 x) 参数 x float4 Value to use when computing square root. 返回 float4 The componentwise square root. square(double) Computes the square (x * x) of the input argument x. public static double square(double x) 参数 x double Value to square. 返回 double Returns the square of the input. square(int) Computes the square (x * x) of the input argument x. public static int square(int x) 参数 x int Value to square. 返回 int Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) is positive. For example, square(46341) will return -2147479015. square(float) Computes the square (x * x) of the input argument x. public static float square(float x) 参数 x float Value to square. 返回 float Returns the square of the input. square(uint) Computes the square (x * x) of the input argument x. public static uint square(uint x) 参数 x uint Value to square. 返回 uint Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) >= x. For example, square(4294967295u) will return 1u. square(double2) Computes the component-wise square (x * x) of the input argument x. public static double2 square(double2 x) 参数 x double2 Value to square. 返回 double2 Returns the square of the input. square(double3) Computes the component-wise square (x * x) of the input argument x. public static double3 square(double3 x) 参数 x double3 Value to square. 返回 double3 Returns the square of the input. square(double4) Computes the component-wise square (x * x) of the input argument x. public static double4 square(double4 x) 参数 x double4 Value to square. 返回 double4 Returns the square of the input. square(float2) Computes the component-wise square (x * x) of the input argument x. public static float2 square(float2 x) 参数 x float2 Value to square. 返回 float2 Returns the square of the input. square(float3) Computes the component-wise square (x * x) of the input argument x. public static float3 square(float3 x) 参数 x float3 Value to square. 返回 float3 Returns the square of the input. square(float4) Computes the component-wise square (x * x) of the input argument x. public static float4 square(float4 x) 参数 x float4 Value to square. 返回 float4 Returns the square of the input. square(int2) Computes the component-wise square (x * x) of the input argument x. public static int2 square(int2 x) 参数 x int2 Value to square. 返回 int2 Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) is positive. For example, square(new int2(46341)) will return new int2(-2147479015). square(int3) Computes the component-wise square (x * x) of the input argument x. public static int3 square(int3 x) 参数 x int3 Value to square. 返回 int3 Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) is positive. For example, square(new int3(46341)) will return new int3(-2147479015). square(int4) Computes the component-wise square (x * x) of the input argument x. public static int4 square(int4 x) 参数 x int4 Value to square. 返回 int4 Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) is positive. For example, square(new int4(46341)) will return new int4(-2147479015). square(uint2) Computes the component-wise square (x * x) of the input argument x. public static uint2 square(uint2 x) 参数 x uint2 Value to square. 返回 uint2 Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) >= x. For example, square(new uint2(4294967295u)) will return new uint2(1u). square(uint3) Computes the component-wise square (x * x) of the input argument x. public static uint3 square(uint3 x) 参数 x uint3 Value to square. 返回 uint3 Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) >= x. For example, square(new uint3(4294967295u)) will return new uint3(1u). square(uint4) Computes the component-wise square (x * x) of the input argument x. public static uint4 square(uint4 x) 参数 x uint4 Value to square. 返回 uint4 Returns the square of the input. 备注 Due to integer overflow, it's not always guaranteed that square(x) >= x. For example, square(new uint4(4294967295u)) will return new uint4(1u). step(double, double) Returns the result of a step function where the result is 1.0f when x >= threshold and 0.0f otherwise. public static double step(double threshold, double x) 参数 threshold double Values to be used as a threshold for returning 1. x double Value to compare against threshold. 返回 double 1 if the comparison x >= threshold is true, otherwise 0. step(float, float) Returns the result of a step function where the result is 1.0f when x >= threshold and 0.0f otherwise. public static float step(float threshold, float x) 参数 threshold float Value to be used as a threshold for returning 1. x float Value to compare against threshold. 返回 float 1 if the comparison x >= threshold is true, otherwise 0. step(double2, double2) Returns the result of a componentwise step function where each component is 1.0f when x >= threshold and 0.0f otherwise. public static double2 step(double2 threshold, double2 x) 参数 threshold double2 Vector of values to be used as a threshold for returning 1. x double2 Vector of values to compare against threshold. 返回 double2 1 if the componentwise comparison x >= threshold is true, otherwise 0. step(double3, double3) Returns the result of a componentwise step function where each component is 1.0f when x >= threshold and 0.0f otherwise. public static double3 step(double3 threshold, double3 x) 参数 threshold double3 Vector of values to be used as a threshold for returning 1. x double3 Vector of values to compare against threshold. 返回 double3 1 if the componentwise comparison x >= threshold is true, otherwise 0. step(double4, double4) Returns the result of a componentwise step function where each component is 1.0f when x >= threshold and 0.0f otherwise. public static double4 step(double4 threshold, double4 x) 参数 threshold double4 Vector of values to be used as a threshold for returning 1. x double4 Vector of values to compare against threshold. 返回 double4 1 if the componentwise comparison x >= threshold is true, otherwise 0. step(float2, float2) Returns the result of a componentwise step function where each component is 1.0f when x >= threshold and 0.0f otherwise. public static float2 step(float2 threshold, float2 x) 参数 threshold float2 Vector of values to be used as a threshold for returning 1. x float2 Vector of values to compare against threshold. 返回 float2 1 if the componentwise comparison x >= threshold is true, otherwise 0. step(float3, float3) Returns the result of a componentwise step function where each component is 1.0f when x >= threshold and 0.0f otherwise. public static float3 step(float3 threshold, float3 x) 参数 threshold float3 Vector of values to be used as a threshold for returning 1. x float3 Vector of values to compare against threshold. 返回 float3 1 if the componentwise comparison x >= threshold is true, otherwise 0. step(float4, float4) Returns the result of a componentwise step function where each component is 1.0f when x >= threshold and 0.0f otherwise. public static float4 step(float4 threshold, float4 x) 参数 threshold float4 Vector of values to be used as a threshold for returning 1. x float4 Vector of values to compare against threshold. 返回 float4 1 if the componentwise comparison x >= threshold is true, otherwise 0. tan(double) Returns the tangent of a double value. public static double tan(double x) 参数 x double Input value. 返回 double The tangent of the input. tan(float) Returns the tangent of a float value. public static float tan(float x) 参数 x float Input value. 返回 float The tangent of the input. tan(double2) Returns the componentwise tangent of a double2 vector. public static double2 tan(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise tangent of the input. tan(double3) Returns the componentwise tangent of a double3 vector. public static double3 tan(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise tangent of the input. tan(double4) Returns the componentwise tangent of a double4 vector. public static double4 tan(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise tangent of the input. tan(float2) Returns the componentwise tangent of a float2 vector. public static float2 tan(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise tangent of the input. tan(float3) Returns the componentwise tangent of a float3 vector. public static float3 tan(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise tangent of the input. tan(float4) Returns the componentwise tangent of a float4 vector. public static float4 tan(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise tangent of the input. tanh(double) Returns the hyperbolic tangent of a double value. public static double tanh(double x) 参数 x double Input value. 返回 double The hyperbolic tangent of the input. tanh(float) Returns the hyperbolic tangent of a float value. public static float tanh(float x) 参数 x float Input value. 返回 float The hyperbolic tangent of the input. tanh(double2) Returns the componentwise hyperbolic tangent of a double2 vector. public static double2 tanh(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise hyperbolic tangent of the input. tanh(double3) Returns the componentwise hyperbolic tangent of a double3 vector. public static double3 tanh(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise hyperbolic tangent of the input. tanh(double4) Returns the componentwise hyperbolic tangent of a double4 vector. public static double4 tanh(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise hyperbolic tangent of the input. tanh(float2) Returns the componentwise hyperbolic tangent of a float2 vector. public static float2 tanh(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise hyperbolic tangent of the input. tanh(float3) Returns the componentwise hyperbolic tangent of a float3 vector. public static float3 tanh(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise hyperbolic tangent of the input. tanh(float4) Returns the componentwise hyperbolic tangent of a float4 vector. public static float4 tanh(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise hyperbolic tangent of the input. transform(AffineTransform, float3) Returns the result of transforming a float3 point by an AffineTransform. public static float3 transform(AffineTransform a, float3 pos) 参数 a AffineTransform The AffineTransform. pos float3 The position to transform. 返回 float3 The transformed position. transform(RigidTransform, float3) Returns the result of transforming a float3 point by a RigidTransform. public static float3 transform(RigidTransform a, float3 pos) 参数 a RigidTransform The RigidTransform. pos float3 The position to transform. 返回 float3 The transformed position. transform(double4x4, double3) Return the result of transforming a double3 point by a double4x4 matrix public static double3 transform(double4x4 a, double3 b) 参数 a double4x4 Left hand side matrix argument that specifies the transformation. b double3 Right hand side point argument to be transformed. 返回 double3 The transformed point. transform(float4x4, float3) Return the result of transforming a float3 point by a float4x4 matrix public static float3 transform(float4x4 a, float3 b) 参数 a float4x4 Left hand side matrix argument that specifies the transformation. b float3 Right hand side point argument to be transformed. 返回 float3 The transformed point. transpose(bool2x2) Return the bool2x2 transpose of a bool2x2 matrix. public static bool2x2 transpose(bool2x2 v) 参数 v bool2x2 Value to transpose. 返回 bool2x2 Transposed value. transpose(bool2x3) Return the bool3x2 transpose of a bool2x3 matrix. public static bool3x2 transpose(bool2x3 v) 参数 v bool2x3 Value to transpose. 返回 bool3x2 Transposed value. transpose(bool2x4) Return the bool4x2 transpose of a bool2x4 matrix. public static bool4x2 transpose(bool2x4 v) 参数 v bool2x4 Value to transpose. 返回 bool4x2 Transposed value. transpose(bool3x2) Return the bool2x3 transpose of a bool3x2 matrix. public static bool2x3 transpose(bool3x2 v) 参数 v bool3x2 Value to transpose. 返回 bool2x3 Transposed value. transpose(bool3x3) Return the bool3x3 transpose of a bool3x3 matrix. public static bool3x3 transpose(bool3x3 v) 参数 v bool3x3 Value to transpose. 返回 bool3x3 Transposed value. transpose(bool3x4) Return the bool4x3 transpose of a bool3x4 matrix. public static bool4x3 transpose(bool3x4 v) 参数 v bool3x4 Value to transpose. 返回 bool4x3 Transposed value. transpose(bool4x2) Return the bool2x4 transpose of a bool4x2 matrix. public static bool2x4 transpose(bool4x2 v) 参数 v bool4x2 Value to transpose. 返回 bool2x4 Transposed value. transpose(bool4x3) Return the bool3x4 transpose of a bool4x3 matrix. public static bool3x4 transpose(bool4x3 v) 参数 v bool4x3 Value to transpose. 返回 bool3x4 Transposed value. transpose(bool4x4) Return the bool4x4 transpose of a bool4x4 matrix. public static bool4x4 transpose(bool4x4 v) 参数 v bool4x4 Value to transpose. 返回 bool4x4 Transposed value. transpose(double2x2) Return the double2x2 transpose of a double2x2 matrix. public static double2x2 transpose(double2x2 v) 参数 v double2x2 Value to transpose. 返回 double2x2 Transposed value. transpose(double2x3) Return the double3x2 transpose of a double2x3 matrix. public static double3x2 transpose(double2x3 v) 参数 v double2x3 Value to transpose. 返回 double3x2 Transposed value. transpose(double2x4) Return the double4x2 transpose of a double2x4 matrix. public static double4x2 transpose(double2x4 v) 参数 v double2x4 Value to transpose. 返回 double4x2 Transposed value. transpose(double3x2) Return the double2x3 transpose of a double3x2 matrix. public static double2x3 transpose(double3x2 v) 参数 v double3x2 Value to transpose. 返回 double2x3 Transposed value. transpose(double3x3) Return the double3x3 transpose of a double3x3 matrix. public static double3x3 transpose(double3x3 v) 参数 v double3x3 Value to transpose. 返回 double3x3 Transposed value. transpose(double3x4) Return the double4x3 transpose of a double3x4 matrix. public static double4x3 transpose(double3x4 v) 参数 v double3x4 Value to transpose. 返回 double4x3 Transposed value. transpose(double4x2) Return the double2x4 transpose of a double4x2 matrix. public static double2x4 transpose(double4x2 v) 参数 v double4x2 Value to transpose. 返回 double2x4 Transposed value. transpose(double4x3) Return the double3x4 transpose of a double4x3 matrix. public static double3x4 transpose(double4x3 v) 参数 v double4x3 Value to transpose. 返回 double3x4 Transposed value. transpose(double4x4) Return the double4x4 transpose of a double4x4 matrix. public static double4x4 transpose(double4x4 v) 参数 v double4x4 Value to transpose. 返回 double4x4 Transposed value. transpose(float2x2) Return the float2x2 transpose of a float2x2 matrix. public static float2x2 transpose(float2x2 v) 参数 v float2x2 Value to transpose. 返回 float2x2 Transposed value. transpose(float2x3) Return the float3x2 transpose of a float2x3 matrix. public static float3x2 transpose(float2x3 v) 参数 v float2x3 Value to transpose. 返回 float3x2 Transposed value. transpose(float2x4) Return the float4x2 transpose of a float2x4 matrix. public static float4x2 transpose(float2x4 v) 参数 v float2x4 Value to transpose. 返回 float4x2 Transposed value. transpose(float3x2) Return the float2x3 transpose of a float3x2 matrix. public static float2x3 transpose(float3x2 v) 参数 v float3x2 Value to transpose. 返回 float2x3 Transposed value. transpose(float3x3) Return the float3x3 transpose of a float3x3 matrix. public static float3x3 transpose(float3x3 v) 参数 v float3x3 Value to transpose. 返回 float3x3 Transposed value. transpose(float3x4) Return the float4x3 transpose of a float3x4 matrix. public static float4x3 transpose(float3x4 v) 参数 v float3x4 Value to transpose. 返回 float4x3 Transposed value. transpose(float4x2) Return the float2x4 transpose of a float4x2 matrix. public static float2x4 transpose(float4x2 v) 参数 v float4x2 Value to transpose. 返回 float2x4 Transposed value. transpose(float4x3) Return the float3x4 transpose of a float4x3 matrix. public static float3x4 transpose(float4x3 v) 参数 v float4x3 Value to transpose. 返回 float3x4 Transposed value. transpose(float4x4) Return the float4x4 transpose of a float4x4 matrix. public static float4x4 transpose(float4x4 v) 参数 v float4x4 Value to transpose. 返回 float4x4 Transposed value. transpose(int2x2) Return the int2x2 transpose of a int2x2 matrix. public static int2x2 transpose(int2x2 v) 参数 v int2x2 Value to transpose. 返回 int2x2 Transposed value. transpose(int2x3) Return the int3x2 transpose of a int2x3 matrix. public static int3x2 transpose(int2x3 v) 参数 v int2x3 Value to transpose. 返回 int3x2 Transposed value. transpose(int2x4) Return the int4x2 transpose of a int2x4 matrix. public static int4x2 transpose(int2x4 v) 参数 v int2x4 Value to transpose. 返回 int4x2 Transposed value. transpose(int3x2) Return the int2x3 transpose of a int3x2 matrix. public static int2x3 transpose(int3x2 v) 参数 v int3x2 Value to transpose. 返回 int2x3 Transposed value. transpose(int3x3) Return the int3x3 transpose of a int3x3 matrix. public static int3x3 transpose(int3x3 v) 参数 v int3x3 Value to transpose. 返回 int3x3 Transposed value. transpose(int3x4) Return the int4x3 transpose of a int3x4 matrix. public static int4x3 transpose(int3x4 v) 参数 v int3x4 Value to transpose. 返回 int4x3 Transposed value. transpose(int4x2) Return the int2x4 transpose of a int4x2 matrix. public static int2x4 transpose(int4x2 v) 参数 v int4x2 Value to transpose. 返回 int2x4 Transposed value. transpose(int4x3) Return the int3x4 transpose of a int4x3 matrix. public static int3x4 transpose(int4x3 v) 参数 v int4x3 Value to transpose. 返回 int3x4 Transposed value. transpose(int4x4) Return the int4x4 transpose of a int4x4 matrix. public static int4x4 transpose(int4x4 v) 参数 v int4x4 Value to transpose. 返回 int4x4 Transposed value. transpose(uint2x2) Return the uint2x2 transpose of a uint2x2 matrix. public static uint2x2 transpose(uint2x2 v) 参数 v uint2x2 Value to transpose. 返回 uint2x2 Transposed value. transpose(uint2x3) Return the uint3x2 transpose of a uint2x3 matrix. public static uint3x2 transpose(uint2x3 v) 参数 v uint2x3 Value to transpose. 返回 uint3x2 Transposed value. transpose(uint2x4) Return the uint4x2 transpose of a uint2x4 matrix. public static uint4x2 transpose(uint2x4 v) 参数 v uint2x4 Value to transpose. 返回 uint4x2 Transposed value. transpose(uint3x2) Return the uint2x3 transpose of a uint3x2 matrix. public static uint2x3 transpose(uint3x2 v) 参数 v uint3x2 Value to transpose. 返回 uint2x3 Transposed value. transpose(uint3x3) Return the uint3x3 transpose of a uint3x3 matrix. public static uint3x3 transpose(uint3x3 v) 参数 v uint3x3 Value to transpose. 返回 uint3x3 Transposed value. transpose(uint3x4) Return the uint4x3 transpose of a uint3x4 matrix. public static uint4x3 transpose(uint3x4 v) 参数 v uint3x4 Value to transpose. 返回 uint4x3 Transposed value. transpose(uint4x2) Return the uint2x4 transpose of a uint4x2 matrix. public static uint2x4 transpose(uint4x2 v) 参数 v uint4x2 Value to transpose. 返回 uint2x4 Transposed value. transpose(uint4x3) Return the uint3x4 transpose of a uint4x3 matrix. public static uint3x4 transpose(uint4x3 v) 参数 v uint4x3 Value to transpose. 返回 uint3x4 Transposed value. transpose(uint4x4) Return the uint4x4 transpose of a uint4x4 matrix. public static uint4x4 transpose(uint4x4 v) 参数 v uint4x4 Value to transpose. 返回 uint4x4 Transposed value. trunc(double) Returns the result of truncating a double value to an integral double value. public static double trunc(double x) 参数 x double Input value. 返回 double The truncation of the input. trunc(float) Returns the result of truncating a float value to an integral float value. public static float trunc(float x) 参数 x float Input value. 返回 float The truncation of the input. trunc(double2) Returns the result of a componentwise truncation of a double2 value to an integral double2 value. public static double2 trunc(double2 x) 参数 x double2 Input value. 返回 double2 The componentwise truncation of the input. trunc(double3) Returns the result of a componentwise truncation of a double3 value to an integral double3 value. public static double3 trunc(double3 x) 参数 x double3 Input value. 返回 double3 The componentwise truncation of the input. trunc(double4) Returns the result of a componentwise truncation of a double4 value to an integral double4 value. public static double4 trunc(double4 x) 参数 x double4 Input value. 返回 double4 The componentwise truncation of the input. trunc(float2) Returns the result of a componentwise truncation of a float2 value to an integral float2 value. public static float2 trunc(float2 x) 参数 x float2 Input value. 返回 float2 The componentwise truncation of the input. trunc(float3) Returns the result of a componentwise truncation of a float3 value to an integral float3 value. public static float3 trunc(float3 x) 参数 x float3 Input value. 返回 float3 The componentwise truncation of the input. trunc(float4) Returns the result of a componentwise truncation of a float4 value to an integral float4 value. public static float4 trunc(float4 x) 参数 x float4 Input value. 返回 float4 The componentwise truncation of the input. tzcnt(int) Computes the trailing zero count in the binary representation of the input value. public static int tzcnt(int x) 参数 x int Input to use when computing the trailing zero count. 返回 int Returns the trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(long) Computes the trailing zero count in the binary representation of the input value. public static int tzcnt(long x) 参数 x long Input to use when computing the trailing zero count. 返回 int Returns the trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(uint) Computes the trailing zero count in the binary representation of the input value. public static int tzcnt(uint x) 参数 x uint Input to use when computing the trailing zero count. 返回 int Returns the trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(ulong) Computes the trailing zero count in the binary representation of the input value. public static int tzcnt(ulong x) 参数 x ulong Input to use when computing the trailing zero count. 返回 int Returns the trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(int2) Computes the component-wise trailing zero count in the binary representation of the input value. public static int2 tzcnt(int2 x) 参数 x int2 Input to use when computing the trailing zero count. 返回 int2 Returns the component-wise trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(int3) Computes the component-wise trailing zero count in the binary representation of the input value. public static int3 tzcnt(int3 x) 参数 x int3 Input to use when computing the trailing zero count. 返回 int3 Returns the component-wise trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(int4) Computes the component-wise trailing zero count in the binary representation of the input value. public static int4 tzcnt(int4 x) 参数 x int4 Input to use when computing the trailing zero count. 返回 int4 Returns the component-wise trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(uint2) Computes the component-wise trailing zero count in the binary representation of the input value. public static int2 tzcnt(uint2 x) 参数 x uint2 Input to use when computing the trailing zero count. 返回 int2 Returns the component-wise trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(uint3) Computes the component-wise trailing zero count in the binary representation of the input value. public static int3 tzcnt(uint3 x) 参数 x uint3 Input to use when computing the trailing zero count. 返回 int3 Returns the component-wise trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. tzcnt(uint4) Computes the component-wise trailing zero count in the binary representation of the input value. public static int4 tzcnt(uint4 x) 参数 x uint4 Input to use when computing the trailing zero count. 返回 int4 Returns the component-wise trailing zero count of the input. 备注 Assuming that the least significant bit is on the right, the integer value 4 has a binary representation 0100 and the trailing zero count is two. The integer value 1 has a binary representation 0001 and the trailing zero count is zero. uint2(bool) Returns a uint2 vector constructed from a single bool value by converting it to uint and assigning it to every component. public static uint2 uint2(bool v) 参数 v bool bool to convert to uint2 返回 uint2 Converted value. uint2(double) Returns a uint2 vector constructed from a single double value by converting it to uint and assigning it to every component. public static uint2 uint2(double v) 参数 v double double to convert to uint2 返回 uint2 Converted value. uint2(int) Returns a uint2 vector constructed from a single int value by converting it to uint and assigning it to every component. public static uint2 uint2(int v) 参数 v int int to convert to uint2 返回 uint2 Converted value. uint2(float) Returns a uint2 vector constructed from a single float value by converting it to uint and assigning it to every component. public static uint2 uint2(float v) 参数 v float float to convert to uint2 返回 uint2 Converted value. uint2(uint) Returns a uint2 vector constructed from a single uint value by assigning it to every component. public static uint2 uint2(uint v) 参数 v uint uint to convert to uint2 返回 uint2 Converted value. uint2(uint, uint) Returns a uint2 vector constructed from two uint values. public static uint2 uint2(uint x, uint y) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. 返回 uint2 uint2 constructed from arguments. uint2(bool2) Return a uint2 vector constructed from a bool2 vector by componentwise conversion. public static uint2 uint2(bool2 v) 参数 v bool2 bool2 to convert to uint2 返回 uint2 Converted value. uint2(double2) Return a uint2 vector constructed from a double2 vector by componentwise conversion. public static uint2 uint2(double2 v) 参数 v double2 double2 to convert to uint2 返回 uint2 Converted value. uint2(float2) Return a uint2 vector constructed from a float2 vector by componentwise conversion. public static uint2 uint2(float2 v) 参数 v float2 float2 to convert to uint2 返回 uint2 Converted value. uint2(int2) Return a uint2 vector constructed from a int2 vector by componentwise conversion. public static uint2 uint2(int2 v) 参数 v int2 int2 to convert to uint2 返回 uint2 Converted value. uint2(uint2) Returns a uint2 vector constructed from a uint2 vector. public static uint2 uint2(uint2 xy) 参数 xy uint2 The constructed vector's xy components will be set to this value. 返回 uint2 uint2 constructed from arguments. uint2x2(bool) Returns a uint2x2 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint2x2 uint2x2(bool v) 参数 v bool bool to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(double) Returns a uint2x2 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint2x2 uint2x2(double v) 参数 v double double to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(int) Returns a uint2x2 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint2x2 uint2x2(int v) 参数 v int int to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(float) Returns a uint2x2 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint2x2 uint2x2(float v) 参数 v float float to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(uint) Returns a uint2x2 matrix constructed from a single uint value by assigning it to every component. public static uint2x2 uint2x2(uint v) 参数 v uint uint to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(uint, uint, uint, uint) Returns a uint2x2 matrix constructed from from 4 uint values given in row-major order. public static uint2x2 uint2x2(uint m00, uint m01, uint m10, uint m11) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. 返回 uint2x2 uint2x2 constructed from arguments. uint2x2(bool2x2) Return a uint2x2 matrix constructed from a bool2x2 matrix by componentwise conversion. public static uint2x2 uint2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(double2x2) Return a uint2x2 matrix constructed from a double2x2 matrix by componentwise conversion. public static uint2x2 uint2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(float2x2) Return a uint2x2 matrix constructed from a float2x2 matrix by componentwise conversion. public static uint2x2 uint2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(int2x2) Return a uint2x2 matrix constructed from a int2x2 matrix by componentwise conversion. public static uint2x2 uint2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to uint2x2 返回 uint2x2 Converted value. uint2x2(uint2, uint2) Returns a uint2x2 matrix constructed from two uint2 vectors. public static uint2x2 uint2x2(uint2 c0, uint2 c1) 参数 c0 uint2 The matrix column c0 will be set to this value. c1 uint2 The matrix column c1 will be set to this value. 返回 uint2x2 uint2x2 constructed from arguments. uint2x3(bool) Returns a uint2x3 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint2x3 uint2x3(bool v) 参数 v bool bool to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(double) Returns a uint2x3 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint2x3 uint2x3(double v) 参数 v double double to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(int) Returns a uint2x3 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint2x3 uint2x3(int v) 参数 v int int to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(float) Returns a uint2x3 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint2x3 uint2x3(float v) 参数 v float float to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(uint) Returns a uint2x3 matrix constructed from a single uint value by assigning it to every component. public static uint2x3 uint2x3(uint v) 参数 v uint uint to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(uint, uint, uint, uint, uint, uint) Returns a uint2x3 matrix constructed from from 6 uint values given in row-major order. public static uint2x3 uint2x3(uint m00, uint m01, uint m02, uint m10, uint m11, uint m12) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. 返回 uint2x3 uint2x3 constructed from arguments. uint2x3(bool2x3) Return a uint2x3 matrix constructed from a bool2x3 matrix by componentwise conversion. public static uint2x3 uint2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(double2x3) Return a uint2x3 matrix constructed from a double2x3 matrix by componentwise conversion. public static uint2x3 uint2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(float2x3) Return a uint2x3 matrix constructed from a float2x3 matrix by componentwise conversion. public static uint2x3 uint2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(int2x3) Return a uint2x3 matrix constructed from a int2x3 matrix by componentwise conversion. public static uint2x3 uint2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to uint2x3 返回 uint2x3 Converted value. uint2x3(uint2, uint2, uint2) Returns a uint2x3 matrix constructed from three uint2 vectors. public static uint2x3 uint2x3(uint2 c0, uint2 c1, uint2 c2) 参数 c0 uint2 The matrix column c0 will be set to this value. c1 uint2 The matrix column c1 will be set to this value. c2 uint2 The matrix column c2 will be set to this value. 返回 uint2x3 uint2x3 constructed from arguments. uint2x4(bool) Returns a uint2x4 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint2x4 uint2x4(bool v) 参数 v bool bool to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(double) Returns a uint2x4 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint2x4 uint2x4(double v) 参数 v double double to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(int) Returns a uint2x4 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint2x4 uint2x4(int v) 参数 v int int to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(float) Returns a uint2x4 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint2x4 uint2x4(float v) 参数 v float float to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(uint) Returns a uint2x4 matrix constructed from a single uint value by assigning it to every component. public static uint2x4 uint2x4(uint v) 参数 v uint uint to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(uint, uint, uint, uint, uint, uint, uint, uint) Returns a uint2x4 matrix constructed from from 8 uint values given in row-major order. public static uint2x4 uint2x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m03 uint The matrix at row 0, column 3 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m13 uint The matrix at row 1, column 3 will be set to this value. 返回 uint2x4 uint2x4 constructed from arguments. uint2x4(bool2x4) Return a uint2x4 matrix constructed from a bool2x4 matrix by componentwise conversion. public static uint2x4 uint2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(double2x4) Return a uint2x4 matrix constructed from a double2x4 matrix by componentwise conversion. public static uint2x4 uint2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(float2x4) Return a uint2x4 matrix constructed from a float2x4 matrix by componentwise conversion. public static uint2x4 uint2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(int2x4) Return a uint2x4 matrix constructed from a int2x4 matrix by componentwise conversion. public static uint2x4 uint2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to uint2x4 返回 uint2x4 Converted value. uint2x4(uint2, uint2, uint2, uint2) Returns a uint2x4 matrix constructed from four uint2 vectors. public static uint2x4 uint2x4(uint2 c0, uint2 c1, uint2 c2, uint2 c3) 参数 c0 uint2 The matrix column c0 will be set to this value. c1 uint2 The matrix column c1 will be set to this value. c2 uint2 The matrix column c2 will be set to this value. c3 uint2 The matrix column c3 will be set to this value. 返回 uint2x4 uint2x4 constructed from arguments. uint3(bool) Returns a uint3 vector constructed from a single bool value by converting it to uint and assigning it to every component. public static uint3 uint3(bool v) 参数 v bool bool to convert to uint3 返回 uint3 Converted value. uint3(double) Returns a uint3 vector constructed from a single double value by converting it to uint and assigning it to every component. public static uint3 uint3(double v) 参数 v double double to convert to uint3 返回 uint3 Converted value. uint3(int) Returns a uint3 vector constructed from a single int value by converting it to uint and assigning it to every component. public static uint3 uint3(int v) 参数 v int int to convert to uint3 返回 uint3 Converted value. uint3(float) Returns a uint3 vector constructed from a single float value by converting it to uint and assigning it to every component. public static uint3 uint3(float v) 参数 v float float to convert to uint3 返回 uint3 Converted value. uint3(uint) Returns a uint3 vector constructed from a single uint value by assigning it to every component. public static uint3 uint3(uint v) 参数 v uint uint to convert to uint3 返回 uint3 Converted value. uint3(uint, uint, uint) Returns a uint3 vector constructed from three uint values. public static uint3 uint3(uint x, uint y, uint z) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. z uint The constructed vector's z component will be set to this value. 返回 uint3 uint3 constructed from arguments. uint3(uint, uint2) Returns a uint3 vector constructed from a uint value and a uint2 vector. public static uint3 uint3(uint x, uint2 yz) 参数 x uint The constructed vector's x component will be set to this value. yz uint2 The constructed vector's yz components will be set to this value. 返回 uint3 uint3 constructed from arguments. uint3(bool3) Return a uint3 vector constructed from a bool3 vector by componentwise conversion. public static uint3 uint3(bool3 v) 参数 v bool3 bool3 to convert to uint3 返回 uint3 Converted value. uint3(double3) Return a uint3 vector constructed from a double3 vector by componentwise conversion. public static uint3 uint3(double3 v) 参数 v double3 double3 to convert to uint3 返回 uint3 Converted value. uint3(float3) Return a uint3 vector constructed from a float3 vector by componentwise conversion. public static uint3 uint3(float3 v) 参数 v float3 float3 to convert to uint3 返回 uint3 Converted value. uint3(int3) Return a uint3 vector constructed from a int3 vector by componentwise conversion. public static uint3 uint3(int3 v) 参数 v int3 int3 to convert to uint3 返回 uint3 Converted value. uint3(uint2, uint) Returns a uint3 vector constructed from a uint2 vector and a uint value. public static uint3 uint3(uint2 xy, uint z) 参数 xy uint2 The constructed vector's xy components will be set to this value. z uint The constructed vector's z component will be set to this value. 返回 uint3 uint3 constructed from arguments. uint3(uint3) Returns a uint3 vector constructed from a uint3 vector. public static uint3 uint3(uint3 xyz) 参数 xyz uint3 The constructed vector's xyz components will be set to this value. 返回 uint3 uint3 constructed from arguments. uint3x2(bool) Returns a uint3x2 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint3x2 uint3x2(bool v) 参数 v bool bool to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(double) Returns a uint3x2 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint3x2 uint3x2(double v) 参数 v double double to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(int) Returns a uint3x2 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint3x2 uint3x2(int v) 参数 v int int to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(float) Returns a uint3x2 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint3x2 uint3x2(float v) 参数 v float float to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(uint) Returns a uint3x2 matrix constructed from a single uint value by assigning it to every component. public static uint3x2 uint3x2(uint v) 参数 v uint uint to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(uint, uint, uint, uint, uint, uint) Returns a uint3x2 matrix constructed from from 6 uint values given in row-major order. public static uint3x2 uint3x2(uint m00, uint m01, uint m10, uint m11, uint m20, uint m21) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. 返回 uint3x2 uint3x2 constructed from arguments. uint3x2(bool3x2) Return a uint3x2 matrix constructed from a bool3x2 matrix by componentwise conversion. public static uint3x2 uint3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(double3x2) Return a uint3x2 matrix constructed from a double3x2 matrix by componentwise conversion. public static uint3x2 uint3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(float3x2) Return a uint3x2 matrix constructed from a float3x2 matrix by componentwise conversion. public static uint3x2 uint3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(int3x2) Return a uint3x2 matrix constructed from a int3x2 matrix by componentwise conversion. public static uint3x2 uint3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to uint3x2 返回 uint3x2 Converted value. uint3x2(uint3, uint3) Returns a uint3x2 matrix constructed from two uint3 vectors. public static uint3x2 uint3x2(uint3 c0, uint3 c1) 参数 c0 uint3 The matrix column c0 will be set to this value. c1 uint3 The matrix column c1 will be set to this value. 返回 uint3x2 uint3x2 constructed from arguments. uint3x3(bool) Returns a uint3x3 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint3x3 uint3x3(bool v) 参数 v bool bool to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(double) Returns a uint3x3 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint3x3 uint3x3(double v) 参数 v double double to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(int) Returns a uint3x3 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint3x3 uint3x3(int v) 参数 v int int to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(float) Returns a uint3x3 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint3x3 uint3x3(float v) 参数 v float float to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(uint) Returns a uint3x3 matrix constructed from a single uint value by assigning it to every component. public static uint3x3 uint3x3(uint v) 参数 v uint uint to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(uint, uint, uint, uint, uint, uint, uint, uint, uint) Returns a uint3x3 matrix constructed from from 9 uint values given in row-major order. public static uint3x3 uint3x3(uint m00, uint m01, uint m02, uint m10, uint m11, uint m12, uint m20, uint m21, uint m22) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. 返回 uint3x3 uint3x3 constructed from arguments. uint3x3(bool3x3) Return a uint3x3 matrix constructed from a bool3x3 matrix by componentwise conversion. public static uint3x3 uint3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(double3x3) Return a uint3x3 matrix constructed from a double3x3 matrix by componentwise conversion. public static uint3x3 uint3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(float3x3) Return a uint3x3 matrix constructed from a float3x3 matrix by componentwise conversion. public static uint3x3 uint3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(int3x3) Return a uint3x3 matrix constructed from a int3x3 matrix by componentwise conversion. public static uint3x3 uint3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to uint3x3 返回 uint3x3 Converted value. uint3x3(uint3, uint3, uint3) Returns a uint3x3 matrix constructed from three uint3 vectors. public static uint3x3 uint3x3(uint3 c0, uint3 c1, uint3 c2) 参数 c0 uint3 The matrix column c0 will be set to this value. c1 uint3 The matrix column c1 will be set to this value. c2 uint3 The matrix column c2 will be set to this value. 返回 uint3x3 uint3x3 constructed from arguments. uint3x4(bool) Returns a uint3x4 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint3x4 uint3x4(bool v) 参数 v bool bool to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(double) Returns a uint3x4 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint3x4 uint3x4(double v) 参数 v double double to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(int) Returns a uint3x4 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint3x4 uint3x4(int v) 参数 v int int to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(float) Returns a uint3x4 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint3x4 uint3x4(float v) 参数 v float float to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(uint) Returns a uint3x4 matrix constructed from a single uint value by assigning it to every component. public static uint3x4 uint3x4(uint v) 参数 v uint uint to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) Returns a uint3x4 matrix constructed from from 12 uint values given in row-major order. public static uint3x4 uint3x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13, uint m20, uint m21, uint m22, uint m23) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m03 uint The matrix at row 0, column 3 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m13 uint The matrix at row 1, column 3 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. m23 uint The matrix at row 2, column 3 will be set to this value. 返回 uint3x4 uint3x4 constructed from arguments. uint3x4(bool3x4) Return a uint3x4 matrix constructed from a bool3x4 matrix by componentwise conversion. public static uint3x4 uint3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(double3x4) Return a uint3x4 matrix constructed from a double3x4 matrix by componentwise conversion. public static uint3x4 uint3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(float3x4) Return a uint3x4 matrix constructed from a float3x4 matrix by componentwise conversion. public static uint3x4 uint3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(int3x4) Return a uint3x4 matrix constructed from a int3x4 matrix by componentwise conversion. public static uint3x4 uint3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to uint3x4 返回 uint3x4 Converted value. uint3x4(uint3, uint3, uint3, uint3) Returns a uint3x4 matrix constructed from four uint3 vectors. public static uint3x4 uint3x4(uint3 c0, uint3 c1, uint3 c2, uint3 c3) 参数 c0 uint3 The matrix column c0 will be set to this value. c1 uint3 The matrix column c1 will be set to this value. c2 uint3 The matrix column c2 will be set to this value. c3 uint3 The matrix column c3 will be set to this value. 返回 uint3x4 uint3x4 constructed from arguments. uint4(bool) Returns a uint4 vector constructed from a single bool value by converting it to uint and assigning it to every component. public static uint4 uint4(bool v) 参数 v bool bool to convert to uint4 返回 uint4 Converted value. uint4(double) Returns a uint4 vector constructed from a single double value by converting it to uint and assigning it to every component. public static uint4 uint4(double v) 参数 v double double to convert to uint4 返回 uint4 Converted value. uint4(int) Returns a uint4 vector constructed from a single int value by converting it to uint and assigning it to every component. public static uint4 uint4(int v) 参数 v int int to convert to uint4 返回 uint4 Converted value. uint4(float) Returns a uint4 vector constructed from a single float value by converting it to uint and assigning it to every component. public static uint4 uint4(float v) 参数 v float float to convert to uint4 返回 uint4 Converted value. uint4(uint) Returns a uint4 vector constructed from a single uint value by assigning it to every component. public static uint4 uint4(uint v) 参数 v uint uint to convert to uint4 返回 uint4 Converted value. uint4(uint, uint, uint, uint) Returns a uint4 vector constructed from four uint values. public static uint4 uint4(uint x, uint y, uint z, uint w) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. z uint The constructed vector's z component will be set to this value. w uint The constructed vector's w component will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(uint, uint, uint2) Returns a uint4 vector constructed from two uint values and a uint2 vector. public static uint4 uint4(uint x, uint y, uint2 zw) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. zw uint2 The constructed vector's zw components will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(uint, uint2, uint) Returns a uint4 vector constructed from a uint value, a uint2 vector and a uint value. public static uint4 uint4(uint x, uint2 yz, uint w) 参数 x uint The constructed vector's x component will be set to this value. yz uint2 The constructed vector's yz components will be set to this value. w uint The constructed vector's w component will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(uint, uint3) Returns a uint4 vector constructed from a uint value and a uint3 vector. public static uint4 uint4(uint x, uint3 yzw) 参数 x uint The constructed vector's x component will be set to this value. yzw uint3 The constructed vector's yzw components will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(bool4) Return a uint4 vector constructed from a bool4 vector by componentwise conversion. public static uint4 uint4(bool4 v) 参数 v bool4 bool4 to convert to uint4 返回 uint4 Converted value. uint4(double4) Return a uint4 vector constructed from a double4 vector by componentwise conversion. public static uint4 uint4(double4 v) 参数 v double4 double4 to convert to uint4 返回 uint4 Converted value. uint4(float4) Return a uint4 vector constructed from a float4 vector by componentwise conversion. public static uint4 uint4(float4 v) 参数 v float4 float4 to convert to uint4 返回 uint4 Converted value. uint4(int4) Return a uint4 vector constructed from a int4 vector by componentwise conversion. public static uint4 uint4(int4 v) 参数 v int4 int4 to convert to uint4 返回 uint4 Converted value. uint4(uint2, uint, uint) Returns a uint4 vector constructed from a uint2 vector and two uint values. public static uint4 uint4(uint2 xy, uint z, uint w) 参数 xy uint2 The constructed vector's xy components will be set to this value. z uint The constructed vector's z component will be set to this value. w uint The constructed vector's w component will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(uint2, uint2) Returns a uint4 vector constructed from two uint2 vectors. public static uint4 uint4(uint2 xy, uint2 zw) 参数 xy uint2 The constructed vector's xy components will be set to this value. zw uint2 The constructed vector's zw components will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(uint3, uint) Returns a uint4 vector constructed from a uint3 vector and a uint value. public static uint4 uint4(uint3 xyz, uint w) 参数 xyz uint3 The constructed vector's xyz components will be set to this value. w uint The constructed vector's w component will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4(uint4) Returns a uint4 vector constructed from a uint4 vector. public static uint4 uint4(uint4 xyzw) 参数 xyzw uint4 The constructed vector's xyzw components will be set to this value. 返回 uint4 uint4 constructed from arguments. uint4x2(bool) Returns a uint4x2 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint4x2 uint4x2(bool v) 参数 v bool bool to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(double) Returns a uint4x2 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint4x2 uint4x2(double v) 参数 v double double to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(int) Returns a uint4x2 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint4x2 uint4x2(int v) 参数 v int int to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(float) Returns a uint4x2 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint4x2 uint4x2(float v) 参数 v float float to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(uint) Returns a uint4x2 matrix constructed from a single uint value by assigning it to every component. public static uint4x2 uint4x2(uint v) 参数 v uint uint to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(uint, uint, uint, uint, uint, uint, uint, uint) Returns a uint4x2 matrix constructed from from 8 uint values given in row-major order. public static uint4x2 uint4x2(uint m00, uint m01, uint m10, uint m11, uint m20, uint m21, uint m30, uint m31) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m30 uint The matrix at row 3, column 0 will be set to this value. m31 uint The matrix at row 3, column 1 will be set to this value. 返回 uint4x2 uint4x2 constructed from arguments. uint4x2(bool4x2) Return a uint4x2 matrix constructed from a bool4x2 matrix by componentwise conversion. public static uint4x2 uint4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(double4x2) Return a uint4x2 matrix constructed from a double4x2 matrix by componentwise conversion. public static uint4x2 uint4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(float4x2) Return a uint4x2 matrix constructed from a float4x2 matrix by componentwise conversion. public static uint4x2 uint4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(int4x2) Return a uint4x2 matrix constructed from a int4x2 matrix by componentwise conversion. public static uint4x2 uint4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to uint4x2 返回 uint4x2 Converted value. uint4x2(uint4, uint4) Returns a uint4x2 matrix constructed from two uint4 vectors. public static uint4x2 uint4x2(uint4 c0, uint4 c1) 参数 c0 uint4 The matrix column c0 will be set to this value. c1 uint4 The matrix column c1 will be set to this value. 返回 uint4x2 uint4x2 constructed from arguments. uint4x3(bool) Returns a uint4x3 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint4x3 uint4x3(bool v) 参数 v bool bool to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(double) Returns a uint4x3 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint4x3 uint4x3(double v) 参数 v double double to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(int) Returns a uint4x3 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint4x3 uint4x3(int v) 参数 v int int to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(float) Returns a uint4x3 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint4x3 uint4x3(float v) 参数 v float float to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(uint) Returns a uint4x3 matrix constructed from a single uint value by assigning it to every component. public static uint4x3 uint4x3(uint v) 参数 v uint uint to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) Returns a uint4x3 matrix constructed from from 12 uint values given in row-major order. public static uint4x3 uint4x3(uint m00, uint m01, uint m02, uint m10, uint m11, uint m12, uint m20, uint m21, uint m22, uint m30, uint m31, uint m32) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. m30 uint The matrix at row 3, column 0 will be set to this value. m31 uint The matrix at row 3, column 1 will be set to this value. m32 uint The matrix at row 3, column 2 will be set to this value. 返回 uint4x3 uint4x3 constructed from arguments. uint4x3(bool4x3) Return a uint4x3 matrix constructed from a bool4x3 matrix by componentwise conversion. public static uint4x3 uint4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(double4x3) Return a uint4x3 matrix constructed from a double4x3 matrix by componentwise conversion. public static uint4x3 uint4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(float4x3) Return a uint4x3 matrix constructed from a float4x3 matrix by componentwise conversion. public static uint4x3 uint4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(int4x3) Return a uint4x3 matrix constructed from a int4x3 matrix by componentwise conversion. public static uint4x3 uint4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to uint4x3 返回 uint4x3 Converted value. uint4x3(uint4, uint4, uint4) Returns a uint4x3 matrix constructed from three uint4 vectors. public static uint4x3 uint4x3(uint4 c0, uint4 c1, uint4 c2) 参数 c0 uint4 The matrix column c0 will be set to this value. c1 uint4 The matrix column c1 will be set to this value. c2 uint4 The matrix column c2 will be set to this value. 返回 uint4x3 uint4x3 constructed from arguments. uint4x4(bool) Returns a uint4x4 matrix constructed from a single bool value by converting it to uint and assigning it to every component. public static uint4x4 uint4x4(bool v) 参数 v bool bool to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(double) Returns a uint4x4 matrix constructed from a single double value by converting it to uint and assigning it to every component. public static uint4x4 uint4x4(double v) 参数 v double double to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(int) Returns a uint4x4 matrix constructed from a single int value by converting it to uint and assigning it to every component. public static uint4x4 uint4x4(int v) 参数 v int int to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(float) Returns a uint4x4 matrix constructed from a single float value by converting it to uint and assigning it to every component. public static uint4x4 uint4x4(float v) 参数 v float float to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(uint) Returns a uint4x4 matrix constructed from a single uint value by assigning it to every component. public static uint4x4 uint4x4(uint v) 参数 v uint uint to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) Returns a uint4x4 matrix constructed from from 16 uint values given in row-major order. public static uint4x4 uint4x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13, uint m20, uint m21, uint m22, uint m23, uint m30, uint m31, uint m32, uint m33) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m03 uint The matrix at row 0, column 3 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m13 uint The matrix at row 1, column 3 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. m23 uint The matrix at row 2, column 3 will be set to this value. m30 uint The matrix at row 3, column 0 will be set to this value. m31 uint The matrix at row 3, column 1 will be set to this value. m32 uint The matrix at row 3, column 2 will be set to this value. m33 uint The matrix at row 3, column 3 will be set to this value. 返回 uint4x4 uint4x4 constructed from arguments. uint4x4(bool4x4) Return a uint4x4 matrix constructed from a bool4x4 matrix by componentwise conversion. public static uint4x4 uint4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(double4x4) Return a uint4x4 matrix constructed from a double4x4 matrix by componentwise conversion. public static uint4x4 uint4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(float4x4) Return a uint4x4 matrix constructed from a float4x4 matrix by componentwise conversion. public static uint4x4 uint4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(int4x4) Return a uint4x4 matrix constructed from a int4x4 matrix by componentwise conversion. public static uint4x4 uint4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to uint4x4 返回 uint4x4 Converted value. uint4x4(uint4, uint4, uint4, uint4) Returns a uint4x4 matrix constructed from four uint4 vectors. public static uint4x4 uint4x4(uint4 c0, uint4 c1, uint4 c2, uint4 c3) 参数 c0 uint4 The matrix column c0 will be set to this value. c1 uint4 The matrix column c1 will be set to this value. c2 uint4 The matrix column c2 will be set to this value. c3 uint4 The matrix column c3 will be set to this value. 返回 uint4x4 uint4x4 constructed from arguments. unitexp(quaternion) Returns the natural exponent of a quaternion. Assumes w is zero. public static quaternion unitexp(quaternion q) 参数 q quaternion The quaternion with w component equal to zero. 返回 quaternion The natural exponent of the input quaternion. unitlog(quaternion) Returns the natural logarithm of a unit length quaternion. public static quaternion unitlog(quaternion q) 参数 q quaternion The unit length quaternion. 返回 quaternion The natural logarithm of the unit length quaternion. unlerp(double, double, double) Returns the result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static double unlerp(double start, double end, double x) 参数 start double The start point of the range. end double The end point of the range. x double The value to normalize to the range. 返回 double The interpolation parameter of x with respect to the input range [a, b]. unlerp(float, float, float) Returns the result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static float unlerp(float start, float end, float x) 参数 start float The start point of the range. end float The end point of the range. x float The value to normalize to the range. 返回 float The interpolation parameter of x with respect to the input range [a, b]. unlerp(double2, double2, double2) Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static double2 unlerp(double2 start, double2 end, double2 x) 参数 start double2 The start point of the range. end double2 The end point of the range. x double2 The value to normalize to the range. 返回 double2 The componentwise interpolation parameter of x with respect to the input range [a, b]. unlerp(double3, double3, double3) Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static double3 unlerp(double3 start, double3 end, double3 x) 参数 start double3 The start point of the range. end double3 The end point of the range. x double3 The value to normalize to the range. 返回 double3 The componentwise interpolation parameter of x with respect to the input range [a, b]. unlerp(double4, double4, double4) Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static double4 unlerp(double4 start, double4 end, double4 x) 参数 start double4 The start point of the range. end double4 The end point of the range. x double4 The value to normalize to the range. 返回 double4 The componentwise interpolation parameter of x with respect to the input range [a, b]. unlerp(float2, float2, float2) Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static float2 unlerp(float2 start, float2 end, float2 x) 参数 start float2 The start point of the range. end float2 The end point of the range. x float2 The value to normalize to the range. 返回 float2 The componentwise interpolation parameter of x with respect to the input range [a, b]. unlerp(float3, float3, float3) Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static float3 unlerp(float3 start, float3 end, float3 x) 参数 start float3 The start point of the range. end float3 The end point of the range. x float3 The value to normalize to the range. 返回 float3 The componentwise interpolation parameter of x with respect to the input range [a, b]. unlerp(float4, float4, float4) Returns the componentwise result of normalizing a floating point value x to a range [a, b]. The opposite of lerp. Equivalent to (x - a) / (b - a). public static float4 unlerp(float4 start, float4 end, float4 x) 参数 start float4 The start point of the range. end float4 The end point of the range. x float4 The value to normalize to the range. 返回 float4 The componentwise interpolation parameter of x with respect to the input range [a, b]. up() Unity's up axis (0, 1, 0). public static float3 up() 返回 float3 The up axis. 备注 Matches https://docs.unity3d.com/ScriptReference/Vector3-up.html"
  },
  "reference/Unity.Mathematics.noise.html": {
    "href": "reference/Unity.Mathematics.noise.html",
    "title": "noise 类 | Fantasy.Net API Reference",
    "keywords": "noise 类 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A static class containing noise functions. public static class noise 继承 object noise 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 cellular(float2) 2D Cellular noise (\"Worley noise\") with standard 3x3 search window for good feature point values. public static float2 cellular(float2 P) 参数 P float2 A point in 2D space. 返回 float2 Feature points. F1 is in the x component, F2 in the y component. cellular(float3) 3D Cellular noise (\"Worley noise\") with 3x3x3 search region for good F2 everywhere, but a lot slower than the 2x2x2 version. public static float2 cellular(float3 P) 参数 P float3 A point in 2D space. 返回 float2 Feature points. F1 is in the x component, F2 in the y component. cellular2x2(float2) 2D Cellular noise (\"Worley noise\") with a 2x2 search window. public static float2 cellular2x2(float2 P) 参数 P float2 A point in 2D space. 返回 float2 Feature points. F1 is in the x component, F2 in the y component. 备注 Faster than using 3x3, at the expense of some strong pattern artifacts. F2 is often wrong and has sharp discontinuities. If you need a smooth F2, use the slower 3x3 version. F1 is sometimes wrong, too, but OK for most purposes. cellular2x2x2(float3) 3D Cellular noise (\"Worley noise\") with a 2x2x2 search window. public static float2 cellular2x2x2(float3 P) 参数 P float3 A point in 3D space. 返回 float2 Feature points. F1 is in the x component, F2 in the y component. 备注 Faster than using 3x3x3, at the expense of some pattern artifacts. F2 is often wrong and has sharp discontinuities. If you need a smooth F2, use the slower 3x3x3 version. cnoise(float2) Classic Perlin noise public static float cnoise(float2 P) 参数 P float2 Point on a 2D grid of gradient vectors. 返回 float Noise value. cnoise(float3) Classic Perlin noise public static float cnoise(float3 P) 参数 P float3 Point on a 3D grid of gradient vectors. 返回 float Noise value. cnoise(float4) Classic Perlin noise public static float cnoise(float4 P) 参数 P float4 Point on a 4D grid of gradient vectors. 返回 float Noise value. pnoise(float2, float2) Classic Perlin noise, periodic variant public static float pnoise(float2 P, float2 rep) 参数 P float2 Point on a 2D grid of gradient vectors. rep float2 Period of repetition. 返回 float Noise value. pnoise(float3, float3) Classic Perlin noise, periodic variant public static float pnoise(float3 P, float3 rep) 参数 P float3 Point on a 3D grid of gradient vectors. rep float3 Period of repetition. 返回 float Noise value. pnoise(float4, float4) Classic Perlin noise, periodic variant public static float pnoise(float4 P, float4 rep) 参数 P float4 Point on a 4D grid of gradient vectors. rep float4 Period of repetition. 返回 float Noise value. psrdnoise(float2, float2) 2-D tiling simplex noise with fixed gradients and analytical derivative. public static float3 psrdnoise(float2 pos, float2 per) 参数 pos float2 Input (x,y) coordinate. per float2 The x and y period, where per.x is a positive integer and per.y is a positive even integer. 返回 float3 The first component of the 3-element return vector is the noise value, and the second and third components are the x and y partial derivatives. psrdnoise(float2, float2, float) 2-D tiling simplex noise with rotating gradients and analytical derivative. public static float3 psrdnoise(float2 pos, float2 per, float rot) 参数 pos float2 Input (x,y) coordinate. per float2 The x and y period, where per.x is a positive integer and per.y is a positive even integer. rot float Angle to rotate the gradients. 返回 float3 The first component of the 3-element return vector is the noise value, and the second and third components are the x and y partial derivatives. psrnoise(float2, float2) 2-D tiling simplex noise with fixed gradients, without the analytical derivative. public static float psrnoise(float2 pos, float2 per) 参数 pos float2 Input (x,y) coordinate. per float2 The x and y period, where per.x is a positive integer and per.y is a positive even integer. 返回 float Noise value. psrnoise(float2, float2, float) 2-D tiling simplex noise with rotating gradients, but without the analytical derivative. public static float psrnoise(float2 pos, float2 per, float rot) 参数 pos float2 Input (x,y) coordinate. per float2 The x and y period, where per.x is a positive integer and per.y is a positive even integer. rot float Angle to rotate the gradients. 返回 float Noise value. snoise(float2) Simplex noise. public static float snoise(float2 v) 参数 v float2 Input coordinate. 返回 float Noise value. snoise(float3) Simplex noise. public static float snoise(float3 v) 参数 v float3 Input coordinate. 返回 float Noise value. snoise(float3, out float3) Simplex noise. public static float snoise(float3 v, out float3 gradient) 参数 v float3 Input coordinate. gradient float3 Output 3D noise gradient. 返回 float Noise value. snoise(float4) Simplex noise. public static float snoise(float4 v) 参数 v float4 Input coordinate. 返回 float Noise value. srdnoise(float2) 2-D non-tiling simplex noise with fixed gradients and analytical derivative. public static float3 srdnoise(float2 pos) 参数 pos float2 Input (x,y) coordinate. 返回 float3 The first component of the 3-element return vector is the noise value, and the second and third components are the x and y partial derivatives. srdnoise(float2, float) 2-D non-tiling simplex noise with rotating gradients and analytical derivative. public static float3 srdnoise(float2 pos, float rot) 参数 pos float2 Input (x,y) coordinate. rot float Angle to rotate the gradients. 返回 float3 The first component of the 3-element return vector is the noise value, and the second and third components are the x and y partial derivatives. srnoise(float2) 2-D non-tiling simplex noise with fixed gradients, without the analytical derivative. public static float srnoise(float2 pos) 参数 pos float2 Input (x,y) coordinate. 返回 float Noise value. srnoise(float2, float) 2-D non-tiling simplex noise with rotating gradients, without the analytical derivative. public static float srnoise(float2 pos, float rot) 参数 pos float2 Input (x,y) coordinate. rot float Angle to rotate the gradients. 返回 float Noise value."
  },
  "reference/Unity.Mathematics.quaternion.html": {
    "href": "reference/Unity.Mathematics.quaternion.html",
    "title": "quaternion 结构 | Fantasy.Net API Reference",
    "keywords": "quaternion 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A quaternion type for representing rotations. public struct quaternion : IEquatable<quaternion>, IFormattable 实现 IEquatable<quaternion> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 quaternion(float, float, float, float) Constructs a quaternion from four float values. public quaternion(float x, float y, float z, float w) 参数 x float The quaternion x component. y float The quaternion y component. z float The quaternion z component. w float The quaternion w component. quaternion(float3x3) Constructs a unit quaternion from a float3x3 rotation matrix. The matrix must be orthonormal. public quaternion(float3x3 m) 参数 m float3x3 The float3x3 orthonormal rotation matrix. quaternion(float4) Constructs a quaternion from float4 vector. public quaternion(float4 value) 参数 value float4 The quaternion xyzw component values. quaternion(float4x4) Constructs a unit quaternion from an orthonormal float4x4 matrix. public quaternion(float4x4 m) 参数 m float4x4 The float4x4 orthonormal rotation matrix. 字段 identity A quaternion representing the identity transform. public static readonly quaternion identity 字段值 quaternion value The quaternion component values. public float4 value 字段值 float4 方法 AxisAngle(float3, float) Returns a quaternion representing a rotation around a unit axis by an angle in radians. The rotation direction is clockwise when looking along the rotation axis towards the origin. public static quaternion AxisAngle(float3 axis, float angle) 参数 axis float3 The axis of rotation. angle float The angle of rotation in radians. 返回 quaternion The quaternion representing a rotation around an axis. Equals(object) Returns whether true if the quaternion is equal to a given quaternion, false otherwise. public override bool Equals(object x) 参数 x object The object to compare with. 返回 bool True if the quaternion is equal to the input, false otherwise. Equals(quaternion) Returns true if the quaternion is equal to a given quaternion, false otherwise. public bool Equals(quaternion x) 参数 x quaternion The quaternion to compare with. 返回 bool True if the quaternion is equal to the input, false otherwise. Euler(float, float, float, RotationOrder) Returns a quaternion constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static quaternion Euler(float x, float y, float z, math.RotationOrder order = RotationOrder.Default) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. order math.RotationOrder The order in which the rotations are applied. 返回 quaternion The quaternion representing the Euler angle rotation in the specified order. Euler(float3, RotationOrder) Returns a quaternion constructed by first performing 3 rotations around the principal axes in a given order. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. When the rotation order is known at compile time, it is recommended for performance reasons to use specific Euler rotation constructors such as EulerZXY(...). public static quaternion Euler(float3 xyz, math.RotationOrder order = RotationOrder.Default) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. order math.RotationOrder The order in which the rotations are applied. 返回 quaternion The quaternion representing the Euler angle rotation in the specified order. EulerXYZ(float, float, float) Returns a quaternion constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerXYZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 quaternion The quaternion representing the Euler angle rotation in x-y-z order. EulerXYZ(float3) Returns a quaternion constructed by first performing a rotation around the x-axis, then the y-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerXYZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 quaternion The quaternion representing the Euler angle rotation in x-y-z order. EulerXZY(float, float, float) Returns a quaternion constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerXZY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 quaternion The quaternion representing the Euler angle rotation in x-z-y order. EulerXZY(float3) Returns a quaternion constructed by first performing a rotation around the x-axis, then the z-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerXZY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 quaternion The quaternion representing the Euler angle rotation in x-z-y order. EulerYXZ(float, float, float) Returns a quaternion constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerYXZ(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 quaternion The quaternion representing the Euler angle rotation in y-x-z order. EulerYXZ(float3) Returns a quaternion constructed by first performing a rotation around the y-axis, then the x-axis and finally the z-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerYXZ(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 quaternion The quaternion representing the Euler angle rotation in y-x-z order. EulerYZX(float, float, float) Returns a quaternion constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerYZX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 quaternion The quaternion representing the Euler angle rotation in y-z-x order. EulerYZX(float3) Returns a quaternion constructed by first performing a rotation around the y-axis, then the z-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerYZX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 quaternion The quaternion representing the Euler angle rotation in y-z-x order. EulerZXY(float, float, float) Returns a quaternion constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static quaternion EulerZXY(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 quaternion The quaternion representing the Euler angle rotation in z-x-y order. EulerZXY(float3) Returns a quaternion constructed by first performing a rotation around the z-axis, then the x-axis and finally the y-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. This is the default order rotation order in Unity. public static quaternion EulerZXY(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 quaternion The quaternion representing the Euler angle rotation in z-x-y order. EulerZYX(float, float, float) Returns a quaternion constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerZYX(float x, float y, float z) 参数 x float The rotation angle around the x-axis in radians. y float The rotation angle around the y-axis in radians. z float The rotation angle around the z-axis in radians. 返回 quaternion The quaternion representing the Euler angle rotation in z-y-x order. EulerZYX(float3) Returns a quaternion constructed by first performing a rotation around the z-axis, then the y-axis and finally the x-axis. All rotation angles are in radians and clockwise when looking along the rotation axis towards the origin. public static quaternion EulerZYX(float3 xyz) 参数 xyz float3 A float3 vector containing the rotation angles around the x-, y- and z-axis measures in radians. 返回 quaternion The quaternion representing the Euler angle rotation in z-y-x order. GetHashCode() Returns a hash code for the quaternion. public override int GetHashCode() 返回 int The hash code of the quaternion. LookRotation(float3, float3) Returns a quaternion view rotation given a unit length forward vector and a unit length up vector. The two input vectors are assumed to be unit length and not collinear. If these assumptions are not met use float3x3.LookRotationSafe instead. public static quaternion LookRotation(float3 forward, float3 up) 参数 forward float3 The view forward direction. up float3 The view up direction. 返回 quaternion The quaternion view rotation. LookRotationSafe(float3, float3) Returns a quaternion view rotation given a forward vector and an up vector. The two input vectors are not assumed to be unit length. If the magnitude of either of the vectors is so extreme that the calculation cannot be carried out reliably or the vectors are collinear, the identity will be returned instead. public static quaternion LookRotationSafe(float3 forward, float3 up) 参数 forward float3 The view forward direction. up float3 The view up direction. 返回 quaternion The quaternion view rotation or the identity quaternion. RotateX(float) Returns a quaternion that rotates around the x-axis by a given number of radians. public static quaternion RotateX(float angle) 参数 angle float The clockwise rotation angle when looking along the x-axis towards the origin in radians. 返回 quaternion The quaternion representing a rotation around the x-axis. RotateY(float) Returns a quaternion that rotates around the y-axis by a given number of radians. public static quaternion RotateY(float angle) 参数 angle float The clockwise rotation angle when looking along the y-axis towards the origin in radians. 返回 quaternion The quaternion representing a rotation around the y-axis. RotateZ(float) Returns a quaternion that rotates around the z-axis by a given number of radians. public static quaternion RotateZ(float angle) 参数 angle float The clockwise rotation angle when looking along the z-axis towards the origin in radians. 返回 quaternion The quaternion representing a rotation around the z-axis. ToString() Returns a string representation of the quaternion. public override string ToString() 返回 string The string representation of the quaternion. ToString(string, IFormatProvider) Returns a string representation of the quaternion using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string The format string. formatProvider IFormatProvider The format provider to use during string formatting. 返回 string The formatted string representation of the quaternion. 运算符 implicit operator quaternion(float4) Implicitly converts a float4 vector to a quaternion. public static implicit operator quaternion(float4 v) 参数 v float4 The quaternion xyzw component values. 返回 quaternion The quaternion constructed from a float4 vector."
  },
  "reference/Unity.Mathematics.uint2.html": {
    "href": "reference/Unity.Mathematics.uint2.html",
    "title": "uint2 结构 | Fantasy.Net API Reference",
    "keywords": "uint2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2 component vector of uints. public struct uint2 : IEquatable<uint2>, IFormattable 实现 IEquatable<uint2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint2(bool) Constructs a uint2 vector from a single bool value by converting it to uint and assigning it to every component. public uint2(bool v) 参数 v bool bool to convert to uint2 uint2(double) Constructs a uint2 vector from a single double value by converting it to uint and assigning it to every component. public uint2(double v) 参数 v double double to convert to uint2 uint2(int) Constructs a uint2 vector from a single int value by converting it to uint and assigning it to every component. public uint2(int v) 参数 v int int to convert to uint2 uint2(float) Constructs a uint2 vector from a single float value by converting it to uint and assigning it to every component. public uint2(float v) 参数 v float float to convert to uint2 uint2(uint) Constructs a uint2 vector from a single uint value by assigning it to every component. public uint2(uint v) 参数 v uint uint to convert to uint2 uint2(uint, uint) Constructs a uint2 vector from two uint values. public uint2(uint x, uint y) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. uint2(bool2) Constructs a uint2 vector from a bool2 vector by componentwise conversion. public uint2(bool2 v) 参数 v bool2 bool2 to convert to uint2 uint2(double2) Constructs a uint2 vector from a double2 vector by componentwise conversion. public uint2(double2 v) 参数 v double2 double2 to convert to uint2 uint2(float2) Constructs a uint2 vector from a float2 vector by componentwise conversion. public uint2(float2 v) 参数 v float2 float2 to convert to uint2 uint2(int2) Constructs a uint2 vector from a int2 vector by componentwise conversion. public uint2(int2 v) 参数 v int2 int2 to convert to uint2 uint2(uint2) Constructs a uint2 vector from a uint2 vector. public uint2(uint2 xy) 参数 xy uint2 The constructed vector's xy components will be set to this value. 字段 x x component of the vector. public uint x 字段值 uint y y component of the vector. public uint y 字段值 uint zero uint2 zero value. public static readonly uint2 zero 字段值 uint2 属性 this[int] Returns the uint element at a specified index. public uint this[int index] { get; set; } 参数 index int 属性值 uint 方法 Equals(object) Returns true if the uint2 is equal to a given uint2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint2) Returns true if the uint2 is equal to a given uint2, false otherwise. public bool Equals(uint2 rhs) 参数 rhs uint2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint2) Returns the result of a componentwise addition operation on a uint value and a uint2 vector. public static uint2 operator +(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint2 Right hand side uint2 to use to compute componentwise addition. 返回 uint2 uint2 result of the componentwise addition. operator +(uint2, uint) Returns the result of a componentwise addition operation on a uint2 vector and a uint value. public static uint2 operator +(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint2 uint2 result of the componentwise addition. operator +(uint2, uint2) Returns the result of a componentwise addition operation on two uint2 vectors. public static uint2 operator +(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise addition. rhs uint2 Right hand side uint2 to use to compute componentwise addition. 返回 uint2 uint2 result of the componentwise addition. operator &(uint, uint2) Returns the result of a componentwise bitwise and operation on a uint value and a uint2 vector. public static uint2 operator &(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint2 Right hand side uint2 to use to compute componentwise bitwise and. 返回 uint2 uint2 result of the componentwise bitwise and. operator &(uint2, uint) Returns the result of a componentwise bitwise and operation on a uint2 vector and a uint value. public static uint2 operator &(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint2 uint2 result of the componentwise bitwise and. operator &(uint2, uint2) Returns the result of a componentwise bitwise and operation on two uint2 vectors. public static uint2 operator &(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise bitwise and. rhs uint2 Right hand side uint2 to use to compute componentwise bitwise and. 返回 uint2 uint2 result of the componentwise bitwise and. operator |(uint, uint2) Returns the result of a componentwise bitwise or operation on a uint value and a uint2 vector. public static uint2 operator |(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint2 Right hand side uint2 to use to compute componentwise bitwise or. 返回 uint2 uint2 result of the componentwise bitwise or. operator |(uint2, uint) Returns the result of a componentwise bitwise or operation on a uint2 vector and a uint value. public static uint2 operator |(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint2 uint2 result of the componentwise bitwise or. operator |(uint2, uint2) Returns the result of a componentwise bitwise or operation on two uint2 vectors. public static uint2 operator |(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise bitwise or. rhs uint2 Right hand side uint2 to use to compute componentwise bitwise or. 返回 uint2 uint2 result of the componentwise bitwise or. operator --(uint2) Returns the result of a componentwise decrement operation on a uint2 vector. public static uint2 operator --(uint2 val) 参数 val uint2 Value to use when computing the componentwise decrement. 返回 uint2 uint2 result of the componentwise decrement. operator /(uint, uint2) Returns the result of a componentwise division operation on a uint value and a uint2 vector. public static uint2 operator /(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint2 Right hand side uint2 to use to compute componentwise division. 返回 uint2 uint2 result of the componentwise division. operator /(uint2, uint) Returns the result of a componentwise division operation on a uint2 vector and a uint value. public static uint2 operator /(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint2 uint2 result of the componentwise division. operator /(uint2, uint2) Returns the result of a componentwise division operation on two uint2 vectors. public static uint2 operator /(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise division. rhs uint2 Right hand side uint2 to use to compute componentwise division. 返回 uint2 uint2 result of the componentwise division. operator ==(uint, uint2) Returns the result of a componentwise equality operation on a uint value and a uint2 vector. public static bool2 operator ==(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint2 Right hand side uint2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(uint2, uint) Returns the result of a componentwise equality operation on a uint2 vector and a uint value. public static bool2 operator ==(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ==(uint2, uint2) Returns the result of a componentwise equality operation on two uint2 vectors. public static bool2 operator ==(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise equality. rhs uint2 Right hand side uint2 to use to compute componentwise equality. 返回 bool2 bool2 result of the componentwise equality. operator ^(uint, uint2) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint2 vector. public static uint2 operator ^(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint2 Right hand side uint2 to use to compute componentwise bitwise exclusive or. 返回 uint2 uint2 result of the componentwise bitwise exclusive or. operator ^(uint2, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint2 vector and a uint value. public static uint2 operator ^(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint2 uint2 result of the componentwise bitwise exclusive or. operator ^(uint2, uint2) Returns the result of a componentwise bitwise exclusive or operation on two uint2 vectors. public static uint2 operator ^(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise bitwise exclusive or. rhs uint2 Right hand side uint2 to use to compute componentwise bitwise exclusive or. 返回 uint2 uint2 result of the componentwise bitwise exclusive or. explicit operator uint2(bool) Explicitly converts a single bool value to a uint2 vector by converting it to uint and assigning it to every component. public static explicit operator uint2(bool v) 参数 v bool bool to convert to uint2 返回 uint2 Converted value. explicit operator uint2(double) Explicitly converts a single double value to a uint2 vector by converting it to uint and assigning it to every component. public static explicit operator uint2(double v) 参数 v double double to convert to uint2 返回 uint2 Converted value. explicit operator uint2(int) Explicitly converts a single int value to a uint2 vector by converting it to uint and assigning it to every component. public static explicit operator uint2(int v) 参数 v int int to convert to uint2 返回 uint2 Converted value. explicit operator uint2(float) Explicitly converts a single float value to a uint2 vector by converting it to uint and assigning it to every component. public static explicit operator uint2(float v) 参数 v float float to convert to uint2 返回 uint2 Converted value. explicit operator uint2(bool2) Explicitly converts a bool2 vector to a uint2 vector by componentwise conversion. public static explicit operator uint2(bool2 v) 参数 v bool2 bool2 to convert to uint2 返回 uint2 Converted value. explicit operator uint2(double2) Explicitly converts a double2 vector to a uint2 vector by componentwise conversion. public static explicit operator uint2(double2 v) 参数 v double2 double2 to convert to uint2 返回 uint2 Converted value. explicit operator uint2(float2) Explicitly converts a float2 vector to a uint2 vector by componentwise conversion. public static explicit operator uint2(float2 v) 参数 v float2 float2 to convert to uint2 返回 uint2 Converted value. explicit operator uint2(int2) Explicitly converts a int2 vector to a uint2 vector by componentwise conversion. public static explicit operator uint2(int2 v) 参数 v int2 int2 to convert to uint2 返回 uint2 Converted value. operator >(uint, uint2) Returns the result of a componentwise greater than operation on a uint value and a uint2 vector. public static bool2 operator >(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint2 Right hand side uint2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(uint2, uint) Returns the result of a componentwise greater than operation on a uint2 vector and a uint value. public static bool2 operator >(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >(uint2, uint2) Returns the result of a componentwise greater than operation on two uint2 vectors. public static bool2 operator >(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise greater than. rhs uint2 Right hand side uint2 to use to compute componentwise greater than. 返回 bool2 bool2 result of the componentwise greater than. operator >=(uint, uint2) Returns the result of a componentwise greater or equal operation on a uint value and a uint2 vector. public static bool2 operator >=(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint2 Right hand side uint2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(uint2, uint) Returns the result of a componentwise greater or equal operation on a uint2 vector and a uint value. public static bool2 operator >=(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. operator >=(uint2, uint2) Returns the result of a componentwise greater or equal operation on two uint2 vectors. public static bool2 operator >=(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise greater or equal. rhs uint2 Right hand side uint2 to use to compute componentwise greater or equal. 返回 bool2 bool2 result of the componentwise greater or equal. implicit operator uint2(uint) Implicitly converts a single uint value to a uint2 vector by assigning it to every component. public static implicit operator uint2(uint v) 参数 v uint uint to convert to uint2 返回 uint2 Converted value. operator ++(uint2) Returns the result of a componentwise increment operation on a uint2 vector. public static uint2 operator ++(uint2 val) 参数 val uint2 Value to use when computing the componentwise increment. 返回 uint2 uint2 result of the componentwise increment. operator !=(uint, uint2) Returns the result of a componentwise not equal operation on a uint value and a uint2 vector. public static bool2 operator !=(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint2 Right hand side uint2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(uint2, uint) Returns the result of a componentwise not equal operation on a uint2 vector and a uint value. public static bool2 operator !=(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator !=(uint2, uint2) Returns the result of a componentwise not equal operation on two uint2 vectors. public static bool2 operator !=(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise not equal. rhs uint2 Right hand side uint2 to use to compute componentwise not equal. 返回 bool2 bool2 result of the componentwise not equal. operator <<(uint2, int) Returns the result of a componentwise left shift operation on a uint2 vector by a number of bits specified by a single int. public static uint2 operator <<(uint2 x, int n) 参数 x uint2 The vector to left shift. n int The number of bits to left shift. 返回 uint2 The result of the componentwise left shift. operator <(uint, uint2) Returns the result of a componentwise less than operation on a uint value and a uint2 vector. public static bool2 operator <(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint2 Right hand side uint2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(uint2, uint) Returns the result of a componentwise less than operation on a uint2 vector and a uint value. public static bool2 operator <(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <(uint2, uint2) Returns the result of a componentwise less than operation on two uint2 vectors. public static bool2 operator <(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise less than. rhs uint2 Right hand side uint2 to use to compute componentwise less than. 返回 bool2 bool2 result of the componentwise less than. operator <=(uint, uint2) Returns the result of a componentwise less or equal operation on a uint value and a uint2 vector. public static bool2 operator <=(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint2 Right hand side uint2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(uint2, uint) Returns the result of a componentwise less or equal operation on a uint2 vector and a uint value. public static bool2 operator <=(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator <=(uint2, uint2) Returns the result of a componentwise less or equal operation on two uint2 vectors. public static bool2 operator <=(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise less or equal. rhs uint2 Right hand side uint2 to use to compute componentwise less or equal. 返回 bool2 bool2 result of the componentwise less or equal. operator %(uint, uint2) Returns the result of a componentwise modulus operation on a uint value and a uint2 vector. public static uint2 operator %(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint2 Right hand side uint2 to use to compute componentwise modulus. 返回 uint2 uint2 result of the componentwise modulus. operator %(uint2, uint) Returns the result of a componentwise modulus operation on a uint2 vector and a uint value. public static uint2 operator %(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint2 uint2 result of the componentwise modulus. operator %(uint2, uint2) Returns the result of a componentwise modulus operation on two uint2 vectors. public static uint2 operator %(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise modulus. rhs uint2 Right hand side uint2 to use to compute componentwise modulus. 返回 uint2 uint2 result of the componentwise modulus. operator *(uint, uint2) Returns the result of a componentwise multiplication operation on a uint value and a uint2 vector. public static uint2 operator *(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint2 Right hand side uint2 to use to compute componentwise multiplication. 返回 uint2 uint2 result of the componentwise multiplication. operator *(uint2, uint) Returns the result of a componentwise multiplication operation on a uint2 vector and a uint value. public static uint2 operator *(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint2 uint2 result of the componentwise multiplication. operator *(uint2, uint2) Returns the result of a componentwise multiplication operation on two uint2 vectors. public static uint2 operator *(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise multiplication. rhs uint2 Right hand side uint2 to use to compute componentwise multiplication. 返回 uint2 uint2 result of the componentwise multiplication. operator ~(uint2) Returns the result of a componentwise bitwise not operation on a uint2 vector. public static uint2 operator ~(uint2 val) 参数 val uint2 Value to use when computing the componentwise bitwise not. 返回 uint2 uint2 result of the componentwise bitwise not. operator >>(uint2, int) Returns the result of a componentwise right shift operation on a uint2 vector by a number of bits specified by a single int. public static uint2 operator >>(uint2 x, int n) 参数 x uint2 The vector to right shift. n int The number of bits to right shift. 返回 uint2 The result of the componentwise right shift. operator -(uint, uint2) Returns the result of a componentwise subtraction operation on a uint value and a uint2 vector. public static uint2 operator -(uint lhs, uint2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint2 Right hand side uint2 to use to compute componentwise subtraction. 返回 uint2 uint2 result of the componentwise subtraction. operator -(uint2, uint) Returns the result of a componentwise subtraction operation on a uint2 vector and a uint value. public static uint2 operator -(uint2 lhs, uint rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint2 uint2 result of the componentwise subtraction. operator -(uint2, uint2) Returns the result of a componentwise subtraction operation on two uint2 vectors. public static uint2 operator -(uint2 lhs, uint2 rhs) 参数 lhs uint2 Left hand side uint2 to use to compute componentwise subtraction. rhs uint2 Right hand side uint2 to use to compute componentwise subtraction. 返回 uint2 uint2 result of the componentwise subtraction. operator -(uint2) Returns the result of a componentwise unary minus operation on a uint2 vector. public static uint2 operator -(uint2 val) 参数 val uint2 Value to use when computing the componentwise unary minus. 返回 uint2 uint2 result of the componentwise unary minus. operator +(uint2) Returns the result of a componentwise unary plus operation on a uint2 vector. public static uint2 operator +(uint2 val) 参数 val uint2 Value to use when computing the componentwise unary plus. 返回 uint2 uint2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint2x2.html": {
    "href": "reference/Unity.Mathematics.uint2x2.html",
    "title": "uint2x2 结构 | Fantasy.Net API Reference",
    "keywords": "uint2x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x2 matrix of uints. public struct uint2x2 : IEquatable<uint2x2>, IFormattable 实现 IEquatable<uint2x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint2x2(bool) Constructs a uint2x2 matrix from a single bool value by converting it to uint and assigning it to every component. public uint2x2(bool v) 参数 v bool bool to convert to uint2x2 uint2x2(double) Constructs a uint2x2 matrix from a single double value by converting it to uint and assigning it to every component. public uint2x2(double v) 参数 v double double to convert to uint2x2 uint2x2(int) Constructs a uint2x2 matrix from a single int value by converting it to uint and assigning it to every component. public uint2x2(int v) 参数 v int int to convert to uint2x2 uint2x2(float) Constructs a uint2x2 matrix from a single float value by converting it to uint and assigning it to every component. public uint2x2(float v) 参数 v float float to convert to uint2x2 uint2x2(uint) Constructs a uint2x2 matrix from a single uint value by assigning it to every component. public uint2x2(uint v) 参数 v uint uint to convert to uint2x2 uint2x2(uint, uint, uint, uint) Constructs a uint2x2 matrix from 4 uint values given in row-major order. public uint2x2(uint m00, uint m01, uint m10, uint m11) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. uint2x2(bool2x2) Constructs a uint2x2 matrix from a bool2x2 matrix by componentwise conversion. public uint2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to uint2x2 uint2x2(double2x2) Constructs a uint2x2 matrix from a double2x2 matrix by componentwise conversion. public uint2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to uint2x2 uint2x2(float2x2) Constructs a uint2x2 matrix from a float2x2 matrix by componentwise conversion. public uint2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to uint2x2 uint2x2(int2x2) Constructs a uint2x2 matrix from a int2x2 matrix by componentwise conversion. public uint2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to uint2x2 uint2x2(uint2, uint2) Constructs a uint2x2 matrix from two uint2 vectors. public uint2x2(uint2 c0, uint2 c1) 参数 c0 uint2 The matrix column c0 will be set to this value. c1 uint2 The matrix column c1 will be set to this value. 字段 c0 Column 0 of the matrix. public uint2 c0 字段值 uint2 c1 Column 1 of the matrix. public uint2 c1 字段值 uint2 identity uint2x2 identity transform. public static readonly uint2x2 identity 字段值 uint2x2 zero uint2x2 zero value. public static readonly uint2x2 zero 字段值 uint2x2 属性 this[int] Returns the uint2 element at a specified index. public ref uint2 this[int index] { get; } 参数 index int 属性值 uint2 方法 Equals(object) Returns true if the uint2x2 is equal to a given uint2x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint2x2) Returns true if the uint2x2 is equal to a given uint2x2, false otherwise. public bool Equals(uint2x2 rhs) 参数 rhs uint2x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint2x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint2x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint2x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint2x2) Returns the result of a componentwise addition operation on a uint value and a uint2x2 matrix. public static uint2x2 operator +(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise addition. 返回 uint2x2 uint2x2 result of the componentwise addition. operator +(uint2x2, uint) Returns the result of a componentwise addition operation on a uint2x2 matrix and a uint value. public static uint2x2 operator +(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint2x2 uint2x2 result of the componentwise addition. operator +(uint2x2, uint2x2) Returns the result of a componentwise addition operation on two uint2x2 matrices. public static uint2x2 operator +(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise addition. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise addition. 返回 uint2x2 uint2x2 result of the componentwise addition. operator &(uint, uint2x2) Returns the result of a componentwise bitwise and operation on a uint value and a uint2x2 matrix. public static uint2x2 operator &(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise bitwise and. 返回 uint2x2 uint2x2 result of the componentwise bitwise and. operator &(uint2x2, uint) Returns the result of a componentwise bitwise and operation on a uint2x2 matrix and a uint value. public static uint2x2 operator &(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint2x2 uint2x2 result of the componentwise bitwise and. operator &(uint2x2, uint2x2) Returns the result of a componentwise bitwise and operation on two uint2x2 matrices. public static uint2x2 operator &(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise bitwise and. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise bitwise and. 返回 uint2x2 uint2x2 result of the componentwise bitwise and. operator |(uint, uint2x2) Returns the result of a componentwise bitwise or operation on a uint value and a uint2x2 matrix. public static uint2x2 operator |(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise bitwise or. 返回 uint2x2 uint2x2 result of the componentwise bitwise or. operator |(uint2x2, uint) Returns the result of a componentwise bitwise or operation on a uint2x2 matrix and a uint value. public static uint2x2 operator |(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint2x2 uint2x2 result of the componentwise bitwise or. operator |(uint2x2, uint2x2) Returns the result of a componentwise bitwise or operation on two uint2x2 matrices. public static uint2x2 operator |(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise bitwise or. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise bitwise or. 返回 uint2x2 uint2x2 result of the componentwise bitwise or. operator --(uint2x2) Returns the result of a componentwise decrement operation on a uint2x2 matrix. public static uint2x2 operator --(uint2x2 val) 参数 val uint2x2 Value to use when computing the componentwise decrement. 返回 uint2x2 uint2x2 result of the componentwise decrement. operator /(uint, uint2x2) Returns the result of a componentwise division operation on a uint value and a uint2x2 matrix. public static uint2x2 operator /(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise division. 返回 uint2x2 uint2x2 result of the componentwise division. operator /(uint2x2, uint) Returns the result of a componentwise division operation on a uint2x2 matrix and a uint value. public static uint2x2 operator /(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint2x2 uint2x2 result of the componentwise division. operator /(uint2x2, uint2x2) Returns the result of a componentwise division operation on two uint2x2 matrices. public static uint2x2 operator /(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise division. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise division. 返回 uint2x2 uint2x2 result of the componentwise division. operator ==(uint, uint2x2) Returns the result of a componentwise equality operation on a uint value and a uint2x2 matrix. public static bool2x2 operator ==(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(uint2x2, uint) Returns the result of a componentwise equality operation on a uint2x2 matrix and a uint value. public static bool2x2 operator ==(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ==(uint2x2, uint2x2) Returns the result of a componentwise equality operation on two uint2x2 matrices. public static bool2x2 operator ==(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise equality. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise equality. 返回 bool2x2 bool2x2 result of the componentwise equality. operator ^(uint, uint2x2) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint2x2 matrix. public static uint2x2 operator ^(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise bitwise exclusive or. 返回 uint2x2 uint2x2 result of the componentwise bitwise exclusive or. operator ^(uint2x2, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint2x2 matrix and a uint value. public static uint2x2 operator ^(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint2x2 uint2x2 result of the componentwise bitwise exclusive or. operator ^(uint2x2, uint2x2) Returns the result of a componentwise bitwise exclusive or operation on two uint2x2 matrices. public static uint2x2 operator ^(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise bitwise exclusive or. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise bitwise exclusive or. 返回 uint2x2 uint2x2 result of the componentwise bitwise exclusive or. explicit operator uint2x2(bool) Explicitly converts a single bool value to a uint2x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x2(bool v) 参数 v bool bool to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(double) Explicitly converts a single double value to a uint2x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x2(double v) 参数 v double double to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(int) Explicitly converts a single int value to a uint2x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x2(int v) 参数 v int int to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(float) Explicitly converts a single float value to a uint2x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x2(float v) 参数 v float float to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(bool2x2) Explicitly converts a bool2x2 matrix to a uint2x2 matrix by componentwise conversion. public static explicit operator uint2x2(bool2x2 v) 参数 v bool2x2 bool2x2 to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(double2x2) Explicitly converts a double2x2 matrix to a uint2x2 matrix by componentwise conversion. public static explicit operator uint2x2(double2x2 v) 参数 v double2x2 double2x2 to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(float2x2) Explicitly converts a float2x2 matrix to a uint2x2 matrix by componentwise conversion. public static explicit operator uint2x2(float2x2 v) 参数 v float2x2 float2x2 to convert to uint2x2 返回 uint2x2 Converted value. explicit operator uint2x2(int2x2) Explicitly converts a int2x2 matrix to a uint2x2 matrix by componentwise conversion. public static explicit operator uint2x2(int2x2 v) 参数 v int2x2 int2x2 to convert to uint2x2 返回 uint2x2 Converted value. operator >(uint, uint2x2) Returns the result of a componentwise greater than operation on a uint value and a uint2x2 matrix. public static bool2x2 operator >(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(uint2x2, uint) Returns the result of a componentwise greater than operation on a uint2x2 matrix and a uint value. public static bool2x2 operator >(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >(uint2x2, uint2x2) Returns the result of a componentwise greater than operation on two uint2x2 matrices. public static bool2x2 operator >(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise greater than. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise greater than. 返回 bool2x2 bool2x2 result of the componentwise greater than. operator >=(uint, uint2x2) Returns the result of a componentwise greater or equal operation on a uint value and a uint2x2 matrix. public static bool2x2 operator >=(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(uint2x2, uint) Returns the result of a componentwise greater or equal operation on a uint2x2 matrix and a uint value. public static bool2x2 operator >=(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. operator >=(uint2x2, uint2x2) Returns the result of a componentwise greater or equal operation on two uint2x2 matrices. public static bool2x2 operator >=(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise greater or equal. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise greater or equal. 返回 bool2x2 bool2x2 result of the componentwise greater or equal. implicit operator uint2x2(uint) Implicitly converts a single uint value to a uint2x2 matrix by assigning it to every component. public static implicit operator uint2x2(uint v) 参数 v uint uint to convert to uint2x2 返回 uint2x2 Converted value. operator ++(uint2x2) Returns the result of a componentwise increment operation on a uint2x2 matrix. public static uint2x2 operator ++(uint2x2 val) 参数 val uint2x2 Value to use when computing the componentwise increment. 返回 uint2x2 uint2x2 result of the componentwise increment. operator !=(uint, uint2x2) Returns the result of a componentwise not equal operation on a uint value and a uint2x2 matrix. public static bool2x2 operator !=(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(uint2x2, uint) Returns the result of a componentwise not equal operation on a uint2x2 matrix and a uint value. public static bool2x2 operator !=(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator !=(uint2x2, uint2x2) Returns the result of a componentwise not equal operation on two uint2x2 matrices. public static bool2x2 operator !=(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise not equal. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise not equal. 返回 bool2x2 bool2x2 result of the componentwise not equal. operator <<(uint2x2, int) Returns the result of a componentwise left shift operation on a uint2x2 matrix by a number of bits specified by a single int. public static uint2x2 operator <<(uint2x2 x, int n) 参数 x uint2x2 The matrix to left shift. n int The number of bits to left shift. 返回 uint2x2 The result of the componentwise left shift. operator <(uint, uint2x2) Returns the result of a componentwise less than operation on a uint value and a uint2x2 matrix. public static bool2x2 operator <(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(uint2x2, uint) Returns the result of a componentwise less than operation on a uint2x2 matrix and a uint value. public static bool2x2 operator <(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <(uint2x2, uint2x2) Returns the result of a componentwise less than operation on two uint2x2 matrices. public static bool2x2 operator <(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise less than. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise less than. 返回 bool2x2 bool2x2 result of the componentwise less than. operator <=(uint, uint2x2) Returns the result of a componentwise less or equal operation on a uint value and a uint2x2 matrix. public static bool2x2 operator <=(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(uint2x2, uint) Returns the result of a componentwise less or equal operation on a uint2x2 matrix and a uint value. public static bool2x2 operator <=(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator <=(uint2x2, uint2x2) Returns the result of a componentwise less or equal operation on two uint2x2 matrices. public static bool2x2 operator <=(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise less or equal. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise less or equal. 返回 bool2x2 bool2x2 result of the componentwise less or equal. operator %(uint, uint2x2) Returns the result of a componentwise modulus operation on a uint value and a uint2x2 matrix. public static uint2x2 operator %(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise modulus. 返回 uint2x2 uint2x2 result of the componentwise modulus. operator %(uint2x2, uint) Returns the result of a componentwise modulus operation on a uint2x2 matrix and a uint value. public static uint2x2 operator %(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint2x2 uint2x2 result of the componentwise modulus. operator %(uint2x2, uint2x2) Returns the result of a componentwise modulus operation on two uint2x2 matrices. public static uint2x2 operator %(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise modulus. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise modulus. 返回 uint2x2 uint2x2 result of the componentwise modulus. operator *(uint, uint2x2) Returns the result of a componentwise multiplication operation on a uint value and a uint2x2 matrix. public static uint2x2 operator *(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise multiplication. 返回 uint2x2 uint2x2 result of the componentwise multiplication. operator *(uint2x2, uint) Returns the result of a componentwise multiplication operation on a uint2x2 matrix and a uint value. public static uint2x2 operator *(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint2x2 uint2x2 result of the componentwise multiplication. operator *(uint2x2, uint2x2) Returns the result of a componentwise multiplication operation on two uint2x2 matrices. public static uint2x2 operator *(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise multiplication. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise multiplication. 返回 uint2x2 uint2x2 result of the componentwise multiplication. operator ~(uint2x2) Returns the result of a componentwise bitwise not operation on a uint2x2 matrix. public static uint2x2 operator ~(uint2x2 val) 参数 val uint2x2 Value to use when computing the componentwise bitwise not. 返回 uint2x2 uint2x2 result of the componentwise bitwise not. operator >>(uint2x2, int) Returns the result of a componentwise right shift operation on a uint2x2 matrix by a number of bits specified by a single int. public static uint2x2 operator >>(uint2x2 x, int n) 参数 x uint2x2 The matrix to right shift. n int The number of bits to right shift. 返回 uint2x2 The result of the componentwise right shift. operator -(uint, uint2x2) Returns the result of a componentwise subtraction operation on a uint value and a uint2x2 matrix. public static uint2x2 operator -(uint lhs, uint2x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise subtraction. 返回 uint2x2 uint2x2 result of the componentwise subtraction. operator -(uint2x2, uint) Returns the result of a componentwise subtraction operation on a uint2x2 matrix and a uint value. public static uint2x2 operator -(uint2x2 lhs, uint rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint2x2 uint2x2 result of the componentwise subtraction. operator -(uint2x2, uint2x2) Returns the result of a componentwise subtraction operation on two uint2x2 matrices. public static uint2x2 operator -(uint2x2 lhs, uint2x2 rhs) 参数 lhs uint2x2 Left hand side uint2x2 to use to compute componentwise subtraction. rhs uint2x2 Right hand side uint2x2 to use to compute componentwise subtraction. 返回 uint2x2 uint2x2 result of the componentwise subtraction. operator -(uint2x2) Returns the result of a componentwise unary minus operation on a uint2x2 matrix. public static uint2x2 operator -(uint2x2 val) 参数 val uint2x2 Value to use when computing the componentwise unary minus. 返回 uint2x2 uint2x2 result of the componentwise unary minus. operator +(uint2x2) Returns the result of a componentwise unary plus operation on a uint2x2 matrix. public static uint2x2 operator +(uint2x2 val) 参数 val uint2x2 Value to use when computing the componentwise unary plus. 返回 uint2x2 uint2x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint2x3.html": {
    "href": "reference/Unity.Mathematics.uint2x3.html",
    "title": "uint2x3 结构 | Fantasy.Net API Reference",
    "keywords": "uint2x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x3 matrix of uints. public struct uint2x3 : IEquatable<uint2x3>, IFormattable 实现 IEquatable<uint2x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint2x3(bool) Constructs a uint2x3 matrix from a single bool value by converting it to uint and assigning it to every component. public uint2x3(bool v) 参数 v bool bool to convert to uint2x3 uint2x3(double) Constructs a uint2x3 matrix from a single double value by converting it to uint and assigning it to every component. public uint2x3(double v) 参数 v double double to convert to uint2x3 uint2x3(int) Constructs a uint2x3 matrix from a single int value by converting it to uint and assigning it to every component. public uint2x3(int v) 参数 v int int to convert to uint2x3 uint2x3(float) Constructs a uint2x3 matrix from a single float value by converting it to uint and assigning it to every component. public uint2x3(float v) 参数 v float float to convert to uint2x3 uint2x3(uint) Constructs a uint2x3 matrix from a single uint value by assigning it to every component. public uint2x3(uint v) 参数 v uint uint to convert to uint2x3 uint2x3(uint, uint, uint, uint, uint, uint) Constructs a uint2x3 matrix from 6 uint values given in row-major order. public uint2x3(uint m00, uint m01, uint m02, uint m10, uint m11, uint m12) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. uint2x3(bool2x3) Constructs a uint2x3 matrix from a bool2x3 matrix by componentwise conversion. public uint2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to uint2x3 uint2x3(double2x3) Constructs a uint2x3 matrix from a double2x3 matrix by componentwise conversion. public uint2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to uint2x3 uint2x3(float2x3) Constructs a uint2x3 matrix from a float2x3 matrix by componentwise conversion. public uint2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to uint2x3 uint2x3(int2x3) Constructs a uint2x3 matrix from a int2x3 matrix by componentwise conversion. public uint2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to uint2x3 uint2x3(uint2, uint2, uint2) Constructs a uint2x3 matrix from three uint2 vectors. public uint2x3(uint2 c0, uint2 c1, uint2 c2) 参数 c0 uint2 The matrix column c0 will be set to this value. c1 uint2 The matrix column c1 will be set to this value. c2 uint2 The matrix column c2 will be set to this value. 字段 c0 Column 0 of the matrix. public uint2 c0 字段值 uint2 c1 Column 1 of the matrix. public uint2 c1 字段值 uint2 c2 Column 2 of the matrix. public uint2 c2 字段值 uint2 zero uint2x3 zero value. public static readonly uint2x3 zero 字段值 uint2x3 属性 this[int] Returns the uint2 element at a specified index. public ref uint2 this[int index] { get; } 参数 index int 属性值 uint2 方法 Equals(object) Returns true if the uint2x3 is equal to a given uint2x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint2x3) Returns true if the uint2x3 is equal to a given uint2x3, false otherwise. public bool Equals(uint2x3 rhs) 参数 rhs uint2x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint2x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint2x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint2x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint2x3) Returns the result of a componentwise addition operation on a uint value and a uint2x3 matrix. public static uint2x3 operator +(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise addition. 返回 uint2x3 uint2x3 result of the componentwise addition. operator +(uint2x3, uint) Returns the result of a componentwise addition operation on a uint2x3 matrix and a uint value. public static uint2x3 operator +(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint2x3 uint2x3 result of the componentwise addition. operator +(uint2x3, uint2x3) Returns the result of a componentwise addition operation on two uint2x3 matrices. public static uint2x3 operator +(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise addition. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise addition. 返回 uint2x3 uint2x3 result of the componentwise addition. operator &(uint, uint2x3) Returns the result of a componentwise bitwise and operation on a uint value and a uint2x3 matrix. public static uint2x3 operator &(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise bitwise and. 返回 uint2x3 uint2x3 result of the componentwise bitwise and. operator &(uint2x3, uint) Returns the result of a componentwise bitwise and operation on a uint2x3 matrix and a uint value. public static uint2x3 operator &(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint2x3 uint2x3 result of the componentwise bitwise and. operator &(uint2x3, uint2x3) Returns the result of a componentwise bitwise and operation on two uint2x3 matrices. public static uint2x3 operator &(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise bitwise and. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise bitwise and. 返回 uint2x3 uint2x3 result of the componentwise bitwise and. operator |(uint, uint2x3) Returns the result of a componentwise bitwise or operation on a uint value and a uint2x3 matrix. public static uint2x3 operator |(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise bitwise or. 返回 uint2x3 uint2x3 result of the componentwise bitwise or. operator |(uint2x3, uint) Returns the result of a componentwise bitwise or operation on a uint2x3 matrix and a uint value. public static uint2x3 operator |(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint2x3 uint2x3 result of the componentwise bitwise or. operator |(uint2x3, uint2x3) Returns the result of a componentwise bitwise or operation on two uint2x3 matrices. public static uint2x3 operator |(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise bitwise or. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise bitwise or. 返回 uint2x3 uint2x3 result of the componentwise bitwise or. operator --(uint2x3) Returns the result of a componentwise decrement operation on a uint2x3 matrix. public static uint2x3 operator --(uint2x3 val) 参数 val uint2x3 Value to use when computing the componentwise decrement. 返回 uint2x3 uint2x3 result of the componentwise decrement. operator /(uint, uint2x3) Returns the result of a componentwise division operation on a uint value and a uint2x3 matrix. public static uint2x3 operator /(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise division. 返回 uint2x3 uint2x3 result of the componentwise division. operator /(uint2x3, uint) Returns the result of a componentwise division operation on a uint2x3 matrix and a uint value. public static uint2x3 operator /(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint2x3 uint2x3 result of the componentwise division. operator /(uint2x3, uint2x3) Returns the result of a componentwise division operation on two uint2x3 matrices. public static uint2x3 operator /(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise division. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise division. 返回 uint2x3 uint2x3 result of the componentwise division. operator ==(uint, uint2x3) Returns the result of a componentwise equality operation on a uint value and a uint2x3 matrix. public static bool2x3 operator ==(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(uint2x3, uint) Returns the result of a componentwise equality operation on a uint2x3 matrix and a uint value. public static bool2x3 operator ==(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ==(uint2x3, uint2x3) Returns the result of a componentwise equality operation on two uint2x3 matrices. public static bool2x3 operator ==(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise equality. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise equality. 返回 bool2x3 bool2x3 result of the componentwise equality. operator ^(uint, uint2x3) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint2x3 matrix. public static uint2x3 operator ^(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise bitwise exclusive or. 返回 uint2x3 uint2x3 result of the componentwise bitwise exclusive or. operator ^(uint2x3, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint2x3 matrix and a uint value. public static uint2x3 operator ^(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint2x3 uint2x3 result of the componentwise bitwise exclusive or. operator ^(uint2x3, uint2x3) Returns the result of a componentwise bitwise exclusive or operation on two uint2x3 matrices. public static uint2x3 operator ^(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise bitwise exclusive or. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise bitwise exclusive or. 返回 uint2x3 uint2x3 result of the componentwise bitwise exclusive or. explicit operator uint2x3(bool) Explicitly converts a single bool value to a uint2x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x3(bool v) 参数 v bool bool to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(double) Explicitly converts a single double value to a uint2x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x3(double v) 参数 v double double to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(int) Explicitly converts a single int value to a uint2x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x3(int v) 参数 v int int to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(float) Explicitly converts a single float value to a uint2x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x3(float v) 参数 v float float to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(bool2x3) Explicitly converts a bool2x3 matrix to a uint2x3 matrix by componentwise conversion. public static explicit operator uint2x3(bool2x3 v) 参数 v bool2x3 bool2x3 to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(double2x3) Explicitly converts a double2x3 matrix to a uint2x3 matrix by componentwise conversion. public static explicit operator uint2x3(double2x3 v) 参数 v double2x3 double2x3 to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(float2x3) Explicitly converts a float2x3 matrix to a uint2x3 matrix by componentwise conversion. public static explicit operator uint2x3(float2x3 v) 参数 v float2x3 float2x3 to convert to uint2x3 返回 uint2x3 Converted value. explicit operator uint2x3(int2x3) Explicitly converts a int2x3 matrix to a uint2x3 matrix by componentwise conversion. public static explicit operator uint2x3(int2x3 v) 参数 v int2x3 int2x3 to convert to uint2x3 返回 uint2x3 Converted value. operator >(uint, uint2x3) Returns the result of a componentwise greater than operation on a uint value and a uint2x3 matrix. public static bool2x3 operator >(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(uint2x3, uint) Returns the result of a componentwise greater than operation on a uint2x3 matrix and a uint value. public static bool2x3 operator >(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >(uint2x3, uint2x3) Returns the result of a componentwise greater than operation on two uint2x3 matrices. public static bool2x3 operator >(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise greater than. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise greater than. 返回 bool2x3 bool2x3 result of the componentwise greater than. operator >=(uint, uint2x3) Returns the result of a componentwise greater or equal operation on a uint value and a uint2x3 matrix. public static bool2x3 operator >=(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(uint2x3, uint) Returns the result of a componentwise greater or equal operation on a uint2x3 matrix and a uint value. public static bool2x3 operator >=(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. operator >=(uint2x3, uint2x3) Returns the result of a componentwise greater or equal operation on two uint2x3 matrices. public static bool2x3 operator >=(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise greater or equal. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise greater or equal. 返回 bool2x3 bool2x3 result of the componentwise greater or equal. implicit operator uint2x3(uint) Implicitly converts a single uint value to a uint2x3 matrix by assigning it to every component. public static implicit operator uint2x3(uint v) 参数 v uint uint to convert to uint2x3 返回 uint2x3 Converted value. operator ++(uint2x3) Returns the result of a componentwise increment operation on a uint2x3 matrix. public static uint2x3 operator ++(uint2x3 val) 参数 val uint2x3 Value to use when computing the componentwise increment. 返回 uint2x3 uint2x3 result of the componentwise increment. operator !=(uint, uint2x3) Returns the result of a componentwise not equal operation on a uint value and a uint2x3 matrix. public static bool2x3 operator !=(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(uint2x3, uint) Returns the result of a componentwise not equal operation on a uint2x3 matrix and a uint value. public static bool2x3 operator !=(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator !=(uint2x3, uint2x3) Returns the result of a componentwise not equal operation on two uint2x3 matrices. public static bool2x3 operator !=(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise not equal. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise not equal. 返回 bool2x3 bool2x3 result of the componentwise not equal. operator <<(uint2x3, int) Returns the result of a componentwise left shift operation on a uint2x3 matrix by a number of bits specified by a single int. public static uint2x3 operator <<(uint2x3 x, int n) 参数 x uint2x3 The matrix to left shift. n int The number of bits to left shift. 返回 uint2x3 The result of the componentwise left shift. operator <(uint, uint2x3) Returns the result of a componentwise less than operation on a uint value and a uint2x3 matrix. public static bool2x3 operator <(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(uint2x3, uint) Returns the result of a componentwise less than operation on a uint2x3 matrix and a uint value. public static bool2x3 operator <(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <(uint2x3, uint2x3) Returns the result of a componentwise less than operation on two uint2x3 matrices. public static bool2x3 operator <(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise less than. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise less than. 返回 bool2x3 bool2x3 result of the componentwise less than. operator <=(uint, uint2x3) Returns the result of a componentwise less or equal operation on a uint value and a uint2x3 matrix. public static bool2x3 operator <=(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(uint2x3, uint) Returns the result of a componentwise less or equal operation on a uint2x3 matrix and a uint value. public static bool2x3 operator <=(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator <=(uint2x3, uint2x3) Returns the result of a componentwise less or equal operation on two uint2x3 matrices. public static bool2x3 operator <=(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise less or equal. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise less or equal. 返回 bool2x3 bool2x3 result of the componentwise less or equal. operator %(uint, uint2x3) Returns the result of a componentwise modulus operation on a uint value and a uint2x3 matrix. public static uint2x3 operator %(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise modulus. 返回 uint2x3 uint2x3 result of the componentwise modulus. operator %(uint2x3, uint) Returns the result of a componentwise modulus operation on a uint2x3 matrix and a uint value. public static uint2x3 operator %(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint2x3 uint2x3 result of the componentwise modulus. operator %(uint2x3, uint2x3) Returns the result of a componentwise modulus operation on two uint2x3 matrices. public static uint2x3 operator %(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise modulus. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise modulus. 返回 uint2x3 uint2x3 result of the componentwise modulus. operator *(uint, uint2x3) Returns the result of a componentwise multiplication operation on a uint value and a uint2x3 matrix. public static uint2x3 operator *(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise multiplication. 返回 uint2x3 uint2x3 result of the componentwise multiplication. operator *(uint2x3, uint) Returns the result of a componentwise multiplication operation on a uint2x3 matrix and a uint value. public static uint2x3 operator *(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint2x3 uint2x3 result of the componentwise multiplication. operator *(uint2x3, uint2x3) Returns the result of a componentwise multiplication operation on two uint2x3 matrices. public static uint2x3 operator *(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise multiplication. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise multiplication. 返回 uint2x3 uint2x3 result of the componentwise multiplication. operator ~(uint2x3) Returns the result of a componentwise bitwise not operation on a uint2x3 matrix. public static uint2x3 operator ~(uint2x3 val) 参数 val uint2x3 Value to use when computing the componentwise bitwise not. 返回 uint2x3 uint2x3 result of the componentwise bitwise not. operator >>(uint2x3, int) Returns the result of a componentwise right shift operation on a uint2x3 matrix by a number of bits specified by a single int. public static uint2x3 operator >>(uint2x3 x, int n) 参数 x uint2x3 The matrix to right shift. n int The number of bits to right shift. 返回 uint2x3 The result of the componentwise right shift. operator -(uint, uint2x3) Returns the result of a componentwise subtraction operation on a uint value and a uint2x3 matrix. public static uint2x3 operator -(uint lhs, uint2x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise subtraction. 返回 uint2x3 uint2x3 result of the componentwise subtraction. operator -(uint2x3, uint) Returns the result of a componentwise subtraction operation on a uint2x3 matrix and a uint value. public static uint2x3 operator -(uint2x3 lhs, uint rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint2x3 uint2x3 result of the componentwise subtraction. operator -(uint2x3, uint2x3) Returns the result of a componentwise subtraction operation on two uint2x3 matrices. public static uint2x3 operator -(uint2x3 lhs, uint2x3 rhs) 参数 lhs uint2x3 Left hand side uint2x3 to use to compute componentwise subtraction. rhs uint2x3 Right hand side uint2x3 to use to compute componentwise subtraction. 返回 uint2x3 uint2x3 result of the componentwise subtraction. operator -(uint2x3) Returns the result of a componentwise unary minus operation on a uint2x3 matrix. public static uint2x3 operator -(uint2x3 val) 参数 val uint2x3 Value to use when computing the componentwise unary minus. 返回 uint2x3 uint2x3 result of the componentwise unary minus. operator +(uint2x3) Returns the result of a componentwise unary plus operation on a uint2x3 matrix. public static uint2x3 operator +(uint2x3 val) 参数 val uint2x3 Value to use when computing the componentwise unary plus. 返回 uint2x3 uint2x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint2x4.html": {
    "href": "reference/Unity.Mathematics.uint2x4.html",
    "title": "uint2x4 结构 | Fantasy.Net API Reference",
    "keywords": "uint2x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 2x4 matrix of uints. public struct uint2x4 : IEquatable<uint2x4>, IFormattable 实现 IEquatable<uint2x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint2x4(bool) Constructs a uint2x4 matrix from a single bool value by converting it to uint and assigning it to every component. public uint2x4(bool v) 参数 v bool bool to convert to uint2x4 uint2x4(double) Constructs a uint2x4 matrix from a single double value by converting it to uint and assigning it to every component. public uint2x4(double v) 参数 v double double to convert to uint2x4 uint2x4(int) Constructs a uint2x4 matrix from a single int value by converting it to uint and assigning it to every component. public uint2x4(int v) 参数 v int int to convert to uint2x4 uint2x4(float) Constructs a uint2x4 matrix from a single float value by converting it to uint and assigning it to every component. public uint2x4(float v) 参数 v float float to convert to uint2x4 uint2x4(uint) Constructs a uint2x4 matrix from a single uint value by assigning it to every component. public uint2x4(uint v) 参数 v uint uint to convert to uint2x4 uint2x4(uint, uint, uint, uint, uint, uint, uint, uint) Constructs a uint2x4 matrix from 8 uint values given in row-major order. public uint2x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m03 uint The matrix at row 0, column 3 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m13 uint The matrix at row 1, column 3 will be set to this value. uint2x4(bool2x4) Constructs a uint2x4 matrix from a bool2x4 matrix by componentwise conversion. public uint2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to uint2x4 uint2x4(double2x4) Constructs a uint2x4 matrix from a double2x4 matrix by componentwise conversion. public uint2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to uint2x4 uint2x4(float2x4) Constructs a uint2x4 matrix from a float2x4 matrix by componentwise conversion. public uint2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to uint2x4 uint2x4(int2x4) Constructs a uint2x4 matrix from a int2x4 matrix by componentwise conversion. public uint2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to uint2x4 uint2x4(uint2, uint2, uint2, uint2) Constructs a uint2x4 matrix from four uint2 vectors. public uint2x4(uint2 c0, uint2 c1, uint2 c2, uint2 c3) 参数 c0 uint2 The matrix column c0 will be set to this value. c1 uint2 The matrix column c1 will be set to this value. c2 uint2 The matrix column c2 will be set to this value. c3 uint2 The matrix column c3 will be set to this value. 字段 c0 Column 0 of the matrix. public uint2 c0 字段值 uint2 c1 Column 1 of the matrix. public uint2 c1 字段值 uint2 c2 Column 2 of the matrix. public uint2 c2 字段值 uint2 c3 Column 3 of the matrix. public uint2 c3 字段值 uint2 zero uint2x4 zero value. public static readonly uint2x4 zero 字段值 uint2x4 属性 this[int] Returns the uint2 element at a specified index. public ref uint2 this[int index] { get; } 参数 index int 属性值 uint2 方法 Equals(object) Returns true if the uint2x4 is equal to a given uint2x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint2x4) Returns true if the uint2x4 is equal to a given uint2x4, false otherwise. public bool Equals(uint2x4 rhs) 参数 rhs uint2x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint2x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint2x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint2x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint2x4) Returns the result of a componentwise addition operation on a uint value and a uint2x4 matrix. public static uint2x4 operator +(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise addition. 返回 uint2x4 uint2x4 result of the componentwise addition. operator +(uint2x4, uint) Returns the result of a componentwise addition operation on a uint2x4 matrix and a uint value. public static uint2x4 operator +(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint2x4 uint2x4 result of the componentwise addition. operator +(uint2x4, uint2x4) Returns the result of a componentwise addition operation on two uint2x4 matrices. public static uint2x4 operator +(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise addition. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise addition. 返回 uint2x4 uint2x4 result of the componentwise addition. operator &(uint, uint2x4) Returns the result of a componentwise bitwise and operation on a uint value and a uint2x4 matrix. public static uint2x4 operator &(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise bitwise and. 返回 uint2x4 uint2x4 result of the componentwise bitwise and. operator &(uint2x4, uint) Returns the result of a componentwise bitwise and operation on a uint2x4 matrix and a uint value. public static uint2x4 operator &(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint2x4 uint2x4 result of the componentwise bitwise and. operator &(uint2x4, uint2x4) Returns the result of a componentwise bitwise and operation on two uint2x4 matrices. public static uint2x4 operator &(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise bitwise and. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise bitwise and. 返回 uint2x4 uint2x4 result of the componentwise bitwise and. operator |(uint, uint2x4) Returns the result of a componentwise bitwise or operation on a uint value and a uint2x4 matrix. public static uint2x4 operator |(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise bitwise or. 返回 uint2x4 uint2x4 result of the componentwise bitwise or. operator |(uint2x4, uint) Returns the result of a componentwise bitwise or operation on a uint2x4 matrix and a uint value. public static uint2x4 operator |(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint2x4 uint2x4 result of the componentwise bitwise or. operator |(uint2x4, uint2x4) Returns the result of a componentwise bitwise or operation on two uint2x4 matrices. public static uint2x4 operator |(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise bitwise or. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise bitwise or. 返回 uint2x4 uint2x4 result of the componentwise bitwise or. operator --(uint2x4) Returns the result of a componentwise decrement operation on a uint2x4 matrix. public static uint2x4 operator --(uint2x4 val) 参数 val uint2x4 Value to use when computing the componentwise decrement. 返回 uint2x4 uint2x4 result of the componentwise decrement. operator /(uint, uint2x4) Returns the result of a componentwise division operation on a uint value and a uint2x4 matrix. public static uint2x4 operator /(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise division. 返回 uint2x4 uint2x4 result of the componentwise division. operator /(uint2x4, uint) Returns the result of a componentwise division operation on a uint2x4 matrix and a uint value. public static uint2x4 operator /(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint2x4 uint2x4 result of the componentwise division. operator /(uint2x4, uint2x4) Returns the result of a componentwise division operation on two uint2x4 matrices. public static uint2x4 operator /(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise division. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise division. 返回 uint2x4 uint2x4 result of the componentwise division. operator ==(uint, uint2x4) Returns the result of a componentwise equality operation on a uint value and a uint2x4 matrix. public static bool2x4 operator ==(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(uint2x4, uint) Returns the result of a componentwise equality operation on a uint2x4 matrix and a uint value. public static bool2x4 operator ==(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ==(uint2x4, uint2x4) Returns the result of a componentwise equality operation on two uint2x4 matrices. public static bool2x4 operator ==(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise equality. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise equality. 返回 bool2x4 bool2x4 result of the componentwise equality. operator ^(uint, uint2x4) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint2x4 matrix. public static uint2x4 operator ^(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise bitwise exclusive or. 返回 uint2x4 uint2x4 result of the componentwise bitwise exclusive or. operator ^(uint2x4, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint2x4 matrix and a uint value. public static uint2x4 operator ^(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint2x4 uint2x4 result of the componentwise bitwise exclusive or. operator ^(uint2x4, uint2x4) Returns the result of a componentwise bitwise exclusive or operation on two uint2x4 matrices. public static uint2x4 operator ^(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise bitwise exclusive or. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise bitwise exclusive or. 返回 uint2x4 uint2x4 result of the componentwise bitwise exclusive or. explicit operator uint2x4(bool) Explicitly converts a single bool value to a uint2x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x4(bool v) 参数 v bool bool to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(double) Explicitly converts a single double value to a uint2x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x4(double v) 参数 v double double to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(int) Explicitly converts a single int value to a uint2x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x4(int v) 参数 v int int to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(float) Explicitly converts a single float value to a uint2x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint2x4(float v) 参数 v float float to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(bool2x4) Explicitly converts a bool2x4 matrix to a uint2x4 matrix by componentwise conversion. public static explicit operator uint2x4(bool2x4 v) 参数 v bool2x4 bool2x4 to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(double2x4) Explicitly converts a double2x4 matrix to a uint2x4 matrix by componentwise conversion. public static explicit operator uint2x4(double2x4 v) 参数 v double2x4 double2x4 to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(float2x4) Explicitly converts a float2x4 matrix to a uint2x4 matrix by componentwise conversion. public static explicit operator uint2x4(float2x4 v) 参数 v float2x4 float2x4 to convert to uint2x4 返回 uint2x4 Converted value. explicit operator uint2x4(int2x4) Explicitly converts a int2x4 matrix to a uint2x4 matrix by componentwise conversion. public static explicit operator uint2x4(int2x4 v) 参数 v int2x4 int2x4 to convert to uint2x4 返回 uint2x4 Converted value. operator >(uint, uint2x4) Returns the result of a componentwise greater than operation on a uint value and a uint2x4 matrix. public static bool2x4 operator >(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(uint2x4, uint) Returns the result of a componentwise greater than operation on a uint2x4 matrix and a uint value. public static bool2x4 operator >(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >(uint2x4, uint2x4) Returns the result of a componentwise greater than operation on two uint2x4 matrices. public static bool2x4 operator >(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise greater than. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise greater than. 返回 bool2x4 bool2x4 result of the componentwise greater than. operator >=(uint, uint2x4) Returns the result of a componentwise greater or equal operation on a uint value and a uint2x4 matrix. public static bool2x4 operator >=(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(uint2x4, uint) Returns the result of a componentwise greater or equal operation on a uint2x4 matrix and a uint value. public static bool2x4 operator >=(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. operator >=(uint2x4, uint2x4) Returns the result of a componentwise greater or equal operation on two uint2x4 matrices. public static bool2x4 operator >=(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise greater or equal. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise greater or equal. 返回 bool2x4 bool2x4 result of the componentwise greater or equal. implicit operator uint2x4(uint) Implicitly converts a single uint value to a uint2x4 matrix by assigning it to every component. public static implicit operator uint2x4(uint v) 参数 v uint uint to convert to uint2x4 返回 uint2x4 Converted value. operator ++(uint2x4) Returns the result of a componentwise increment operation on a uint2x4 matrix. public static uint2x4 operator ++(uint2x4 val) 参数 val uint2x4 Value to use when computing the componentwise increment. 返回 uint2x4 uint2x4 result of the componentwise increment. operator !=(uint, uint2x4) Returns the result of a componentwise not equal operation on a uint value and a uint2x4 matrix. public static bool2x4 operator !=(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(uint2x4, uint) Returns the result of a componentwise not equal operation on a uint2x4 matrix and a uint value. public static bool2x4 operator !=(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator !=(uint2x4, uint2x4) Returns the result of a componentwise not equal operation on two uint2x4 matrices. public static bool2x4 operator !=(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise not equal. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise not equal. 返回 bool2x4 bool2x4 result of the componentwise not equal. operator <<(uint2x4, int) Returns the result of a componentwise left shift operation on a uint2x4 matrix by a number of bits specified by a single int. public static uint2x4 operator <<(uint2x4 x, int n) 参数 x uint2x4 The matrix to left shift. n int The number of bits to left shift. 返回 uint2x4 The result of the componentwise left shift. operator <(uint, uint2x4) Returns the result of a componentwise less than operation on a uint value and a uint2x4 matrix. public static bool2x4 operator <(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(uint2x4, uint) Returns the result of a componentwise less than operation on a uint2x4 matrix and a uint value. public static bool2x4 operator <(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <(uint2x4, uint2x4) Returns the result of a componentwise less than operation on two uint2x4 matrices. public static bool2x4 operator <(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise less than. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise less than. 返回 bool2x4 bool2x4 result of the componentwise less than. operator <=(uint, uint2x4) Returns the result of a componentwise less or equal operation on a uint value and a uint2x4 matrix. public static bool2x4 operator <=(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(uint2x4, uint) Returns the result of a componentwise less or equal operation on a uint2x4 matrix and a uint value. public static bool2x4 operator <=(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator <=(uint2x4, uint2x4) Returns the result of a componentwise less or equal operation on two uint2x4 matrices. public static bool2x4 operator <=(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise less or equal. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise less or equal. 返回 bool2x4 bool2x4 result of the componentwise less or equal. operator %(uint, uint2x4) Returns the result of a componentwise modulus operation on a uint value and a uint2x4 matrix. public static uint2x4 operator %(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise modulus. 返回 uint2x4 uint2x4 result of the componentwise modulus. operator %(uint2x4, uint) Returns the result of a componentwise modulus operation on a uint2x4 matrix and a uint value. public static uint2x4 operator %(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint2x4 uint2x4 result of the componentwise modulus. operator %(uint2x4, uint2x4) Returns the result of a componentwise modulus operation on two uint2x4 matrices. public static uint2x4 operator %(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise modulus. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise modulus. 返回 uint2x4 uint2x4 result of the componentwise modulus. operator *(uint, uint2x4) Returns the result of a componentwise multiplication operation on a uint value and a uint2x4 matrix. public static uint2x4 operator *(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise multiplication. 返回 uint2x4 uint2x4 result of the componentwise multiplication. operator *(uint2x4, uint) Returns the result of a componentwise multiplication operation on a uint2x4 matrix and a uint value. public static uint2x4 operator *(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint2x4 uint2x4 result of the componentwise multiplication. operator *(uint2x4, uint2x4) Returns the result of a componentwise multiplication operation on two uint2x4 matrices. public static uint2x4 operator *(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise multiplication. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise multiplication. 返回 uint2x4 uint2x4 result of the componentwise multiplication. operator ~(uint2x4) Returns the result of a componentwise bitwise not operation on a uint2x4 matrix. public static uint2x4 operator ~(uint2x4 val) 参数 val uint2x4 Value to use when computing the componentwise bitwise not. 返回 uint2x4 uint2x4 result of the componentwise bitwise not. operator >>(uint2x4, int) Returns the result of a componentwise right shift operation on a uint2x4 matrix by a number of bits specified by a single int. public static uint2x4 operator >>(uint2x4 x, int n) 参数 x uint2x4 The matrix to right shift. n int The number of bits to right shift. 返回 uint2x4 The result of the componentwise right shift. operator -(uint, uint2x4) Returns the result of a componentwise subtraction operation on a uint value and a uint2x4 matrix. public static uint2x4 operator -(uint lhs, uint2x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise subtraction. 返回 uint2x4 uint2x4 result of the componentwise subtraction. operator -(uint2x4, uint) Returns the result of a componentwise subtraction operation on a uint2x4 matrix and a uint value. public static uint2x4 operator -(uint2x4 lhs, uint rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint2x4 uint2x4 result of the componentwise subtraction. operator -(uint2x4, uint2x4) Returns the result of a componentwise subtraction operation on two uint2x4 matrices. public static uint2x4 operator -(uint2x4 lhs, uint2x4 rhs) 参数 lhs uint2x4 Left hand side uint2x4 to use to compute componentwise subtraction. rhs uint2x4 Right hand side uint2x4 to use to compute componentwise subtraction. 返回 uint2x4 uint2x4 result of the componentwise subtraction. operator -(uint2x4) Returns the result of a componentwise unary minus operation on a uint2x4 matrix. public static uint2x4 operator -(uint2x4 val) 参数 val uint2x4 Value to use when computing the componentwise unary minus. 返回 uint2x4 uint2x4 result of the componentwise unary minus. operator +(uint2x4) Returns the result of a componentwise unary plus operation on a uint2x4 matrix. public static uint2x4 operator +(uint2x4 val) 参数 val uint2x4 Value to use when computing the componentwise unary plus. 返回 uint2x4 uint2x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint3.html": {
    "href": "reference/Unity.Mathematics.uint3.html",
    "title": "uint3 结构 | Fantasy.Net API Reference",
    "keywords": "uint3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3 component vector of uints. public struct uint3 : IEquatable<uint3>, IFormattable 实现 IEquatable<uint3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint3(bool) Constructs a uint3 vector from a single bool value by converting it to uint and assigning it to every component. public uint3(bool v) 参数 v bool bool to convert to uint3 uint3(double) Constructs a uint3 vector from a single double value by converting it to uint and assigning it to every component. public uint3(double v) 参数 v double double to convert to uint3 uint3(int) Constructs a uint3 vector from a single int value by converting it to uint and assigning it to every component. public uint3(int v) 参数 v int int to convert to uint3 uint3(float) Constructs a uint3 vector from a single float value by converting it to uint and assigning it to every component. public uint3(float v) 参数 v float float to convert to uint3 uint3(uint) Constructs a uint3 vector from a single uint value by assigning it to every component. public uint3(uint v) 参数 v uint uint to convert to uint3 uint3(uint, uint, uint) Constructs a uint3 vector from three uint values. public uint3(uint x, uint y, uint z) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. z uint The constructed vector's z component will be set to this value. uint3(uint, uint2) Constructs a uint3 vector from a uint value and a uint2 vector. public uint3(uint x, uint2 yz) 参数 x uint The constructed vector's x component will be set to this value. yz uint2 The constructed vector's yz components will be set to this value. uint3(bool3) Constructs a uint3 vector from a bool3 vector by componentwise conversion. public uint3(bool3 v) 参数 v bool3 bool3 to convert to uint3 uint3(double3) Constructs a uint3 vector from a double3 vector by componentwise conversion. public uint3(double3 v) 参数 v double3 double3 to convert to uint3 uint3(float3) Constructs a uint3 vector from a float3 vector by componentwise conversion. public uint3(float3 v) 参数 v float3 float3 to convert to uint3 uint3(int3) Constructs a uint3 vector from a int3 vector by componentwise conversion. public uint3(int3 v) 参数 v int3 int3 to convert to uint3 uint3(uint2, uint) Constructs a uint3 vector from a uint2 vector and a uint value. public uint3(uint2 xy, uint z) 参数 xy uint2 The constructed vector's xy components will be set to this value. z uint The constructed vector's z component will be set to this value. uint3(uint3) Constructs a uint3 vector from a uint3 vector. public uint3(uint3 xyz) 参数 xyz uint3 The constructed vector's xyz components will be set to this value. 字段 x x component of the vector. public uint x 字段值 uint y y component of the vector. public uint y 字段值 uint z z component of the vector. public uint z 字段值 uint zero uint3 zero value. public static readonly uint3 zero 字段值 uint3 属性 this[int] Returns the uint element at a specified index. public uint this[int index] { get; set; } 参数 index int 属性值 uint 方法 Equals(object) Returns true if the uint3 is equal to a given uint3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint3) Returns true if the uint3 is equal to a given uint3, false otherwise. public bool Equals(uint3 rhs) 参数 rhs uint3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint3) Returns the result of a componentwise addition operation on a uint value and a uint3 vector. public static uint3 operator +(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint3 Right hand side uint3 to use to compute componentwise addition. 返回 uint3 uint3 result of the componentwise addition. operator +(uint3, uint) Returns the result of a componentwise addition operation on a uint3 vector and a uint value. public static uint3 operator +(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint3 uint3 result of the componentwise addition. operator +(uint3, uint3) Returns the result of a componentwise addition operation on two uint3 vectors. public static uint3 operator +(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise addition. rhs uint3 Right hand side uint3 to use to compute componentwise addition. 返回 uint3 uint3 result of the componentwise addition. operator &(uint, uint3) Returns the result of a componentwise bitwise and operation on a uint value and a uint3 vector. public static uint3 operator &(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint3 Right hand side uint3 to use to compute componentwise bitwise and. 返回 uint3 uint3 result of the componentwise bitwise and. operator &(uint3, uint) Returns the result of a componentwise bitwise and operation on a uint3 vector and a uint value. public static uint3 operator &(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint3 uint3 result of the componentwise bitwise and. operator &(uint3, uint3) Returns the result of a componentwise bitwise and operation on two uint3 vectors. public static uint3 operator &(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise bitwise and. rhs uint3 Right hand side uint3 to use to compute componentwise bitwise and. 返回 uint3 uint3 result of the componentwise bitwise and. operator |(uint, uint3) Returns the result of a componentwise bitwise or operation on a uint value and a uint3 vector. public static uint3 operator |(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint3 Right hand side uint3 to use to compute componentwise bitwise or. 返回 uint3 uint3 result of the componentwise bitwise or. operator |(uint3, uint) Returns the result of a componentwise bitwise or operation on a uint3 vector and a uint value. public static uint3 operator |(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint3 uint3 result of the componentwise bitwise or. operator |(uint3, uint3) Returns the result of a componentwise bitwise or operation on two uint3 vectors. public static uint3 operator |(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise bitwise or. rhs uint3 Right hand side uint3 to use to compute componentwise bitwise or. 返回 uint3 uint3 result of the componentwise bitwise or. operator --(uint3) Returns the result of a componentwise decrement operation on a uint3 vector. public static uint3 operator --(uint3 val) 参数 val uint3 Value to use when computing the componentwise decrement. 返回 uint3 uint3 result of the componentwise decrement. operator /(uint, uint3) Returns the result of a componentwise division operation on a uint value and a uint3 vector. public static uint3 operator /(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint3 Right hand side uint3 to use to compute componentwise division. 返回 uint3 uint3 result of the componentwise division. operator /(uint3, uint) Returns the result of a componentwise division operation on a uint3 vector and a uint value. public static uint3 operator /(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint3 uint3 result of the componentwise division. operator /(uint3, uint3) Returns the result of a componentwise division operation on two uint3 vectors. public static uint3 operator /(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise division. rhs uint3 Right hand side uint3 to use to compute componentwise division. 返回 uint3 uint3 result of the componentwise division. operator ==(uint, uint3) Returns the result of a componentwise equality operation on a uint value and a uint3 vector. public static bool3 operator ==(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint3 Right hand side uint3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(uint3, uint) Returns the result of a componentwise equality operation on a uint3 vector and a uint value. public static bool3 operator ==(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ==(uint3, uint3) Returns the result of a componentwise equality operation on two uint3 vectors. public static bool3 operator ==(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise equality. rhs uint3 Right hand side uint3 to use to compute componentwise equality. 返回 bool3 bool3 result of the componentwise equality. operator ^(uint, uint3) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint3 vector. public static uint3 operator ^(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint3 Right hand side uint3 to use to compute componentwise bitwise exclusive or. 返回 uint3 uint3 result of the componentwise bitwise exclusive or. operator ^(uint3, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint3 vector and a uint value. public static uint3 operator ^(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint3 uint3 result of the componentwise bitwise exclusive or. operator ^(uint3, uint3) Returns the result of a componentwise bitwise exclusive or operation on two uint3 vectors. public static uint3 operator ^(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise bitwise exclusive or. rhs uint3 Right hand side uint3 to use to compute componentwise bitwise exclusive or. 返回 uint3 uint3 result of the componentwise bitwise exclusive or. explicit operator uint3(bool) Explicitly converts a single bool value to a uint3 vector by converting it to uint and assigning it to every component. public static explicit operator uint3(bool v) 参数 v bool bool to convert to uint3 返回 uint3 Converted value. explicit operator uint3(double) Explicitly converts a single double value to a uint3 vector by converting it to uint and assigning it to every component. public static explicit operator uint3(double v) 参数 v double double to convert to uint3 返回 uint3 Converted value. explicit operator uint3(int) Explicitly converts a single int value to a uint3 vector by converting it to uint and assigning it to every component. public static explicit operator uint3(int v) 参数 v int int to convert to uint3 返回 uint3 Converted value. explicit operator uint3(float) Explicitly converts a single float value to a uint3 vector by converting it to uint and assigning it to every component. public static explicit operator uint3(float v) 参数 v float float to convert to uint3 返回 uint3 Converted value. explicit operator uint3(bool3) Explicitly converts a bool3 vector to a uint3 vector by componentwise conversion. public static explicit operator uint3(bool3 v) 参数 v bool3 bool3 to convert to uint3 返回 uint3 Converted value. explicit operator uint3(double3) Explicitly converts a double3 vector to a uint3 vector by componentwise conversion. public static explicit operator uint3(double3 v) 参数 v double3 double3 to convert to uint3 返回 uint3 Converted value. explicit operator uint3(float3) Explicitly converts a float3 vector to a uint3 vector by componentwise conversion. public static explicit operator uint3(float3 v) 参数 v float3 float3 to convert to uint3 返回 uint3 Converted value. explicit operator uint3(int3) Explicitly converts a int3 vector to a uint3 vector by componentwise conversion. public static explicit operator uint3(int3 v) 参数 v int3 int3 to convert to uint3 返回 uint3 Converted value. operator >(uint, uint3) Returns the result of a componentwise greater than operation on a uint value and a uint3 vector. public static bool3 operator >(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint3 Right hand side uint3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(uint3, uint) Returns the result of a componentwise greater than operation on a uint3 vector and a uint value. public static bool3 operator >(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >(uint3, uint3) Returns the result of a componentwise greater than operation on two uint3 vectors. public static bool3 operator >(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise greater than. rhs uint3 Right hand side uint3 to use to compute componentwise greater than. 返回 bool3 bool3 result of the componentwise greater than. operator >=(uint, uint3) Returns the result of a componentwise greater or equal operation on a uint value and a uint3 vector. public static bool3 operator >=(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint3 Right hand side uint3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(uint3, uint) Returns the result of a componentwise greater or equal operation on a uint3 vector and a uint value. public static bool3 operator >=(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. operator >=(uint3, uint3) Returns the result of a componentwise greater or equal operation on two uint3 vectors. public static bool3 operator >=(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise greater or equal. rhs uint3 Right hand side uint3 to use to compute componentwise greater or equal. 返回 bool3 bool3 result of the componentwise greater or equal. implicit operator uint3(uint) Implicitly converts a single uint value to a uint3 vector by assigning it to every component. public static implicit operator uint3(uint v) 参数 v uint uint to convert to uint3 返回 uint3 Converted value. operator ++(uint3) Returns the result of a componentwise increment operation on a uint3 vector. public static uint3 operator ++(uint3 val) 参数 val uint3 Value to use when computing the componentwise increment. 返回 uint3 uint3 result of the componentwise increment. operator !=(uint, uint3) Returns the result of a componentwise not equal operation on a uint value and a uint3 vector. public static bool3 operator !=(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint3 Right hand side uint3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(uint3, uint) Returns the result of a componentwise not equal operation on a uint3 vector and a uint value. public static bool3 operator !=(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator !=(uint3, uint3) Returns the result of a componentwise not equal operation on two uint3 vectors. public static bool3 operator !=(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise not equal. rhs uint3 Right hand side uint3 to use to compute componentwise not equal. 返回 bool3 bool3 result of the componentwise not equal. operator <<(uint3, int) Returns the result of a componentwise left shift operation on a uint3 vector by a number of bits specified by a single int. public static uint3 operator <<(uint3 x, int n) 参数 x uint3 The vector to left shift. n int The number of bits to left shift. 返回 uint3 The result of the componentwise left shift. operator <(uint, uint3) Returns the result of a componentwise less than operation on a uint value and a uint3 vector. public static bool3 operator <(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint3 Right hand side uint3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(uint3, uint) Returns the result of a componentwise less than operation on a uint3 vector and a uint value. public static bool3 operator <(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <(uint3, uint3) Returns the result of a componentwise less than operation on two uint3 vectors. public static bool3 operator <(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise less than. rhs uint3 Right hand side uint3 to use to compute componentwise less than. 返回 bool3 bool3 result of the componentwise less than. operator <=(uint, uint3) Returns the result of a componentwise less or equal operation on a uint value and a uint3 vector. public static bool3 operator <=(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint3 Right hand side uint3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(uint3, uint) Returns the result of a componentwise less or equal operation on a uint3 vector and a uint value. public static bool3 operator <=(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator <=(uint3, uint3) Returns the result of a componentwise less or equal operation on two uint3 vectors. public static bool3 operator <=(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise less or equal. rhs uint3 Right hand side uint3 to use to compute componentwise less or equal. 返回 bool3 bool3 result of the componentwise less or equal. operator %(uint, uint3) Returns the result of a componentwise modulus operation on a uint value and a uint3 vector. public static uint3 operator %(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint3 Right hand side uint3 to use to compute componentwise modulus. 返回 uint3 uint3 result of the componentwise modulus. operator %(uint3, uint) Returns the result of a componentwise modulus operation on a uint3 vector and a uint value. public static uint3 operator %(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint3 uint3 result of the componentwise modulus. operator %(uint3, uint3) Returns the result of a componentwise modulus operation on two uint3 vectors. public static uint3 operator %(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise modulus. rhs uint3 Right hand side uint3 to use to compute componentwise modulus. 返回 uint3 uint3 result of the componentwise modulus. operator *(uint, uint3) Returns the result of a componentwise multiplication operation on a uint value and a uint3 vector. public static uint3 operator *(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint3 Right hand side uint3 to use to compute componentwise multiplication. 返回 uint3 uint3 result of the componentwise multiplication. operator *(uint3, uint) Returns the result of a componentwise multiplication operation on a uint3 vector and a uint value. public static uint3 operator *(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint3 uint3 result of the componentwise multiplication. operator *(uint3, uint3) Returns the result of a componentwise multiplication operation on two uint3 vectors. public static uint3 operator *(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise multiplication. rhs uint3 Right hand side uint3 to use to compute componentwise multiplication. 返回 uint3 uint3 result of the componentwise multiplication. operator ~(uint3) Returns the result of a componentwise bitwise not operation on a uint3 vector. public static uint3 operator ~(uint3 val) 参数 val uint3 Value to use when computing the componentwise bitwise not. 返回 uint3 uint3 result of the componentwise bitwise not. operator >>(uint3, int) Returns the result of a componentwise right shift operation on a uint3 vector by a number of bits specified by a single int. public static uint3 operator >>(uint3 x, int n) 参数 x uint3 The vector to right shift. n int The number of bits to right shift. 返回 uint3 The result of the componentwise right shift. operator -(uint, uint3) Returns the result of a componentwise subtraction operation on a uint value and a uint3 vector. public static uint3 operator -(uint lhs, uint3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint3 Right hand side uint3 to use to compute componentwise subtraction. 返回 uint3 uint3 result of the componentwise subtraction. operator -(uint3, uint) Returns the result of a componentwise subtraction operation on a uint3 vector and a uint value. public static uint3 operator -(uint3 lhs, uint rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint3 uint3 result of the componentwise subtraction. operator -(uint3, uint3) Returns the result of a componentwise subtraction operation on two uint3 vectors. public static uint3 operator -(uint3 lhs, uint3 rhs) 参数 lhs uint3 Left hand side uint3 to use to compute componentwise subtraction. rhs uint3 Right hand side uint3 to use to compute componentwise subtraction. 返回 uint3 uint3 result of the componentwise subtraction. operator -(uint3) Returns the result of a componentwise unary minus operation on a uint3 vector. public static uint3 operator -(uint3 val) 参数 val uint3 Value to use when computing the componentwise unary minus. 返回 uint3 uint3 result of the componentwise unary minus. operator +(uint3) Returns the result of a componentwise unary plus operation on a uint3 vector. public static uint3 operator +(uint3 val) 参数 val uint3 Value to use when computing the componentwise unary plus. 返回 uint3 uint3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint3x2.html": {
    "href": "reference/Unity.Mathematics.uint3x2.html",
    "title": "uint3x2 结构 | Fantasy.Net API Reference",
    "keywords": "uint3x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x2 matrix of uints. public struct uint3x2 : IEquatable<uint3x2>, IFormattable 实现 IEquatable<uint3x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint3x2(bool) Constructs a uint3x2 matrix from a single bool value by converting it to uint and assigning it to every component. public uint3x2(bool v) 参数 v bool bool to convert to uint3x2 uint3x2(double) Constructs a uint3x2 matrix from a single double value by converting it to uint and assigning it to every component. public uint3x2(double v) 参数 v double double to convert to uint3x2 uint3x2(int) Constructs a uint3x2 matrix from a single int value by converting it to uint and assigning it to every component. public uint3x2(int v) 参数 v int int to convert to uint3x2 uint3x2(float) Constructs a uint3x2 matrix from a single float value by converting it to uint and assigning it to every component. public uint3x2(float v) 参数 v float float to convert to uint3x2 uint3x2(uint) Constructs a uint3x2 matrix from a single uint value by assigning it to every component. public uint3x2(uint v) 参数 v uint uint to convert to uint3x2 uint3x2(uint, uint, uint, uint, uint, uint) Constructs a uint3x2 matrix from 6 uint values given in row-major order. public uint3x2(uint m00, uint m01, uint m10, uint m11, uint m20, uint m21) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. uint3x2(bool3x2) Constructs a uint3x2 matrix from a bool3x2 matrix by componentwise conversion. public uint3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to uint3x2 uint3x2(double3x2) Constructs a uint3x2 matrix from a double3x2 matrix by componentwise conversion. public uint3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to uint3x2 uint3x2(float3x2) Constructs a uint3x2 matrix from a float3x2 matrix by componentwise conversion. public uint3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to uint3x2 uint3x2(int3x2) Constructs a uint3x2 matrix from a int3x2 matrix by componentwise conversion. public uint3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to uint3x2 uint3x2(uint3, uint3) Constructs a uint3x2 matrix from two uint3 vectors. public uint3x2(uint3 c0, uint3 c1) 参数 c0 uint3 The matrix column c0 will be set to this value. c1 uint3 The matrix column c1 will be set to this value. 字段 c0 Column 0 of the matrix. public uint3 c0 字段值 uint3 c1 Column 1 of the matrix. public uint3 c1 字段值 uint3 zero uint3x2 zero value. public static readonly uint3x2 zero 字段值 uint3x2 属性 this[int] Returns the uint3 element at a specified index. public ref uint3 this[int index] { get; } 参数 index int 属性值 uint3 方法 Equals(object) Returns true if the uint3x2 is equal to a given uint3x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint3x2) Returns true if the uint3x2 is equal to a given uint3x2, false otherwise. public bool Equals(uint3x2 rhs) 参数 rhs uint3x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint3x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint3x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint3x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint3x2) Returns the result of a componentwise addition operation on a uint value and a uint3x2 matrix. public static uint3x2 operator +(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise addition. 返回 uint3x2 uint3x2 result of the componentwise addition. operator +(uint3x2, uint) Returns the result of a componentwise addition operation on a uint3x2 matrix and a uint value. public static uint3x2 operator +(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint3x2 uint3x2 result of the componentwise addition. operator +(uint3x2, uint3x2) Returns the result of a componentwise addition operation on two uint3x2 matrices. public static uint3x2 operator +(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise addition. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise addition. 返回 uint3x2 uint3x2 result of the componentwise addition. operator &(uint, uint3x2) Returns the result of a componentwise bitwise and operation on a uint value and a uint3x2 matrix. public static uint3x2 operator &(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise bitwise and. 返回 uint3x2 uint3x2 result of the componentwise bitwise and. operator &(uint3x2, uint) Returns the result of a componentwise bitwise and operation on a uint3x2 matrix and a uint value. public static uint3x2 operator &(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint3x2 uint3x2 result of the componentwise bitwise and. operator &(uint3x2, uint3x2) Returns the result of a componentwise bitwise and operation on two uint3x2 matrices. public static uint3x2 operator &(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise bitwise and. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise bitwise and. 返回 uint3x2 uint3x2 result of the componentwise bitwise and. operator |(uint, uint3x2) Returns the result of a componentwise bitwise or operation on a uint value and a uint3x2 matrix. public static uint3x2 operator |(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise bitwise or. 返回 uint3x2 uint3x2 result of the componentwise bitwise or. operator |(uint3x2, uint) Returns the result of a componentwise bitwise or operation on a uint3x2 matrix and a uint value. public static uint3x2 operator |(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint3x2 uint3x2 result of the componentwise bitwise or. operator |(uint3x2, uint3x2) Returns the result of a componentwise bitwise or operation on two uint3x2 matrices. public static uint3x2 operator |(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise bitwise or. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise bitwise or. 返回 uint3x2 uint3x2 result of the componentwise bitwise or. operator --(uint3x2) Returns the result of a componentwise decrement operation on a uint3x2 matrix. public static uint3x2 operator --(uint3x2 val) 参数 val uint3x2 Value to use when computing the componentwise decrement. 返回 uint3x2 uint3x2 result of the componentwise decrement. operator /(uint, uint3x2) Returns the result of a componentwise division operation on a uint value and a uint3x2 matrix. public static uint3x2 operator /(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise division. 返回 uint3x2 uint3x2 result of the componentwise division. operator /(uint3x2, uint) Returns the result of a componentwise division operation on a uint3x2 matrix and a uint value. public static uint3x2 operator /(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint3x2 uint3x2 result of the componentwise division. operator /(uint3x2, uint3x2) Returns the result of a componentwise division operation on two uint3x2 matrices. public static uint3x2 operator /(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise division. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise division. 返回 uint3x2 uint3x2 result of the componentwise division. operator ==(uint, uint3x2) Returns the result of a componentwise equality operation on a uint value and a uint3x2 matrix. public static bool3x2 operator ==(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(uint3x2, uint) Returns the result of a componentwise equality operation on a uint3x2 matrix and a uint value. public static bool3x2 operator ==(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ==(uint3x2, uint3x2) Returns the result of a componentwise equality operation on two uint3x2 matrices. public static bool3x2 operator ==(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise equality. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise equality. 返回 bool3x2 bool3x2 result of the componentwise equality. operator ^(uint, uint3x2) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint3x2 matrix. public static uint3x2 operator ^(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise bitwise exclusive or. 返回 uint3x2 uint3x2 result of the componentwise bitwise exclusive or. operator ^(uint3x2, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint3x2 matrix and a uint value. public static uint3x2 operator ^(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint3x2 uint3x2 result of the componentwise bitwise exclusive or. operator ^(uint3x2, uint3x2) Returns the result of a componentwise bitwise exclusive or operation on two uint3x2 matrices. public static uint3x2 operator ^(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise bitwise exclusive or. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise bitwise exclusive or. 返回 uint3x2 uint3x2 result of the componentwise bitwise exclusive or. explicit operator uint3x2(bool) Explicitly converts a single bool value to a uint3x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x2(bool v) 参数 v bool bool to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(double) Explicitly converts a single double value to a uint3x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x2(double v) 参数 v double double to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(int) Explicitly converts a single int value to a uint3x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x2(int v) 参数 v int int to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(float) Explicitly converts a single float value to a uint3x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x2(float v) 参数 v float float to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(bool3x2) Explicitly converts a bool3x2 matrix to a uint3x2 matrix by componentwise conversion. public static explicit operator uint3x2(bool3x2 v) 参数 v bool3x2 bool3x2 to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(double3x2) Explicitly converts a double3x2 matrix to a uint3x2 matrix by componentwise conversion. public static explicit operator uint3x2(double3x2 v) 参数 v double3x2 double3x2 to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(float3x2) Explicitly converts a float3x2 matrix to a uint3x2 matrix by componentwise conversion. public static explicit operator uint3x2(float3x2 v) 参数 v float3x2 float3x2 to convert to uint3x2 返回 uint3x2 Converted value. explicit operator uint3x2(int3x2) Explicitly converts a int3x2 matrix to a uint3x2 matrix by componentwise conversion. public static explicit operator uint3x2(int3x2 v) 参数 v int3x2 int3x2 to convert to uint3x2 返回 uint3x2 Converted value. operator >(uint, uint3x2) Returns the result of a componentwise greater than operation on a uint value and a uint3x2 matrix. public static bool3x2 operator >(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(uint3x2, uint) Returns the result of a componentwise greater than operation on a uint3x2 matrix and a uint value. public static bool3x2 operator >(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >(uint3x2, uint3x2) Returns the result of a componentwise greater than operation on two uint3x2 matrices. public static bool3x2 operator >(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise greater than. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise greater than. 返回 bool3x2 bool3x2 result of the componentwise greater than. operator >=(uint, uint3x2) Returns the result of a componentwise greater or equal operation on a uint value and a uint3x2 matrix. public static bool3x2 operator >=(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(uint3x2, uint) Returns the result of a componentwise greater or equal operation on a uint3x2 matrix and a uint value. public static bool3x2 operator >=(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. operator >=(uint3x2, uint3x2) Returns the result of a componentwise greater or equal operation on two uint3x2 matrices. public static bool3x2 operator >=(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise greater or equal. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise greater or equal. 返回 bool3x2 bool3x2 result of the componentwise greater or equal. implicit operator uint3x2(uint) Implicitly converts a single uint value to a uint3x2 matrix by assigning it to every component. public static implicit operator uint3x2(uint v) 参数 v uint uint to convert to uint3x2 返回 uint3x2 Converted value. operator ++(uint3x2) Returns the result of a componentwise increment operation on a uint3x2 matrix. public static uint3x2 operator ++(uint3x2 val) 参数 val uint3x2 Value to use when computing the componentwise increment. 返回 uint3x2 uint3x2 result of the componentwise increment. operator !=(uint, uint3x2) Returns the result of a componentwise not equal operation on a uint value and a uint3x2 matrix. public static bool3x2 operator !=(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(uint3x2, uint) Returns the result of a componentwise not equal operation on a uint3x2 matrix and a uint value. public static bool3x2 operator !=(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator !=(uint3x2, uint3x2) Returns the result of a componentwise not equal operation on two uint3x2 matrices. public static bool3x2 operator !=(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise not equal. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise not equal. 返回 bool3x2 bool3x2 result of the componentwise not equal. operator <<(uint3x2, int) Returns the result of a componentwise left shift operation on a uint3x2 matrix by a number of bits specified by a single int. public static uint3x2 operator <<(uint3x2 x, int n) 参数 x uint3x2 The matrix to left shift. n int The number of bits to left shift. 返回 uint3x2 The result of the componentwise left shift. operator <(uint, uint3x2) Returns the result of a componentwise less than operation on a uint value and a uint3x2 matrix. public static bool3x2 operator <(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(uint3x2, uint) Returns the result of a componentwise less than operation on a uint3x2 matrix and a uint value. public static bool3x2 operator <(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <(uint3x2, uint3x2) Returns the result of a componentwise less than operation on two uint3x2 matrices. public static bool3x2 operator <(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise less than. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise less than. 返回 bool3x2 bool3x2 result of the componentwise less than. operator <=(uint, uint3x2) Returns the result of a componentwise less or equal operation on a uint value and a uint3x2 matrix. public static bool3x2 operator <=(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(uint3x2, uint) Returns the result of a componentwise less or equal operation on a uint3x2 matrix and a uint value. public static bool3x2 operator <=(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator <=(uint3x2, uint3x2) Returns the result of a componentwise less or equal operation on two uint3x2 matrices. public static bool3x2 operator <=(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise less or equal. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise less or equal. 返回 bool3x2 bool3x2 result of the componentwise less or equal. operator %(uint, uint3x2) Returns the result of a componentwise modulus operation on a uint value and a uint3x2 matrix. public static uint3x2 operator %(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise modulus. 返回 uint3x2 uint3x2 result of the componentwise modulus. operator %(uint3x2, uint) Returns the result of a componentwise modulus operation on a uint3x2 matrix and a uint value. public static uint3x2 operator %(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint3x2 uint3x2 result of the componentwise modulus. operator %(uint3x2, uint3x2) Returns the result of a componentwise modulus operation on two uint3x2 matrices. public static uint3x2 operator %(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise modulus. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise modulus. 返回 uint3x2 uint3x2 result of the componentwise modulus. operator *(uint, uint3x2) Returns the result of a componentwise multiplication operation on a uint value and a uint3x2 matrix. public static uint3x2 operator *(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise multiplication. 返回 uint3x2 uint3x2 result of the componentwise multiplication. operator *(uint3x2, uint) Returns the result of a componentwise multiplication operation on a uint3x2 matrix and a uint value. public static uint3x2 operator *(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint3x2 uint3x2 result of the componentwise multiplication. operator *(uint3x2, uint3x2) Returns the result of a componentwise multiplication operation on two uint3x2 matrices. public static uint3x2 operator *(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise multiplication. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise multiplication. 返回 uint3x2 uint3x2 result of the componentwise multiplication. operator ~(uint3x2) Returns the result of a componentwise bitwise not operation on a uint3x2 matrix. public static uint3x2 operator ~(uint3x2 val) 参数 val uint3x2 Value to use when computing the componentwise bitwise not. 返回 uint3x2 uint3x2 result of the componentwise bitwise not. operator >>(uint3x2, int) Returns the result of a componentwise right shift operation on a uint3x2 matrix by a number of bits specified by a single int. public static uint3x2 operator >>(uint3x2 x, int n) 参数 x uint3x2 The matrix to right shift. n int The number of bits to right shift. 返回 uint3x2 The result of the componentwise right shift. operator -(uint, uint3x2) Returns the result of a componentwise subtraction operation on a uint value and a uint3x2 matrix. public static uint3x2 operator -(uint lhs, uint3x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise subtraction. 返回 uint3x2 uint3x2 result of the componentwise subtraction. operator -(uint3x2, uint) Returns the result of a componentwise subtraction operation on a uint3x2 matrix and a uint value. public static uint3x2 operator -(uint3x2 lhs, uint rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint3x2 uint3x2 result of the componentwise subtraction. operator -(uint3x2, uint3x2) Returns the result of a componentwise subtraction operation on two uint3x2 matrices. public static uint3x2 operator -(uint3x2 lhs, uint3x2 rhs) 参数 lhs uint3x2 Left hand side uint3x2 to use to compute componentwise subtraction. rhs uint3x2 Right hand side uint3x2 to use to compute componentwise subtraction. 返回 uint3x2 uint3x2 result of the componentwise subtraction. operator -(uint3x2) Returns the result of a componentwise unary minus operation on a uint3x2 matrix. public static uint3x2 operator -(uint3x2 val) 参数 val uint3x2 Value to use when computing the componentwise unary minus. 返回 uint3x2 uint3x2 result of the componentwise unary minus. operator +(uint3x2) Returns the result of a componentwise unary plus operation on a uint3x2 matrix. public static uint3x2 operator +(uint3x2 val) 参数 val uint3x2 Value to use when computing the componentwise unary plus. 返回 uint3x2 uint3x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint3x3.html": {
    "href": "reference/Unity.Mathematics.uint3x3.html",
    "title": "uint3x3 结构 | Fantasy.Net API Reference",
    "keywords": "uint3x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x3 matrix of uints. public struct uint3x3 : IEquatable<uint3x3>, IFormattable 实现 IEquatable<uint3x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint3x3(bool) Constructs a uint3x3 matrix from a single bool value by converting it to uint and assigning it to every component. public uint3x3(bool v) 参数 v bool bool to convert to uint3x3 uint3x3(double) Constructs a uint3x3 matrix from a single double value by converting it to uint and assigning it to every component. public uint3x3(double v) 参数 v double double to convert to uint3x3 uint3x3(int) Constructs a uint3x3 matrix from a single int value by converting it to uint and assigning it to every component. public uint3x3(int v) 参数 v int int to convert to uint3x3 uint3x3(float) Constructs a uint3x3 matrix from a single float value by converting it to uint and assigning it to every component. public uint3x3(float v) 参数 v float float to convert to uint3x3 uint3x3(uint) Constructs a uint3x3 matrix from a single uint value by assigning it to every component. public uint3x3(uint v) 参数 v uint uint to convert to uint3x3 uint3x3(uint, uint, uint, uint, uint, uint, uint, uint, uint) Constructs a uint3x3 matrix from 9 uint values given in row-major order. public uint3x3(uint m00, uint m01, uint m02, uint m10, uint m11, uint m12, uint m20, uint m21, uint m22) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. uint3x3(bool3x3) Constructs a uint3x3 matrix from a bool3x3 matrix by componentwise conversion. public uint3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to uint3x3 uint3x3(double3x3) Constructs a uint3x3 matrix from a double3x3 matrix by componentwise conversion. public uint3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to uint3x3 uint3x3(float3x3) Constructs a uint3x3 matrix from a float3x3 matrix by componentwise conversion. public uint3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to uint3x3 uint3x3(int3x3) Constructs a uint3x3 matrix from a int3x3 matrix by componentwise conversion. public uint3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to uint3x3 uint3x3(uint3, uint3, uint3) Constructs a uint3x3 matrix from three uint3 vectors. public uint3x3(uint3 c0, uint3 c1, uint3 c2) 参数 c0 uint3 The matrix column c0 will be set to this value. c1 uint3 The matrix column c1 will be set to this value. c2 uint3 The matrix column c2 will be set to this value. 字段 c0 Column 0 of the matrix. public uint3 c0 字段值 uint3 c1 Column 1 of the matrix. public uint3 c1 字段值 uint3 c2 Column 2 of the matrix. public uint3 c2 字段值 uint3 identity uint3x3 identity transform. public static readonly uint3x3 identity 字段值 uint3x3 zero uint3x3 zero value. public static readonly uint3x3 zero 字段值 uint3x3 属性 this[int] Returns the uint3 element at a specified index. public ref uint3 this[int index] { get; } 参数 index int 属性值 uint3 方法 Equals(object) Returns true if the uint3x3 is equal to a given uint3x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint3x3) Returns true if the uint3x3 is equal to a given uint3x3, false otherwise. public bool Equals(uint3x3 rhs) 参数 rhs uint3x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint3x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint3x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint3x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint3x3) Returns the result of a componentwise addition operation on a uint value and a uint3x3 matrix. public static uint3x3 operator +(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise addition. 返回 uint3x3 uint3x3 result of the componentwise addition. operator +(uint3x3, uint) Returns the result of a componentwise addition operation on a uint3x3 matrix and a uint value. public static uint3x3 operator +(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint3x3 uint3x3 result of the componentwise addition. operator +(uint3x3, uint3x3) Returns the result of a componentwise addition operation on two uint3x3 matrices. public static uint3x3 operator +(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise addition. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise addition. 返回 uint3x3 uint3x3 result of the componentwise addition. operator &(uint, uint3x3) Returns the result of a componentwise bitwise and operation on a uint value and a uint3x3 matrix. public static uint3x3 operator &(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise bitwise and. 返回 uint3x3 uint3x3 result of the componentwise bitwise and. operator &(uint3x3, uint) Returns the result of a componentwise bitwise and operation on a uint3x3 matrix and a uint value. public static uint3x3 operator &(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint3x3 uint3x3 result of the componentwise bitwise and. operator &(uint3x3, uint3x3) Returns the result of a componentwise bitwise and operation on two uint3x3 matrices. public static uint3x3 operator &(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise bitwise and. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise bitwise and. 返回 uint3x3 uint3x3 result of the componentwise bitwise and. operator |(uint, uint3x3) Returns the result of a componentwise bitwise or operation on a uint value and a uint3x3 matrix. public static uint3x3 operator |(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise bitwise or. 返回 uint3x3 uint3x3 result of the componentwise bitwise or. operator |(uint3x3, uint) Returns the result of a componentwise bitwise or operation on a uint3x3 matrix and a uint value. public static uint3x3 operator |(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint3x3 uint3x3 result of the componentwise bitwise or. operator |(uint3x3, uint3x3) Returns the result of a componentwise bitwise or operation on two uint3x3 matrices. public static uint3x3 operator |(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise bitwise or. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise bitwise or. 返回 uint3x3 uint3x3 result of the componentwise bitwise or. operator --(uint3x3) Returns the result of a componentwise decrement operation on a uint3x3 matrix. public static uint3x3 operator --(uint3x3 val) 参数 val uint3x3 Value to use when computing the componentwise decrement. 返回 uint3x3 uint3x3 result of the componentwise decrement. operator /(uint, uint3x3) Returns the result of a componentwise division operation on a uint value and a uint3x3 matrix. public static uint3x3 operator /(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise division. 返回 uint3x3 uint3x3 result of the componentwise division. operator /(uint3x3, uint) Returns the result of a componentwise division operation on a uint3x3 matrix and a uint value. public static uint3x3 operator /(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint3x3 uint3x3 result of the componentwise division. operator /(uint3x3, uint3x3) Returns the result of a componentwise division operation on two uint3x3 matrices. public static uint3x3 operator /(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise division. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise division. 返回 uint3x3 uint3x3 result of the componentwise division. operator ==(uint, uint3x3) Returns the result of a componentwise equality operation on a uint value and a uint3x3 matrix. public static bool3x3 operator ==(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(uint3x3, uint) Returns the result of a componentwise equality operation on a uint3x3 matrix and a uint value. public static bool3x3 operator ==(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ==(uint3x3, uint3x3) Returns the result of a componentwise equality operation on two uint3x3 matrices. public static bool3x3 operator ==(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise equality. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise equality. 返回 bool3x3 bool3x3 result of the componentwise equality. operator ^(uint, uint3x3) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint3x3 matrix. public static uint3x3 operator ^(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise bitwise exclusive or. 返回 uint3x3 uint3x3 result of the componentwise bitwise exclusive or. operator ^(uint3x3, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint3x3 matrix and a uint value. public static uint3x3 operator ^(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint3x3 uint3x3 result of the componentwise bitwise exclusive or. operator ^(uint3x3, uint3x3) Returns the result of a componentwise bitwise exclusive or operation on two uint3x3 matrices. public static uint3x3 operator ^(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise bitwise exclusive or. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise bitwise exclusive or. 返回 uint3x3 uint3x3 result of the componentwise bitwise exclusive or. explicit operator uint3x3(bool) Explicitly converts a single bool value to a uint3x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x3(bool v) 参数 v bool bool to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(double) Explicitly converts a single double value to a uint3x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x3(double v) 参数 v double double to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(int) Explicitly converts a single int value to a uint3x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x3(int v) 参数 v int int to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(float) Explicitly converts a single float value to a uint3x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x3(float v) 参数 v float float to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(bool3x3) Explicitly converts a bool3x3 matrix to a uint3x3 matrix by componentwise conversion. public static explicit operator uint3x3(bool3x3 v) 参数 v bool3x3 bool3x3 to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(double3x3) Explicitly converts a double3x3 matrix to a uint3x3 matrix by componentwise conversion. public static explicit operator uint3x3(double3x3 v) 参数 v double3x3 double3x3 to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(float3x3) Explicitly converts a float3x3 matrix to a uint3x3 matrix by componentwise conversion. public static explicit operator uint3x3(float3x3 v) 参数 v float3x3 float3x3 to convert to uint3x3 返回 uint3x3 Converted value. explicit operator uint3x3(int3x3) Explicitly converts a int3x3 matrix to a uint3x3 matrix by componentwise conversion. public static explicit operator uint3x3(int3x3 v) 参数 v int3x3 int3x3 to convert to uint3x3 返回 uint3x3 Converted value. operator >(uint, uint3x3) Returns the result of a componentwise greater than operation on a uint value and a uint3x3 matrix. public static bool3x3 operator >(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(uint3x3, uint) Returns the result of a componentwise greater than operation on a uint3x3 matrix and a uint value. public static bool3x3 operator >(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >(uint3x3, uint3x3) Returns the result of a componentwise greater than operation on two uint3x3 matrices. public static bool3x3 operator >(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise greater than. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise greater than. 返回 bool3x3 bool3x3 result of the componentwise greater than. operator >=(uint, uint3x3) Returns the result of a componentwise greater or equal operation on a uint value and a uint3x3 matrix. public static bool3x3 operator >=(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(uint3x3, uint) Returns the result of a componentwise greater or equal operation on a uint3x3 matrix and a uint value. public static bool3x3 operator >=(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. operator >=(uint3x3, uint3x3) Returns the result of a componentwise greater or equal operation on two uint3x3 matrices. public static bool3x3 operator >=(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise greater or equal. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise greater or equal. 返回 bool3x3 bool3x3 result of the componentwise greater or equal. implicit operator uint3x3(uint) Implicitly converts a single uint value to a uint3x3 matrix by assigning it to every component. public static implicit operator uint3x3(uint v) 参数 v uint uint to convert to uint3x3 返回 uint3x3 Converted value. operator ++(uint3x3) Returns the result of a componentwise increment operation on a uint3x3 matrix. public static uint3x3 operator ++(uint3x3 val) 参数 val uint3x3 Value to use when computing the componentwise increment. 返回 uint3x3 uint3x3 result of the componentwise increment. operator !=(uint, uint3x3) Returns the result of a componentwise not equal operation on a uint value and a uint3x3 matrix. public static bool3x3 operator !=(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(uint3x3, uint) Returns the result of a componentwise not equal operation on a uint3x3 matrix and a uint value. public static bool3x3 operator !=(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator !=(uint3x3, uint3x3) Returns the result of a componentwise not equal operation on two uint3x3 matrices. public static bool3x3 operator !=(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise not equal. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise not equal. 返回 bool3x3 bool3x3 result of the componentwise not equal. operator <<(uint3x3, int) Returns the result of a componentwise left shift operation on a uint3x3 matrix by a number of bits specified by a single int. public static uint3x3 operator <<(uint3x3 x, int n) 参数 x uint3x3 The matrix to left shift. n int The number of bits to left shift. 返回 uint3x3 The result of the componentwise left shift. operator <(uint, uint3x3) Returns the result of a componentwise less than operation on a uint value and a uint3x3 matrix. public static bool3x3 operator <(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(uint3x3, uint) Returns the result of a componentwise less than operation on a uint3x3 matrix and a uint value. public static bool3x3 operator <(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <(uint3x3, uint3x3) Returns the result of a componentwise less than operation on two uint3x3 matrices. public static bool3x3 operator <(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise less than. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise less than. 返回 bool3x3 bool3x3 result of the componentwise less than. operator <=(uint, uint3x3) Returns the result of a componentwise less or equal operation on a uint value and a uint3x3 matrix. public static bool3x3 operator <=(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(uint3x3, uint) Returns the result of a componentwise less or equal operation on a uint3x3 matrix and a uint value. public static bool3x3 operator <=(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator <=(uint3x3, uint3x3) Returns the result of a componentwise less or equal operation on two uint3x3 matrices. public static bool3x3 operator <=(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise less or equal. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise less or equal. 返回 bool3x3 bool3x3 result of the componentwise less or equal. operator %(uint, uint3x3) Returns the result of a componentwise modulus operation on a uint value and a uint3x3 matrix. public static uint3x3 operator %(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise modulus. 返回 uint3x3 uint3x3 result of the componentwise modulus. operator %(uint3x3, uint) Returns the result of a componentwise modulus operation on a uint3x3 matrix and a uint value. public static uint3x3 operator %(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint3x3 uint3x3 result of the componentwise modulus. operator %(uint3x3, uint3x3) Returns the result of a componentwise modulus operation on two uint3x3 matrices. public static uint3x3 operator %(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise modulus. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise modulus. 返回 uint3x3 uint3x3 result of the componentwise modulus. operator *(uint, uint3x3) Returns the result of a componentwise multiplication operation on a uint value and a uint3x3 matrix. public static uint3x3 operator *(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise multiplication. 返回 uint3x3 uint3x3 result of the componentwise multiplication. operator *(uint3x3, uint) Returns the result of a componentwise multiplication operation on a uint3x3 matrix and a uint value. public static uint3x3 operator *(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint3x3 uint3x3 result of the componentwise multiplication. operator *(uint3x3, uint3x3) Returns the result of a componentwise multiplication operation on two uint3x3 matrices. public static uint3x3 operator *(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise multiplication. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise multiplication. 返回 uint3x3 uint3x3 result of the componentwise multiplication. operator ~(uint3x3) Returns the result of a componentwise bitwise not operation on a uint3x3 matrix. public static uint3x3 operator ~(uint3x3 val) 参数 val uint3x3 Value to use when computing the componentwise bitwise not. 返回 uint3x3 uint3x3 result of the componentwise bitwise not. operator >>(uint3x3, int) Returns the result of a componentwise right shift operation on a uint3x3 matrix by a number of bits specified by a single int. public static uint3x3 operator >>(uint3x3 x, int n) 参数 x uint3x3 The matrix to right shift. n int The number of bits to right shift. 返回 uint3x3 The result of the componentwise right shift. operator -(uint, uint3x3) Returns the result of a componentwise subtraction operation on a uint value and a uint3x3 matrix. public static uint3x3 operator -(uint lhs, uint3x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise subtraction. 返回 uint3x3 uint3x3 result of the componentwise subtraction. operator -(uint3x3, uint) Returns the result of a componentwise subtraction operation on a uint3x3 matrix and a uint value. public static uint3x3 operator -(uint3x3 lhs, uint rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint3x3 uint3x3 result of the componentwise subtraction. operator -(uint3x3, uint3x3) Returns the result of a componentwise subtraction operation on two uint3x3 matrices. public static uint3x3 operator -(uint3x3 lhs, uint3x3 rhs) 参数 lhs uint3x3 Left hand side uint3x3 to use to compute componentwise subtraction. rhs uint3x3 Right hand side uint3x3 to use to compute componentwise subtraction. 返回 uint3x3 uint3x3 result of the componentwise subtraction. operator -(uint3x3) Returns the result of a componentwise unary minus operation on a uint3x3 matrix. public static uint3x3 operator -(uint3x3 val) 参数 val uint3x3 Value to use when computing the componentwise unary minus. 返回 uint3x3 uint3x3 result of the componentwise unary minus. operator +(uint3x3) Returns the result of a componentwise unary plus operation on a uint3x3 matrix. public static uint3x3 operator +(uint3x3 val) 参数 val uint3x3 Value to use when computing the componentwise unary plus. 返回 uint3x3 uint3x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint3x4.html": {
    "href": "reference/Unity.Mathematics.uint3x4.html",
    "title": "uint3x4 结构 | Fantasy.Net API Reference",
    "keywords": "uint3x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 3x4 matrix of uints. public struct uint3x4 : IEquatable<uint3x4>, IFormattable 实现 IEquatable<uint3x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint3x4(bool) Constructs a uint3x4 matrix from a single bool value by converting it to uint and assigning it to every component. public uint3x4(bool v) 参数 v bool bool to convert to uint3x4 uint3x4(double) Constructs a uint3x4 matrix from a single double value by converting it to uint and assigning it to every component. public uint3x4(double v) 参数 v double double to convert to uint3x4 uint3x4(int) Constructs a uint3x4 matrix from a single int value by converting it to uint and assigning it to every component. public uint3x4(int v) 参数 v int int to convert to uint3x4 uint3x4(float) Constructs a uint3x4 matrix from a single float value by converting it to uint and assigning it to every component. public uint3x4(float v) 参数 v float float to convert to uint3x4 uint3x4(uint) Constructs a uint3x4 matrix from a single uint value by assigning it to every component. public uint3x4(uint v) 参数 v uint uint to convert to uint3x4 uint3x4(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) Constructs a uint3x4 matrix from 12 uint values given in row-major order. public uint3x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13, uint m20, uint m21, uint m22, uint m23) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m03 uint The matrix at row 0, column 3 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m13 uint The matrix at row 1, column 3 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. m23 uint The matrix at row 2, column 3 will be set to this value. uint3x4(bool3x4) Constructs a uint3x4 matrix from a bool3x4 matrix by componentwise conversion. public uint3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to uint3x4 uint3x4(double3x4) Constructs a uint3x4 matrix from a double3x4 matrix by componentwise conversion. public uint3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to uint3x4 uint3x4(float3x4) Constructs a uint3x4 matrix from a float3x4 matrix by componentwise conversion. public uint3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to uint3x4 uint3x4(int3x4) Constructs a uint3x4 matrix from a int3x4 matrix by componentwise conversion. public uint3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to uint3x4 uint3x4(uint3, uint3, uint3, uint3) Constructs a uint3x4 matrix from four uint3 vectors. public uint3x4(uint3 c0, uint3 c1, uint3 c2, uint3 c3) 参数 c0 uint3 The matrix column c0 will be set to this value. c1 uint3 The matrix column c1 will be set to this value. c2 uint3 The matrix column c2 will be set to this value. c3 uint3 The matrix column c3 will be set to this value. 字段 c0 Column 0 of the matrix. public uint3 c0 字段值 uint3 c1 Column 1 of the matrix. public uint3 c1 字段值 uint3 c2 Column 2 of the matrix. public uint3 c2 字段值 uint3 c3 Column 3 of the matrix. public uint3 c3 字段值 uint3 zero uint3x4 zero value. public static readonly uint3x4 zero 字段值 uint3x4 属性 this[int] Returns the uint3 element at a specified index. public ref uint3 this[int index] { get; } 参数 index int 属性值 uint3 方法 Equals(object) Returns true if the uint3x4 is equal to a given uint3x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint3x4) Returns true if the uint3x4 is equal to a given uint3x4, false otherwise. public bool Equals(uint3x4 rhs) 参数 rhs uint3x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint3x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint3x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint3x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint3x4) Returns the result of a componentwise addition operation on a uint value and a uint3x4 matrix. public static uint3x4 operator +(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise addition. 返回 uint3x4 uint3x4 result of the componentwise addition. operator +(uint3x4, uint) Returns the result of a componentwise addition operation on a uint3x4 matrix and a uint value. public static uint3x4 operator +(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint3x4 uint3x4 result of the componentwise addition. operator +(uint3x4, uint3x4) Returns the result of a componentwise addition operation on two uint3x4 matrices. public static uint3x4 operator +(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise addition. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise addition. 返回 uint3x4 uint3x4 result of the componentwise addition. operator &(uint, uint3x4) Returns the result of a componentwise bitwise and operation on a uint value and a uint3x4 matrix. public static uint3x4 operator &(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise bitwise and. 返回 uint3x4 uint3x4 result of the componentwise bitwise and. operator &(uint3x4, uint) Returns the result of a componentwise bitwise and operation on a uint3x4 matrix and a uint value. public static uint3x4 operator &(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint3x4 uint3x4 result of the componentwise bitwise and. operator &(uint3x4, uint3x4) Returns the result of a componentwise bitwise and operation on two uint3x4 matrices. public static uint3x4 operator &(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise bitwise and. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise bitwise and. 返回 uint3x4 uint3x4 result of the componentwise bitwise and. operator |(uint, uint3x4) Returns the result of a componentwise bitwise or operation on a uint value and a uint3x4 matrix. public static uint3x4 operator |(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise bitwise or. 返回 uint3x4 uint3x4 result of the componentwise bitwise or. operator |(uint3x4, uint) Returns the result of a componentwise bitwise or operation on a uint3x4 matrix and a uint value. public static uint3x4 operator |(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint3x4 uint3x4 result of the componentwise bitwise or. operator |(uint3x4, uint3x4) Returns the result of a componentwise bitwise or operation on two uint3x4 matrices. public static uint3x4 operator |(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise bitwise or. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise bitwise or. 返回 uint3x4 uint3x4 result of the componentwise bitwise or. operator --(uint3x4) Returns the result of a componentwise decrement operation on a uint3x4 matrix. public static uint3x4 operator --(uint3x4 val) 参数 val uint3x4 Value to use when computing the componentwise decrement. 返回 uint3x4 uint3x4 result of the componentwise decrement. operator /(uint, uint3x4) Returns the result of a componentwise division operation on a uint value and a uint3x4 matrix. public static uint3x4 operator /(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise division. 返回 uint3x4 uint3x4 result of the componentwise division. operator /(uint3x4, uint) Returns the result of a componentwise division operation on a uint3x4 matrix and a uint value. public static uint3x4 operator /(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint3x4 uint3x4 result of the componentwise division. operator /(uint3x4, uint3x4) Returns the result of a componentwise division operation on two uint3x4 matrices. public static uint3x4 operator /(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise division. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise division. 返回 uint3x4 uint3x4 result of the componentwise division. operator ==(uint, uint3x4) Returns the result of a componentwise equality operation on a uint value and a uint3x4 matrix. public static bool3x4 operator ==(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(uint3x4, uint) Returns the result of a componentwise equality operation on a uint3x4 matrix and a uint value. public static bool3x4 operator ==(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ==(uint3x4, uint3x4) Returns the result of a componentwise equality operation on two uint3x4 matrices. public static bool3x4 operator ==(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise equality. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise equality. 返回 bool3x4 bool3x4 result of the componentwise equality. operator ^(uint, uint3x4) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint3x4 matrix. public static uint3x4 operator ^(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise bitwise exclusive or. 返回 uint3x4 uint3x4 result of the componentwise bitwise exclusive or. operator ^(uint3x4, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint3x4 matrix and a uint value. public static uint3x4 operator ^(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint3x4 uint3x4 result of the componentwise bitwise exclusive or. operator ^(uint3x4, uint3x4) Returns the result of a componentwise bitwise exclusive or operation on two uint3x4 matrices. public static uint3x4 operator ^(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise bitwise exclusive or. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise bitwise exclusive or. 返回 uint3x4 uint3x4 result of the componentwise bitwise exclusive or. explicit operator uint3x4(bool) Explicitly converts a single bool value to a uint3x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x4(bool v) 参数 v bool bool to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(double) Explicitly converts a single double value to a uint3x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x4(double v) 参数 v double double to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(int) Explicitly converts a single int value to a uint3x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x4(int v) 参数 v int int to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(float) Explicitly converts a single float value to a uint3x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint3x4(float v) 参数 v float float to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(bool3x4) Explicitly converts a bool3x4 matrix to a uint3x4 matrix by componentwise conversion. public static explicit operator uint3x4(bool3x4 v) 参数 v bool3x4 bool3x4 to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(double3x4) Explicitly converts a double3x4 matrix to a uint3x4 matrix by componentwise conversion. public static explicit operator uint3x4(double3x4 v) 参数 v double3x4 double3x4 to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(float3x4) Explicitly converts a float3x4 matrix to a uint3x4 matrix by componentwise conversion. public static explicit operator uint3x4(float3x4 v) 参数 v float3x4 float3x4 to convert to uint3x4 返回 uint3x4 Converted value. explicit operator uint3x4(int3x4) Explicitly converts a int3x4 matrix to a uint3x4 matrix by componentwise conversion. public static explicit operator uint3x4(int3x4 v) 参数 v int3x4 int3x4 to convert to uint3x4 返回 uint3x4 Converted value. operator >(uint, uint3x4) Returns the result of a componentwise greater than operation on a uint value and a uint3x4 matrix. public static bool3x4 operator >(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(uint3x4, uint) Returns the result of a componentwise greater than operation on a uint3x4 matrix and a uint value. public static bool3x4 operator >(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >(uint3x4, uint3x4) Returns the result of a componentwise greater than operation on two uint3x4 matrices. public static bool3x4 operator >(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise greater than. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise greater than. 返回 bool3x4 bool3x4 result of the componentwise greater than. operator >=(uint, uint3x4) Returns the result of a componentwise greater or equal operation on a uint value and a uint3x4 matrix. public static bool3x4 operator >=(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(uint3x4, uint) Returns the result of a componentwise greater or equal operation on a uint3x4 matrix and a uint value. public static bool3x4 operator >=(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. operator >=(uint3x4, uint3x4) Returns the result of a componentwise greater or equal operation on two uint3x4 matrices. public static bool3x4 operator >=(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise greater or equal. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise greater or equal. 返回 bool3x4 bool3x4 result of the componentwise greater or equal. implicit operator uint3x4(uint) Implicitly converts a single uint value to a uint3x4 matrix by assigning it to every component. public static implicit operator uint3x4(uint v) 参数 v uint uint to convert to uint3x4 返回 uint3x4 Converted value. operator ++(uint3x4) Returns the result of a componentwise increment operation on a uint3x4 matrix. public static uint3x4 operator ++(uint3x4 val) 参数 val uint3x4 Value to use when computing the componentwise increment. 返回 uint3x4 uint3x4 result of the componentwise increment. operator !=(uint, uint3x4) Returns the result of a componentwise not equal operation on a uint value and a uint3x4 matrix. public static bool3x4 operator !=(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(uint3x4, uint) Returns the result of a componentwise not equal operation on a uint3x4 matrix and a uint value. public static bool3x4 operator !=(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator !=(uint3x4, uint3x4) Returns the result of a componentwise not equal operation on two uint3x4 matrices. public static bool3x4 operator !=(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise not equal. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise not equal. 返回 bool3x4 bool3x4 result of the componentwise not equal. operator <<(uint3x4, int) Returns the result of a componentwise left shift operation on a uint3x4 matrix by a number of bits specified by a single int. public static uint3x4 operator <<(uint3x4 x, int n) 参数 x uint3x4 The matrix to left shift. n int The number of bits to left shift. 返回 uint3x4 The result of the componentwise left shift. operator <(uint, uint3x4) Returns the result of a componentwise less than operation on a uint value and a uint3x4 matrix. public static bool3x4 operator <(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(uint3x4, uint) Returns the result of a componentwise less than operation on a uint3x4 matrix and a uint value. public static bool3x4 operator <(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <(uint3x4, uint3x4) Returns the result of a componentwise less than operation on two uint3x4 matrices. public static bool3x4 operator <(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise less than. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise less than. 返回 bool3x4 bool3x4 result of the componentwise less than. operator <=(uint, uint3x4) Returns the result of a componentwise less or equal operation on a uint value and a uint3x4 matrix. public static bool3x4 operator <=(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(uint3x4, uint) Returns the result of a componentwise less or equal operation on a uint3x4 matrix and a uint value. public static bool3x4 operator <=(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator <=(uint3x4, uint3x4) Returns the result of a componentwise less or equal operation on two uint3x4 matrices. public static bool3x4 operator <=(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise less or equal. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise less or equal. 返回 bool3x4 bool3x4 result of the componentwise less or equal. operator %(uint, uint3x4) Returns the result of a componentwise modulus operation on a uint value and a uint3x4 matrix. public static uint3x4 operator %(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise modulus. 返回 uint3x4 uint3x4 result of the componentwise modulus. operator %(uint3x4, uint) Returns the result of a componentwise modulus operation on a uint3x4 matrix and a uint value. public static uint3x4 operator %(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint3x4 uint3x4 result of the componentwise modulus. operator %(uint3x4, uint3x4) Returns the result of a componentwise modulus operation on two uint3x4 matrices. public static uint3x4 operator %(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise modulus. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise modulus. 返回 uint3x4 uint3x4 result of the componentwise modulus. operator *(uint, uint3x4) Returns the result of a componentwise multiplication operation on a uint value and a uint3x4 matrix. public static uint3x4 operator *(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise multiplication. 返回 uint3x4 uint3x4 result of the componentwise multiplication. operator *(uint3x4, uint) Returns the result of a componentwise multiplication operation on a uint3x4 matrix and a uint value. public static uint3x4 operator *(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint3x4 uint3x4 result of the componentwise multiplication. operator *(uint3x4, uint3x4) Returns the result of a componentwise multiplication operation on two uint3x4 matrices. public static uint3x4 operator *(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise multiplication. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise multiplication. 返回 uint3x4 uint3x4 result of the componentwise multiplication. operator ~(uint3x4) Returns the result of a componentwise bitwise not operation on a uint3x4 matrix. public static uint3x4 operator ~(uint3x4 val) 参数 val uint3x4 Value to use when computing the componentwise bitwise not. 返回 uint3x4 uint3x4 result of the componentwise bitwise not. operator >>(uint3x4, int) Returns the result of a componentwise right shift operation on a uint3x4 matrix by a number of bits specified by a single int. public static uint3x4 operator >>(uint3x4 x, int n) 参数 x uint3x4 The matrix to right shift. n int The number of bits to right shift. 返回 uint3x4 The result of the componentwise right shift. operator -(uint, uint3x4) Returns the result of a componentwise subtraction operation on a uint value and a uint3x4 matrix. public static uint3x4 operator -(uint lhs, uint3x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise subtraction. 返回 uint3x4 uint3x4 result of the componentwise subtraction. operator -(uint3x4, uint) Returns the result of a componentwise subtraction operation on a uint3x4 matrix and a uint value. public static uint3x4 operator -(uint3x4 lhs, uint rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint3x4 uint3x4 result of the componentwise subtraction. operator -(uint3x4, uint3x4) Returns the result of a componentwise subtraction operation on two uint3x4 matrices. public static uint3x4 operator -(uint3x4 lhs, uint3x4 rhs) 参数 lhs uint3x4 Left hand side uint3x4 to use to compute componentwise subtraction. rhs uint3x4 Right hand side uint3x4 to use to compute componentwise subtraction. 返回 uint3x4 uint3x4 result of the componentwise subtraction. operator -(uint3x4) Returns the result of a componentwise unary minus operation on a uint3x4 matrix. public static uint3x4 operator -(uint3x4 val) 参数 val uint3x4 Value to use when computing the componentwise unary minus. 返回 uint3x4 uint3x4 result of the componentwise unary minus. operator +(uint3x4) Returns the result of a componentwise unary plus operation on a uint3x4 matrix. public static uint3x4 operator +(uint3x4 val) 参数 val uint3x4 Value to use when computing the componentwise unary plus. 返回 uint3x4 uint3x4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint4.html": {
    "href": "reference/Unity.Mathematics.uint4.html",
    "title": "uint4 结构 | Fantasy.Net API Reference",
    "keywords": "uint4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4 component vector of uints. public struct uint4 : IEquatable<uint4>, IFormattable 实现 IEquatable<uint4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint4(bool) Constructs a uint4 vector from a single bool value by converting it to uint and assigning it to every component. public uint4(bool v) 参数 v bool bool to convert to uint4 uint4(double) Constructs a uint4 vector from a single double value by converting it to uint and assigning it to every component. public uint4(double v) 参数 v double double to convert to uint4 uint4(int) Constructs a uint4 vector from a single int value by converting it to uint and assigning it to every component. public uint4(int v) 参数 v int int to convert to uint4 uint4(float) Constructs a uint4 vector from a single float value by converting it to uint and assigning it to every component. public uint4(float v) 参数 v float float to convert to uint4 uint4(uint) Constructs a uint4 vector from a single uint value by assigning it to every component. public uint4(uint v) 参数 v uint uint to convert to uint4 uint4(uint, uint, uint, uint) Constructs a uint4 vector from four uint values. public uint4(uint x, uint y, uint z, uint w) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. z uint The constructed vector's z component will be set to this value. w uint The constructed vector's w component will be set to this value. uint4(uint, uint, uint2) Constructs a uint4 vector from two uint values and a uint2 vector. public uint4(uint x, uint y, uint2 zw) 参数 x uint The constructed vector's x component will be set to this value. y uint The constructed vector's y component will be set to this value. zw uint2 The constructed vector's zw components will be set to this value. uint4(uint, uint2, uint) Constructs a uint4 vector from a uint value, a uint2 vector and a uint value. public uint4(uint x, uint2 yz, uint w) 参数 x uint The constructed vector's x component will be set to this value. yz uint2 The constructed vector's yz components will be set to this value. w uint The constructed vector's w component will be set to this value. uint4(uint, uint3) Constructs a uint4 vector from a uint value and a uint3 vector. public uint4(uint x, uint3 yzw) 参数 x uint The constructed vector's x component will be set to this value. yzw uint3 The constructed vector's yzw components will be set to this value. uint4(bool4) Constructs a uint4 vector from a bool4 vector by componentwise conversion. public uint4(bool4 v) 参数 v bool4 bool4 to convert to uint4 uint4(double4) Constructs a uint4 vector from a double4 vector by componentwise conversion. public uint4(double4 v) 参数 v double4 double4 to convert to uint4 uint4(float4) Constructs a uint4 vector from a float4 vector by componentwise conversion. public uint4(float4 v) 参数 v float4 float4 to convert to uint4 uint4(int4) Constructs a uint4 vector from a int4 vector by componentwise conversion. public uint4(int4 v) 参数 v int4 int4 to convert to uint4 uint4(uint2, uint, uint) Constructs a uint4 vector from a uint2 vector and two uint values. public uint4(uint2 xy, uint z, uint w) 参数 xy uint2 The constructed vector's xy components will be set to this value. z uint The constructed vector's z component will be set to this value. w uint The constructed vector's w component will be set to this value. uint4(uint2, uint2) Constructs a uint4 vector from two uint2 vectors. public uint4(uint2 xy, uint2 zw) 参数 xy uint2 The constructed vector's xy components will be set to this value. zw uint2 The constructed vector's zw components will be set to this value. uint4(uint3, uint) Constructs a uint4 vector from a uint3 vector and a uint value. public uint4(uint3 xyz, uint w) 参数 xyz uint3 The constructed vector's xyz components will be set to this value. w uint The constructed vector's w component will be set to this value. uint4(uint4) Constructs a uint4 vector from a uint4 vector. public uint4(uint4 xyzw) 参数 xyzw uint4 The constructed vector's xyzw components will be set to this value. 字段 w w component of the vector. public uint w 字段值 uint x x component of the vector. public uint x 字段值 uint y y component of the vector. public uint y 字段值 uint z z component of the vector. public uint z 字段值 uint zero uint4 zero value. public static readonly uint4 zero 字段值 uint4 属性 this[int] Returns the uint element at a specified index. public uint this[int index] { get; set; } 参数 index int 属性值 uint 方法 Equals(object) Returns true if the uint4 is equal to a given uint4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint4) Returns true if the uint4 is equal to a given uint4, false otherwise. public bool Equals(uint4 rhs) 参数 rhs uint4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint4) Returns the result of a componentwise addition operation on a uint value and a uint4 vector. public static uint4 operator +(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint4 Right hand side uint4 to use to compute componentwise addition. 返回 uint4 uint4 result of the componentwise addition. operator +(uint4, uint) Returns the result of a componentwise addition operation on a uint4 vector and a uint value. public static uint4 operator +(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint4 uint4 result of the componentwise addition. operator +(uint4, uint4) Returns the result of a componentwise addition operation on two uint4 vectors. public static uint4 operator +(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise addition. rhs uint4 Right hand side uint4 to use to compute componentwise addition. 返回 uint4 uint4 result of the componentwise addition. operator &(uint, uint4) Returns the result of a componentwise bitwise and operation on a uint value and a uint4 vector. public static uint4 operator &(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint4 Right hand side uint4 to use to compute componentwise bitwise and. 返回 uint4 uint4 result of the componentwise bitwise and. operator &(uint4, uint) Returns the result of a componentwise bitwise and operation on a uint4 vector and a uint value. public static uint4 operator &(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint4 uint4 result of the componentwise bitwise and. operator &(uint4, uint4) Returns the result of a componentwise bitwise and operation on two uint4 vectors. public static uint4 operator &(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise bitwise and. rhs uint4 Right hand side uint4 to use to compute componentwise bitwise and. 返回 uint4 uint4 result of the componentwise bitwise and. operator |(uint, uint4) Returns the result of a componentwise bitwise or operation on a uint value and a uint4 vector. public static uint4 operator |(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint4 Right hand side uint4 to use to compute componentwise bitwise or. 返回 uint4 uint4 result of the componentwise bitwise or. operator |(uint4, uint) Returns the result of a componentwise bitwise or operation on a uint4 vector and a uint value. public static uint4 operator |(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint4 uint4 result of the componentwise bitwise or. operator |(uint4, uint4) Returns the result of a componentwise bitwise or operation on two uint4 vectors. public static uint4 operator |(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise bitwise or. rhs uint4 Right hand side uint4 to use to compute componentwise bitwise or. 返回 uint4 uint4 result of the componentwise bitwise or. operator --(uint4) Returns the result of a componentwise decrement operation on a uint4 vector. public static uint4 operator --(uint4 val) 参数 val uint4 Value to use when computing the componentwise decrement. 返回 uint4 uint4 result of the componentwise decrement. operator /(uint, uint4) Returns the result of a componentwise division operation on a uint value and a uint4 vector. public static uint4 operator /(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint4 Right hand side uint4 to use to compute componentwise division. 返回 uint4 uint4 result of the componentwise division. operator /(uint4, uint) Returns the result of a componentwise division operation on a uint4 vector and a uint value. public static uint4 operator /(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint4 uint4 result of the componentwise division. operator /(uint4, uint4) Returns the result of a componentwise division operation on two uint4 vectors. public static uint4 operator /(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise division. rhs uint4 Right hand side uint4 to use to compute componentwise division. 返回 uint4 uint4 result of the componentwise division. operator ==(uint, uint4) Returns the result of a componentwise equality operation on a uint value and a uint4 vector. public static bool4 operator ==(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint4 Right hand side uint4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(uint4, uint) Returns the result of a componentwise equality operation on a uint4 vector and a uint value. public static bool4 operator ==(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ==(uint4, uint4) Returns the result of a componentwise equality operation on two uint4 vectors. public static bool4 operator ==(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise equality. rhs uint4 Right hand side uint4 to use to compute componentwise equality. 返回 bool4 bool4 result of the componentwise equality. operator ^(uint, uint4) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint4 vector. public static uint4 operator ^(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint4 Right hand side uint4 to use to compute componentwise bitwise exclusive or. 返回 uint4 uint4 result of the componentwise bitwise exclusive or. operator ^(uint4, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint4 vector and a uint value. public static uint4 operator ^(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint4 uint4 result of the componentwise bitwise exclusive or. operator ^(uint4, uint4) Returns the result of a componentwise bitwise exclusive or operation on two uint4 vectors. public static uint4 operator ^(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise bitwise exclusive or. rhs uint4 Right hand side uint4 to use to compute componentwise bitwise exclusive or. 返回 uint4 uint4 result of the componentwise bitwise exclusive or. explicit operator uint4(bool) Explicitly converts a single bool value to a uint4 vector by converting it to uint and assigning it to every component. public static explicit operator uint4(bool v) 参数 v bool bool to convert to uint4 返回 uint4 Converted value. explicit operator uint4(double) Explicitly converts a single double value to a uint4 vector by converting it to uint and assigning it to every component. public static explicit operator uint4(double v) 参数 v double double to convert to uint4 返回 uint4 Converted value. explicit operator uint4(int) Explicitly converts a single int value to a uint4 vector by converting it to uint and assigning it to every component. public static explicit operator uint4(int v) 参数 v int int to convert to uint4 返回 uint4 Converted value. explicit operator uint4(float) Explicitly converts a single float value to a uint4 vector by converting it to uint and assigning it to every component. public static explicit operator uint4(float v) 参数 v float float to convert to uint4 返回 uint4 Converted value. explicit operator uint4(bool4) Explicitly converts a bool4 vector to a uint4 vector by componentwise conversion. public static explicit operator uint4(bool4 v) 参数 v bool4 bool4 to convert to uint4 返回 uint4 Converted value. explicit operator uint4(double4) Explicitly converts a double4 vector to a uint4 vector by componentwise conversion. public static explicit operator uint4(double4 v) 参数 v double4 double4 to convert to uint4 返回 uint4 Converted value. explicit operator uint4(float4) Explicitly converts a float4 vector to a uint4 vector by componentwise conversion. public static explicit operator uint4(float4 v) 参数 v float4 float4 to convert to uint4 返回 uint4 Converted value. explicit operator uint4(int4) Explicitly converts a int4 vector to a uint4 vector by componentwise conversion. public static explicit operator uint4(int4 v) 参数 v int4 int4 to convert to uint4 返回 uint4 Converted value. operator >(uint, uint4) Returns the result of a componentwise greater than operation on a uint value and a uint4 vector. public static bool4 operator >(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint4 Right hand side uint4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(uint4, uint) Returns the result of a componentwise greater than operation on a uint4 vector and a uint value. public static bool4 operator >(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >(uint4, uint4) Returns the result of a componentwise greater than operation on two uint4 vectors. public static bool4 operator >(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise greater than. rhs uint4 Right hand side uint4 to use to compute componentwise greater than. 返回 bool4 bool4 result of the componentwise greater than. operator >=(uint, uint4) Returns the result of a componentwise greater or equal operation on a uint value and a uint4 vector. public static bool4 operator >=(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint4 Right hand side uint4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(uint4, uint) Returns the result of a componentwise greater or equal operation on a uint4 vector and a uint value. public static bool4 operator >=(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. operator >=(uint4, uint4) Returns the result of a componentwise greater or equal operation on two uint4 vectors. public static bool4 operator >=(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise greater or equal. rhs uint4 Right hand side uint4 to use to compute componentwise greater or equal. 返回 bool4 bool4 result of the componentwise greater or equal. implicit operator uint4(uint) Implicitly converts a single uint value to a uint4 vector by assigning it to every component. public static implicit operator uint4(uint v) 参数 v uint uint to convert to uint4 返回 uint4 Converted value. operator ++(uint4) Returns the result of a componentwise increment operation on a uint4 vector. public static uint4 operator ++(uint4 val) 参数 val uint4 Value to use when computing the componentwise increment. 返回 uint4 uint4 result of the componentwise increment. operator !=(uint, uint4) Returns the result of a componentwise not equal operation on a uint value and a uint4 vector. public static bool4 operator !=(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint4 Right hand side uint4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(uint4, uint) Returns the result of a componentwise not equal operation on a uint4 vector and a uint value. public static bool4 operator !=(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator !=(uint4, uint4) Returns the result of a componentwise not equal operation on two uint4 vectors. public static bool4 operator !=(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise not equal. rhs uint4 Right hand side uint4 to use to compute componentwise not equal. 返回 bool4 bool4 result of the componentwise not equal. operator <<(uint4, int) Returns the result of a componentwise left shift operation on a uint4 vector by a number of bits specified by a single int. public static uint4 operator <<(uint4 x, int n) 参数 x uint4 The vector to left shift. n int The number of bits to left shift. 返回 uint4 The result of the componentwise left shift. operator <(uint, uint4) Returns the result of a componentwise less than operation on a uint value and a uint4 vector. public static bool4 operator <(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint4 Right hand side uint4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(uint4, uint) Returns the result of a componentwise less than operation on a uint4 vector and a uint value. public static bool4 operator <(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <(uint4, uint4) Returns the result of a componentwise less than operation on two uint4 vectors. public static bool4 operator <(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise less than. rhs uint4 Right hand side uint4 to use to compute componentwise less than. 返回 bool4 bool4 result of the componentwise less than. operator <=(uint, uint4) Returns the result of a componentwise less or equal operation on a uint value and a uint4 vector. public static bool4 operator <=(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint4 Right hand side uint4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(uint4, uint) Returns the result of a componentwise less or equal operation on a uint4 vector and a uint value. public static bool4 operator <=(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator <=(uint4, uint4) Returns the result of a componentwise less or equal operation on two uint4 vectors. public static bool4 operator <=(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise less or equal. rhs uint4 Right hand side uint4 to use to compute componentwise less or equal. 返回 bool4 bool4 result of the componentwise less or equal. operator %(uint, uint4) Returns the result of a componentwise modulus operation on a uint value and a uint4 vector. public static uint4 operator %(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint4 Right hand side uint4 to use to compute componentwise modulus. 返回 uint4 uint4 result of the componentwise modulus. operator %(uint4, uint) Returns the result of a componentwise modulus operation on a uint4 vector and a uint value. public static uint4 operator %(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint4 uint4 result of the componentwise modulus. operator %(uint4, uint4) Returns the result of a componentwise modulus operation on two uint4 vectors. public static uint4 operator %(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise modulus. rhs uint4 Right hand side uint4 to use to compute componentwise modulus. 返回 uint4 uint4 result of the componentwise modulus. operator *(uint, uint4) Returns the result of a componentwise multiplication operation on a uint value and a uint4 vector. public static uint4 operator *(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint4 Right hand side uint4 to use to compute componentwise multiplication. 返回 uint4 uint4 result of the componentwise multiplication. operator *(uint4, uint) Returns the result of a componentwise multiplication operation on a uint4 vector and a uint value. public static uint4 operator *(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint4 uint4 result of the componentwise multiplication. operator *(uint4, uint4) Returns the result of a componentwise multiplication operation on two uint4 vectors. public static uint4 operator *(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise multiplication. rhs uint4 Right hand side uint4 to use to compute componentwise multiplication. 返回 uint4 uint4 result of the componentwise multiplication. operator ~(uint4) Returns the result of a componentwise bitwise not operation on a uint4 vector. public static uint4 operator ~(uint4 val) 参数 val uint4 Value to use when computing the componentwise bitwise not. 返回 uint4 uint4 result of the componentwise bitwise not. operator >>(uint4, int) Returns the result of a componentwise right shift operation on a uint4 vector by a number of bits specified by a single int. public static uint4 operator >>(uint4 x, int n) 参数 x uint4 The vector to right shift. n int The number of bits to right shift. 返回 uint4 The result of the componentwise right shift. operator -(uint, uint4) Returns the result of a componentwise subtraction operation on a uint value and a uint4 vector. public static uint4 operator -(uint lhs, uint4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint4 Right hand side uint4 to use to compute componentwise subtraction. 返回 uint4 uint4 result of the componentwise subtraction. operator -(uint4, uint) Returns the result of a componentwise subtraction operation on a uint4 vector and a uint value. public static uint4 operator -(uint4 lhs, uint rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint4 uint4 result of the componentwise subtraction. operator -(uint4, uint4) Returns the result of a componentwise subtraction operation on two uint4 vectors. public static uint4 operator -(uint4 lhs, uint4 rhs) 参数 lhs uint4 Left hand side uint4 to use to compute componentwise subtraction. rhs uint4 Right hand side uint4 to use to compute componentwise subtraction. 返回 uint4 uint4 result of the componentwise subtraction. operator -(uint4) Returns the result of a componentwise unary minus operation on a uint4 vector. public static uint4 operator -(uint4 val) 参数 val uint4 Value to use when computing the componentwise unary minus. 返回 uint4 uint4 result of the componentwise unary minus. operator +(uint4) Returns the result of a componentwise unary plus operation on a uint4 vector. public static uint4 operator +(uint4 val) 参数 val uint4 Value to use when computing the componentwise unary plus. 返回 uint4 uint4 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint4x2.html": {
    "href": "reference/Unity.Mathematics.uint4x2.html",
    "title": "uint4x2 结构 | Fantasy.Net API Reference",
    "keywords": "uint4x2 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x2 matrix of uints. public struct uint4x2 : IEquatable<uint4x2>, IFormattable 实现 IEquatable<uint4x2> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint4x2(bool) Constructs a uint4x2 matrix from a single bool value by converting it to uint and assigning it to every component. public uint4x2(bool v) 参数 v bool bool to convert to uint4x2 uint4x2(double) Constructs a uint4x2 matrix from a single double value by converting it to uint and assigning it to every component. public uint4x2(double v) 参数 v double double to convert to uint4x2 uint4x2(int) Constructs a uint4x2 matrix from a single int value by converting it to uint and assigning it to every component. public uint4x2(int v) 参数 v int int to convert to uint4x2 uint4x2(float) Constructs a uint4x2 matrix from a single float value by converting it to uint and assigning it to every component. public uint4x2(float v) 参数 v float float to convert to uint4x2 uint4x2(uint) Constructs a uint4x2 matrix from a single uint value by assigning it to every component. public uint4x2(uint v) 参数 v uint uint to convert to uint4x2 uint4x2(uint, uint, uint, uint, uint, uint, uint, uint) Constructs a uint4x2 matrix from 8 uint values given in row-major order. public uint4x2(uint m00, uint m01, uint m10, uint m11, uint m20, uint m21, uint m30, uint m31) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m30 uint The matrix at row 3, column 0 will be set to this value. m31 uint The matrix at row 3, column 1 will be set to this value. uint4x2(bool4x2) Constructs a uint4x2 matrix from a bool4x2 matrix by componentwise conversion. public uint4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to uint4x2 uint4x2(double4x2) Constructs a uint4x2 matrix from a double4x2 matrix by componentwise conversion. public uint4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to uint4x2 uint4x2(float4x2) Constructs a uint4x2 matrix from a float4x2 matrix by componentwise conversion. public uint4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to uint4x2 uint4x2(int4x2) Constructs a uint4x2 matrix from a int4x2 matrix by componentwise conversion. public uint4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to uint4x2 uint4x2(uint4, uint4) Constructs a uint4x2 matrix from two uint4 vectors. public uint4x2(uint4 c0, uint4 c1) 参数 c0 uint4 The matrix column c0 will be set to this value. c1 uint4 The matrix column c1 will be set to this value. 字段 c0 Column 0 of the matrix. public uint4 c0 字段值 uint4 c1 Column 1 of the matrix. public uint4 c1 字段值 uint4 zero uint4x2 zero value. public static readonly uint4x2 zero 字段值 uint4x2 属性 this[int] Returns the uint4 element at a specified index. public ref uint4 this[int index] { get; } 参数 index int 属性值 uint4 方法 Equals(object) Returns true if the uint4x2 is equal to a given uint4x2, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint4x2) Returns true if the uint4x2 is equal to a given uint4x2, false otherwise. public bool Equals(uint4x2 rhs) 参数 rhs uint4x2 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint4x2. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint4x2. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint4x2 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint4x2) Returns the result of a componentwise addition operation on a uint value and a uint4x2 matrix. public static uint4x2 operator +(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise addition. 返回 uint4x2 uint4x2 result of the componentwise addition. operator +(uint4x2, uint) Returns the result of a componentwise addition operation on a uint4x2 matrix and a uint value. public static uint4x2 operator +(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint4x2 uint4x2 result of the componentwise addition. operator +(uint4x2, uint4x2) Returns the result of a componentwise addition operation on two uint4x2 matrices. public static uint4x2 operator +(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise addition. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise addition. 返回 uint4x2 uint4x2 result of the componentwise addition. operator &(uint, uint4x2) Returns the result of a componentwise bitwise and operation on a uint value and a uint4x2 matrix. public static uint4x2 operator &(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise bitwise and. 返回 uint4x2 uint4x2 result of the componentwise bitwise and. operator &(uint4x2, uint) Returns the result of a componentwise bitwise and operation on a uint4x2 matrix and a uint value. public static uint4x2 operator &(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint4x2 uint4x2 result of the componentwise bitwise and. operator &(uint4x2, uint4x2) Returns the result of a componentwise bitwise and operation on two uint4x2 matrices. public static uint4x2 operator &(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise bitwise and. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise bitwise and. 返回 uint4x2 uint4x2 result of the componentwise bitwise and. operator |(uint, uint4x2) Returns the result of a componentwise bitwise or operation on a uint value and a uint4x2 matrix. public static uint4x2 operator |(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise bitwise or. 返回 uint4x2 uint4x2 result of the componentwise bitwise or. operator |(uint4x2, uint) Returns the result of a componentwise bitwise or operation on a uint4x2 matrix and a uint value. public static uint4x2 operator |(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint4x2 uint4x2 result of the componentwise bitwise or. operator |(uint4x2, uint4x2) Returns the result of a componentwise bitwise or operation on two uint4x2 matrices. public static uint4x2 operator |(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise bitwise or. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise bitwise or. 返回 uint4x2 uint4x2 result of the componentwise bitwise or. operator --(uint4x2) Returns the result of a componentwise decrement operation on a uint4x2 matrix. public static uint4x2 operator --(uint4x2 val) 参数 val uint4x2 Value to use when computing the componentwise decrement. 返回 uint4x2 uint4x2 result of the componentwise decrement. operator /(uint, uint4x2) Returns the result of a componentwise division operation on a uint value and a uint4x2 matrix. public static uint4x2 operator /(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise division. 返回 uint4x2 uint4x2 result of the componentwise division. operator /(uint4x2, uint) Returns the result of a componentwise division operation on a uint4x2 matrix and a uint value. public static uint4x2 operator /(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint4x2 uint4x2 result of the componentwise division. operator /(uint4x2, uint4x2) Returns the result of a componentwise division operation on two uint4x2 matrices. public static uint4x2 operator /(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise division. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise division. 返回 uint4x2 uint4x2 result of the componentwise division. operator ==(uint, uint4x2) Returns the result of a componentwise equality operation on a uint value and a uint4x2 matrix. public static bool4x2 operator ==(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(uint4x2, uint) Returns the result of a componentwise equality operation on a uint4x2 matrix and a uint value. public static bool4x2 operator ==(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ==(uint4x2, uint4x2) Returns the result of a componentwise equality operation on two uint4x2 matrices. public static bool4x2 operator ==(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise equality. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise equality. 返回 bool4x2 bool4x2 result of the componentwise equality. operator ^(uint, uint4x2) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint4x2 matrix. public static uint4x2 operator ^(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise bitwise exclusive or. 返回 uint4x2 uint4x2 result of the componentwise bitwise exclusive or. operator ^(uint4x2, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint4x2 matrix and a uint value. public static uint4x2 operator ^(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint4x2 uint4x2 result of the componentwise bitwise exclusive or. operator ^(uint4x2, uint4x2) Returns the result of a componentwise bitwise exclusive or operation on two uint4x2 matrices. public static uint4x2 operator ^(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise bitwise exclusive or. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise bitwise exclusive or. 返回 uint4x2 uint4x2 result of the componentwise bitwise exclusive or. explicit operator uint4x2(bool) Explicitly converts a single bool value to a uint4x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x2(bool v) 参数 v bool bool to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(double) Explicitly converts a single double value to a uint4x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x2(double v) 参数 v double double to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(int) Explicitly converts a single int value to a uint4x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x2(int v) 参数 v int int to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(float) Explicitly converts a single float value to a uint4x2 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x2(float v) 参数 v float float to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(bool4x2) Explicitly converts a bool4x2 matrix to a uint4x2 matrix by componentwise conversion. public static explicit operator uint4x2(bool4x2 v) 参数 v bool4x2 bool4x2 to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(double4x2) Explicitly converts a double4x2 matrix to a uint4x2 matrix by componentwise conversion. public static explicit operator uint4x2(double4x2 v) 参数 v double4x2 double4x2 to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(float4x2) Explicitly converts a float4x2 matrix to a uint4x2 matrix by componentwise conversion. public static explicit operator uint4x2(float4x2 v) 参数 v float4x2 float4x2 to convert to uint4x2 返回 uint4x2 Converted value. explicit operator uint4x2(int4x2) Explicitly converts a int4x2 matrix to a uint4x2 matrix by componentwise conversion. public static explicit operator uint4x2(int4x2 v) 参数 v int4x2 int4x2 to convert to uint4x2 返回 uint4x2 Converted value. operator >(uint, uint4x2) Returns the result of a componentwise greater than operation on a uint value and a uint4x2 matrix. public static bool4x2 operator >(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(uint4x2, uint) Returns the result of a componentwise greater than operation on a uint4x2 matrix and a uint value. public static bool4x2 operator >(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >(uint4x2, uint4x2) Returns the result of a componentwise greater than operation on two uint4x2 matrices. public static bool4x2 operator >(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise greater than. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise greater than. 返回 bool4x2 bool4x2 result of the componentwise greater than. operator >=(uint, uint4x2) Returns the result of a componentwise greater or equal operation on a uint value and a uint4x2 matrix. public static bool4x2 operator >=(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(uint4x2, uint) Returns the result of a componentwise greater or equal operation on a uint4x2 matrix and a uint value. public static bool4x2 operator >=(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. operator >=(uint4x2, uint4x2) Returns the result of a componentwise greater or equal operation on two uint4x2 matrices. public static bool4x2 operator >=(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise greater or equal. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise greater or equal. 返回 bool4x2 bool4x2 result of the componentwise greater or equal. implicit operator uint4x2(uint) Implicitly converts a single uint value to a uint4x2 matrix by assigning it to every component. public static implicit operator uint4x2(uint v) 参数 v uint uint to convert to uint4x2 返回 uint4x2 Converted value. operator ++(uint4x2) Returns the result of a componentwise increment operation on a uint4x2 matrix. public static uint4x2 operator ++(uint4x2 val) 参数 val uint4x2 Value to use when computing the componentwise increment. 返回 uint4x2 uint4x2 result of the componentwise increment. operator !=(uint, uint4x2) Returns the result of a componentwise not equal operation on a uint value and a uint4x2 matrix. public static bool4x2 operator !=(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(uint4x2, uint) Returns the result of a componentwise not equal operation on a uint4x2 matrix and a uint value. public static bool4x2 operator !=(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator !=(uint4x2, uint4x2) Returns the result of a componentwise not equal operation on two uint4x2 matrices. public static bool4x2 operator !=(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise not equal. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise not equal. 返回 bool4x2 bool4x2 result of the componentwise not equal. operator <<(uint4x2, int) Returns the result of a componentwise left shift operation on a uint4x2 matrix by a number of bits specified by a single int. public static uint4x2 operator <<(uint4x2 x, int n) 参数 x uint4x2 The matrix to left shift. n int The number of bits to left shift. 返回 uint4x2 The result of the componentwise left shift. operator <(uint, uint4x2) Returns the result of a componentwise less than operation on a uint value and a uint4x2 matrix. public static bool4x2 operator <(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(uint4x2, uint) Returns the result of a componentwise less than operation on a uint4x2 matrix and a uint value. public static bool4x2 operator <(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <(uint4x2, uint4x2) Returns the result of a componentwise less than operation on two uint4x2 matrices. public static bool4x2 operator <(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise less than. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise less than. 返回 bool4x2 bool4x2 result of the componentwise less than. operator <=(uint, uint4x2) Returns the result of a componentwise less or equal operation on a uint value and a uint4x2 matrix. public static bool4x2 operator <=(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(uint4x2, uint) Returns the result of a componentwise less or equal operation on a uint4x2 matrix and a uint value. public static bool4x2 operator <=(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator <=(uint4x2, uint4x2) Returns the result of a componentwise less or equal operation on two uint4x2 matrices. public static bool4x2 operator <=(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise less or equal. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise less or equal. 返回 bool4x2 bool4x2 result of the componentwise less or equal. operator %(uint, uint4x2) Returns the result of a componentwise modulus operation on a uint value and a uint4x2 matrix. public static uint4x2 operator %(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise modulus. 返回 uint4x2 uint4x2 result of the componentwise modulus. operator %(uint4x2, uint) Returns the result of a componentwise modulus operation on a uint4x2 matrix and a uint value. public static uint4x2 operator %(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint4x2 uint4x2 result of the componentwise modulus. operator %(uint4x2, uint4x2) Returns the result of a componentwise modulus operation on two uint4x2 matrices. public static uint4x2 operator %(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise modulus. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise modulus. 返回 uint4x2 uint4x2 result of the componentwise modulus. operator *(uint, uint4x2) Returns the result of a componentwise multiplication operation on a uint value and a uint4x2 matrix. public static uint4x2 operator *(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise multiplication. 返回 uint4x2 uint4x2 result of the componentwise multiplication. operator *(uint4x2, uint) Returns the result of a componentwise multiplication operation on a uint4x2 matrix and a uint value. public static uint4x2 operator *(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint4x2 uint4x2 result of the componentwise multiplication. operator *(uint4x2, uint4x2) Returns the result of a componentwise multiplication operation on two uint4x2 matrices. public static uint4x2 operator *(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise multiplication. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise multiplication. 返回 uint4x2 uint4x2 result of the componentwise multiplication. operator ~(uint4x2) Returns the result of a componentwise bitwise not operation on a uint4x2 matrix. public static uint4x2 operator ~(uint4x2 val) 参数 val uint4x2 Value to use when computing the componentwise bitwise not. 返回 uint4x2 uint4x2 result of the componentwise bitwise not. operator >>(uint4x2, int) Returns the result of a componentwise right shift operation on a uint4x2 matrix by a number of bits specified by a single int. public static uint4x2 operator >>(uint4x2 x, int n) 参数 x uint4x2 The matrix to right shift. n int The number of bits to right shift. 返回 uint4x2 The result of the componentwise right shift. operator -(uint, uint4x2) Returns the result of a componentwise subtraction operation on a uint value and a uint4x2 matrix. public static uint4x2 operator -(uint lhs, uint4x2 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise subtraction. 返回 uint4x2 uint4x2 result of the componentwise subtraction. operator -(uint4x2, uint) Returns the result of a componentwise subtraction operation on a uint4x2 matrix and a uint value. public static uint4x2 operator -(uint4x2 lhs, uint rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint4x2 uint4x2 result of the componentwise subtraction. operator -(uint4x2, uint4x2) Returns the result of a componentwise subtraction operation on two uint4x2 matrices. public static uint4x2 operator -(uint4x2 lhs, uint4x2 rhs) 参数 lhs uint4x2 Left hand side uint4x2 to use to compute componentwise subtraction. rhs uint4x2 Right hand side uint4x2 to use to compute componentwise subtraction. 返回 uint4x2 uint4x2 result of the componentwise subtraction. operator -(uint4x2) Returns the result of a componentwise unary minus operation on a uint4x2 matrix. public static uint4x2 operator -(uint4x2 val) 参数 val uint4x2 Value to use when computing the componentwise unary minus. 返回 uint4x2 uint4x2 result of the componentwise unary minus. operator +(uint4x2) Returns the result of a componentwise unary plus operation on a uint4x2 matrix. public static uint4x2 operator +(uint4x2 val) 参数 val uint4x2 Value to use when computing the componentwise unary plus. 返回 uint4x2 uint4x2 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint4x3.html": {
    "href": "reference/Unity.Mathematics.uint4x3.html",
    "title": "uint4x3 结构 | Fantasy.Net API Reference",
    "keywords": "uint4x3 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x3 matrix of uints. public struct uint4x3 : IEquatable<uint4x3>, IFormattable 实现 IEquatable<uint4x3> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint4x3(bool) Constructs a uint4x3 matrix from a single bool value by converting it to uint and assigning it to every component. public uint4x3(bool v) 参数 v bool bool to convert to uint4x3 uint4x3(double) Constructs a uint4x3 matrix from a single double value by converting it to uint and assigning it to every component. public uint4x3(double v) 参数 v double double to convert to uint4x3 uint4x3(int) Constructs a uint4x3 matrix from a single int value by converting it to uint and assigning it to every component. public uint4x3(int v) 参数 v int int to convert to uint4x3 uint4x3(float) Constructs a uint4x3 matrix from a single float value by converting it to uint and assigning it to every component. public uint4x3(float v) 参数 v float float to convert to uint4x3 uint4x3(uint) Constructs a uint4x3 matrix from a single uint value by assigning it to every component. public uint4x3(uint v) 参数 v uint uint to convert to uint4x3 uint4x3(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) Constructs a uint4x3 matrix from 12 uint values given in row-major order. public uint4x3(uint m00, uint m01, uint m02, uint m10, uint m11, uint m12, uint m20, uint m21, uint m22, uint m30, uint m31, uint m32) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. m30 uint The matrix at row 3, column 0 will be set to this value. m31 uint The matrix at row 3, column 1 will be set to this value. m32 uint The matrix at row 3, column 2 will be set to this value. uint4x3(bool4x3) Constructs a uint4x3 matrix from a bool4x3 matrix by componentwise conversion. public uint4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to uint4x3 uint4x3(double4x3) Constructs a uint4x3 matrix from a double4x3 matrix by componentwise conversion. public uint4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to uint4x3 uint4x3(float4x3) Constructs a uint4x3 matrix from a float4x3 matrix by componentwise conversion. public uint4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to uint4x3 uint4x3(int4x3) Constructs a uint4x3 matrix from a int4x3 matrix by componentwise conversion. public uint4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to uint4x3 uint4x3(uint4, uint4, uint4) Constructs a uint4x3 matrix from three uint4 vectors. public uint4x3(uint4 c0, uint4 c1, uint4 c2) 参数 c0 uint4 The matrix column c0 will be set to this value. c1 uint4 The matrix column c1 will be set to this value. c2 uint4 The matrix column c2 will be set to this value. 字段 c0 Column 0 of the matrix. public uint4 c0 字段值 uint4 c1 Column 1 of the matrix. public uint4 c1 字段值 uint4 c2 Column 2 of the matrix. public uint4 c2 字段值 uint4 zero uint4x3 zero value. public static readonly uint4x3 zero 字段值 uint4x3 属性 this[int] Returns the uint4 element at a specified index. public ref uint4 this[int index] { get; } 参数 index int 属性值 uint4 方法 Equals(object) Returns true if the uint4x3 is equal to a given uint4x3, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint4x3) Returns true if the uint4x3 is equal to a given uint4x3, false otherwise. public bool Equals(uint4x3 rhs) 参数 rhs uint4x3 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint4x3. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint4x3. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint4x3 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint4x3) Returns the result of a componentwise addition operation on a uint value and a uint4x3 matrix. public static uint4x3 operator +(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise addition. 返回 uint4x3 uint4x3 result of the componentwise addition. operator +(uint4x3, uint) Returns the result of a componentwise addition operation on a uint4x3 matrix and a uint value. public static uint4x3 operator +(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint4x3 uint4x3 result of the componentwise addition. operator +(uint4x3, uint4x3) Returns the result of a componentwise addition operation on two uint4x3 matrices. public static uint4x3 operator +(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise addition. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise addition. 返回 uint4x3 uint4x3 result of the componentwise addition. operator &(uint, uint4x3) Returns the result of a componentwise bitwise and operation on a uint value and a uint4x3 matrix. public static uint4x3 operator &(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise bitwise and. 返回 uint4x3 uint4x3 result of the componentwise bitwise and. operator &(uint4x3, uint) Returns the result of a componentwise bitwise and operation on a uint4x3 matrix and a uint value. public static uint4x3 operator &(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint4x3 uint4x3 result of the componentwise bitwise and. operator &(uint4x3, uint4x3) Returns the result of a componentwise bitwise and operation on two uint4x3 matrices. public static uint4x3 operator &(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise bitwise and. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise bitwise and. 返回 uint4x3 uint4x3 result of the componentwise bitwise and. operator |(uint, uint4x3) Returns the result of a componentwise bitwise or operation on a uint value and a uint4x3 matrix. public static uint4x3 operator |(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise bitwise or. 返回 uint4x3 uint4x3 result of the componentwise bitwise or. operator |(uint4x3, uint) Returns the result of a componentwise bitwise or operation on a uint4x3 matrix and a uint value. public static uint4x3 operator |(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint4x3 uint4x3 result of the componentwise bitwise or. operator |(uint4x3, uint4x3) Returns the result of a componentwise bitwise or operation on two uint4x3 matrices. public static uint4x3 operator |(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise bitwise or. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise bitwise or. 返回 uint4x3 uint4x3 result of the componentwise bitwise or. operator --(uint4x3) Returns the result of a componentwise decrement operation on a uint4x3 matrix. public static uint4x3 operator --(uint4x3 val) 参数 val uint4x3 Value to use when computing the componentwise decrement. 返回 uint4x3 uint4x3 result of the componentwise decrement. operator /(uint, uint4x3) Returns the result of a componentwise division operation on a uint value and a uint4x3 matrix. public static uint4x3 operator /(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise division. 返回 uint4x3 uint4x3 result of the componentwise division. operator /(uint4x3, uint) Returns the result of a componentwise division operation on a uint4x3 matrix and a uint value. public static uint4x3 operator /(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint4x3 uint4x3 result of the componentwise division. operator /(uint4x3, uint4x3) Returns the result of a componentwise division operation on two uint4x3 matrices. public static uint4x3 operator /(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise division. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise division. 返回 uint4x3 uint4x3 result of the componentwise division. operator ==(uint, uint4x3) Returns the result of a componentwise equality operation on a uint value and a uint4x3 matrix. public static bool4x3 operator ==(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(uint4x3, uint) Returns the result of a componentwise equality operation on a uint4x3 matrix and a uint value. public static bool4x3 operator ==(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ==(uint4x3, uint4x3) Returns the result of a componentwise equality operation on two uint4x3 matrices. public static bool4x3 operator ==(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise equality. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise equality. 返回 bool4x3 bool4x3 result of the componentwise equality. operator ^(uint, uint4x3) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint4x3 matrix. public static uint4x3 operator ^(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise bitwise exclusive or. 返回 uint4x3 uint4x3 result of the componentwise bitwise exclusive or. operator ^(uint4x3, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint4x3 matrix and a uint value. public static uint4x3 operator ^(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint4x3 uint4x3 result of the componentwise bitwise exclusive or. operator ^(uint4x3, uint4x3) Returns the result of a componentwise bitwise exclusive or operation on two uint4x3 matrices. public static uint4x3 operator ^(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise bitwise exclusive or. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise bitwise exclusive or. 返回 uint4x3 uint4x3 result of the componentwise bitwise exclusive or. explicit operator uint4x3(bool) Explicitly converts a single bool value to a uint4x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x3(bool v) 参数 v bool bool to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(double) Explicitly converts a single double value to a uint4x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x3(double v) 参数 v double double to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(int) Explicitly converts a single int value to a uint4x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x3(int v) 参数 v int int to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(float) Explicitly converts a single float value to a uint4x3 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x3(float v) 参数 v float float to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(bool4x3) Explicitly converts a bool4x3 matrix to a uint4x3 matrix by componentwise conversion. public static explicit operator uint4x3(bool4x3 v) 参数 v bool4x3 bool4x3 to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(double4x3) Explicitly converts a double4x3 matrix to a uint4x3 matrix by componentwise conversion. public static explicit operator uint4x3(double4x3 v) 参数 v double4x3 double4x3 to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(float4x3) Explicitly converts a float4x3 matrix to a uint4x3 matrix by componentwise conversion. public static explicit operator uint4x3(float4x3 v) 参数 v float4x3 float4x3 to convert to uint4x3 返回 uint4x3 Converted value. explicit operator uint4x3(int4x3) Explicitly converts a int4x3 matrix to a uint4x3 matrix by componentwise conversion. public static explicit operator uint4x3(int4x3 v) 参数 v int4x3 int4x3 to convert to uint4x3 返回 uint4x3 Converted value. operator >(uint, uint4x3) Returns the result of a componentwise greater than operation on a uint value and a uint4x3 matrix. public static bool4x3 operator >(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(uint4x3, uint) Returns the result of a componentwise greater than operation on a uint4x3 matrix and a uint value. public static bool4x3 operator >(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >(uint4x3, uint4x3) Returns the result of a componentwise greater than operation on two uint4x3 matrices. public static bool4x3 operator >(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise greater than. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise greater than. 返回 bool4x3 bool4x3 result of the componentwise greater than. operator >=(uint, uint4x3) Returns the result of a componentwise greater or equal operation on a uint value and a uint4x3 matrix. public static bool4x3 operator >=(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(uint4x3, uint) Returns the result of a componentwise greater or equal operation on a uint4x3 matrix and a uint value. public static bool4x3 operator >=(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. operator >=(uint4x3, uint4x3) Returns the result of a componentwise greater or equal operation on two uint4x3 matrices. public static bool4x3 operator >=(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise greater or equal. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise greater or equal. 返回 bool4x3 bool4x3 result of the componentwise greater or equal. implicit operator uint4x3(uint) Implicitly converts a single uint value to a uint4x3 matrix by assigning it to every component. public static implicit operator uint4x3(uint v) 参数 v uint uint to convert to uint4x3 返回 uint4x3 Converted value. operator ++(uint4x3) Returns the result of a componentwise increment operation on a uint4x3 matrix. public static uint4x3 operator ++(uint4x3 val) 参数 val uint4x3 Value to use when computing the componentwise increment. 返回 uint4x3 uint4x3 result of the componentwise increment. operator !=(uint, uint4x3) Returns the result of a componentwise not equal operation on a uint value and a uint4x3 matrix. public static bool4x3 operator !=(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(uint4x3, uint) Returns the result of a componentwise not equal operation on a uint4x3 matrix and a uint value. public static bool4x3 operator !=(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator !=(uint4x3, uint4x3) Returns the result of a componentwise not equal operation on two uint4x3 matrices. public static bool4x3 operator !=(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise not equal. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise not equal. 返回 bool4x3 bool4x3 result of the componentwise not equal. operator <<(uint4x3, int) Returns the result of a componentwise left shift operation on a uint4x3 matrix by a number of bits specified by a single int. public static uint4x3 operator <<(uint4x3 x, int n) 参数 x uint4x3 The matrix to left shift. n int The number of bits to left shift. 返回 uint4x3 The result of the componentwise left shift. operator <(uint, uint4x3) Returns the result of a componentwise less than operation on a uint value and a uint4x3 matrix. public static bool4x3 operator <(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(uint4x3, uint) Returns the result of a componentwise less than operation on a uint4x3 matrix and a uint value. public static bool4x3 operator <(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <(uint4x3, uint4x3) Returns the result of a componentwise less than operation on two uint4x3 matrices. public static bool4x3 operator <(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise less than. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise less than. 返回 bool4x3 bool4x3 result of the componentwise less than. operator <=(uint, uint4x3) Returns the result of a componentwise less or equal operation on a uint value and a uint4x3 matrix. public static bool4x3 operator <=(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(uint4x3, uint) Returns the result of a componentwise less or equal operation on a uint4x3 matrix and a uint value. public static bool4x3 operator <=(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator <=(uint4x3, uint4x3) Returns the result of a componentwise less or equal operation on two uint4x3 matrices. public static bool4x3 operator <=(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise less or equal. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise less or equal. 返回 bool4x3 bool4x3 result of the componentwise less or equal. operator %(uint, uint4x3) Returns the result of a componentwise modulus operation on a uint value and a uint4x3 matrix. public static uint4x3 operator %(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise modulus. 返回 uint4x3 uint4x3 result of the componentwise modulus. operator %(uint4x3, uint) Returns the result of a componentwise modulus operation on a uint4x3 matrix and a uint value. public static uint4x3 operator %(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint4x3 uint4x3 result of the componentwise modulus. operator %(uint4x3, uint4x3) Returns the result of a componentwise modulus operation on two uint4x3 matrices. public static uint4x3 operator %(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise modulus. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise modulus. 返回 uint4x3 uint4x3 result of the componentwise modulus. operator *(uint, uint4x3) Returns the result of a componentwise multiplication operation on a uint value and a uint4x3 matrix. public static uint4x3 operator *(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise multiplication. 返回 uint4x3 uint4x3 result of the componentwise multiplication. operator *(uint4x3, uint) Returns the result of a componentwise multiplication operation on a uint4x3 matrix and a uint value. public static uint4x3 operator *(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint4x3 uint4x3 result of the componentwise multiplication. operator *(uint4x3, uint4x3) Returns the result of a componentwise multiplication operation on two uint4x3 matrices. public static uint4x3 operator *(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise multiplication. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise multiplication. 返回 uint4x3 uint4x3 result of the componentwise multiplication. operator ~(uint4x3) Returns the result of a componentwise bitwise not operation on a uint4x3 matrix. public static uint4x3 operator ~(uint4x3 val) 参数 val uint4x3 Value to use when computing the componentwise bitwise not. 返回 uint4x3 uint4x3 result of the componentwise bitwise not. operator >>(uint4x3, int) Returns the result of a componentwise right shift operation on a uint4x3 matrix by a number of bits specified by a single int. public static uint4x3 operator >>(uint4x3 x, int n) 参数 x uint4x3 The matrix to right shift. n int The number of bits to right shift. 返回 uint4x3 The result of the componentwise right shift. operator -(uint, uint4x3) Returns the result of a componentwise subtraction operation on a uint value and a uint4x3 matrix. public static uint4x3 operator -(uint lhs, uint4x3 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise subtraction. 返回 uint4x3 uint4x3 result of the componentwise subtraction. operator -(uint4x3, uint) Returns the result of a componentwise subtraction operation on a uint4x3 matrix and a uint value. public static uint4x3 operator -(uint4x3 lhs, uint rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint4x3 uint4x3 result of the componentwise subtraction. operator -(uint4x3, uint4x3) Returns the result of a componentwise subtraction operation on two uint4x3 matrices. public static uint4x3 operator -(uint4x3 lhs, uint4x3 rhs) 参数 lhs uint4x3 Left hand side uint4x3 to use to compute componentwise subtraction. rhs uint4x3 Right hand side uint4x3 to use to compute componentwise subtraction. 返回 uint4x3 uint4x3 result of the componentwise subtraction. operator -(uint4x3) Returns the result of a componentwise unary minus operation on a uint4x3 matrix. public static uint4x3 operator -(uint4x3 val) 参数 val uint4x3 Value to use when computing the componentwise unary minus. 返回 uint4x3 uint4x3 result of the componentwise unary minus. operator +(uint4x3) Returns the result of a componentwise unary plus operation on a uint4x3 matrix. public static uint4x3 operator +(uint4x3 val) 参数 val uint4x3 Value to use when computing the componentwise unary plus. 返回 uint4x3 uint4x3 result of the componentwise unary plus."
  },
  "reference/Unity.Mathematics.uint4x4.html": {
    "href": "reference/Unity.Mathematics.uint4x4.html",
    "title": "uint4x4 结构 | Fantasy.Net API Reference",
    "keywords": "uint4x4 结构 命名空间 Unity.Mathematics 程序集 Fantasy.Net.dll A 4x4 matrix of uints. public struct uint4x4 : IEquatable<uint4x4>, IFormattable 实现 IEquatable<uint4x4> IFormattable 继承成员 object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 uint4x4(bool) Constructs a uint4x4 matrix from a single bool value by converting it to uint and assigning it to every component. public uint4x4(bool v) 参数 v bool bool to convert to uint4x4 uint4x4(double) Constructs a uint4x4 matrix from a single double value by converting it to uint and assigning it to every component. public uint4x4(double v) 参数 v double double to convert to uint4x4 uint4x4(int) Constructs a uint4x4 matrix from a single int value by converting it to uint and assigning it to every component. public uint4x4(int v) 参数 v int int to convert to uint4x4 uint4x4(float) Constructs a uint4x4 matrix from a single float value by converting it to uint and assigning it to every component. public uint4x4(float v) 参数 v float float to convert to uint4x4 uint4x4(uint) Constructs a uint4x4 matrix from a single uint value by assigning it to every component. public uint4x4(uint v) 参数 v uint uint to convert to uint4x4 uint4x4(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) Constructs a uint4x4 matrix from 16 uint values given in row-major order. public uint4x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13, uint m20, uint m21, uint m22, uint m23, uint m30, uint m31, uint m32, uint m33) 参数 m00 uint The matrix at row 0, column 0 will be set to this value. m01 uint The matrix at row 0, column 1 will be set to this value. m02 uint The matrix at row 0, column 2 will be set to this value. m03 uint The matrix at row 0, column 3 will be set to this value. m10 uint The matrix at row 1, column 0 will be set to this value. m11 uint The matrix at row 1, column 1 will be set to this value. m12 uint The matrix at row 1, column 2 will be set to this value. m13 uint The matrix at row 1, column 3 will be set to this value. m20 uint The matrix at row 2, column 0 will be set to this value. m21 uint The matrix at row 2, column 1 will be set to this value. m22 uint The matrix at row 2, column 2 will be set to this value. m23 uint The matrix at row 2, column 3 will be set to this value. m30 uint The matrix at row 3, column 0 will be set to this value. m31 uint The matrix at row 3, column 1 will be set to this value. m32 uint The matrix at row 3, column 2 will be set to this value. m33 uint The matrix at row 3, column 3 will be set to this value. uint4x4(bool4x4) Constructs a uint4x4 matrix from a bool4x4 matrix by componentwise conversion. public uint4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to uint4x4 uint4x4(double4x4) Constructs a uint4x4 matrix from a double4x4 matrix by componentwise conversion. public uint4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to uint4x4 uint4x4(float4x4) Constructs a uint4x4 matrix from a float4x4 matrix by componentwise conversion. public uint4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to uint4x4 uint4x4(int4x4) Constructs a uint4x4 matrix from a int4x4 matrix by componentwise conversion. public uint4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to uint4x4 uint4x4(uint4, uint4, uint4, uint4) Constructs a uint4x4 matrix from four uint4 vectors. public uint4x4(uint4 c0, uint4 c1, uint4 c2, uint4 c3) 参数 c0 uint4 The matrix column c0 will be set to this value. c1 uint4 The matrix column c1 will be set to this value. c2 uint4 The matrix column c2 will be set to this value. c3 uint4 The matrix column c3 will be set to this value. 字段 c0 Column 0 of the matrix. public uint4 c0 字段值 uint4 c1 Column 1 of the matrix. public uint4 c1 字段值 uint4 c2 Column 2 of the matrix. public uint4 c2 字段值 uint4 c3 Column 3 of the matrix. public uint4 c3 字段值 uint4 identity uint4x4 identity transform. public static readonly uint4x4 identity 字段值 uint4x4 zero uint4x4 zero value. public static readonly uint4x4 zero 字段值 uint4x4 属性 this[int] Returns the uint4 element at a specified index. public ref uint4 this[int index] { get; } 参数 index int 属性值 uint4 方法 Equals(object) Returns true if the uint4x4 is equal to a given uint4x4, false otherwise. public override bool Equals(object o) 参数 o object Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. Equals(uint4x4) Returns true if the uint4x4 is equal to a given uint4x4, false otherwise. public bool Equals(uint4x4 rhs) 参数 rhs uint4x4 Right hand side argument to compare equality with. 返回 bool The result of the equality comparison. GetHashCode() Returns a hash code for the uint4x4. public override int GetHashCode() 返回 int The computed hash code. ToString() Returns a string representation of the uint4x4. public override string ToString() 返回 string String representation of the value. ToString(string, IFormatProvider) Returns a string representation of the uint4x4 using a specified format and culture-specific format information. public string ToString(string format, IFormatProvider formatProvider) 参数 format string Format string to use during string formatting. formatProvider IFormatProvider Format provider to use during string formatting. 返回 string String representation of the value. 运算符 operator +(uint, uint4x4) Returns the result of a componentwise addition operation on a uint value and a uint4x4 matrix. public static uint4x4 operator +(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise addition. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise addition. 返回 uint4x4 uint4x4 result of the componentwise addition. operator +(uint4x4, uint) Returns the result of a componentwise addition operation on a uint4x4 matrix and a uint value. public static uint4x4 operator +(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise addition. rhs uint Right hand side uint to use to compute componentwise addition. 返回 uint4x4 uint4x4 result of the componentwise addition. operator +(uint4x4, uint4x4) Returns the result of a componentwise addition operation on two uint4x4 matrices. public static uint4x4 operator +(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise addition. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise addition. 返回 uint4x4 uint4x4 result of the componentwise addition. operator &(uint, uint4x4) Returns the result of a componentwise bitwise and operation on a uint value and a uint4x4 matrix. public static uint4x4 operator &(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise and. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise bitwise and. 返回 uint4x4 uint4x4 result of the componentwise bitwise and. operator &(uint4x4, uint) Returns the result of a componentwise bitwise and operation on a uint4x4 matrix and a uint value. public static uint4x4 operator &(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise bitwise and. rhs uint Right hand side uint to use to compute componentwise bitwise and. 返回 uint4x4 uint4x4 result of the componentwise bitwise and. operator &(uint4x4, uint4x4) Returns the result of a componentwise bitwise and operation on two uint4x4 matrices. public static uint4x4 operator &(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise bitwise and. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise bitwise and. 返回 uint4x4 uint4x4 result of the componentwise bitwise and. operator |(uint, uint4x4) Returns the result of a componentwise bitwise or operation on a uint value and a uint4x4 matrix. public static uint4x4 operator |(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise or. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise bitwise or. 返回 uint4x4 uint4x4 result of the componentwise bitwise or. operator |(uint4x4, uint) Returns the result of a componentwise bitwise or operation on a uint4x4 matrix and a uint value. public static uint4x4 operator |(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise bitwise or. rhs uint Right hand side uint to use to compute componentwise bitwise or. 返回 uint4x4 uint4x4 result of the componentwise bitwise or. operator |(uint4x4, uint4x4) Returns the result of a componentwise bitwise or operation on two uint4x4 matrices. public static uint4x4 operator |(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise bitwise or. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise bitwise or. 返回 uint4x4 uint4x4 result of the componentwise bitwise or. operator --(uint4x4) Returns the result of a componentwise decrement operation on a uint4x4 matrix. public static uint4x4 operator --(uint4x4 val) 参数 val uint4x4 Value to use when computing the componentwise decrement. 返回 uint4x4 uint4x4 result of the componentwise decrement. operator /(uint, uint4x4) Returns the result of a componentwise division operation on a uint value and a uint4x4 matrix. public static uint4x4 operator /(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise division. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise division. 返回 uint4x4 uint4x4 result of the componentwise division. operator /(uint4x4, uint) Returns the result of a componentwise division operation on a uint4x4 matrix and a uint value. public static uint4x4 operator /(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise division. rhs uint Right hand side uint to use to compute componentwise division. 返回 uint4x4 uint4x4 result of the componentwise division. operator /(uint4x4, uint4x4) Returns the result of a componentwise division operation on two uint4x4 matrices. public static uint4x4 operator /(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise division. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise division. 返回 uint4x4 uint4x4 result of the componentwise division. operator ==(uint, uint4x4) Returns the result of a componentwise equality operation on a uint value and a uint4x4 matrix. public static bool4x4 operator ==(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise equality. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(uint4x4, uint) Returns the result of a componentwise equality operation on a uint4x4 matrix and a uint value. public static bool4x4 operator ==(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise equality. rhs uint Right hand side uint to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ==(uint4x4, uint4x4) Returns the result of a componentwise equality operation on two uint4x4 matrices. public static bool4x4 operator ==(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise equality. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise equality. 返回 bool4x4 bool4x4 result of the componentwise equality. operator ^(uint, uint4x4) Returns the result of a componentwise bitwise exclusive or operation on a uint value and a uint4x4 matrix. public static uint4x4 operator ^(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise bitwise exclusive or. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise bitwise exclusive or. 返回 uint4x4 uint4x4 result of the componentwise bitwise exclusive or. operator ^(uint4x4, uint) Returns the result of a componentwise bitwise exclusive or operation on a uint4x4 matrix and a uint value. public static uint4x4 operator ^(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise bitwise exclusive or. rhs uint Right hand side uint to use to compute componentwise bitwise exclusive or. 返回 uint4x4 uint4x4 result of the componentwise bitwise exclusive or. operator ^(uint4x4, uint4x4) Returns the result of a componentwise bitwise exclusive or operation on two uint4x4 matrices. public static uint4x4 operator ^(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise bitwise exclusive or. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise bitwise exclusive or. 返回 uint4x4 uint4x4 result of the componentwise bitwise exclusive or. explicit operator uint4x4(bool) Explicitly converts a single bool value to a uint4x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x4(bool v) 参数 v bool bool to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(double) Explicitly converts a single double value to a uint4x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x4(double v) 参数 v double double to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(int) Explicitly converts a single int value to a uint4x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x4(int v) 参数 v int int to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(float) Explicitly converts a single float value to a uint4x4 matrix by converting it to uint and assigning it to every component. public static explicit operator uint4x4(float v) 参数 v float float to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(bool4x4) Explicitly converts a bool4x4 matrix to a uint4x4 matrix by componentwise conversion. public static explicit operator uint4x4(bool4x4 v) 参数 v bool4x4 bool4x4 to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(double4x4) Explicitly converts a double4x4 matrix to a uint4x4 matrix by componentwise conversion. public static explicit operator uint4x4(double4x4 v) 参数 v double4x4 double4x4 to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(float4x4) Explicitly converts a float4x4 matrix to a uint4x4 matrix by componentwise conversion. public static explicit operator uint4x4(float4x4 v) 参数 v float4x4 float4x4 to convert to uint4x4 返回 uint4x4 Converted value. explicit operator uint4x4(int4x4) Explicitly converts a int4x4 matrix to a uint4x4 matrix by componentwise conversion. public static explicit operator uint4x4(int4x4 v) 参数 v int4x4 int4x4 to convert to uint4x4 返回 uint4x4 Converted value. operator >(uint, uint4x4) Returns the result of a componentwise greater than operation on a uint value and a uint4x4 matrix. public static bool4x4 operator >(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater than. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(uint4x4, uint) Returns the result of a componentwise greater than operation on a uint4x4 matrix and a uint value. public static bool4x4 operator >(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise greater than. rhs uint Right hand side uint to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >(uint4x4, uint4x4) Returns the result of a componentwise greater than operation on two uint4x4 matrices. public static bool4x4 operator >(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise greater than. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise greater than. 返回 bool4x4 bool4x4 result of the componentwise greater than. operator >=(uint, uint4x4) Returns the result of a componentwise greater or equal operation on a uint value and a uint4x4 matrix. public static bool4x4 operator >=(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise greater or equal. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(uint4x4, uint) Returns the result of a componentwise greater or equal operation on a uint4x4 matrix and a uint value. public static bool4x4 operator >=(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise greater or equal. rhs uint Right hand side uint to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. operator >=(uint4x4, uint4x4) Returns the result of a componentwise greater or equal operation on two uint4x4 matrices. public static bool4x4 operator >=(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise greater or equal. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise greater or equal. 返回 bool4x4 bool4x4 result of the componentwise greater or equal. implicit operator uint4x4(uint) Implicitly converts a single uint value to a uint4x4 matrix by assigning it to every component. public static implicit operator uint4x4(uint v) 参数 v uint uint to convert to uint4x4 返回 uint4x4 Converted value. operator ++(uint4x4) Returns the result of a componentwise increment operation on a uint4x4 matrix. public static uint4x4 operator ++(uint4x4 val) 参数 val uint4x4 Value to use when computing the componentwise increment. 返回 uint4x4 uint4x4 result of the componentwise increment. operator !=(uint, uint4x4) Returns the result of a componentwise not equal operation on a uint value and a uint4x4 matrix. public static bool4x4 operator !=(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise not equal. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(uint4x4, uint) Returns the result of a componentwise not equal operation on a uint4x4 matrix and a uint value. public static bool4x4 operator !=(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise not equal. rhs uint Right hand side uint to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator !=(uint4x4, uint4x4) Returns the result of a componentwise not equal operation on two uint4x4 matrices. public static bool4x4 operator !=(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise not equal. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise not equal. 返回 bool4x4 bool4x4 result of the componentwise not equal. operator <<(uint4x4, int) Returns the result of a componentwise left shift operation on a uint4x4 matrix by a number of bits specified by a single int. public static uint4x4 operator <<(uint4x4 x, int n) 参数 x uint4x4 The matrix to left shift. n int The number of bits to left shift. 返回 uint4x4 The result of the componentwise left shift. operator <(uint, uint4x4) Returns the result of a componentwise less than operation on a uint value and a uint4x4 matrix. public static bool4x4 operator <(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less than. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(uint4x4, uint) Returns the result of a componentwise less than operation on a uint4x4 matrix and a uint value. public static bool4x4 operator <(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise less than. rhs uint Right hand side uint to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <(uint4x4, uint4x4) Returns the result of a componentwise less than operation on two uint4x4 matrices. public static bool4x4 operator <(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise less than. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise less than. 返回 bool4x4 bool4x4 result of the componentwise less than. operator <=(uint, uint4x4) Returns the result of a componentwise less or equal operation on a uint value and a uint4x4 matrix. public static bool4x4 operator <=(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise less or equal. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(uint4x4, uint) Returns the result of a componentwise less or equal operation on a uint4x4 matrix and a uint value. public static bool4x4 operator <=(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise less or equal. rhs uint Right hand side uint to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator <=(uint4x4, uint4x4) Returns the result of a componentwise less or equal operation on two uint4x4 matrices. public static bool4x4 operator <=(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise less or equal. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise less or equal. 返回 bool4x4 bool4x4 result of the componentwise less or equal. operator %(uint, uint4x4) Returns the result of a componentwise modulus operation on a uint value and a uint4x4 matrix. public static uint4x4 operator %(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise modulus. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise modulus. 返回 uint4x4 uint4x4 result of the componentwise modulus. operator %(uint4x4, uint) Returns the result of a componentwise modulus operation on a uint4x4 matrix and a uint value. public static uint4x4 operator %(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise modulus. rhs uint Right hand side uint to use to compute componentwise modulus. 返回 uint4x4 uint4x4 result of the componentwise modulus. operator %(uint4x4, uint4x4) Returns the result of a componentwise modulus operation on two uint4x4 matrices. public static uint4x4 operator %(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise modulus. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise modulus. 返回 uint4x4 uint4x4 result of the componentwise modulus. operator *(uint, uint4x4) Returns the result of a componentwise multiplication operation on a uint value and a uint4x4 matrix. public static uint4x4 operator *(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise multiplication. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise multiplication. 返回 uint4x4 uint4x4 result of the componentwise multiplication. operator *(uint4x4, uint) Returns the result of a componentwise multiplication operation on a uint4x4 matrix and a uint value. public static uint4x4 operator *(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise multiplication. rhs uint Right hand side uint to use to compute componentwise multiplication. 返回 uint4x4 uint4x4 result of the componentwise multiplication. operator *(uint4x4, uint4x4) Returns the result of a componentwise multiplication operation on two uint4x4 matrices. public static uint4x4 operator *(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise multiplication. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise multiplication. 返回 uint4x4 uint4x4 result of the componentwise multiplication. operator ~(uint4x4) Returns the result of a componentwise bitwise not operation on a uint4x4 matrix. public static uint4x4 operator ~(uint4x4 val) 参数 val uint4x4 Value to use when computing the componentwise bitwise not. 返回 uint4x4 uint4x4 result of the componentwise bitwise not. operator >>(uint4x4, int) Returns the result of a componentwise right shift operation on a uint4x4 matrix by a number of bits specified by a single int. public static uint4x4 operator >>(uint4x4 x, int n) 参数 x uint4x4 The matrix to right shift. n int The number of bits to right shift. 返回 uint4x4 The result of the componentwise right shift. operator -(uint, uint4x4) Returns the result of a componentwise subtraction operation on a uint value and a uint4x4 matrix. public static uint4x4 operator -(uint lhs, uint4x4 rhs) 参数 lhs uint Left hand side uint to use to compute componentwise subtraction. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise subtraction. 返回 uint4x4 uint4x4 result of the componentwise subtraction. operator -(uint4x4, uint) Returns the result of a componentwise subtraction operation on a uint4x4 matrix and a uint value. public static uint4x4 operator -(uint4x4 lhs, uint rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise subtraction. rhs uint Right hand side uint to use to compute componentwise subtraction. 返回 uint4x4 uint4x4 result of the componentwise subtraction. operator -(uint4x4, uint4x4) Returns the result of a componentwise subtraction operation on two uint4x4 matrices. public static uint4x4 operator -(uint4x4 lhs, uint4x4 rhs) 参数 lhs uint4x4 Left hand side uint4x4 to use to compute componentwise subtraction. rhs uint4x4 Right hand side uint4x4 to use to compute componentwise subtraction. 返回 uint4x4 uint4x4 result of the componentwise subtraction. operator -(uint4x4) Returns the result of a componentwise unary minus operation on a uint4x4 matrix. public static uint4x4 operator -(uint4x4 val) 参数 val uint4x4 Value to use when computing the componentwise unary minus. 返回 uint4x4 uint4x4 result of the componentwise unary minus. operator +(uint4x4) Returns the result of a componentwise unary plus operation on a uint4x4 matrix. public static uint4x4 operator +(uint4x4 val) 参数 val uint4x4 Value to use when computing the componentwise unary plus. 返回 uint4x4 uint4x4 result of the componentwise unary plus."
  },
  "reference/kcp2k.Kcp.html": {
    "href": "reference/kcp2k.Kcp.html",
    "title": "Kcp 类 | Fantasy.Net API Reference",
    "keywords": "Kcp 类 命名空间 kcp2k 程序集 Fantasy.Net.dll public class Kcp 继承 object Kcp 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Kcp(uint, Action<byte[], int>) public Kcp(uint conv, Action<byte[], int> output) 参数 conv uint output Action<byte[], int> 字段 ACK_FAST public const int ACK_FAST = 3 字段值 int ASK_SEND public const int ASK_SEND = 1 字段值 int ASK_TELL public const int ASK_TELL = 2 字段值 int CMD_ACK public const int CMD_ACK = 82 字段值 int CMD_PUSH public const int CMD_PUSH = 81 字段值 int CMD_WASK public const int CMD_WASK = 83 字段值 int CMD_WINS public const int CMD_WINS = 84 字段值 int DEADLINK public const int DEADLINK = 20 字段值 int FASTACK_LIMIT public const int FASTACK_LIMIT = 5 字段值 int FRG_MAX public const int FRG_MAX = 255 字段值 int INTERVAL public const int INTERVAL = 100 字段值 int MTU_DEF public const int MTU_DEF = 1200 字段值 int OVERHEAD public const int OVERHEAD = 24 字段值 int PROBE_INIT public const int PROBE_INIT = 7000 字段值 int PROBE_LIMIT public const int PROBE_LIMIT = 120000 字段值 int RTO_DEF public const int RTO_DEF = 200 字段值 int RTO_MAX public const int RTO_MAX = 60000 字段值 int RTO_MIN public const int RTO_MIN = 100 字段值 int RTO_NDL public const int RTO_NDL = 30 字段值 int THRESH_INIT public const int THRESH_INIT = 2 字段值 int THRESH_MIN public const int THRESH_MIN = 2 字段值 int WND_RCV public const int WND_RCV = 128 字段值 int WND_SND public const int WND_SND = 32 字段值 int 属性 WaitSnd public int WaitSnd { get; } 属性值 int 方法 Check(uint) public uint Check(uint current_) 参数 current_ uint 返回 uint Flush() public void Flush() Input(byte[], int, int) public int Input(byte[] data, int offset, int size) 参数 data byte[] offset int size int 返回 int PeekSize() public int PeekSize() 返回 int Receive(byte[], int) public int Receive(byte[] buffer, int len) 参数 buffer byte[] len int 返回 int Receive(Memory<byte>, int) public int Receive(Memory<byte> memory, int len) 参数 memory Memory<byte> len int 返回 int Send(byte[], int, int) public int Send(byte[] buffer, int offset, int len) 参数 buffer byte[] offset int len int 返回 int Send(Memory<byte>) public int Send(Memory<byte> memory) 参数 memory Memory<byte> 返回 int SetInterval(uint) public void SetInterval(uint interval) 参数 interval uint SetMtu(uint) public void SetMtu(uint mtu) 参数 mtu uint SetNoDelay(uint, uint, int, bool) public void SetNoDelay(uint nodelay, uint interval = 100, int resend = 0, bool nocwnd = false) 参数 nodelay uint interval uint resend int nocwnd bool SetWindowSize(uint, uint) public void SetWindowSize(uint sendWindow, uint receiveWindow) 参数 sendWindow uint receiveWindow uint Update(uint) public void Update(uint currentTimeMilliSeconds) 参数 currentTimeMilliSeconds uint"
  },
  "reference/kcp2k.Pool-1.html": {
    "href": "reference/kcp2k.Pool-1.html",
    "title": "Pool<T> 类 | Fantasy.Net API Reference",
    "keywords": "Pool<T> 类 命名空间 kcp2k 程序集 Fantasy.Net.dll public class Pool<T> 类型参数 T 继承 object Pool<T> 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 扩展方法 JsonHelper.ToJson<T>(T) 构造函数 Pool(Func<T>, Action<T>, int) public Pool(Func<T> objectGenerator, Action<T> objectResetter, int initialCapacity) 参数 objectGenerator Func<T> objectResetter Action<T> initialCapacity int 属性 Count public int Count { get; } 属性值 int 方法 Clear() public void Clear() Return(T) public void Return(T item) 参数 item T Take() public T Take() 返回 T"
  },
  "reference/kcp2k.Utils.html": {
    "href": "reference/kcp2k.Utils.html",
    "title": "Utils 类 | Fantasy.Net API Reference",
    "keywords": "Utils 类 命名空间 kcp2k 程序集 Fantasy.Net.dll public static class Utils 继承 object Utils 继承成员 object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() 方法 Clamp(int, int, int) public static int Clamp(int value, int min, int max) 参数 value int min int max int 返回 int Decode16U(byte[], int, out ushort) public static int Decode16U(byte[] p, int offset, out ushort value) 参数 p byte[] offset int value ushort 返回 int Decode32U(byte[], int, out uint) public static int Decode32U(byte[] p, int offset, out uint value) 参数 p byte[] offset int value uint 返回 int Decode8u(byte[], int, out byte) public static int Decode8u(byte[] p, int offset, out byte value) 参数 p byte[] offset int value byte 返回 int Encode16U(byte[], int, ushort) public static int Encode16U(byte[] p, int offset, ushort value) 参数 p byte[] offset int value ushort 返回 int Encode32U(byte[], int, uint) public static int Encode32U(byte[] p, int offset, uint value) 参数 p byte[] offset int value uint 返回 int Encode8u(byte[], int, byte) public static int Encode8u(byte[] p, int offset, byte value) 参数 p byte[] offset int value byte 返回 int TimeDiff(uint, uint) public static int TimeDiff(uint later, uint earlier) 参数 later uint earlier uint 返回 int"
  },
  "reference/kcp2k.html": {
    "href": "reference/kcp2k.html",
    "title": "kcp2k 命名空间 | Fantasy.Net API Reference",
    "keywords": "kcp2k 命名空间 类 Kcp Pool<T> Utils"
  }
}